{"version":3,"file":"background.js","mappings":"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A,gBACA,gBACA,iBACA,aACA,eAGc,GAAAC,wBAAoC,CAClD,kBACA,UACA,eACA,UAGc,GAAAC,sBAAkC,CAChD,QACA,WACA,SACA,OACA,SACA,QACA,QACA,UAIG,MAAMC,IACK,GAAAC,eAA2B,CACzC,mBACA,cACA,WACA,SACA,YACA,cACA,aACA,YACA,gBAGc,GAAAC,uBAAmC,IAC9CF,GAA4BC,eAC/B,eAGc,GAAAE,qBAAiC,CAC/C,UACA,YACA,kBACA,aACA,OACA,OAGc,GAAAC,0BAAsC,CACpD,UACA,YACA,kBACA,aACA,UAGc,GAAAC,qBAAiC,CAC/C,YACA,SACA,cACA,WACA,SACA,KACA,QACA,UACA,cACA,eACA,QACA,eACA,YACA,UAGc,GAAAC,0BAAsC,CACpD,YACA,SACA,cACA,WACA,QACA,UACA,eACA,YACA,UAGc,GAAAC,qBAAiC,CAC/C,SACA,WACA,gBACA,kBACA,QACA,UACA,cACA,cACA,WACA,aACA,SACA,QACA,UACA,QACA,UACA,kBACA,0BACA,mBAGc,GAAAC,0BAAsC,CACpD,QACA,UACA,QACA,UACA,kBACA,2BAGc,GAAAC,sBAAkC,CAChD,YACA,eACA,WACA,aACA,QACA,UACA,SACA,cACA,YACA,wBACA,mBACA,QACA,OACA,UACA,SACA,cACA,YACA,SACA,QACA,eACA,YACA,eACA,YACA,oBACA,iBACA,oBACA,iBACA,gBACA,kBACA,aACA,eACA,0BACA,wBACA,qBACA,UACA,cACA,cACA,eACA,UAGc,GAAAC,qBAAiC,CAC/C,WACA,cACA,UACA,YACA,QACA,UACA,SACA,cACA,YACA,uBACA,kBACA,QACA,OACA,UACA,SACA,cACA,YACA,SACA,QACA,UACA,YACA,gBACA,cACA,cACA,YACA,cACA,YACA,mBACA,iBACA,mBACA,iBACA,cACA,gBACA,iBACA,mBACA,yBACA,uBACA,cACA,qBACA,uBACA,gBACA,gBACA,UAGc,GAAAC,cAA0B,CACxC,MACA,MACA,OACA,SACA,SACA,WACA,WACA,MACA,MACA,OACA,MACA,OACA,UACA,YACA,gBACA,gBACA,SACA,aACA,oBACA,MACA,OAGc,GAAAC,oBAAgC,CAC9C,UACA,YACA,aACA,WACA,WAKc,GAAAC,UAAY,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,MAC3C,GAAAC,cAAgB,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,MAC/C,GAAAC,aAAe,CAAC,OAAQ,OAAQ,OAAQ,KAAM,OAAQ,QAGjE,MAAMC,IACK,GAAAC,mBAA+B,CAC7C,mBACA,cACA,WACA,SACA,YACA,cACA,aACA,YACA,gBAGc,GAAAC,mBAA+B,CAAC,OAAQ,YAAa,aAErD,GAAAC,wBAAoC,CAAC,YAAa,aAElD,GAAAC,gBAA4B,CAAC,mBAAoB,SAAU,SAE3D,GAAAC,oBAAgC,CAE9C,SACA,aACA,aACA,UAEA,WAGc,GAAAC,qBAAiC,CAC/C,SACA,cACA,kBACA,iBACA,WACA,YAGc,GAAAC,mBAA+B,CAE7C,SACA,YACA,SACA,UACA,cACA,WACA,SAEA,WACA,gBAGc,GAAAC,gBAA4B,CAAC,SAAU,iBAEvC,GAAAC,kBAA8B,CAC5C,UACA,iBACA,OACA,SACA,eACA,eACA,YACA,aAGc,GAAAC,uBAAmC,CACjD,eACA,eACA,YACA,aAGc,GAAAC,mBAA+B,CAC7C,YACA,iBACA,SACA,YAGc,GAAAC,mBAA+B,CAC7C,YACA,iBACA,SACA,YAGc,GAAAC,mBAA+B,CAC7C,YACA,iBACA,SACA,YAGc,GAAAC,qBAAiC,CAC/C,SACA,MACA,OACA,WACA,cACA,YACA,cACA,iBACA,eACA,sBACA,oBAGc,GAAAC,eAA2B,CACzC,OACA,OACA,kBACA,eACA,gBAGc,GAAAC,gBAA4B,CAC1C,QACA,WACA,WACA,kBACA,gBACA,oBAGc,GAAAC,kBAA8B,CAC5C,UACA,eACA,eACA,kBACA,uBACA,wBAGc,GAAAC,gBAA4B,CAC1C,QACA,SACA,eACA,MACA,YACA,gBAGc,GAAAC,mBAA+B,CAAC,YAAa,UAAW,eAExD,GAAAC,kBAA8B,CAC5C,UACA,eACA,eACA,qBAGc,GAAAC,aAAyC,CACvDC,YAAa,KACb,gBAAiB,KACjBC,QAAS,KACTC,QAAS,KACT,iBAAkB,KAClBC,QAAS,KACTC,OAAQ,KACRC,SAAU,KACVC,WAAY,KACZ,sBAAuB,KACvBC,UAAW,KACXC,QAAS,KACTC,MAAO,KACPC,UAAW,KACXC,QAAS,KACTC,WAAY,KACZC,QAAS,KACTC,QAAS,KACTC,WAAY,KACZC,SAAU,KACVC,QAAS,KACTC,QAAS,KACTC,OAAQ,KACRC,MAAO,KACPC,QAAS,KACTC,OAAQ,KACRC,QAAS,KACT,yBAA0B,KAC1BC,SAAU,KACV,gBAAiB,KACjBC,OAAQ,KACR,iCAAkC,KAClC,oBAAqB,KACrBC,SAAU,KACV,eAAgB,KAChBC,QAAS,KACTC,SAAU,KACVC,SAAU,KACVC,OAAQ,KACR,aAAc,KACd,iBAAkB,KAClB,2BAA4B,KAC5BC,KAAM,KACNC,MAAO,KACPC,MAAO,KACP,mBAAoB,KACpB,0BAA2B,KAC3BC,SAAU,KACVC,QAAS,KACTC,MAAO,KACP,6BAA8B,KAC9B,eAAgB,KAChB,aAAc,KACd,gBAAiB,KACjBC,QAAS,KACTC,KAAM,KACNC,OAAQ,KACR,iBAAkB,KAClBC,QAAS,KACTC,SAAU,KACVC,SAAU,KACV,qBAAsB,KACtBC,QAAS,KACTC,MAAO,KACP,cAAe,KACf,oBAAqB,KACrBC,QAAS,KACTC,QAAS,KACTC,SAAU,KACV,mBAAoB,KACpB,gBAAiB,KACjBC,KAAM,KACNC,QAAS,KACTC,OAAQ,KACR,gBAAiB,KACjB,mBAAoB,KACpB,8BAA+B,KAC/BC,MAAO,KACPC,OAAQ,KACRC,QAAS,KACTC,QAAS,KACTC,MAAO,KACPC,UAAW,KACXC,OAAQ,KACRC,UAAW,KACXC,QAAS,KACTC,WAAY,KACZC,KAAM,KACNC,UAAW,KACXC,SAAU,KACVC,OAAQ,KACR,gBAAiB,KACjBC,OAAQ,KACRC,MAAO,KACP,kCAAmC,KACnC,gCAAiC,KACjCC,SAAU,KACV,YAAa,KACbC,QAAS,KACTC,QAAS,KACTC,MAAO,KACPC,UAAW,KACX,4BAA6B,KAC7BC,KAAM,KACNC,QAAS,KACT,cAAe,KACfC,OAAQ,KACRC,MAAO,KACPC,QAAS,KACTC,MAAO,KACPC,OAAQ,KACRC,OAAQ,KACRC,WAAY,KACZC,MAAO,KACPC,SAAU,KACV,oBAAqB,KACrB,cAAe,KACf,wCAAyC,KACzC,cAAe,KACfC,OAAQ,KACRC,WAAY,KACZ,mCAAoC,KACpCC,OAAQ,KACRC,QAAS,KACTC,QAAS,KACTC,QAAS,KACT,yBAA0B,KAC1BC,cAAe,KACfC,UAAW,KACXC,WAAY,KACZC,MAAO,KACPC,UAAW,KACXC,WAAY,KACZC,OAAQ,KACRC,SAAU,KACVC,SAAU,KACVC,KAAM,KACNC,MAAO,KACP,mBAAoB,KACpBC,WAAY,KACZC,WAAY,KACZC,UAAW,KACXC,QAAS,KACTC,OAAQ,KACR,kCAAmC,KACnCC,QAAS,KACTC,OAAQ,KACRC,SAAU,KACVC,WAAY,KACZC,WAAY,KACZC,QAAS,KACTC,WAAY,KACZC,QAAS,KACTC,QAAS,KACTC,MAAO,KACPC,MAAO,KACPC,YAAa,KACb,uBAAwB,KACxB,gBAAiB,KACjB,cAAe,KACfC,UAAW,KACXC,MAAO,KACPC,QAAS,KACTC,KAAM,KACN,iBAAkB,KAClB,2BAA4B,KAC5BC,OAAQ,KACRC,KAAM,KACNC,SAAU,KACVC,MAAO,KACP,kCAAmC,KACnCC,OAAQ,KACR,mBAAoB,KACpBC,SAAU,KACVC,KAAM,KACNC,YAAa,KACbC,SAAU,KACVC,OAAQ,KACRC,SAAU,KACV,cAAe,KACfC,MAAO,KACPC,QAAS,KACTC,QAAS,KACT,qBAAsB,KACtBC,OAAQ,KACR,mBAAoB,KACpB,eAAgB,KAChB,wBAAyB,KACzB,cAAe,KACf,eAAgB,KAChB,4BAA6B,KAC7B,+BAAgC,KAChCC,MAAO,KACP,aAAc,KACd,wBAAyB,KACzB,eAAgB,KAChBC,QAAS,KACTC,OAAQ,KACRC,WAAY,KACZ,eAAgB,KAChBC,UAAW,KACXC,SAAU,KACVC,SAAU,KACV,kBAAmB,KACnBC,QAAS,KACT,eAAgB,KAChB,kCAAmC,KACnCC,MAAO,KACP,YAAa,KACbC,MAAO,KACPC,SAAU,KACV,yBAA0B,KAC1BC,UAAW,KACXC,OAAQ,KACRC,YAAa,KACb,uBAAwB,KACxBC,OAAQ,KACRC,WAAY,KACZC,SAAU,KACVC,SAAU,KACV,cAAe,KACfC,KAAM,KACNC,QAAS,KACTC,MAAO,KACP,sBAAuB,KACvBC,QAAS,KACTC,OAAQ,KACRC,aAAc,KACd,2BAA4B,KAC5BC,OAAQ,KACRC,OAAQ,KACRC,QAAS,KACT,uBAAwB,KACxB,iBAAkB,KAClB,gBAAiB,KACjB,iCAAkC,KAClCC,QAAS,KACTC,WAAY,KACZC,QAAS,KACTC,UAAW,KACXC,QAAS,KACT,0BAA2B,KAC3B,uBAAwB,KACxB,oBAAqB,KACrB,iBAAkB,KAClBC,MAAO,KACPC,OAAQ,KACRC,SAAU,MAGI,GAAAC,UAAsC,CACpDC,QAAS,KACTC,OAAQ,KACR,iBAAkB,KAClBC,QAAS,KACTC,SAAU,KACVC,WAAY,KACZC,SAAU,KACVC,YAAa,KACbC,SAAU,KACV,uBAAwB,KACxB,iCAAkC,KAClCC,QAAS,KACT/H,QAAS,KACTQ,KAAM,KACNwH,OAAQ,KACRC,MAAO,KACPC,SAAU,KACVC,QAAS,KACTC,KAAM,KACNC,OAAQ,KACRC,SAAU,KACVC,UAAW,KACXC,MAAO,KACP,mBAAoB,KACpBC,SAAU,KACVC,cAAe,KACfC,SAAU,KACVC,UAAW,KACXC,YAAa,KACbC,SAAU,KACVC,QAAS,KACTC,SAAU,KACVC,OAAQ,KACR,gBAAiB,KACjB,aAAc,KACd,aAAc,KACd,WAAY,KACZ,iBAAkB,KAClB,eAAgB,KAChB,2BAA4B,KAC5BC,KAAM,KACNC,SAAU,KACVC,OAAQ,KACR7E,MAAO,KACP8E,aAAc,KACd,cAAe,KACf,eAAgB,KAChB,iBAAkB,KAClB,eAAgB,KAChBC,UAAW,KACXC,MAAO,KACPC,KAAM,KACNC,QAAS,KACT,iBAAkB,KAClBC,SAAU,KACVC,WAAY,KACZ,gBAAiB,KACjBC,UAAW,KACXC,QAAS,MAGK,GAAAC,aAAyC,CACvDC,QAAS,KACT,mBAAoB,KACpBC,SAAU,KACV,gBAAiB,KACjB,4BAA6B,KAC7B,cAAe,KACfC,QAAS,KACT,uBAAwB,KACxBC,OAAQ,KACRC,aAAc,M,2SC3rBH,MAAMC,GACnBnoF,YACU0jD,EACA5e,EACAsjD,EACAC,EACAxjD,GAJA,KAAA6e,cAAAA,EACA,KAAA5e,aAAAA,EACA,KAAAsjD,YAAAA,EACA,KAAAC,aAAAA,EACA,KAAAxjD,WAAAA,CACP,CAEHyjD,2BAA2BC,GACzB,MAAMC,EAAuB,GAEvBC,EAAiBN,GAAgBO,mBACrCH,GACA,GACA,GACA,GACA,GAEF,GAA8B,IAA1BE,EAAerlF,OACjB,OAAOolF,EAGT,IAAK,MAAMG,KAAWJ,EAAYK,MAAO,CAEvC,IAAKL,EAAYK,MAAM1yE,eAAeyyE,GACpC,SAGF,MAAME,EAAqBJ,EAAe//E,QAAQogF,GAAOH,IAAYG,EAAGC,OACxE,GAAIF,EAAmBzlF,OAAS,EAAG,CACjC,IAAI4lF,EAAK9oF,KAAK+oF,kBAAkBV,EAAaM,EAAmB,IAAI,GAAO,GAAO,GACxE,MAANG,IAEFA,EAAK9oF,KAAK+oF,kBAAkBV,EAAaM,EAAmB,IAAI,GAAM,GAAM,IAE9EL,EAAS/xE,KAAK,CACZsyE,KAAMR,EAAYK,MAAMD,GACxBx5E,SAAU05E,EAAmB,GAC7Bh6E,SAAUm6E,EACVE,UAAWL,G,EAKjB,OAAOL,CACT,CAEMW,WAAWvyB,G,0CACf,MAAMqc,EAAMrc,EAAQqc,IACpB,KAAKA,GAAQrc,EAAQrgB,QAAWqgB,EAAQ2xB,aAAgB3xB,EAAQ2xB,YAAYnlF,QAC1E,MAAM,IAAImC,MAAM,yBAGlB,IAAI6jF,EAA+B,KAEnC,MAAMC,QAAyBnpF,KAAK4kC,aAAawkD,sBACjD,IAAIC,GAAc,EAsDlB,GArDA3yB,EAAQ2xB,YAAY/gF,SAASgiF,IAE3B,GAAIA,EAAGvW,IAAIjtE,KAAOitE,EAAIjtE,IAAMwjF,EAAGvW,IAAI7sE,MAAQ6sE,EAAI7sE,IAC7C,OAGF,MAAMqjF,EAAavpF,KAAKwpF,mBAAmBF,EAAG92E,QAAS,CACrDi3E,qBAAsB/yB,EAAQ+yB,uBAAwB,EACtDC,gBAAiBhzB,EAAQgzB,kBAAmB,EAC5CC,kBAAmBjzB,EAAQizB,oBAAqB,EAChDC,gBAAiBlzB,EAAQkzB,kBAAmB,EAC5CvzC,OAAQqgB,EAAQrgB,SAGbkzC,GAAeA,EAAW5R,QAAW4R,EAAW5R,OAAOz0E,SAK5DqmF,EAAW3R,WAAWiS,yBAA2B,GAEjDR,GAAc,EACT3yB,EAAQozB,cACX9pF,KAAKwjD,cAAcnH,mBAAmBqa,EAAQrgB,OAAOvwC,IAGvDusE,GAAWY,eACTF,EACA,CACEC,QAAS,WACTuW,WAAYA,EACZrjF,IAAK6sE,EAAI7sE,KAEX,CAAE6jF,QAAST,EAAGS,UAIdrzB,EAAQrgB,OAAOnsC,OAASzK,EAAWksC,QACnCu9C,GACCxyB,EAAQrgB,OAAOjmC,MAAMjB,OACpBg6E,GAAqBzyB,EAAQrgB,OAAOpmC,uBAKxCi5E,EAAclpF,KAAK4kC,aAAaolD,yBAAyB9mD,MAAMxkB,GACxDA,EAGE,KAFE1e,KAAKkoF,YAAYje,QAAQvT,EAAQrgB,OAAOjmC,MAAMjB,SAGvD,IAGAk6E,EAEF,OADArpF,KAAKmoF,aAAatkC,QAAQqB,GAAU+kC,wBAAyBvzB,EAAQrgB,OAAOvwC,IACzD,MAAfojF,QACWA,EAEN,KAGT,MAAM,IAAI7jF,MAAM,qBAEpB,G,CAEM6kF,gBAAgB7B,EAA2BtV,EAAsBoX,G,kDACrE,IAAI9zC,EACJ,GAAI8zC,EACF9zC,QAAer2C,KAAKwjD,cAAcrH,oBAAoB42B,EAAI7sE,SACrD,CACL,MAAMkkF,QAA2BpqF,KAAKwjD,cAActH,sBAAsB62B,EAAI7sE,KAAK,GAUnF,GALEmwC,EAHA+zC,GACA19E,KAAKm7C,MAAMrR,WAAsD,QAA1C,EAA4B,QAA5B,EAAA4zC,EAAmBl3C,iBAAS,eAAEoD,oBAAY,eAAEE,WAAY,IAEtE4zC,QAEMpqF,KAAKwjD,cAAcxH,kBAAkB+2B,EAAI7sE,KAAK,GAGjD,MAAVmwC,EACF,OAAO,I,CAIX,GAAIA,EAAOzlC,WAAapR,EAAmBqR,KACzC,OAGF,MAAMw5E,QAAiBrqF,KAAKipF,WAAW,CACrClW,IAAKA,EACL18B,OAAQA,EACRgyC,YAAaA,EACbyB,cAAeK,EACfV,sBAAuBU,EACvBT,iBAAkBS,EAClBR,mBAAoBQ,EACpBP,gBAAiBO,IAQnB,OAJIA,GACFnqF,KAAKwjD,cAAcpH,0BAA0B22B,EAAI7sE,KAG5CmkF,C,IAGHC,oBAAoBjC,EAA2B8B,G,0CACnD,MAAMpX,QAAY/yE,KAAKuqF,eACvB,GAAKxX,GAAQA,EAAI7sE,IAIjB,aAAalG,KAAKkqF,gBAAgB7B,EAAatV,EAAKoX,EACtD,G,CAIcI,e,0CACZ,MAAMxX,QAAYV,GAAWmY,0BAC7B,IAAKzX,EACH,MAAM,IAAI1tE,MAAM,iBAGlB,OAAO0tE,CACT,G,CAEQyW,mBACNnB,EACA3xB,GAEA,IAAK2xB,IAAgB3xB,EAAQrgB,OAC3B,OAAO,KAGT,IAAIkzC,EAAa,IAAI9R,GAAe4Q,EAAY3Q,cAChD,MAAM+S,EAAgD,CAAC,EACjDl6E,EAASmmD,EAAQrgB,OAAO9lC,OAE9B,GAAIA,GAAUA,EAAOrN,OAAQ,CAC3B,MAAMwnF,EAAuB,GAE7Bn6E,EAAOjJ,SAASkJ,IACVy3E,GAAgB0C,SAASn6E,EAAEtO,OAC7BwoF,EAAWn0E,KAAK/F,EAAEtO,KAAKwF,c,IAI3B2gF,EAAY93E,OAAOjJ,SAASotC,IAE1B,GAAI+1C,EAAaz0E,eAAe0+B,EAAMk2C,MACpC,OAGF,IAAKl2C,EAAMm2C,UAA8B,SAAlBn2C,EAAMo2C,QAC3B,OAGF,MAAMC,EAAgB/qF,KAAKgrF,uBAAuBt2C,EAAOg2C,GACzD,GAAIK,GAAiB,EAAG,CACtB,MAAME,EAA2B16E,EAAOw6E,GACxC,IAAI5nD,EACA8nD,EAAc/gF,OAASwgC,GAAUwgD,OAEnC/nD,EAAMuzB,EAAQrgB,OAAO5C,iBAAiBw3C,EAAcv9E,WAEpDy1B,EAAM8nD,EAAcx9E,MACT,MAAP01B,GAAe8nD,EAAc/gF,OAASwgC,GAAUkP,UAClDzW,EAAM,UAIVsnD,EAAa/1C,EAAMk2C,MAAQl2C,EAC3BuzC,GAAgBkD,WAAW5B,EAAY70C,EAAOvR,E,KAKpD,OAAQuzB,EAAQrgB,OAAOnsC,MACrB,KAAKzK,EAAWksC,MACd49C,EAAavpF,KAAKorF,wBAAwB7B,EAAYlB,EAAaoC,EAAc/zB,GACjF,MACF,KAAKj3D,EAAWosC,KACd09C,EAAavpF,KAAKqrF,uBAAuB9B,EAAYlB,EAAaoC,EAAc/zB,GAChF,MACF,KAAKj3D,EAAWqsC,SACdy9C,EAAavpF,KAAKsrF,2BAChB/B,EACAlB,EACAoC,EACA/zB,GAEF,MACF,QACE,OAAO,KAGX,OAAO6yB,CACT,CAEQ6B,wBACN7B,EACAlB,EACAoC,EACA/zB,GAEA,IAAKA,EAAQrgB,OAAOjmC,MAClB,OAAO,KAGT,MAAM44E,EAA6B,GAC7BuC,EAA6B,GACnC,IAAI3C,EAAoB,KACpBj6E,EAA0B,KAC9B,MAAMyB,EAAQsmD,EAAQrgB,OAAOjmC,MAE7B,IAAKA,EAAMnB,UAA+B,KAAnBmB,EAAMnB,SAG3B,OADAs6E,EAAatB,GAAgBuD,sBAAsBf,EAAclB,GAInE,IAAIhB,EAAiBN,GAAgBO,mBACnCH,GACA,GACA,EACA3xB,EAAQgzB,gBACRhzB,EAAQkzB,iBAELrB,EAAerlF,QAAWwzD,EAAQizB,oBAErCpB,EAAiBN,GAAgBO,mBAC/BH,GACA,GACA,EACA3xB,EAAQgzB,gBACRhzB,EAAQkzB,kBAIZ,IAAK,MAAMnB,KAAWJ,EAAYK,MAAO,CAEvC,IAAKL,EAAYK,MAAM1yE,eAAeyyE,GACpC,SAGF,MAAMgD,EAAyC,GAC/ClD,EAAejhF,SAASokF,IAClBjD,IAAYiD,EAAU7C,MACxB4C,EAAsBl1E,KAAKm1E,E,IAI/BnD,EAAejhF,SAASokF,IACtB9C,EAAK8C,EACL1C,EAAUzyE,KAAKqyE,GAEXx4E,EAAMzB,WACRA,EAAW3O,KAAK+oF,kBAAkBV,EAAaO,GAAI,GAAO,GAAO,GAE5Dj6E,GAAa+nD,EAAQizB,oBAExBh7E,EAAW3O,KAAK+oF,kBAAkBV,EAAaO,GAAI,GAAM,GAAM,IAG7Dj6E,GACF48E,EAAUh1E,KAAK5H,G,IA6DvB,OAvDI45E,EAAerlF,SAAW8lF,EAAU9lF,SAItC0lF,EAAKL,EAAe,GACpBS,EAAUzyE,KAAKqyE,GAEXx4E,EAAMzB,UAAYi6E,EAAG+C,cAAgB,IACvCh9E,EAAW3O,KAAK+oF,kBAAkBV,EAAaO,GAAI,GAAO,GAAO,GAE5Dj6E,GAAa+nD,EAAQizB,oBAExBh7E,EAAW3O,KAAK+oF,kBAAkBV,EAAaO,GAAI,GAAM,GAAM,IAG7Dj6E,GACF48E,EAAUh1E,KAAK5H,KAKhB45E,EAAerlF,QAAWwzD,EAAQ+yB,sBAErCpB,EAAY93E,OAAOjJ,SAASkJ,IAExBA,EAAEq6E,WACU,SAAXr6E,EAAEtG,MAA8B,UAAXsG,EAAEtG,MAA+B,QAAXsG,EAAEtG,OAC9C+9E,GAAgB2D,kBAAkBp7E,EAAGsnE,GAAkBC,qBAEvDwT,EAAUh1E,KAAK/F,E,IAKrB+6E,EAAUjkF,SAASgI,IAEbm7E,EAAaz0E,eAAe1G,EAAEs7E,QAIlCH,EAAan7E,EAAEs7E,MAAQt7E,EACvB24E,GAAgBkD,WAAW5B,EAAYj6E,EAAGc,EAAMzB,UAAS,IAG3Dq6E,EAAU1hF,SAAS+gB,IAEboiE,EAAaz0E,eAAeqS,EAAEuiE,QAIlCH,EAAapiE,EAAEuiE,MAAQviE,EACvB4/D,GAAgBkD,WAAW5B,EAAYlhE,EAAGjY,EAAMnB,UAAS,IAG3Ds6E,EAAatB,GAAgBuD,sBAAsBf,EAAclB,EAEnE,CAEQ8B,uBACN9B,EACAlB,EACAoC,EACA/zB,GAEA,IAAKA,EAAQrgB,OAAOhmC,KAClB,OAAO,KAGT,MAAMw7E,EAA8C,CAAC,EAErDxD,EAAY93E,OAAOjJ,SAASkJ,IAC1B,IAAIy3E,GAAgB6D,oBAAoBt7E,KAIpCxQ,KAAK+rF,eAAev7E,EAAEtG,KAAM4tE,GAAkBG,uBAIlD,IAAK,IAAI90E,EAAI,EAAGA,EAAI+0E,GAA4BC,eAAej1E,OAAQC,IAAK,CAC1E,MAAM6oF,EAAO9T,GAA4BC,eAAeh1E,GAExD,GAAKqN,EAAEwF,eAAeg2E,IAAUx7E,EAAEw7E,IAAUx7E,EAAEq6E,SAA9C,CAMA,IACGgB,EAAW3+E,gBACZ+6E,GAAgBgE,aACdz7E,EAAEw7E,GACF9T,GAA4BG,qBAC5BH,GAA4BI,2BAE9B,CACAuT,EAAW3+E,eAAiBsD,EAC5B,K,CACK,IACJq7E,EAAWz+E,QACZ66E,GAAgBgE,aACdz7E,EAAEw7E,GACF9T,GAA4BK,qBAC5BL,GAA4BM,2BAE9B,CACAqT,EAAWz+E,OAASoD,EACpB,K,CACK,IACJq7E,EAAWp7C,KACZw3C,GAAgBgE,aACdz7E,EAAEw7E,GACF9T,GAA4BO,qBAC5BP,GAA4BQ,2BAE9B,CACAmT,EAAWp7C,IAAMjgC,EACjB,K,CACK,IACJq7E,EAAWx+E,UACZ46E,GAAgBgE,aAAaz7E,EAAEw7E,GAAO9T,GAA4BS,uBAClE,CACAkT,EAAWx+E,SAAWmD,EACtB,K,CACK,IACJq7E,EAAWv+E,SACZ26E,GAAgBgE,aAAaz7E,EAAEw7E,GAAO9T,GAA4BU,sBAClE,CACAiT,EAAWv+E,QAAUkD,EACrB,K,CACK,IACJq7E,EAAWt+E,MACZ06E,GAAgBgE,aAAaz7E,EAAEw7E,GAAO9T,GAA4BW,eAClE,CACAgT,EAAWt+E,KAAOiD,EAClB,K,CACK,IACJq7E,EAAW1+E,OACZ86E,GAAgBgE,aAAaz7E,EAAEw7E,GAAO9T,GAA4BY,qBAClE,CACA+S,EAAW1+E,MAAQqD,EACnB,K,OAKN,MAAMH,EAAOqmD,EAAQrgB,OAAOhmC,KAM5B,GALArQ,KAAKksF,iBAAiB3C,EAAYl5E,EAAMw7E,EAAYpB,EAAc,kBAClEzqF,KAAKksF,iBAAiB3C,EAAYl5E,EAAMw7E,EAAYpB,EAAc,UAClEzqF,KAAKksF,iBAAiB3C,EAAYl5E,EAAMw7E,EAAYpB,EAAc,QAClEzqF,KAAKksF,iBAAiB3C,EAAYl5E,EAAMw7E,EAAYpB,EAAc,SAE9DoB,EAAWx+E,UAAY46E,GAAgB0C,SAASt6E,EAAKhD,UAAW,CAClE,IAAIA,EAAmBgD,EAAKhD,SAE5B,GAAIw+E,EAAWx+E,SAAS8+E,YAAcN,EAAWx+E,SAAS8+E,WAAWz1B,QAAS,CAC5E,IAAIiD,EAAgB,KACpB,MAAMyyB,EAAYP,EAAWx+E,SAAS8+E,WAAWz1B,QAejD,GAdyB,KAArB01B,EAAUlpF,OACZy2D,EAAQp2D,SAAS8M,EAAKhD,SAAU,MAAQ,EACV,KAArB++E,EAAUlpF,SAQjBy2D,EANmB,MAAnByyB,EAAU,GAAG,IACO,KAApBA,EAAU,GAAG,IACQ,MAApBA,EAAU,IAAI,IAAmC,KAArBA,EAAU,IAAI,GAInC7oF,SAAS8M,EAAKhD,SAAU,MAFxB9J,SAAS8M,EAAKhD,SAAU,MAAQ,GAM/B,MAATssD,EAAe,CACjB,MAAM0yB,EAASD,EAAUzyB,GACrB0yB,EAAOnpF,OAAS,IAClBmK,EAAWg/E,EAAO,G,OAIrBrsF,KAAKssF,kBAAkBT,EAAWx+E,SAAU,OACT,IAAlCw+E,EAAWx+E,SAASk/E,WACF,IAApBl/E,EAASnK,SAETmK,EAAW,IAAMA,GAGnBo9E,EAAaoB,EAAWx+E,SAASu9E,MAAQiB,EAAWx+E,SACpD46E,GAAgBkD,WAAW5B,EAAYsC,EAAWx+E,SAAUA,E,CAG9D,GAAIw+E,EAAWv+E,SAAW26E,GAAgB0C,SAASt6E,EAAK/C,SAAU,CAChE,IAAIA,EAAkB+C,EAAK/C,QAC3B,GAAIu+E,EAAWv+E,QAAQ6+E,YAAcN,EAAWv+E,QAAQ6+E,WAAWz1B,QACjE,IAAK,IAAIvzD,EAAI,EAAGA,EAAI0oF,EAAWv+E,QAAQ6+E,WAAWz1B,QAAQxzD,OAAQC,IAAK,CACrE,MAAMwiB,EAAsBkmE,EAAWv+E,QAAQ6+E,WAAWz1B,QAAQvzD,GAClE,GAAIwiB,EAAE,KAAOtV,EAAK/C,SAAWqY,EAAE,KAAOtV,EAAK/C,QAAS,CAClDA,EAAUqY,EAAE,GACZ,K,CAEF,GACkB,IAAhBA,EAAE,GAAGziB,QACmB,IAAxBmN,EAAK/C,QAAQpK,QACbyiB,EAAE,KAAOtV,EAAK/C,QAAQszD,UAAU,GAChC,CACAtzD,EAAUqY,EAAE,GACZ,K,CAEF,MAAM6mE,EAAa7mE,EAAE,GAAGlf,QAAQ,KAChC,GAAI+lF,GAAc,GAAK7mE,EAAE,GAAGziB,OAASspF,EAAa,EAAG,CACnD,MAAMrpD,EAAMxd,EAAE,GAAGi7C,UAAU4rB,EAAa,GACxC,GAAW,MAAPrpD,GAA8B,KAAfA,EAAI78B,QAAiB68B,IAAQ9yB,EAAK/C,QAAS,CAC5DA,EAAUqY,EAAE,GACZ,K,QAKN3lB,KAAKssF,kBAAkBT,EAAWv+E,QAAS,SACV,IAAjCu+E,EAAWv+E,QAAQi/E,UAEI,IAAnBj/E,EAAQpK,SACVoK,EAAU,KAAOA,IAGnBtN,KAAKssF,kBAAkBT,EAAWv+E,QAAS,OACV,IAAjCu+E,EAAWv+E,QAAQi/E,YAEI,IAAnBj/E,EAAQpK,SACVoK,EAAUA,EAAQ9J,OAAO,IAI7BinF,EAAaoB,EAAWv+E,QAAQs9E,MAAQiB,EAAWv+E,QACnD26E,GAAgBkD,WAAW5B,EAAYsC,EAAWv+E,QAASA,E,CAG7D,GACEu+E,EAAWp7C,KACXw3C,GAAgB0C,SAASt6E,EAAKhD,WAC9B46E,GAAgB0C,SAASt6E,EAAK/C,SAC9B,CACA,MAAMm/E,GAAa,IAAMp8E,EAAKhD,UAAUpI,OAAO,GAE/C,IAAIynF,EAAmBr8E,EAAK/C,QACxBq/E,EAAmB,KACC,IAApBD,EAASxpF,QACXypF,EAAWD,EACXA,EAAW,KAAOA,GACW,IAApBA,EAASxpF,SAClBypF,EAAWD,EAASlpF,OAAO,EAAG,IAGhC,IAAIitC,EAAc,KAClB,IAAK,IAAIttC,EAAI,EAAGA,EAAI+0E,GAA4Ba,UAAU71E,SAEtDlD,KAAKssF,kBACHT,EAAWp7C,IACXynC,GAA4Ba,UAAU51E,GACpC,IACA+0E,GAA4Bc,cAAc71E,KAElC,MAAZwpF,EAEAl8C,EAAMg8C,EAAY,IAAME,EAExB3sF,KAAKssF,kBACHT,EAAWp7C,IACXynC,GAA4Ba,UAAU51E,GACpC,IACA+0E,GAA4Be,aAAa91E,IAG7CstC,EAAMg8C,EAAY,IAAMC,EAExB1sF,KAAKssF,kBACHT,EAAWp7C,IACXynC,GAA4Bc,cAAc71E,GACxC,IACA+0E,GAA4Ba,UAAU51E,KAE9B,MAAZwpF,EAEAl8C,EAAMk8C,EAAW,IAAMF,EAEvBzsF,KAAKssF,kBACHT,EAAWp7C,IACXynC,GAA4Be,aAAa91E,GACvC,IACA+0E,GAA4Ba,UAAU51E,IAG1CstC,EAAMi8C,EAAW,IAAMD,EAEvBzsF,KAAKssF,kBACHT,EAAWp7C,IACXynC,GAA4Ba,UAAU51E,GACpC,IACA+0E,GAA4Bc,cAAc71E,KAElC,MAAZwpF,EAEAl8C,EAAMg8C,EAAY,IAAME,EAExB3sF,KAAKssF,kBACHT,EAAWp7C,IACXynC,GAA4Ba,UAAU51E,GACpC,IACA+0E,GAA4Be,aAAa91E,IAG7CstC,EAAMg8C,EAAY,IAAMC,EAExB1sF,KAAKssF,kBACHT,EAAWp7C,IACXynC,GAA4Bc,cAAc71E,GACxC,IACA+0E,GAA4Ba,UAAU51E,KAE9B,MAAZwpF,EAEAl8C,EAAMk8C,EAAW,IAAMF,EAEvBzsF,KAAKssF,kBACHT,EAAWp7C,IACXynC,GAA4Be,aAAa91E,GACvC,IACA+0E,GAA4Ba,UAAU51E,IAG1CstC,EAAMi8C,EAAW,IAAMD,EAEvBzsF,KAAKssF,kBACHT,EAAWp7C,IACXynC,GAA4Bc,cAAc71E,GAAK+0E,GAA4Ba,UAAU51E,KAE3E,MAAZwpF,EAEAl8C,EAAMk8C,EAAWF,EAEjBzsF,KAAKssF,kBACHT,EAAWp7C,IACXynC,GAA4Be,aAAa91E,GAAK+0E,GAA4Ba,UAAU51E,IAGtFstC,EAAMi8C,EAAWD,EAEjBzsF,KAAKssF,kBACHT,EAAWp7C,IACXynC,GAA4Ba,UAAU51E,GAAK+0E,GAA4Bc,cAAc71E,KAE3E,MAAZwpF,EAEAl8C,EAAMg8C,EAAYE,EAElB3sF,KAAKssF,kBACHT,EAAWp7C,IACXynC,GAA4Ba,UAAU51E,GAAK+0E,GAA4Be,aAAa91E,MAGtFstC,EAAMg8C,EAAYC,GAGT,MAAPj8C,GA7G4DttC,KAkHvD,MAAPstC,IACFA,EAAMi8C,EAAW,IAAMD,GAGzBzsF,KAAK4sF,0BAA0BrD,EAAY94C,EAAKo7C,EAAWp7C,IAAKg6C,E,CAGlE,OAAOlB,CACT,CAEQ+C,kBAAkB53C,EAAsBm4C,GAC9C,IAAKn4C,EACH,OAAO,EAGT,IAAIo4C,GAAc,EAYlB,OAXA5U,GAA4BE,uBAAuB9wE,SAAS0kF,IAE1D,GAAIc,IAAgBp4C,EAAM1+B,eAAeg2E,KAAUt3C,EAAMs3C,GACvD,OAGF,IAAI7oD,EAAMuR,EAAMs3C,GAChB7oD,EAAMA,EAAI5+B,QAAQ,KAAM,IAAImD,cAC5BolF,EAAc3pD,EAAI18B,QAAQomF,IAAgB,CAAC,IAGtCC,CACT,CAEQxB,2BACN/B,EACAlB,EACAoC,EACA/zB,GAEA,IAAKA,EAAQrgB,OAAOx1C,SAClB,OAAO,KAGT,MAAMgrF,EAA8C,CAAC,EAErDxD,EAAY93E,OAAOjJ,SAASkJ,IAC1B,IAAIy3E,GAAgB6D,oBAAoBt7E,KAIpCxQ,KAAK+rF,eAAev7E,EAAEtG,KAAM4tE,GAAkBG,uBAIlD,IAAK,IAAI90E,EAAI,EAAGA,EAAI+1E,GAA0BC,mBAAmBj2E,OAAQC,IAAK,CAC5E,MAAM6oF,EAAO9S,GAA0BC,mBAAmBh2E,GAE1D,GAAKqN,EAAEwF,eAAeg2E,IAAUx7E,EAAEw7E,IAAUx7E,EAAEq6E,SAA9C,CAMA,IACGgB,EAAW3pF,MACZ+lF,GAAgBgE,aACdz7E,EAAEw7E,GACF9S,GAA0BE,mBAC1BF,GAA0BG,yBAE5B,CACAwS,EAAW3pF,KAAOsO,EAClB,K,CACK,IACJq7E,EAAWh+E,WACZo6E,GAAgBgE,aAAaz7E,EAAEw7E,GAAO9S,GAA0BK,qBAChE,CACAsS,EAAWh+E,UAAY2C,EACvB,K,CACK,IACJq7E,EAAW/9E,YACZm6E,GAAgBgE,aAAaz7E,EAAEw7E,GAAO9S,GAA0BM,sBAChE,CACAqS,EAAW/9E,WAAa0C,EACxB,K,CACK,IACJq7E,EAAW99E,UACZk6E,GAAgBgE,aAAaz7E,EAAEw7E,GAAO9S,GAA0BO,oBAChE,CACAoS,EAAW99E,SAAWyC,EACtB,K,CACK,IACJq7E,EAAWj+E,OACZq6E,GAAgBgE,aAAaz7E,EAAEw7E,GAAO9S,GAA0BI,iBAChE,CACAuS,EAAWj+E,MAAQ4C,EACnB,K,CACK,IACJq7E,EAAWr9E,OACZy5E,GAAgBgE,aAAaz7E,EAAEw7E,GAAO9S,GAA0BQ,iBAChE,CACAmS,EAAWr9E,MAAQgC,EACnB,K,CACK,IACJq7E,EAAWt6C,SACZ02C,GAAgBgE,aACdz7E,EAAEw7E,GACF9S,GAA0BS,kBAC1BT,GAA0BU,wBAE5B,CACAiS,EAAWt6C,QAAU/gC,EACrB,K,CACK,IACJq7E,EAAW79E,UACZi6E,GAAgBgE,aAAaz7E,EAAEw7E,GAAO9S,GAA0BW,oBAChE,CACAgS,EAAW79E,SAAWwC,EACtB,K,CACK,IACJq7E,EAAW59E,UACZg6E,GAAgBgE,aAAaz7E,EAAEw7E,GAAO9S,GAA0BY,oBAChE,CACA+R,EAAW59E,SAAWuC,EACtB,K,CACK,IACJq7E,EAAW39E,UACZ+5E,GAAgBgE,aAAaz7E,EAAEw7E,GAAO9S,GAA0Ba,oBAChE,CACA8R,EAAW39E,SAAWsC,EACtB,K,CACK,IACJq7E,EAAWx9E,YACZ45E,GAAgBgE,aAAaz7E,EAAEw7E,GAAO9S,GAA0Bc,sBAChE,CACA6R,EAAWx9E,WAAamC,EACxB,K,CACK,IACJq7E,EAAW19E,MACZ85E,GAAgBgE,aAAaz7E,EAAEw7E,GAAO9S,GAA0Be,gBAChE,CACA4R,EAAW19E,KAAOqC,EAClB,K,CACK,IACJq7E,EAAWz9E,OACZ65E,GAAgBgE,aAAaz7E,EAAEw7E,GAAO9S,GAA0BgB,iBAChE,CACA2R,EAAWz9E,MAAQoC,EACnB,K,CACK,IACJq7E,EAAWv9E,SACZ25E,GAAgBgE,aAAaz7E,EAAEw7E,GAAO9S,GAA0BiB,mBAChE,CACA0R,EAAWv9E,QAAUkC,EACrB,K,CACK,IACJq7E,EAAWp9E,OACZw5E,GAAgBgE,aAAaz7E,EAAEw7E,GAAO9S,GAA0BkB,iBAChE,CACAyR,EAAWp9E,MAAQ+B,EACnB,K,CACK,IACJq7E,EAAWl9E,UACZs5E,GAAgBgE,aAAaz7E,EAAEw7E,GAAO9S,GAA0BmB,oBAChE,CACAwR,EAAWl9E,SAAW6B,EACtB,K,CACK,IACJq7E,EAAWt9E,SACZ05E,GAAgBgE,aAAaz7E,EAAEw7E,GAAO9S,GAA0BoB,mBAChE,CACAuR,EAAWt9E,QAAUiC,EACrB,K,OAKN,MAAM3P,EAAW61D,EAAQrgB,OAAOx1C,SAChCb,KAAKksF,iBAAiB3C,EAAY1oF,EAAUgrF,EAAYpB,EAAc,SACtEzqF,KAAKksF,iBAAiB3C,EAAY1oF,EAAUgrF,EAAYpB,EAAc,aACtEzqF,KAAKksF,iBAAiB3C,EAAY1oF,EAAUgrF,EAAYpB,EAAc,cACtEzqF,KAAKksF,iBAAiB3C,EAAY1oF,EAAUgrF,EAAYpB,EAAc,YACtEzqF,KAAKksF,iBAAiB3C,EAAY1oF,EAAUgrF,EAAYpB,EAAc,YACtEzqF,KAAKksF,iBAAiB3C,EAAY1oF,EAAUgrF,EAAYpB,EAAc,YACtEzqF,KAAKksF,iBAAiB3C,EAAY1oF,EAAUgrF,EAAYpB,EAAc,YACtEzqF,KAAKksF,iBAAiB3C,EAAY1oF,EAAUgrF,EAAYpB,EAAc,QACtEzqF,KAAKksF,iBAAiB3C,EAAY1oF,EAAUgrF,EAAYpB,EAAc,cACtEzqF,KAAKksF,iBAAiB3C,EAAY1oF,EAAUgrF,EAAYpB,EAAc,WACtEzqF,KAAKksF,iBAAiB3C,EAAY1oF,EAAUgrF,EAAYpB,EAAc,SACtEzqF,KAAKksF,iBAAiB3C,EAAY1oF,EAAUgrF,EAAYpB,EAAc,SACtEzqF,KAAKksF,iBAAiB3C,EAAY1oF,EAAUgrF,EAAYpB,EAAc,YAEtE,IAAIsC,GAAc,EAClB,GAAIlB,EAAWz9E,OAASvN,EAASuN,OAASvN,EAASuN,MAAMlL,OAAS,EAAG,CACnE,MAAM8pF,EAAansF,EAASuN,MAAM1G,cAC5BulF,EACJ/T,GAA0BiM,UAAU6H,IACpC9T,GAA0ByO,aAAaqF,GACrCC,IACFF,GAAc,EACd/sF,KAAK4sF,0BAA0BrD,EAAY0D,EAAUpB,EAAWz9E,MAAOq8E,G,CAItEsC,GACH/sF,KAAKksF,iBAAiB3C,EAAY1oF,EAAUgrF,EAAYpB,EAAc,SAGxE,IAAIyC,GAAgB,EACpB,GAAIrB,EAAWv9E,SAAWzN,EAASyN,SAAWzN,EAASyN,QAAQpL,OAAS,EAAG,CACzE,MAAMiqF,EAAetsF,EAASyN,QAAQ5G,cAChC0lF,EAAalU,GAA0BqB,aAAa4S,GACtDC,IACFF,GAAgB,EAChBltF,KAAK4sF,0BAA0BrD,EAAY6D,EAAYvB,EAAWv9E,QAASm8E,G,CAQ/E,GAJKyC,GACHltF,KAAKksF,iBAAiB3C,EAAY1oF,EAAUgrF,EAAYpB,EAAc,WAGpEoB,EAAW3pF,OAASrB,EAASgN,WAAahN,EAASkN,UAAW,CAChE,IAAIsjC,EAAW,GACX42C,GAAgB0C,SAAS9pF,EAASgN,aACpCwjC,EAAWxwC,EAASgN,WAElBo6E,GAAgB0C,SAAS9pF,EAASiN,cACnB,KAAbujC,IACFA,GAAY,KAEdA,GAAYxwC,EAASiN,YAEnBm6E,GAAgB0C,SAAS9pF,EAASkN,YACnB,KAAbsjC,IACFA,GAAY,KAEdA,GAAYxwC,EAASkN,UAGvB/N,KAAK4sF,0BAA0BrD,EAAYl4C,EAAUw6C,EAAW3pF,KAAMuoF,E,CAGxE,GAAIoB,EAAWt6C,SAAW02C,GAAgB0C,SAAS9pF,EAASmN,UAAW,CACrE,IAAIujC,EAAU,GACV02C,GAAgB0C,SAAS9pF,EAASmN,YACpCujC,EAAU1wC,EAASmN,UAEjBi6E,GAAgB0C,SAAS9pF,EAASoN,YACpB,KAAZsjC,IACFA,GAAW,MAEbA,GAAW1wC,EAASoN,UAElBg6E,GAAgB0C,SAAS9pF,EAASqN,YACpB,KAAZqjC,IACFA,GAAW,MAEbA,GAAW1wC,EAASqN,UAGtBlO,KAAK4sF,0BAA0BrD,EAAYh4C,EAASs6C,EAAWt6C,QAASk5C,E,CAG1E,OAAOlB,CACT,CAEQwC,eAAe7hF,EAAcmjF,GACnC,OAAOA,EAAc5mF,QAAQyD,IAAS,CACxC,CAEQrI,oBACN4L,EACAipD,EACA42B,GAEA7/E,EAAQA,EACLnH,OACAoB,cACAnD,QAAQ,iBAAkB,IAC7B,IAAK,IAAIpB,EAAI,EAAGA,EAAIuzD,EAAQxzD,OAAQC,IAAK,CACvC,IAAIkpF,EAAS31B,EAAQvzD,GACrB,MAAMoqF,EAAwC,MAAnBD,GAA2BA,EAAgB7mF,QAAQ4lF,IAAW,EAEzF,GADAA,EAASA,EAAO3kF,cAAcnD,QAAQ,KAAM,IACxCkJ,IAAU4+E,GAAWkB,GAAsB9/E,EAAMhH,QAAQ4lF,IAAW,EACtE,OAAO,C,CAIX,OAAO,CACT,CAEQH,iBACN3C,EACAiE,EACA3B,EACApB,EACAgD,EACAC,GAEAA,EAAYA,GAAaD,EACzBztF,KAAK4sF,0BACHrD,EACAiE,EAAWC,GACX5B,EAAW6B,GACXjD,EAEJ,CAEQmC,0BACNrD,EACAoE,EACAj5C,EACA+1C,GAEA,IAAImD,GAAS,EACb,GAAI3F,GAAgB0C,SAASgD,IAAcj5C,EACzC,GAAmB,eAAfA,EAAMxqC,MAAyBwqC,EAAMy3C,YAAcz3C,EAAMy3C,WAAWz1B,QACtE,IAAK,IAAIvzD,EAAI,EAAGA,EAAIuxC,EAAMy3C,WAAWz1B,QAAQxzD,OAAQC,IAAK,CACxD,MAAMkpF,EAAS33C,EAAMy3C,WAAWz1B,QAAQvzD,GACxC,IAAK,IAAI22D,EAAI,EAAGA,EAAIuyB,EAAOnpF,OAAQ42D,IACjC,GACEmuB,GAAgB0C,SAAS0B,EAAOvyB,KAChCuyB,EAAOvyB,GAAGpyD,gBAAkBimF,EAAUjmF,cACtC,CACAkmF,GAAS,EACLvB,EAAOnpF,OAAS,IAClByqF,EAAYtB,EAAO,IAErB,K,CAIJ,GAAIuB,EACF,K,MAIJA,GAAS,EAITA,IACFnD,EAAa/1C,EAAMk2C,MAAQl2C,EAC3BuzC,GAAgBkD,WAAW5B,EAAY70C,EAAOi5C,GAElD,CAEA9rF,0BACEwmF,EACAwF,EACAC,EACAC,EACAnE,GAEA,MAAMhmF,EAAuB,GAmD7B,OAlDAykF,EAAY93E,OAAOjJ,SAASkJ,IAC1B,GAAIy3E,GAAgB6D,oBAAoBt7E,GACtC,OAGF,MAAMw9E,EAAwB,aAAXx9E,EAAEtG,KACf+jF,EAAuBxgF,IAC3B,GAAa,MAATA,EACF,OAAO,EAIT,MAAMygF,EAAezgF,EAAM/F,cAAcnD,QAAQ,WAAY,IAE7D,QAAI2pF,EAAaznF,QAAQ,YAAc,KAInCqxE,GAAkBE,wBAAwBnlC,MAAM1vC,GAAM+qF,EAAaznF,QAAQtD,IAAM,GAI1E,EAkBVqN,EAAEkO,WACFovE,GAAkBt9E,EAAE29E,YACpBH,GAjBc,SAAXx9E,EAAEtG,OAGF+jF,EAAoBz9E,EAAE49E,SAGtBH,EAAoBz9E,EAAE69E,WAGtBJ,EAAoBz9E,EAAE89E,iBASzBT,IAAer9E,EAAEq6E,UAChBkD,GAA0B,MAAXv9E,EAAE/C,OAAoC,KAAnB+C,EAAE/C,MAAMnH,SAC3CsjF,GAA0C,iBAAvBp5E,EAAE+9E,kBAEtB3qF,EAAI2S,KAAK/F,E,IAGN5M,CACT,CAEQmlF,kBACNV,EACAmG,EACAX,EACAC,EACAW,GAEA,IAAIC,EAA+B,KACnC,IAAK,IAAIvrF,EAAI,EAAGA,EAAIklF,EAAY93E,OAAOrN,OAAQC,IAAK,CAClD,MAAMqN,EAAI63E,EAAY93E,OAAOpN,GAC7B,IAAI8kF,GAAgB6D,oBAAoBt7E,GAAxC,CAIA,GAAIA,EAAEm7E,eAAiB6C,EAAc7C,cACnC,MAGF,IACGn7E,EAAEkO,WACFovE,IAAkBt9E,EAAE29E,YACpBM,GAAej+E,EAAEq4E,OAAS2F,EAAc3F,QACxCgF,GAAer9E,EAAEq6E,YACN,SAAXr6E,EAAEtG,MAA8B,UAAXsG,EAAEtG,MAA+B,QAAXsG,EAAEtG,QAE9CwkF,EAAgBl+E,EAEZxQ,KAAKgrF,uBAAuBx6E,EAAGsnE,GAAkBC,qBAAuB,GAE1E,K,EAKN,OAAO2W,CACT,CAEQ1D,uBAAuBt2C,EAAsBi6C,GACnD,IAAK,IAAIxrF,EAAI,EAAGA,EAAIwrF,EAAMzrF,OAAQC,IAAK,CACrC,GAAIwrF,EAAMxrF,GAAGsD,QAAQ,MAAQ,EAAG,CAC9B,GAAIzG,KAAK4uF,2BAA2Bl6C,EAAO,SAAUi6C,EAAMxrF,GAAI,MAC7D,OAAOA,EAET,GAAInD,KAAK4uF,2BAA2Bl6C,EAAO,WAAYi6C,EAAMxrF,GAAI,QAC/D,OAAOA,EAET,GAAInD,KAAK4uF,2BAA2Bl6C,EAAO,YAAai6C,EAAMxrF,GAAI,SAChE,OAAOA,EAET,GAAInD,KAAK4uF,2BAA2Bl6C,EAAO,aAAci6C,EAAMxrF,GAAI,SACjE,OAAOA,EAET,GAAInD,KAAK4uF,2BAA2Bl6C,EAAO,cAAei6C,EAAMxrF,GAAI,eAClE,OAAOA,C,CAIX,GAAInD,KAAK6uF,qBAAqBn6C,EAAO,SAAUi6C,EAAMxrF,IACnD,OAAOA,EAET,GAAInD,KAAK6uF,qBAAqBn6C,EAAO,WAAYi6C,EAAMxrF,IACrD,OAAOA,EAET,GAAInD,KAAK6uF,qBAAqBn6C,EAAO,YAAai6C,EAAMxrF,IACtD,OAAOA,EAET,GAAInD,KAAK6uF,qBAAqBn6C,EAAO,aAAci6C,EAAMxrF,IACvD,OAAOA,EAET,GAAInD,KAAK6uF,qBAAqBn6C,EAAO,cAAei6C,EAAMxrF,IACxD,OAAOA,C,CAIX,OAAQ,CACV,CAEQyrF,2BACNl6C,EACAo6C,EACA5sF,EACAkU,EACA24E,EAAY,KAEZ,GAAyC,IAArC7sF,EAAKuE,QAAQ2P,EAAS24E,GAAkB,CAC1C,MAAMC,EAAW9sF,EAAKuE,QAAQsoF,GACxB5rD,EAAMjhC,EAAK0+D,UAAUouB,EAAW,GACtC,OAAc,MAAP7rD,GAAenjC,KAAK6uF,qBAAqBn6C,EAAOo6C,EAAU3rD,E,CAEnE,OAAO,CACT,CAEQ0rD,qBAAqBn6C,EAAYo6C,EAAkB5sF,GACzD,IAAI+sF,EAAWv6C,EAAMo6C,GACrB,IAAK7G,GAAgB0C,SAASsE,GAC5B,OAAO,EAIT,GADAA,EAAWA,EAAS3oF,OAAO/B,QAAQ,kBAAmB,IAClDrC,EAAKqE,WAAW,UAClB,IACE,MAAM2oF,EAAahtF,EAAKmF,MAAM,IAAK,GACnC,GAA0B,IAAtB6nF,EAAWhsF,OAAc,CAE3B,OADc,IAAI6C,OAAOmpF,EAAW,GAAI,KAC3BlpF,KAAKipF,E,EAEpB,MAAOhoF,GACPjH,KAAK2kC,WAAWziB,MAAMjb,E,MAEnB,GAAI/E,EAAKqE,WAAW,QAAS,CAClC,MAAM4oF,EAAWjtF,EAAKmF,MAAM,IAAK,GACjC,GAAwB,IAApB8nF,EAASjsF,OAAc,CACzB,MAAMksF,EAAUD,EAAS,GAAG9nF,MAAM,KAClC,IAAK,IAAIlE,EAAI,EAAGA,EAAIisF,EAAQlsF,OAAQC,IAAK,CACvC,MAAMggC,EAAMisD,EAAQjsF,GACpB,GAAW,MAAPggC,GAAeA,EAAI78B,OAAOoB,gBAAkBunF,EAASvnF,cACvD,OAAO,C,CAGX,OAAO,C,EAIX,OAAOunF,EAASvnF,gBAAkBxF,CACpC,CAEAL,yBAAyB6yC,EAAsBi6C,GAC7C,SAAI1G,GAAgB0C,SAASj2C,EAAM05C,UAAWpuF,KAAKqvF,WAAWV,EAAOj6C,EAAM05C,cAGvEnG,GAAgB0C,SAASj2C,EAAM25C,YAAaruF,KAAKqvF,WAAWV,EAAOj6C,EAAM25C,gBAI3EpG,GAAgB0C,SAASj2C,EAAM,gBAC/B10C,KAAKqvF,WAAWV,EAAOj6C,EAAM,oBAI3BuzC,GAAgB0C,SAASj2C,EAAM45C,eAAgBtuF,KAAKqvF,WAAWV,EAAOj6C,EAAM45C,mBAI9ErG,GAAgB0C,SAASj2C,EAAM,iBAC/B10C,KAAKqvF,WAAWV,EAAOj6C,EAAM,qBAK7BuzC,GAAgB0C,SAASj2C,EAAM,gBAC/B10C,KAAKqvF,WAAWV,EAAOj6C,EAAM,mBAK7BuzC,GAAgB0C,SAASj2C,EAAM,iBAC/B10C,KAAKqvF,WAAWV,EAAOj6C,EAAM,oBAMjC,CAEQ7yC,kBAAkB60D,EAAmBjpD,GAC3C,GAAe,MAAXipD,GAAsC,IAAnBA,EAAQxzD,QAAyB,MAATuK,GAA2B,KAAVA,EAC9D,OAAO,EAGTA,EAAQA,EACLlJ,QAAQ,kBAAmB,IAC3B+B,OACAoB,cAEH,IAAK,IAAIvE,EAAI,EAAGA,EAAIuzD,EAAQxzD,OAAQC,IAClC,GAAIsK,EAAMhH,QAAQiwD,EAAQvzD,KAAO,EAC/B,OAAO,EAIX,OAAO,CACT,CAEAtB,gBAAgBc,GACd,OAAOA,GAAe,KAARA,CAChB,CAEAd,6BACE4oF,EACAlB,GAEA,IAAI+F,EAA2B,KAC3BC,EAAmC,KAEvC,IAAK,MAAM3E,KAAQH,EAEbA,EAAaz0E,eAAe40E,IAASH,EAAaG,GAAMC,WAC1DyE,EAAY7E,EAAaG,GAEO,aAA5BH,EAAaG,GAAM1gF,OACrBqlF,EAAoB9E,EAAaG,KAYvC,OANI2E,EACFhG,EAAW5R,OAAOphE,KAAK,CAAC,gBAAiBg5E,EAAkB3E,OAClD0E,GACT/F,EAAW5R,OAAOphE,KAAK,CAAC,gBAAiB+4E,EAAU1E,OAG9CrB,CACT,CAEA1nF,kBAAkB0nF,EAA4B70C,EAAsBjnC,GAC9DinC,EAAM63C,WAAa9+E,GAASA,EAAMvK,OAASwxC,EAAM63C,YACnD9+E,EAAQA,EAAMjK,OAAO,EAAGiK,EAAMvK,SAEV,SAAlBwxC,EAAMo2C,UACRvB,EAAW5R,OAAOphE,KAAK,CAAC,gBAAiBm+B,EAAMk2C,OAC/CrB,EAAW5R,OAAOphE,KAAK,CAAC,gBAAiBm+B,EAAMk2C,QAEjDrB,EAAW5R,OAAOphE,KAAK,CAAC,eAAgBm+B,EAAMk2C,KAAMn9E,GACtD,CAEA5L,2BAA2B6yC,GACzB,MAAyB,SAAlBA,EAAMo2C,OACf,E,uTCn1CK,MAAe0E,GAGpB3tF,gBAAgBoL,GACd,OAAQA,EAAK/C,MACX,IAAK,eACH,OAAO,IAAIulF,GAAyBxiF,EAAKJ,KAE3C,IAAK,WACH,OAAO,IAAI6iF,GAAiCziF,EAAKJ,IAAKI,EAAKyJ,YAE7D,QACE,OAAO,KAEb,EAGK,MAAM+4E,GACX3vF,YAAoB+M,GAAA,KAAAA,IAAAA,CAAc,CAE5BwgC,QAAQ5I,G,0CACZ,MAAM8K,QAAiB9K,EAAckrD,WAAW3vF,KAAK6M,KACrD,OAAO,IAAIm/B,GAAmBuD,EAChC,G,CAEAqgD,SACE,MAAO,CACL1lF,KAAM,eACN2C,IAAK7M,KAAK6M,IAEd,EAGK,MAAM6iF,GACX5vF,YAAoB+M,EAAqB6J,GAArB,KAAA7J,IAAAA,EAAqB,KAAA6J,WAAAA,CAAqB,CAExD22B,QAAQ5I,G,0CACZ,MAAMorD,QAAoBprD,EAAcqrD,eAAe9vF,KAAK0W,YACtD64B,QAAiB9K,EAAc+K,eAAe,IAAIzC,GAAU/sC,KAAK6M,KAAMgjF,GAC7E,OAAO,IAAI7jD,GAAmBuD,EAChC,G,CAEAqgD,SACE,MAAO,CACL1lF,KAAM,WACN2C,IAAK7M,KAAK6M,IACV6J,WAAY1W,KAAK0W,WAErB,E,kuBC9BK,MAAMq5E,GACXjwF,YACUuhC,EACA2uD,EACEC,EACAtrD,EACAC,GAJF,KAAAvD,sBAAAA,EACA,KAAA2uD,eAAAA,EACE,KAAAC,oBAAAA,EACA,KAAAtrD,WAAAA,EACA,KAAAC,aAAAA,CACT,CAEG6C,OAAO56B,EAAyB4J,G,gDAC9BzW,KAAK4kC,aAAasrD,mBAAmBrjF,EAAK,CAAE4J,OAAQA,UACpDzW,KAAKmwF,SAAStjF,EAAK4J,EAC3B,G,CAEMixB,WAAW0oD,G,gDACTpwF,KAAK4kC,aAAa8C,WAAW0oD,EACrC,G,CAEM9pD,UAAU8F,G,0CACA,MAAVA,UAIEpsC,KAAK4kC,aAAayrD,+BAA+B,YACjDrwF,KAAK4kC,aAAa0rD,+BAA+BlkD,GACzD,G,CAEM7F,iBAAiBgqD,G,0CACA,MAAjBA,UAIEvwF,KAAK4kC,aAAa4rD,uBAAuB,YACzCxwF,KAAK4kC,aAAa6rD,uBAAuBF,GACjD,G,CAEMxqB,WACJ2qB,EAAsC,GACtCC,EAAsD,I,0CAEtD,MAAMC,EAAmE,CAAC,EAkB1E,OAhBAF,EAAKppF,SAASuzD,IACZ+1B,EAAc/1B,EAAI/0D,IAAM,CACtBoE,KAAM,eACN2C,IAAKguD,EAAIhuD,IACV,IAGH8jF,EAAarpF,SAASuzD,IACpB+1B,EAAc/1B,EAAI/0D,IAAM,CACtBoE,KAAM,WACNwM,WAAYmkD,EAAInkD,WAChB7J,IAAKguD,EAAIhuD,IACV,UAGG7M,KAAK4kC,aAAaisD,6BAA6B,YACxC7wF,KAAK4kC,aAAaksD,6BAA6BF,EAC9D,G,CAEM9qB,gBAAgB3gD,G,0CACpB,MAAM2e,EAAoB,CAAC,EAM3B,OALA3e,EAAU7d,SAAS+D,IACjBy4B,EAAaz4B,EAASvF,IAAMuF,EAASwB,GAAG,UAGpC7M,KAAK4kC,aAAamsD,yBAAyB,YACpC/wF,KAAK4kC,aAAaosD,yBAAyBltD,EAC1D,G,CAEMiG,OAAOknD,EAA8Bx6E,G,0CACzC,MAAMy6E,QAAoBlxF,KAAK4kC,aAAausD,mBAAmB,CAAE16E,OAAQA,IAEzE,GAAmB,MAAfy6E,EACF,OAAOA,EAGTD,IAAAA,EAAc9uD,GAAiB0H,MAC/B,MAAMunD,QAAqBpxF,KAAKqxF,kBAAkBJ,EAAWx6E,GAO7D,OALoB,MAAhB26E,GAEFpxF,KAAKynC,OAAO2pD,EAAc36E,GAGrB26E,CACT,G,CAEMC,kBACJJ,EACAx6E,G,0CAEA,MAAM5J,QAAY7M,KAAKsxF,uBAAuBL,EAAWx6E,GACzD,GAAW,MAAP5J,EAAa,CACf,MAAMukF,EAAe,IAAIplD,GAAmBpqC,EAAMyB,eAAewJ,GAAKhJ,QAEtE,aAAY7D,KAAKuxF,YAAYH,IAMtBA,GALLpxF,KAAK2kC,WAAW6sD,QAAQ,6CAClBxxF,KAAKyxF,oBAAoBh7E,GACxB,K,CAKX,OAAO,IACT,G,CAEMi7E,a,0CACJ,aAAa1xF,KAAK4kC,aAAa8sD,YACjC,G,CAEMljB,wBAAwB5mC,EAAwB/6B,G,0CACpD,MAAM8kF,QAAsB3xF,KAAK0xF,aACjC,GAAsB,MAAlB9pD,GAA2C,MAAjB+pD,EAAuB,CACnD,MAAMC,QAAqB5xF,KAAK8nC,aAC9BF,EACA/6B,EACA+5B,GAAYmB,oBAEd,GAAoB,MAAhB6pD,GAAwBD,IAAkBC,EAC5C,OAAO,EAIT,MAAMC,QAAsB7xF,KAAK8nC,aAC/BF,EACA/6B,EACA+5B,GAAYkrD,qBAEd,GAAqB,MAAjBD,GAAyBF,IAAkBE,EAE7C,aADM7xF,KAAK0nC,WAAWkqD,IACf,C,CAIX,OAAO,CACT,G,CAGAG,UAAUllF,EAA0B,MAClC,OAAO7M,KAAKgyF,gBAAgBnlF,EAC9B,CAEMolF,e,0CACJ,MAAMC,QAA0BlyF,KAAK4kC,aAAaqtD,eAClD,GAAyB,MAArBC,EACF,OAAOA,EAGT,MAAM75E,QAAmBrY,KAAKmyF,gBAC9B,GAAkB,MAAd95E,EACF,OAAO,KAGT,MAAMqE,QAAkB1c,KAAKqhC,sBAAsB+wD,oBAAoB/5E,GAEvE,aADMrY,KAAK4kC,aAAaytD,aAAa31E,GAC9BA,CACT,G,CAEMy1E,gB,0CACJ,MAAMG,QAA4BtyF,KAAK4kC,aAAa2tD,yBACpD,GAA2B,MAAvBD,EACF,OAAOA,EAGT,MAAM/B,QAAsBvwF,KAAK4kC,aAAa4tD,yBAC9C,GAAqB,MAAjBjC,EACF,OAAO,KAGT,MAAMl4E,QAAmBrY,KAAKwvC,eAAe,IAAIzC,GAAUwjD,GAAgB,MAE3E,aADMvwF,KAAK4kC,aAAa4rD,uBAAuBn4E,GACxCA,CACT,G,CAEMo6E,eAAeh8E,EAAgBiG,G,0CAInC,GAHiB,MAAbA,IACFA,QAAkB1c,KAAKiyF,gBAEP,OAAdv1E,EACF,MAAM,IAAIrX,MAAM,4BAElB,MAAMqtF,QAAuB1yF,KAAKqhC,sBAAsBI,KAAK/kB,EAAW,UAClEi2E,QAAwB3yF,KAAKqhC,sBAAsBuxD,WACvDF,EACAj8E,EACA,GACA,UAEF,OAAOzW,KAAK6yF,WAAWF,EACzB,G,CAGMG,a,0CACJ,MAAM1sD,EAA0C,IAAIh/B,IAC9C2rF,QAAkC/yF,KAAK4kC,aAAaouD,+BAC1D,GAAiC,MAA7BD,GAAqCA,EAA0BjmF,KAAO,EACxE,OAAOimF,EAGT,MAAMnC,QAAsB5wF,KAAK4kC,aAAaquD,+BAC9C,GAAqB,MAAjBrC,EACF,OAAO,KAGT,IAAInpD,GAAS,EAEb,IAAK,MAAMgB,KAASrgC,OAAOG,KAAKqoF,GAAgB,CAC9C,GAAIxqD,EAAOqP,IAAIhN,GACb,SAGF,MAAMyqD,EAAY1D,GAA6B2D,SAASvC,EAAcnoD,IAChE2qD,QAAkBF,EAAU7lD,QAAQrtC,MAC1ComC,EAAO3+B,IAAIghC,EAAO2qD,GAElB3rD,GAAS,C,CAOX,OAJIA,UACIznC,KAAK4kC,aAAaisD,6BAA6BzqD,IAGhDA,CACT,G,CAEMsH,UAAUjF,G,0CACd,GAAa,MAATA,EACF,OAAO,KAGT,MAAM4qD,QAAgBrzF,KAAK8yF,aAC3B,OAAe,MAAXO,GAAoBA,EAAQ59C,IAAIhN,GAI7B4qD,EAAQ5yD,IAAIgI,GAHV,IAIX,G,CAGM6qD,kB,0CACJ,MAAMxvD,EAAgD,IAAI18B,IACpDmsF,QAA8BvzF,KAAK4kC,aAAa4uD,2BACtD,GAA6B,MAAzBD,GAAiCA,EAAsBzmF,KAAO,EAChE,OAAOymF,EAGT,MAAME,QAAwBzzF,KAAK4kC,aAAa8uD,2BAChD,GAAuB,MAAnBD,EACF,OAAO,KAGT,IAAIhsD,GAAS,EAEb,IAAK,MAAMgB,KAASgrD,EAAiB,CAEnC,IAAKA,EAAgBz9E,eAAeyyB,GAClC,SAGF,MAAM8G,QAAiBvvC,KAAK2vF,WAAW8D,EAAgBhrD,IACvD3E,EAAar8B,IAAIghC,EAAO,IAAIuD,GAAmBuD,IAC/C9H,GAAS,C,CAOX,OAJIA,UACIznC,KAAK4kC,aAAamsD,yBAAyBjtD,IAG5CA,CACT,G,CAEMgsD,eAAep5E,G,0CACnB,GAAkB,MAAdA,EACF,OAAO,KAGT,MAAMotB,QAAqB9jC,KAAKszF,kBAChC,OAAoB,MAAhBxvD,GAAyBA,EAAa2R,IAAI/+B,GAIvCotB,EAAarD,IAAI/pB,GAHf,IAIX,G,CAEM+jC,S,0CACJ,aACSz6C,KAAKgqC,0BACLhqC,KAAK4pC,aAAazH,GAAiB0H,eACnC7pC,KAAK4pC,aAAazH,GAAiBwxD,WAE9C,G,CAEM3pD,eAAevzB,G,0CACnB,OAA2E,aAA7DzW,KAAK4kC,aAAausD,mBAAmB,CAAE16E,OAAQA,IAC/D,G,CAEMmzB,aAAaqnD,EAA6Bx6E,G,0CAC9C,OAAQw6E,GACN,KAAK9uD,GAAiB0H,KACpB,OAA+E,aAAjE7pC,KAAK4kC,aAAagvD,uBAAuB,CAAEn9E,OAAQA,KACnE,KAAK0rB,GAAiBwxD,UACpB,OAAqF,WAAvE3zF,KAAK4kC,aAAaivD,4BAA4B,CAAEp9E,OAAQA,KACxE,QACE,OAAO,EAEb,G,CAEMq9E,Y,0CACJ,OAAqE,aAAvD9zF,KAAK4kC,aAAamvD,iCAClC,G,CAEMC,SAASC,GAAqB,EAAMx9E,G,gDAClCzW,KAAK4kC,aAAasrD,mBAAmB,KAAM,CAAEz5E,OAAQA,IACvDw9E,UACIj0F,KAAKyxF,oBAAoBh7E,GAEnC,G,CAEMy9E,eAAejD,G,0CACnBA,IAAc9uD,GAAiB0H,WACrB7pC,KAAK4kC,aAAauvD,uBAAuB,YACzCn0F,KAAK4kC,aAAawvD,4BAA4B,KAC1D,G,CAEMC,aAAa59E,G,0CACjB,aAAazW,KAAK4kC,aAAa8C,WAAW,KAAM,CAAEjxB,OAAQA,GAC5D,G,CAEM69E,YAAYC,EAAsB99E,G,gDAChCzW,KAAK4kC,aAAayrD,+BAA+B,KAAM,CAAE55E,OAAQA,IAClE89E,UACGv0F,KAAK4kC,aAAa0rD,+BAA+B,KAAM,CAAE75E,OAAQA,IAE3E,G,CAEM+9E,aAAaD,EAAsB99E,G,0CACvC,MAAMg+E,EAA+B,CACnCz0F,KAAK4kC,aAAa4rD,uBAAuB,KAAM,CAAE/5E,OAAQA,IACzDzW,KAAK4kC,aAAaytD,aAAa,KAAM,CAAE57E,OAAQA,KAKjD,OAHK89E,GACHE,EAAYl+E,KAAKvW,KAAK4kC,aAAa6rD,uBAAuB,KAAM,CAAEh6E,OAAQA,KAErEyW,QAAQ+hB,IAAIwlD,EACrB,G,CAEMC,aAAaH,EAAsB99E,G,gDACjCzW,KAAK4kC,aAAaisD,6BAA6B,KAAM,CAAEp6E,OAAQA,IAChE89E,UACGv0F,KAAK4kC,aAAaksD,6BAA6B,KAAM,CAAEr6E,OAAQA,IAEzE,G,CAEMk+E,kBAAkBJ,EAAsB99E,G,gDACtCzW,KAAK4kC,aAAamsD,yBAAyB,KAAM,CAAEt6E,OAAQA,IAC5D89E,UACGv0F,KAAK4kC,aAAaosD,yBAAyB,KAAM,CAAEv6E,OAAQA,IAErE,G,CAEMm+E,qBAAqBn+E,G,0CACzB,aAAazW,KAAK4kC,aAAaiwD,yBAAyB,KAAM,CAAEp+E,OAAQA,GAC1E,G,CAEMq+E,UAAUr+E,G,gDACRzW,KAAKg0F,UAAS,EAAMv9E,SACpBzW,KAAKq0F,aAAa59E,SAClBzW,KAAK00F,cAAa,EAAOj+E,SACzBzW,KAAK20F,mBAAkB,EAAOl+E,SAC9BzW,KAAKs0F,aAAY,EAAO79E,SACxBzW,KAAKw0F,cAAa,EAAO/9E,SACzBzW,KAAK40F,qBAAqBn+E,EAClC,G,CAEMs+E,Y,0CACJ,MAAMloF,QAAY7M,KAAK+pC,eAEjB/pC,KAAKynC,OAAO56B,EACpB,G,CAEMu9B,QACJn7B,EACA83C,EACA/xC,EACAC,G,0CAEA,IAAIpI,EAAmB,KACvB,GAAW,MAAPmI,GAAeA,IAAQuvC,GAAQC,cAQjC,MAAM,IAAIn/C,MAAM,gBAPhB,GAAqB,MAAjB4P,EACFA,EAAgB,SACX,GAAIA,EAAgB,IACzB,MAAM,IAAI5P,MAAM,qCAMpB,OAJEwH,QAAY7M,KAAKqhC,sBAAsBmhC,OAAOvzD,EAAU83C,EAAM,SAAU9xC,GAInE,IAAI+2B,GAAmBn/B,EAChC,G,CAEMmoF,eACJC,EACAluC,EACA/xC,EACAC,EACAigF,EAA4B,M,0CAE5B,GAAsB,MAAlBA,EAAwB,CAC1B,MAAMC,QAAwBn1F,KAAK4kC,aAAawwD,2BAChD,GAAuB,MAAnBD,EACF,MAAM,IAAI9vF,MAAM,+BAElB6vF,EAAiB,IAAInoD,GAAUooD,E,CAEjC,MAAME,QAAer1F,KAAKinD,WAAWguC,EAAKluC,EAAM/xC,EAAKC,GAC/CqgF,QAAet1F,KAAKwvC,eAAe0lD,EAAgBG,GACzD,OAAO,IAAIrpD,GAAmBspD,EAChC,G,CAEMC,e,0CACJ,MAAMC,QAAiBx1F,KAAKqhC,sBAAsB2lB,YAAY,IACxDtqC,QAAkB1c,KAAKiyF,eAE7B,MAAO,OADmBjyF,KAAKy1F,WAAWD,EAAU94E,GAC/B,IAAIsvB,GAAmBwpD,GAC9C,G,CAEM9uD,YAAY75B,G,0CAChB,MAAM6oF,QAAgB11F,KAAKqhC,sBAAsBs0D,mBAAmB,MAGpE,MAAO,CAFW/zF,EAAMyC,gBAAgBqxF,EAAQ,UACvB11F,KAAKw4C,QAAQk9C,EAAQ,GAAI7oF,GAEpD,G,CAEMo6C,WACJguC,EACAluC,EACA/xC,EACAC,G,0CAEA,MAAMogF,QAAer1F,KAAKoqC,QAAQ6qD,EAAKluC,EAAM/xC,EAAKC,GAClD,aAAajV,KAAK41F,WAAWP,EAC/B,G,CAEMpzB,YAAY4zB,G,0CAChB,MAAMC,QAAgB91F,KAAKqhC,sBAAsB00D,KAC/CF,EACA,iBACA,OACA,GACA,UAEF,OAAO,IAAI7pD,GAAmB8pD,EAChC,G,CAEMhuD,aACJ74B,EACApC,EACAmpF,G,0CAKA,GAHW,MAAPnpF,IACFA,QAAY7M,KAAK+pC,UAEH,MAAZ96B,GAA2B,MAAPpC,EACtB,MAAM,IAAIxH,MAAM,uBAGlB,MAAM4wF,EAAaD,IAAgBpvD,GAAYmB,mBAAqB,EAAI,EAClEtG,QAAazhC,KAAKqhC,sBAAsBmhC,OAAO31D,EAAIA,IAAKoC,EAAU,SAAUgnF,GAClF,OAAOr0F,EAAMyC,gBAAgBo9B,EAC/B,G,CAEM4c,WAAWxxC,G,0CACf,MAAMqpF,QAAel2F,KAAKm2F,wBAAwBtpF,GAC5Cu/B,QAAepsC,KAAKqhC,sBAAsB2lB,YAAY,IAC5D,OAAOhnD,KAAKo2F,YAAYF,EAAQ9pD,EAClC,G,CAEMiqD,aACJxpF,EACAu/B,G,0CAKA,OAHc,MAAVA,IACFA,QAAepsC,KAAK+xF,aAEf/xF,KAAKo2F,YAAYvpF,EAAKu/B,EAAOv/B,IACtC,G,CAMM2rC,QAAQ89C,EAAkCzpF,G,0CAE9C,OADAA,QAAY7M,KAAKm2F,wBAAwBtpF,SAC5B7M,KAAKgwF,eAAex3C,QAAQ89C,EAAYzpF,EACvD,G,CAMM0xC,eAAe+3C,EAAyBzpF,G,0CAE5C,OADAA,QAAY7M,KAAKm2F,wBAAwBtpF,GAClC7M,KAAKgwF,eAAezxC,eAAe+3C,EAAYzpF,EACxD,G,CAEM4oF,WAAWxoF,EAAmByP,G,0CAIlC,GAHiB,MAAbA,IACFA,QAAkB1c,KAAKiyF,gBAER,MAAbv1E,EACF,MAAM,IAAIrX,MAAM,2BAGlB,MAAM0vC,QAAiB/0C,KAAKqhC,sBAAsBo0D,WAAWxoF,EAAMyP,EAAW,QAC9E,OAAO,IAAIqwB,GAAUnC,GAAeuD,qBAAsBvsC,EAAMyC,gBAAgB0wC,GAClF,G,CAEM46C,WAAW4G,EAAkBC,G,0CACjC,MAAMpoD,EAAemoD,EAASlvF,MAAM,KACpC,IACI2mC,EADA/B,EAA0B,KAG9B,GAA4B,IAAxBmC,EAAalrC,OACf+oC,EAAUrB,GAAesD,uBACzBF,EAAY,CAACI,EAAa,SACrB,GAA4B,IAAxBA,EAAalrC,OACtB,IACE+oC,EAAU1oC,SAAS6qC,EAAa,GAAI,MACpCJ,EAAYI,EAAa,GAAG/mC,MAAM,I,CAClC,MAAOJ,GACPjH,KAAK2kC,WAAWziB,MAAMjb,E,CAI1B,OAAQglC,GACN,KAAKrB,GAAesD,uBACpB,KAAKtD,GAAeuD,qBACpB,KAAKvD,GAAe6rD,kCACpB,KAAK7rD,GAAe8rD,gCAClB,MACF,QACE,MAAM,IAAIrxF,MAAM,wBAGpB,GAAiB,MAAb2oC,GAAqBA,EAAU9qC,QAAU,EAC3C,MAAM,IAAImC,MAAM,0BAGlB,MAAM4H,EAAOrL,EAAMyB,eAAe2qC,EAAU,IAAInqC,OAC1CwU,EAAam+E,QAAAA,QAA0Bx2F,KAAKmyF,gBAClD,GAAkB,MAAd95E,EACF,MAAM,IAAIhT,MAAM,mBAGlB,IAAI8kE,EAAyB,OAC7B,OAAQl+B,GACN,KAAKrB,GAAesD,uBACpB,KAAKtD,GAAe6rD,kCAClBtsB,EAAM,SACN,MACF,KAAKv/B,GAAeuD,qBACpB,KAAKvD,GAAe8rD,gCAClB,MACF,QACE,MAAM,IAAIrxF,MAAM,wBAGpB,OAAOrF,KAAKqhC,sBAAsBsuD,WAAW1iF,EAAMoL,EAAY8xD,EACjE,G,CAMM36B,eAAemnD,EAAsB9pF,G,0CACzC,MAAM+pF,QAAkB52F,KAAKm2F,wBAAwBtpF,GACrD,OAAO7M,KAAKgwF,eAAexgD,eAAemnD,EAAWC,EACvD,G,CAMMjpD,cAAcgpD,EAAsB9pF,G,0CAExC,OADAA,QAAY7M,KAAKm2F,wBAAwBtpF,SAC5B7M,KAAKgwF,eAAeriD,cAAcgpD,EAAW9pF,EAC5D,G,CAMMi0C,iBAAiB+1C,EAA2BhqF,G,0CAChD,GAAiB,MAAbgqF,EACF,MAAM,IAAIxxF,MAAM,sCAKlB,OAFAwH,QAAY7M,KAAKm2F,wBAAwBtpF,GAElC7M,KAAKgwF,eAAexgD,eAAeqnD,EAAWhqF,EACvD,G,CAIMyqD,aAAa5E,EAAatc,G,0CAC9B,IAAI0gD,EAAO,EACX,MAAMC,EAAQ3gD,EAAMsc,EAAM,EACpBskC,EAAapxF,KAAK2kD,KAAK3kD,KAAKqxF,KAAKF,IACvC,GAAIC,EAAa,GACf,MAAM,IAAI3xF,MAAM,mDAGlB,MAAM6xF,EAActxF,KAAK2kD,KAAKysC,EAAa,GACrCG,EAAOvxF,KAAK6lE,IAAI,EAAGurB,GAAc,EAIjCI,EAAY,IAAIx0F,iBAAiB5C,KAAKqhC,sBAAsB2lB,YAAYkwC,IAE9E,IAAI7uE,EAAwB,GAAnB6uE,EAAc,GACvB,IAAK,IAAI/zF,EAAI,EAAGA,EAAI+zF,EAAa/zF,IAC/B2zF,GAAQM,EAAUj0F,GAAKyC,KAAK6lE,IAAI,EAAGpjD,GACnCA,GAAK,EAMP,OAFAyuE,GAAcK,EAEVL,GAAQC,EAEH/2F,KAAKs3D,aAAa5E,EAAKtc,GAIzBsc,EAAMokC,CACf,G,CAEMvF,YAAY1kF,G,0CAChB,IACE,MAAM0jF,QAAsBvwF,KAAK4kC,aAAa4tD,yBACxCpmD,QAAepsC,KAAKgyF,gBAAgBnlF,GAC1C,GAAqB,MAAjB0jF,GAAmC,MAAVnkD,EAC3B,OAAO,EAGT,MAAM/zB,QAAmBrY,KAAKwvC,eAAe,IAAIzC,GAAUwjD,GAAgBnkD,SACrEpsC,KAAKqhC,sBAAsB+wD,oBAAoB/5E,E,CACrD,MAAOpR,GACP,OAAO,C,CAGT,OAAO,CACT,G,CAIgBkpF,SAAStjF,EAAyB4J,G,iDACtCzW,KAAKq3F,eAAel1D,GAAiB0H,KAAMpzB,UAC7CzW,KAAK4kC,aAAauvD,uBAAuBtnF,EAAI0/B,OAAQ,CAAE91B,OAAQA,WACtDzW,KAAKq3F,eAAel1D,GAAiBwxD,UAAWl9E,UACzDzW,KAAK4kC,aAAawvD,4BAA4BvnF,EAAI0/B,OAAQ,CAAE91B,OAAQA,WAEpEzW,KAAK4kC,aAAauvD,uBAAuB,KAAM,CAAE19E,OAAQA,UACzDzW,KAAK4kC,aAAawvD,4BAA4B,KAAM,CAAE39E,OAAQA,IAExE,G,CAEgB4gF,eAAepG,EAA6Bx6E,G,0CAC1D,IAAI4gF,GAAiB,EACrB,GAAIpG,IAAc9uD,GAAiB0H,KAAM,CAEvCwtD,EAAiC,aADNr3F,KAAK4kC,aAAa0yD,gBAAgB,CAAE7gF,OAAQA,I,MAElE,GAAIw6E,IAAc9uD,GAAiBwxD,UAAW,CAEnD0D,SAD8Br3F,KAAK4kC,aAAa2yD,mBAAmB,CAAE9gF,OAAQA,MACzCzW,KAAKiwF,oBAAoBuH,uB,CAE/D,OAAOH,CACT,G,CAEgB/F,uBAAuBL,EAA6Bx6E,G,0CAClE,OAAOw6E,IAAc9uD,GAAiB0H,WAC5B7pC,KAAK4kC,aAAagvD,uBAAuB,CAAEn9E,OAAQA,UACnDzW,KAAK4kC,aAAa6yD,4BAA4B,CAAEhhF,OAAQA,GACpE,G,CAEM0/E,wBAAwBtpF,G,0CAC5B,GAAW,MAAPA,EACF,OAAOA,EAGT,MAAMu/B,QAAepsC,KAAK+xF,YAC1B,OAAc,MAAV3lD,EACKA,QAKIpsC,KAAK+pC,QACpB,G,CAEc6rD,WAAW/oF,G,0CACvB,MAAM6qF,EAAS,IAAI90F,WAAW,IACxBwpC,QAAepsC,KAAKqhC,sBAAsBuxD,WAAW/lF,EAAIA,IAAK,MAAO,GAAI,UACzEw/B,QAAersC,KAAKqhC,sBAAsBuxD,WAAW/lF,EAAIA,IAAK,MAAO,GAAI,UAG/E,OAFA6qF,EAAOjwF,IAAI,IAAI7E,WAAWwpC,IAC1BsrD,EAAOjwF,IAAI,IAAI7E,WAAWypC,GAAS,IAC5B,IAAIL,GAAmB0rD,EAAO7zF,OACvC,G,CAEcgvF,WAAWpxD,EAAmBk2D,EAAiB,I,0CAC3D,MAAMC,EAAiBhyF,KAAKiyF,IAAIhjC,GAAgB3xD,QAAU0C,KAAKiyF,IAAI,GACnE,IAAIxhC,EAAWzwD,KAAK2kD,KAAKotC,EAAiBC,GAE1C,MAAME,EAAUlzF,MAAM9B,KAAK,IAAIF,WAAW6+B,IAE1C,GAAI40B,EAAWuhC,EAD2B,EAAjBE,EAAQ50F,OAE/B,MAAM,IAAImC,MAAM,gDAGlB,MAAM0yF,EAAmB,GACzB,IAAIC,EAAa,aAAiBF,EAAS,KAC3C,KAAOzhC,KAAY,CACjB,MAAM4hC,EAAYD,EAAWE,IAAIrjC,GAAgB3xD,QACjD80F,EAAaA,EAAWG,OAAOtjC,GAAgB3xD,QAC/C60F,EAAOxhF,KAAKs+C,GAAgBojC,G,CAE9B,OAAOF,CACT,G,CAEc3B,YACZvpF,EACAu/B,G,0CAEA,IAAIgsD,EAAuB,KAC3B,GAA2B,KAAvBvrF,EAAIA,IAAI7I,WAAmB,CAC7B,MAAM0zF,QAAe13F,KAAK41F,WAAW/oF,GACrCurF,QAAkBp4F,KAAKw4C,QAAQpM,EAAQsrD,E,KAClC,IAA2B,KAAvB7qF,EAAIA,IAAI7I,WAGjB,MAAM,IAAIqB,MAAM,qBAFhB+yF,QAAkBp4F,KAAKw4C,QAAQpM,EAAQv/B,E,CAIzC,MAAO,CAAC,IAAIm/B,GAAmBI,GAASgsD,EAC1C,G,CAEc3G,oBAAoBh7E,G,gDAC1BzW,KAAK4kC,aAAauvD,uBAAuB,KAAM,CAAE19E,OAAQA,UACzDzW,KAAK4kC,aAAawvD,4BAA4B,KAAM,CAAE39E,OAAQA,GACtE,G,CAEcu7E,gBAAgBnlF,EAA0B,M,0CACtD,MAAMqkF,QAAoBlxF,KAAK4kC,aAAayzD,iCAC5C,GAAmB,MAAfnH,EACF,OAAOA,EAGT,MAAM9kD,QAAepsC,KAAK4kC,aAAamvD,iCACvC,GAAc,MAAV3nD,EACF,OAAO,KAMT,GAHW,MAAPv/B,IACFA,QAAY7M,KAAK+pC,UAER,MAAPl9B,EACF,OAAO,KAGT,IAAIyrF,EACJ,MAAMC,EAAe,IAAIxrD,GAAUX,GACnC,GAAImsD,EAAaxqD,iBAAmBnD,GAAesB,cACjDosD,QAAkBt4F,KAAKwvC,eAAe+oD,EAAc1rF,OAC/C,IAAI0rF,EAAaxqD,iBAAmBnD,GAAeuB,yBAIxD,MAAM,IAAI9mC,MAAM,4BAJkE,CAClF,MAAMqyF,QAAe13F,KAAK41F,WAAW/oF,GACrCyrF,QAAkBt4F,KAAKwvC,eAAe+oD,EAAcb,E,EAItD,GAAiB,MAAbY,EACF,OAAO,KAET,MAAME,EAAqB,IAAIxsD,GAAmBssD,GAElD,aADMt4F,KAAK4kC,aAAayrD,+BAA+BmI,GAChDA,CACT,G,EAtoBA,IADC3tD,IAAc,IAAM,c,mDACNmB,K,gEAsDf,IADCnB,IAAc,IAAM,e,uHAgDrB,IADCA,IAAc,IAAM,oB,gICxQX4tD,G,uSCGL,MAAMC,WAA6B3I,GACxBuB,uBAAuBL,G,4IACrC,MAAkB,cAAdA,SACIjxF,KAAKiwF,oBAAoB0I,wBACH,QAApB,QAAM34F,KAAK+pC,gBAAS,eAAEwC,cAGnB,EAAM+kD,uBAAsB,UAACL,E,KCN/B,MAAM2H,GACnBrrE,KAAKymD,EAAoBC,EAAW,CAAC,GACnC,OAAO5B,GAAWa,YAAYc,EAAYC,EAC5C,ECLa,MAAM4kB,GACnBtrE,KAAKymD,EAAoBC,EAAW,CAAC,GACnC,MAAMz+D,EAAUpN,OAAOC,OAAO,CAAC,EAAG,CAAE2qE,QAASgB,GAAcC,GAC1D1yE,OAAeu3F,kCAAkCtjF,EACpD,GHNF,SAAYijF,GACV,YACA,oBACA,oBACA,kBACA,YACA,gCACD,CAPD,CAAYA,KAAAA,GAAU,K,2SIStB,MAAMM,GAA0B,IAEjB,MAAMC,GAQnBl5F,YACU4kC,EACAE,EACAq0D,EACAC,GAHA,KAAAx0D,iBAAAA,EACA,KAAAE,aAAAA,EACA,KAAAq0D,uBAAAA,EACA,KAAAC,kBAAAA,EAXF,KAAAC,mBAAqB,IAAI/xF,IACzB,KAAAgyF,uBAAyB,IAAIhyF,IAI7B,KAAAiyF,YAA0B,IAO/B,CAEHlvF,YACE,OAAInK,KAAKq5F,eAKuC,IAA9CnwF,UAAUC,UAAU1C,QAAQ,eACgB,IAA5CyC,UAAUC,UAAU1C,QAAQ,WAE5BzG,KAAKq5F,YAAcz5F,EAAW05F,iBAE1B/3F,OAAeg4F,KAASA,IAAIC,QAC7Bj4F,OAAe8H,OAClBH,UAAUC,UAAU1C,QAAQ,UAAY,EAExCzG,KAAKq5F,YAAcz5F,EAAW65F,gBACqB,IAA1CvwF,UAAUC,UAAU1C,QAAQ,SACrCzG,KAAKq5F,YAAcz5F,EAAW85F,eACyB,IAA9CxwF,UAAUC,UAAU1C,QAAQ,aACrCzG,KAAKq5F,YAAcz5F,EAAW+5F,iBACpBp4F,OAAekxE,SAAuD,IAA7CvpE,UAAUC,UAAU1C,QAAQ,YAC/DzG,KAAKq5F,YAAcz5F,EAAWg6F,iBACwB,IAA7C1wF,UAAUC,UAAU1C,QAAQ,cACrCzG,KAAKq5F,YAAcz5F,EAAWi6F,kBArBvB75F,KAAKq5F,WAyBhB,CAEAjvF,kBAEE,OADexK,EAAWI,KAAKmK,aAAazC,cAC9BnD,QAAQ,YAAa,GACrC,CAEA4nB,gBACE,OAAOssE,GAAWqB,OACpB,CAEAC,YACE,OAAO/5F,KAAKmK,cAAgBvK,EAAW05F,gBACzC,CAEAU,WACE,OAAOh6F,KAAKmK,cAAgBvK,EAAWg6F,eACzC,CAEAK,SACE,OAAOj6F,KAAKmK,cAAgBvK,EAAW85F,aACzC,CAEAQ,UACE,OAAOl6F,KAAKmK,cAAgBvK,EAAW65F,cACzC,CAEAU,YACE,OAAOn6F,KAAKmK,cAAgBvK,EAAW+5F,gBACzC,CAEAS,WACE,OAAOp6F,KAAKmK,cAAgBvK,EAAWi6F,eACzC,CAEAQ,OACE,OAAO,CACT,CAEAC,gBACE,OAAO,CACT,CAEMC,a,0CACJ,SAAUloB,GAAWmoB,cACnB,OAAO,EAGT,GAAIx6F,KAAKo6F,WACP,OAAO,EAGT,MAAMK,EAAcz6F,KAAK06F,kBAGzB,GADiB,MAAfD,GAAuBhoB,OAAO7qB,UAAU+rB,SAAS,CAAEzpE,KAAMuwF,IAAev3F,OAAS,EAEjF,OAAO,EAIT,OADgBuvE,OAAO7qB,UAAU+rB,SAAS,CAAEzpE,KAAM,QAAShH,OAAS,CAEtE,G,CAEAy3F,cACE,OAAO,IACT,CAEAnoD,UAAUzjC,EAAa2nD,GACrB2b,GAAWuoB,aAAa7rF,EAAK2nD,IAAqC,IAA1BA,EAAQkd,cAClD,CAEA31C,wBACE,OAAO/Q,QAAQ2V,QAAQwvC,GAAWp0C,wBACpC,CAEA+uC,iBAAiBhkE,GACf,MAAsC,oBAAxB6xF,mBAChB,CAEA9tB,cACE,OAAO,CACT,CAEA+tB,UACE5wF,EACA0D,EACAkZ,EACA4vC,GAEA12D,KAAK0kC,iBAAiBnX,KAAK,YAAa,CACtCzG,KAAMA,EACNlZ,MAAOA,EACP1D,KAAMA,EACNwsD,QAASA,GAEb,CAEAqkC,WACExuE,EACA3e,EACAotF,EACAC,EACA/wF,EACAgxF,GAAa,GAEb,MAAMC,EAAWv1F,KAAK+sD,MAAM/sD,KAAKC,SAAW6C,OAAOgtE,kBAUnD,OATA11E,KAAK0kC,iBAAiBnX,KAAK,aAAc,CACvCzG,KAAMo0E,EAAa,KAAO3uE,EAC1B6uE,KAAMF,EAAa3uE,EAAO,KAC1B3e,MAAOA,EACPotF,YAAaA,EACbC,WAAYA,EACZ/wF,KAAMA,EACNixF,SAAUA,IAEL,IAAIjuE,SAAkB2V,IAC3B7iC,KAAKm5F,mBAAmB1xF,IAAI0zF,EAAU,CAAEt4D,QAASA,EAAS5wB,KAAM,IAAIvF,MAAS,GAEjF,CAEAmhB,QACE,OAAO,CACT,CAEAyQ,aACE,OAAO,CACT,CAEAypC,gBAAgBjhD,EAAc4vC,GAC5B,IAAI1tD,EAAMzH,OACN85F,EAAM95F,OAAOmI,SACbgtD,IAAYA,EAAQn1D,QAAUm1D,EAAQ1tD,MACxCA,EAAM0tD,EAAQn1D,QAAUm1D,EAAQ1tD,IAChCqyF,EAAMryF,EAAIU,UACDgtD,GAAWA,EAAQ2kC,MAC5BA,EAAM3kC,EAAQ2kC,KAEhB,MAAMrzB,IAAWtR,KAAYA,EAAQsR,SAC/BszB,EAAkB5kC,GAAWA,EAAQ4kC,QAAU5kC,EAAQ4kC,QAAU,KAEvE,GAAIt7F,KAAKo6F,WACP7kB,GAAUgmB,iBAAiB,kBAAmBz0E,GAAMoc,MAAK,KAClD8kC,GAA2C,MAA/BhoE,KAAKi5F,wBACpBj5F,KAAKi5F,uBAAuBnyE,EAAMw0E,E,SAGjC,GACLt7F,KAAK+5F,aACJ/wF,EAAYE,UAAUsyF,WACtBxyF,EAAYE,UAAUsyF,UAAUC,UAEhCzyF,EAAYE,UAAUsyF,UAAUC,UAAU30E,GAAMoc,MAAK,KAC/C8kC,GAA2C,MAA/BhoE,KAAKi5F,wBACpBj5F,KAAKi5F,uBAAuBnyE,EAAMw0E,E,SAGjC,GAAKtyF,EAAY0yF,eAAkB1yF,EAAY0yF,cAAcC,QAEjE3yF,EAAY0yF,cAAcC,QAAQ,OAAQ70E,GACtCkhD,GAA2C,MAA/BhoE,KAAKi5F,wBACpBj5F,KAAKi5F,uBAAuBnyE,EAAMw0E,QAE/B,GAAID,EAAIO,uBAAyBP,EAAIO,sBAAsB,QAAS,CACrE57F,KAAKg6F,YAAuB,KAATlzE,IACrBA,EAAO,MAGT,MAAM+0E,EAAWR,EAAI1xF,cAAc,YACnCkyF,EAASC,YAAsB,MAARh1E,GAAyB,KAATA,EAAc,IAAMA,EAE3D+0E,EAASE,MAAMC,SAAW,QAC1BX,EAAI9uE,KAAK0vE,YAAYJ,GACrBA,EAASK,SAET,IAEMb,EAAIc,YAAY,UAAYn0B,GAA2C,MAA/BhoE,KAAKi5F,wBAC/Cj5F,KAAKi5F,uBAAuBnyE,EAAMw0E,E,CAEpC,MAAOr0F,GAEPm1F,QAAQC,KAAK,4BAA6Bp1F,E,SAE1Co0F,EAAI9uE,KAAK+vE,YAAYT,E,EAG3B,CAEM/zB,kBAAkBpR,G,0CACtB,IAAI1tD,EAAMzH,OACN85F,EAAM95F,OAAOmI,SAQjB,GAPIgtD,IAAYA,EAAQn1D,QAAUm1D,EAAQ1tD,MACxCA,EAAM0tD,EAAQn1D,QAAUm1D,EAAQ1tD,IAChCqyF,EAAMryF,EAAIU,UACDgtD,GAAWA,EAAQ2kC,MAC5BA,EAAM3kC,EAAQ2kC,KAGZr7F,KAAKo6F,WACP,aAAa7kB,GAAUgmB,iBAAiB,qBACnC,GACLv7F,KAAK+5F,aACJ/wF,EAAYE,UAAUsyF,WACtBxyF,EAAYE,UAAUsyF,UAAUe,SAEjC,aAAcvzF,EAAYE,UAAUsyF,UAAUe,WACzC,GAAIlB,EAAIO,uBAAyBP,EAAIO,sBAAsB,SAAU,CAC1E,MAAMC,EAAWR,EAAI1xF,cAAc,YAEnCkyF,EAASE,MAAMC,SAAW,QAC1BX,EAAI9uE,KAAK0vE,YAAYJ,GACrBA,EAASW,QACT,IAEE,GAAInB,EAAIc,YAAY,SAClB,OAAON,EAASpuF,K,CAElB,MAAOxG,GAEPm1F,QAAQC,KAAK,8BAA+Bp1F,E,SAE5Co0F,EAAI9uE,KAAK+vE,YAAYT,E,EAGzB,OAAO,IACT,G,CAEAY,qBAAqBtB,EAAkBuB,GACrC,GAAI18F,KAAKm5F,mBAAmB1jD,IAAI0lD,GAAW,CACtBn7F,KAAKm5F,mBAAmB14D,IAAI06D,GACpCt4D,QAAQ65D,GACnB18F,KAAKm5F,mBAAmBl2D,OAAOk4D,E,CAIjCn7F,KAAKm5F,mBAAmB7xF,SAAQ,CAAC67B,EAAKt2B,MACxB,IAAIH,MAAO6vC,UAAYpZ,EAAIlxB,KAAKsqC,UAClCw8C,IACR/4F,KAAKm5F,mBAAmBl2D,OAAOp2B,E,GAGrC,CAEM8vF,6BACJxB,EACAyB,EACA3tF,G,0CAEA,IAAIm3B,GAAS,EACb,GAAIpmC,KAAKo5F,uBAAuB3jD,IAAI0lD,GAAW,CAC7C,MAAM0B,EAAa78F,KAAKo5F,uBAAuB34D,IAAI06D,UACzC0B,EAAWC,WAAWF,EAAU3tF,MACxCjP,KAAKo5F,uBAAuBn2D,OAAOk4D,GACnC/0D,GAAS,E,CAYb,OAPApmC,KAAKo5F,uBAAuB9xF,SAAQ,CAAC67B,EAAKt2B,MAC5B,IAAIH,MAAO6vC,UAAYpZ,EAAIlxB,KAAKsqC,UAClCw8C,IACR/4F,KAAKo5F,uBAAuBn2D,OAAOp2B,E,IAIhCu5B,CACT,G,CAEM22D,oB,0CAEJ,MAAwB,mBADG1qB,GAAWgD,mBACrB2nB,MAIbh9F,KAAK+5F,aACAx2F,gBAAgB8vE,QAAQF,QAAQ8pB,kBAAkBxxC,QAAQpkD,MAAM,KAAK,GAAI,KAAO,GAI3F,G,CAEAsxF,wBACE,OAAO34F,KAAKk5F,mBACd,CAEAwB,kBACE,OAAKn5F,OAAekxE,OAAOyqB,eAAiBl9F,KAAK+5F,YACxC,UACE/5F,KAAKk6F,WAA4B,oBAARX,KAAuBA,IAAI2D,cACtD,gBAGF,IACT,CAEA1F,wBACE,OAAO,CACT,E,IC9VU2F,G,mTCSL,MAAeC,WAPf,UDFP,SAAYD,GACV,cACA,cACA,iBACD,CAJD,CAAYA,KAAAA,GAAe,KEGpB,MAAME,GAUXv9F,YAAYw9F,GANZ,KAAA32B,SAA2C,CAAC,EAG5C,KAAA42B,sBAAkC,GAClC,KAAAC,gBAAgD,CAAC,EAG/Cx9F,KAAKs9F,QAAUA,CACjB,E,kuBCqBF,MAAM/0F,GACG,QADHA,GAEI,SAFJA,GAGmB,wBAHnBA,GAIU,eAJVA,GAKiB,sBALjBA,GAMa,kBAGbk1F,GACK,kBADLA,GAEU,uBAFVA,GAGO,aAGN,MAAM,GAiBX39F,YACY6gC,EACA+8D,EACAC,EACAh5D,EACAi5D,EACAC,EACAC,GAA2B,GAN3B,KAAAn9D,eAAAA,EACA,KAAA+8D,qBAAAA,EACA,KAAAC,qBAAAA,EACA,KAAAh5D,WAAAA,EACA,KAAAi5D,sBAAAA,EACA,KAAAC,aAAAA,EACA,KAAAC,gBAAAA,EAnBZ,KAAAn3B,SAAW,IAAIo3B,GAAA,EAAgD,CAAC,GACxD,KAAAC,qBAAuB,IAAID,GAAA,EAAwB,MAC3D,KAAAE,eAAiBj+F,KAAKg+F,qBAAqBE,eAEnC,KAAAC,6BAA+B,IAAIJ,GAAA,GAAyB,GACpE,KAAAK,uBAAyBp+F,KAAKm+F,6BAA6BD,eAEnD,KAAAG,eAAgB,EAChB,KAAAC,oBAAqB,EAErB,KAAAC,iBAAmB,IAAIn3F,IAY7BpH,KAAKg+F,qBAAqBrtC,WAAiBl6C,GAAW,mCACtC,MAAVA,GAAkE,GAAhDzW,KAAKm+F,6BAA6Bv3B,aAEnC,MAAVnwD,GACTzW,KAAKm+F,6BAA6BK,MAAK,GAMzCx+F,KAAKm+F,6BAA6BK,KAA0C,aAA9Bx+F,KAAKmxF,uBACrD,KACF,CAEMrnF,O,0CACA9J,KAAKq+F,uBAICr+F,KAAK49F,sBAAsBa,0BAC7Bz+F,KAAK49F,sBAAsBc,iBAG7B1+F,KAAKoO,QAAQ80B,MAAY90B,GAAU,mCAC1B,MAATA,QACIpO,KAAK2+F,SAAS,IAAItB,GAA8Br9F,KAAK4+F,kBAE3D5+F,KAAKs+F,oBAAqB,CAE9B,YACMt+F,KAAK6+F,mBACX7+F,KAAKq+F,eAAgB,EACvB,G,CAEMQ,mB,0CACA7+F,KAAKs+F,2BAIHt+F,KAAK8+F,aAAmB1wF,GAAU,mC,MACtCA,EAAMmvF,sBACiE,QAApE,QAAMv9F,KAAK2gC,eAAeF,IAAcl4B,WAA4B,QAAI,GAC3E,IAAK,MAAMpF,KAAKiL,EAAMmvF,sBACX,MAALp6F,UACInD,KAAK++F,oBAAoB3wF,EAAMmvF,sBAAsBp6F,KAG/D,MAAM67F,QAAyBh/F,KAAK2gC,eAAeF,IAAYl4B,IAO/D,OANwB,MAApBy2F,IACF5wF,EAAM6wF,aAAeD,SAEjBh/F,KAAKk/F,eACXl/F,KAAKg+F,qBAAqBQ,KAAKpwF,EAAM6wF,cAE9B7wF,CACT,MACF,G,CAEM2wF,oBAAoBtoF,G,0CACV,MAAVA,UAGEzW,KAAK8+F,aAAmB1wF,GAAU,mCACtCA,EAAMu4D,SAASlwD,GAAUzW,KAAKS,gBAC9B,MAAM0+F,QAAoBn/F,KAAKo/F,mBAAmB,CAAE3oF,OAAQA,IAE5D,OADArI,EAAMu4D,SAASlwD,GAAQ2R,QAAU+2E,EAAY/2E,QACtCha,CACT,MACF,G,CAEM23B,WAAWs5D,G,0CACfA,QAAgBr/F,KAAKs/F,0BAA0BD,SACzCr/F,KAAK8+F,aAAmB1wF,GAAU,mCAItC,OAHAA,EAAMmvF,sBAAsBhnF,KAAK8oF,EAAQj3E,QAAQ3R,cAC3CzW,KAAK2gC,eAAeQ,KAAK54B,GAA4B6F,EAAMmvF,uBACjEnvF,EAAMu4D,SAAS04B,EAAQj3E,QAAQ3R,QAAU4oF,EAClCjxF,CACT,YACMpO,KAAKu/F,0BAA0BF,SAC/Br/F,KAAKw/F,eAAc,IAAI9yF,MAAO6vC,UAAW,CAAE9lC,OAAQ4oF,EAAQj3E,QAAQ3R,eACnEzW,KAAKy/F,cAAcJ,EAAQj3E,QAAQ3R,QACzCzW,KAAKg+F,qBAAqBQ,KAAKa,EAAQj3E,QAAQ3R,OACjD,G,CAEMgpF,cAAchpF,G,0CAClBzW,KAAK0/F,wCACC1/F,KAAK8+F,aAAmB1wF,GAAU,mCAItC,OAHAA,EAAM6wF,aAAexoF,QACfzW,KAAK2gC,eAAeQ,KAAK54B,GAAmBkO,GAClDzW,KAAKg+F,qBAAqBQ,KAAKpwF,EAAM6wF,cAC9B7wF,CACT,YAEMpO,KAAKk/F,cACb,G,CAEMS,MAAMjpC,G,gDACVA,EAAU12D,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,gCAC9C7/F,KAAK8/F,sBAAsBppC,EAAQjgD,QACrCigD,EAAQjgD,UAA+B,QAAnB,QAAMzW,KAAKoO,eAAQ,eAAE6wF,sBACrCj/F,KAAK+/F,kCAGP//F,KAAKggG,sBAAsBtpC,aAAO,EAAPA,EAASjgD,QAC1CzW,KAAKigG,wBAAwBvpC,aAAO,EAAPA,EAASjgD,cAChCzW,KAAKk/F,c,IAGPr2B,eAAenS,G,kDAEnB,OADAA,QAAgB12D,KAAKkgG,8BAA8BxpC,GACJ,QAAvC,EAA+B,QAAhC,QAAO12D,KAAKmgG,WAAWzpC,UAAS,eAAEvyB,cAAM,eAAEvsB,W,IAG7CgxD,eAAen7D,EAAeipD,G,0CAClCA,QAAgB12D,KAAKkgG,8BAA8BxpC,GACnD,MAAM2oC,QAAgBr/F,KAAKmgG,WAAWzpC,GACtC2oC,EAAQl7D,OAAOvsB,YAAcnK,QACvBzN,KAAKogG,YAAYf,EAAS3oC,EAClC,G,CAEM2pC,qBAAqB3pC,G,kDACzB,OAEO,QAFC,EAEP,QAFM,QACC12D,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,kCACjE,eAAE5yF,YAAI,eAAEqzF,iB,IAGLC,qBAAqB9yF,EAAYipD,G,0CACrC,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,2BAE5CR,EAAQpyF,KAAKqzF,kBAAoB7yF,QAC3BzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,0BAE9C,G,CAEMW,kBAAkB9pC,G,kDACtB,OAEoB,QADjB,EAAyF,QAA1F,QAAO12D,KAAKygG,WAAWzgG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,gCAAyB,eACtFC,sBAAc,Q,IAIhBC,kBAAkBnzF,EAAgBipD,G,0CACtC,MAAM4mC,QAAgBt9F,KAAKygG,WACzBzgG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,yBAE5CpD,EAAQqD,eAAiBlzF,QACnBzN,KAAK6gG,YACTvD,EACAt9F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,wBAE9C,G,CAEMh4B,kBAAkBhS,G,kDAEtB,OADAA,QAAgB12D,KAAKkgG,8BAA8BxpC,GACH,QAAxC,EAA+B,QAAhC,QAAO12D,KAAKmgG,WAAWzpC,UAAS,eAAEtuC,eAAO,eAAE04E,c,IAG9C55D,kBAAkBz5B,EAAeipD,G,0CACrCA,QAAgB12D,KAAKkgG,8BAA8BxpC,GACnD,MAAM2oC,QAAgBr/F,KAAKmgG,WAAWzpC,GACtC2oC,EAAQj3E,QAAQ04E,eAAiBrzF,QAC3BzN,KAAKogG,YAAYf,EAAS3oC,EAClC,G,CAEMiS,sBAAsBjS,G,kDAE1B,OADAA,QAAgB12D,KAAKkgG,8BAA8BxpC,GACN,QAArC,EAA+B,QAAhC,QAAO12D,KAAKmgG,WAAWzpC,UAAS,eAAEnuD,YAAI,eAAEw4F,kB,IAG3C55D,sBAAsB15B,EAAeipD,G,0CACzCA,QAAgB12D,KAAKkgG,8BAA8BxpC,GACnD,MAAM2oC,QAAgBr/F,KAAKmgG,WAAWzpC,GACtC2oC,EAAQ92F,KAAKw4F,mBAAqBtzF,QAC5BzN,KAAKogG,YAAYf,EAAS3oC,EAClC,G,CAEMsqC,2BAA2BtqC,G,oDAC/B,OAEuC,QADpC,EACW,QADZ,EAA0F,QAA1F,QAAO12D,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,gCAAyB,eACtFv6E,gBAAQ,eAAE86E,+BAAuB,Q,IAInCC,2BAA2BzzF,EAAgBipD,G,0CAC/C,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,yBAE5CrB,EAAQl5E,SAAS86E,wBAA0BxzF,QACrCzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,wBAE9C,G,CAEMt/C,6BAA6BsV,G,oDACjC,OAEyC,QADtC,EACW,QADZ,EAA0F,QAA1F,QAAO12D,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,gCAAyB,eACtFv6E,gBAAQ,eAAEg7E,iCAAyB,Q,IAIrCC,6BAA6B3zF,EAAgBipD,G,0CACjD,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,yBAE5CrB,EAAQl5E,SAASg7E,0BAA4B1zF,QACvCzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,wBAE9C,G,CAEMW,+BAA+B3qC,G,kDACnC,OAEiC,QAD9B,EAAyF,QAA1F,QAAO12D,KAAKygG,WAAWzgG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,gCAAyB,eACtFY,mCAA2B,Q,IAI7BC,+BAA+B9zF,EAAgBipD,G,0CACnD,MAAM4mC,QAAgBt9F,KAAKygG,WACzBzgG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,yBAE5CpD,EAAQgE,4BAA8B7zF,QAChCzN,KAAK6gG,YACTvD,EACAt9F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,wBAE9C,G,CAEMp5B,iCAAiC5Q,G,kDACrC,OAEmC,QADhC,EAAyF,QAA1F,QAAO12D,KAAKygG,WAAWzgG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,gCAAyB,eACtFc,qCAA6B,Q,IAI/BC,iCAAiCh0F,EAAgBipD,G,0CACrD,MAAM4mC,QAAgBt9F,KAAKygG,WACzBzgG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,yBAE5CpD,EAAQkE,8BAAgC/zF,QAClCzN,KAAK6gG,YACTvD,EACAt9F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,wBAE9C,G,CAEMgB,iBAAiBhrC,G,gDACrB,OAEC,QAFO,QACA12D,KAAKygG,WAAWzgG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,gCACjE,eAAEiB,a,IAGCC,iBAAiBn0F,EAAeipD,G,0CACpC,MAAM4mC,QAAgBt9F,KAAKygG,WACzBzgG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,yBAE5CpD,EAAQqE,cAAgBl0F,QAClBzN,KAAK6gG,YACTvD,EACAt9F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,wBAE9C,G,CAEMnJ,mBAAmB7gC,G,oDACvB,OAE+B,QAD5B,EACW,QADZ,EAA0F,QAA1F,QAAO12D,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,gCAAyB,eACtFv6E,gBAAQ,eAAE07E,uBAAe,Q,IAI3BC,mBAAmBr0F,EAAgBipD,G,0CACvC,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,yBAE5CrB,EAAQl5E,SAAS07E,gBAAkBp0F,QAC7BzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,wBAE9C,G,CAEMtX,oBAAoB1yB,G,0CACxB,eAAY12D,KAAK0pC,mBAAmBgtB,aAK3B12D,KAAK+hG,wBAAwBrrC,YAC7B12D,KAAKgiG,8BAA8BtrC,IAE9C,G,CAEMqrC,wBAAwBrrC,G,gDAC5B,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,yBAE5C,OAAuB,QAAhB,EAAArB,aAAO,EAAPA,EAASj3E,eAAO,eAAE6d,oB,IAGrBigC,wBAAwBz4D,EAAgBipD,G,0CAC5C,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,yBAE5CrB,EAAQj3E,QAAQ6d,qBAAuBx4B,QACjCzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,wBAE9C,G,CAEMsB,8BAA8BtrC,G,gDAClC,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,yBAG5C,GAAmB,QAAf,EAAArB,EAAQj3E,eAAO,eAAE65E,2BACnB,OAAO,EAKT,MAAM/8E,QAAsBllB,KAAKu0D,iBAAiBmC,GAClD,GAAqB,MAAjBxxC,EACF,OAAO,EAGT,IAAK,MAAMpf,KAAMsC,OAAOG,KAAK2c,GAAgB,CAC3C,MAAMS,EAAIT,EAAcpf,GACxB,GAAI6f,EAAElK,SAAWkK,EAAErH,kBAAoBqH,EAAEyoC,eACvC,OAAO,C,CAIX,OAAO,C,IAGH+X,8BAA8B14D,EAAgBipD,G,0CAClD,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,yBAE5CrB,EAAQj3E,QAAQ65E,2BAA6Bx0F,QACvCzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,wBAE9C,G,CAEM/4B,kBAAkBjR,G,oDACtB,OAK6B,QAJ1B,EAIU,QAJX,EAIC,QAJD,QACQ12D,KAAKmgG,WACTngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKkiG,qCAE7C,eAAE/7E,gBAAQ,eAAEqhD,sBAAc,QAAI,I,IAI7B26B,kBAAkB10F,EAAeipD,G,0CACrC,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKkiG,8BAE5C7C,EAAQl5E,SAASqhD,eAAiB/5D,QAC5BzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKkiG,6BAE9C,G,CAEME,sBAAsB1rC,G,kDAC1B,OAEW,QAFH,EAEP,QAFM,QACC12D,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKkiG,qCACjE,eAAE/7E,gBAAQ,eAAEk8E,kB,IAGTC,sBAAsB70F,EAAiBipD,G,0CAC3C,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKkiG,8BAE5C7C,EAAQl5E,SAASk8E,mBAAqB50F,QAChCzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKkiG,6BAE9C,G,CAEMtzC,gCAAgC8H,G,kDACpC,OAEU,QAFF,EAEP,QAFM,QACC12D,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,gCACjE,eAAEt4E,eAAO,eAAEm6E,4B,IAGR7zC,gCAAgCjhD,EAAgBipD,G,0CACpD,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,yBAE5CrB,EAAQj3E,QAAQm6E,6BAA+B90F,QACzCzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,wBAE9C,G,CAGMvP,mBAAmBz6B,G,kDACvB,OAEO,QAFC,EAEP,QAFM,QACC12D,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,kCACjE,eAAEt3F,YAAI,eAAEi6F,e,IAGLtS,mBAAmBziF,EAA2BipD,G,0CAClD,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,2BAQ5C,GANAR,EAAQ92F,KAAKi6F,gBAAkB/0F,QACzBzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,2BAGxCnpC,EAAQjgD,QAAUzW,KAAKg+F,qBAAqBp3B,WAAY,CAC1D,MAAM67B,EAAqB,MAATh1F,EAGdzN,KAAKm+F,6BAA6Bv3B,YAAc67B,GAClDziG,KAAKm+F,6BAA6BK,KAAKiE,E,CAG7C,G,CAEM7O,uBAAuBl9B,G,0CAK3B,OAAuB,OAAnBA,OAJJA,EAAU12D,KAAK4/F,iBACb5/F,KAAK4/F,iBAAiBlpC,EAAS,CAAEu6B,UAAW,eACtCjxF,KAAK0iG,qCAEF,EAAPhsC,EAASjgD,QACJ,WAEIzW,KAAK09F,qBAAqBj9D,IACrC,GAAGi2B,EAAQjgD,SAASgnF,KACpB/mC,EAEJ,G,CAEMy9B,uBAAuB1mF,EAAeipD,G,0CAKnB,OAAnBA,OAJJA,EAAU12D,KAAK4/F,iBACb5/F,KAAK4/F,iBAAiBlpC,EAAS,CAAEu6B,UAAW,eACtCjxF,KAAK0iG,qCAEF,EAAPhsC,EAASjgD,gBAGPzW,KAAK2iG,qBAAqBlF,GAAqBhwF,EAAOipD,GAC9D,G,CAEMksC,sBAAsBlsC,G,0CAE1B,OAAuB,OAAnBA,OADJA,EAAU12D,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0iG,qCACzC,EAAPhsC,EAASjgD,QACJ,WAEIzW,KAAK09F,qBAAqBj9D,IACrC,GAAGi2B,aAAO,EAAPA,EAASjgD,SAASgnF,KACrB/mC,EAEJ,G,CAEMmsC,sBAAsBp1F,EAAeipD,G,0CAElB,OAAnBA,OADJA,EAAU12D,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0iG,qCACzC,EAAPhsC,EAASjgD,gBAGPzW,KAAK2iG,qBAAqBlF,GAAuBhwF,EAAOipD,GAChE,G,CAEM+gC,4BAA4B/gC,G,0CAKhC,OAAuB,OAAnBA,OAJJA,EAAU12D,KAAK4/F,iBACb5/F,KAAK4/F,iBAAiBlpC,EAAS,CAAEu6B,UAAW,oBACtCjxF,KAAK0iG,qCAEF,EAAPhsC,EAASjgD,QACJ,WAEIzW,KAAK09F,qBAAqBj9D,IACrC,GAAGi2B,EAAQjgD,SAASgnF,KACpB/mC,EAEJ,G,CAEMm9B,4BAA4Bn9B,G,0CAKhC,OAAuB,OAAnBA,OAJJA,EAAU12D,KAAK4/F,iBACb5/F,KAAK4/F,iBAAiBlpC,EAAS,CAAEu6B,UAAW,oBACtCjxF,KAAK0iG,qCAEF,EAAPhsC,EAASjgD,gBAGAzW,KAAK09F,qBAAqBjoD,IACrC,GAAGihB,EAAQjgD,SAASgnF,KACpB/mC,GAEJ,G,CAEM09B,4BAA4B3mF,EAAeipD,G,0CAKxB,OAAnBA,OAJJA,EAAU12D,KAAK4/F,iBACb5/F,KAAK4/F,iBAAiBlpC,EAAS,CAAEu6B,UAAW,oBACtCjxF,KAAK0iG,qCAEF,EAAPhsC,EAASjgD,gBAGPzW,KAAK2iG,qBAAqBlF,GAA0BhwF,EAAOipD,GACnE,G,CAEMsS,gBAAgBtS,G,kDACpB,OAES,QAFD,EAEP,QAFM,QACC12D,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,kCACjE,eAAE17D,cAAM,eAAE9E,Y,IAGPyjE,gBAAgBr1F,EAAYipD,G,0CAChC,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,2BAE5CR,EAAQl7D,OAAO9E,aAAe5xB,QACxBzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,0BAE9C,G,CAGM5nD,oBAAoBye,G,oDACxB,OAEgB,QAFR,EAED,QAFA,EAEN,QAFM,QACC12D,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,kCACjE,eAAE5yF,YAAI,eAAEkI,eAAO,eAAEwjD,S,IAGdxgB,oBAAoB1qC,EAAqBipD,G,0CAC7C,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,2BAE5CR,EAAQpyF,KAAKkI,QAAQwjD,UAAYlrD,QAC3BzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,0BAE9C,G,CAGMh9C,wBAAwB6T,G,oDAC5B,OAEoB,QAFZ,EAED,QAFA,EAEN,QAFM,QACC12D,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,kCACjE,eAAE5yF,YAAI,eAAEuK,mBAAW,eAAEmhD,S,IAGlBrW,wBAAwB70C,EAAyBipD,G,0CACrD,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,2BAE5CR,EAAQpyF,KAAKuK,YAAYmhD,UAAYlrD,QAC/BzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,0BAE9C,G,CAGMxH,+BAA+B3hC,G,oDACnC,OAE2B,QAFnB,EAED,QAFA,EAEN,QAFM,QACC12D,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,kCACjE,eAAEt3F,YAAI,eAAEq7B,0BAAkB,eAAE+0B,S,IAGzB03B,+BACJ5iF,EACAipD,G,0CAEA,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,2BAE5CR,EAAQ92F,KAAKq7B,mBAAmB+0B,UAAYlrD,QACtCzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,0BAE9C,G,CAGM7M,6BACJt8B,G,kDAEA,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,2BAE5C,OAAsC,QAA/B,EAAa,QAAb,EAAAR,aAAO,EAAPA,EAAS92F,YAAI,eAAEs7B,wBAAgB,eAAE80B,S,IAGpCk4B,6BACJpjF,EACAipD,G,0CAEA,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,2BAE5CR,EAAQ92F,KAAKs7B,iBAAiB80B,UAAYlrD,QACpCzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,0BAE9C,G,CAGMpnC,sCACJ/B,G,oDAEA,OAEkC,QAF1B,EAED,QAFA,EAEN,QAFM,QACC12D,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,kCACjE,eAAE5yF,YAAI,eAAEy2B,iCAAyB,eAAEi1B,S,IAGhCE,sCACJprD,EACAipD,G,0CAEA,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,2BAE5CR,EAAQpyF,KAAKy2B,0BAA0Bi1B,UAAYlrD,QAC7CzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,0BAE9C,G,CAGMh5B,yBAAyBnQ,G,oDAC7B,OAEyB,QAFjB,EAEG,QAFJ,EAEN,QAFM,QACC12D,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,kCACjE,eAAE15E,gBAAQ,eAAE6d,oBAAY,eAAE20B,S,IAGvBoqC,yBAAyBt1F,EAAkBipD,G,0CAC/C,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,2BAE5CR,EAAQl5E,SAAS6d,aAAa20B,UAAYlrD,QACpCzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,0BAE9C,G,CAGM9jC,qBAAqBrF,G,oDACzB,OAEiB,QAFT,EAED,QAFA,EAEN,QAFM,QACC12D,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,kCACjE,eAAE5yF,YAAI,eAAEib,gBAAQ,eAAEywC,S,IAGfuD,qBAAqBzuD,EAAiBipD,G,0CAC1C,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,2BAE5CR,EAAQpyF,KAAKib,SAASywC,UAAYlrD,QAC5BzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,0BAE9C,G,CAEMtN,uBAAuB77B,G,kDAC3B,MAAMr+C,EAEC,QAFa,EAEnB,QAFkB,QACXrY,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,kCACjE,eAAEt3F,YAAI,eAAE8P,WACT,IAAI+tB,EAAS/tB,aAAU,EAAVA,EAAYsgD,UAIzB,OAHc,MAAVvyB,GAAqD,OAAnC/tB,aAAU,EAAVA,EAAY2qF,uBAChC58D,EAASxkC,EAAMqhG,sBAAsB5qF,EAAW2qF,sBAE3C58D,C,IAGHoqD,uBAAuB/iF,EAAoBipD,G,0CAC/C,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,2BAE5CR,EAAQ92F,KAAK8P,WAAWsgD,UAAYlrD,EACpC4xF,EAAQ92F,KAAK8P,WAAW2qF,oBACb,MAATv1F,EAAgB,KAAO7L,EAAMshG,uBAAuBz1F,SAChDzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,0BAE9C,G,CAGMrM,yBACJ98B,G,oDAEA,OAEqB,QAFb,EAED,QAFA,EAEN,QAFM,QACC12D,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,kCACjE,eAAEt3F,YAAI,eAAEu7B,oBAAY,eAAE60B,S,IAGnBo4B,yBACJtjF,EACAipD,G,0CAEA,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,2BAE5CR,EAAQ92F,KAAKu7B,aAAa60B,UAAYlrD,QAChCzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,0BAE9C,G,CAGM/8B,kBAAkBpM,G,oDACtB,OAEc,QAFN,EAED,QAFA,EAEN,QAFM,QACC12D,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,kCACjE,eAAE5yF,YAAI,eAAEkb,aAAK,eAAEwwC,S,IAGZ0J,kBAAkB50D,EAAmBipD,G,0CACzC,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,2BAE5CR,EAAQpyF,KAAKkb,MAAMwwC,UAAYlrD,QACzBzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,0BAE9C,G,CAEMrkD,mBAAmBkb,G,kDACvB,OAEW,QAFH,EAEP,QAFM,QACC12D,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,gCACjE,eAAEv6E,gBAAQ,eAAEg9E,e,IAGTC,mBAAmB31F,EAAqBipD,G,0CAC5C,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,yBAE5CrB,EAAQl5E,SAASg9E,gBAAkB11F,QAC7BzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,wBAE9C,G,CAEM2C,+BAA+B3sC,G,oDACnC,OAE2C,QADxC,EACW,QADZ,EAA0F,QAA1F,QAAO12D,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,gCAAyB,eACtFv6E,gBAAQ,eAAEm9E,mCAA2B,Q,IAIvCC,+BAA+B91F,EAAgBipD,G,0CACnD,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,yBAE5CrB,EAAQl5E,SAASm9E,4BAA8B71F,QACzCzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,wBAE9C,G,CAEM8C,+BAA+B9sC,G,oDACnC,OAE2C,QADxC,EACW,QADZ,EAA0F,QAA1F,QAAO12D,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,gCAAyB,eACtFv6E,gBAAQ,eAAEs9E,mCAA2B,Q,IAIvCC,+BAA+Bj2F,EAAgBipD,G,0CACnD,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,yBAE5CrB,EAAQl5E,SAASs9E,4BAA8Bh2F,QACzCzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,wBAE9C,G,CAEM1W,uBAAuBtzB,G,oDAC3B,OAEmC,QADhC,EACW,QADZ,EAA0F,QAA1F,QAAO12D,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,gCAAyB,eACtFv6E,gBAAQ,eAAEw9E,2BAAmB,Q,IAI/BC,uBAAuBn2F,EAAgBipD,G,0CAC3C,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,yBAE5CrB,EAAQl5E,SAASw9E,oBAAsBl2F,QACjCzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,wBAE9C,G,CAEMmD,uBAAuBntC,G,oDAC3B,OAEmC,QADhC,EACW,QADZ,EAA0F,QAA1F,QAAO12D,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,gCAAyB,eACtFv6E,gBAAQ,eAAE29E,2BAAmB,Q,IAI/BC,uBAAuBt2F,EAAgBipD,G,0CAC3C,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,yBAE5CrB,EAAQl5E,SAAS29E,oBAAsBr2F,QACjCzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,wBAE9C,G,CAEMsD,sCAAsCttC,G,oDAC1C,OAEkD,QAD/C,EACW,QADZ,EAA0F,QAA1F,QAAO12D,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,gCAAyB,eACtFv6E,gBAAQ,eAAE89E,0CAAkC,Q,IAI9CC,sCACJz2F,EACAipD,G,0CAEA,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,yBAE5CrB,EAAQl5E,SAAS89E,mCAAqCx2F,QAChDzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,wBAE9C,G,CAEMyD,0BAA0BztC,G,oDAC9B,OAEsC,QADnC,EACW,QADZ,EAA0F,QAA1F,QAAO12D,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,gCAAyB,eACtFv6E,gBAAQ,eAAEi+E,8BAAsB,Q,IAIlCC,0BAA0B52F,EAAgBipD,G,0CAC9C,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,yBAE5CrB,EAAQl5E,SAASi+E,uBAAyB32F,QACpCzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,wBAE9C,G,CAEM4D,kBAAkB5tC,G,kDACtB,OAKmB,QAJhB,EAIA,QAJD,QACQ12D,KAAKygG,WACTzgG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKkiG,qCAE7C,eAAEqC,sBAAc,Q,IAIfC,kBAAkB/2F,EAAgBipD,G,0CACtC,MAAM4mC,QAAgBt9F,KAAKygG,WACzBzgG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKkiG,8BAE5C5E,EAAQiH,eAAiB92F,QACnBzN,KAAK6gG,YACTvD,EACAt9F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKkiG,6BAE9C,G,CAEMuC,aAAa/tC,G,oDACjB,OAEyB,QADtB,EACW,QADZ,EAA0F,QAA1F,QAAO12D,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,gCAAyB,eACtFv6E,gBAAQ,eAAEu+E,iBAAS,Q,IAIrBC,aAAal3F,EAAgBipD,G,0CACjC,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,yBAE5CrB,EAAQl5E,SAASu+E,UAAYj3F,QACvBzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,wBAE9C,G,CAEMkE,2BAA2BluC,G,oDAC/B,OAEuC,QADpC,EACW,QADZ,EAA0F,QAA1F,QAAO12D,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,gCAAyB,eACtFv6E,gBAAQ,eAAE0+E,+BAAuB,Q,IAInCC,2BAA2Br3F,EAAgBipD,G,0CAC/C,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,yBAE5CrB,EAAQl5E,SAAS0+E,wBAA0Bp3F,QACrCzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,wBAE9C,G,CAEMqE,gCAAgCruC,G,oDACpC,OAE4C,QADzC,EACW,QADZ,EAA0F,QAA1F,QAAO12D,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,gCAAyB,eACtFv6E,gBAAQ,eAAE6+E,oCAA4B,Q,IAIxCC,gCAAgCx3F,EAAgBipD,G,0CACpD,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,yBAE5CrB,EAAQl5E,SAAS6+E,6BAA+Bv3F,QAC1CzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,wBAE9C,G,CAEMryC,SAASqI,G,kDACb,OAEU,QAFF,EAEP,QAFM,QACC12D,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,kCACjE,eAAEz3E,eAAO,eAAE5Z,K,IAGR02F,SAASz3F,EAAeipD,G,0CAC5B,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,2BAE5CR,EAAQj3E,QAAQ5Z,MAAQf,QAClBzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,0BAE9C,G,CAEMr2B,iBAAiB9S,G,kDACrB,OAE2B,QADxB,EAAyF,QAA1F,QAAO12D,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,gCAAyB,eACtFt4E,QAAQ/C,qBAAa,Q,IAIvB4gD,iBAAiBx4D,EAAgBipD,G,0CACrC,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,yBAE5CrB,EAAQj3E,QAAQ/C,cAAgB5X,QAC1BzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,wBAE9C,G,CAEMyE,qBAAqBzuC,G,sDACzB,MAAM0uC,EAEK,QAFgB,EAE1B,QAFyB,QAClBplG,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,gCACjE,eAAEv6E,gBAAQ,eAAEk/E,kBACPC,EAEL,QAFyB,QAClBtlG,KAAKygG,WAAWzgG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,gCACjE,eAAE2E,kBACH,OAA4C,QAArC,EAAAD,QAAAA,EAAqBE,SAAgB,Q,IAGxCC,qBAAqB93F,EAAgBipD,G,0CACzC,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,yBAE5CrB,EAAQl5E,SAASk/E,kBAAoB53F,QAC/BzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,yBAG5C,MAAMpD,QAAgBt9F,KAAKygG,WACzBzgG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,yBAE5CpD,EAAQ+H,kBAAoB53F,QACtBzN,KAAK6gG,YACTvD,EACAt9F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,wBAE9C,G,CAEM8E,4BAA4B9uC,G,oDAChC,OAEwC,QADrC,EACW,QADZ,EAA0F,QAA1F,QAAO12D,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,gCAAyB,eACtFv6E,gBAAQ,eAAEs/E,gCAAwB,Q,IAIpCC,4BAA4Bj4F,EAAgBipD,G,0CAChD,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,yBAE5CrB,EAAQl5E,SAASs/E,yBAA2Bh4F,QACtCzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,wBAE9C,G,CAEMiF,mBAAmBjvC,G,kDACvB,OAEsB,QADnB,EAAyF,QAA1F,QAAO12D,KAAKygG,WAAWzgG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,gCAAyB,eACtFkF,wBAAgB,Q,IAIlBC,mBAAmBp4F,EAAgBipD,G,0CACvC,MAAM4mC,QAAgBt9F,KAAKygG,WACzBzgG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,yBAE5CpD,EAAQsI,iBAAmBn4F,QACrBzN,KAAK6gG,YACTvD,EACAt9F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,wBAE9C,G,CAEMoF,4BAA4BpvC,G,kDAChC,OAE8B,QAD3B,EAAyF,QAA1F,QAAO12D,KAAKygG,WAAWzgG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,gCAAyB,eACtFqF,gCAAwB,Q,IAI1BC,4BAA4Bv4F,EAAgBipD,G,0CAChD,MAAM4mC,QAAgBt9F,KAAKygG,WACzBzgG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,yBAE5CpD,EAAQyI,yBAA2Bt4F,QAC7BzN,KAAK6gG,YACTvD,EACAt9F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,wBAE9C,G,CAEMuF,uCAAuCvvC,G,kDAC3C,OAEyC,QADtC,EAAyF,QAA1F,QAAO12D,KAAKygG,WAAWzgG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,gCAAyB,eACtFwF,2CAAmC,Q,IAIrCC,uCACJ14F,EACAipD,G,0CAEA,MAAM4mC,QAAgBt9F,KAAKygG,WACzBzgG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,yBAE5CpD,EAAQ4I,oCAAsCz4F,QACxCzN,KAAK6gG,YACTvD,EACAt9F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,wBAE9C,G,CAEM0F,qBAAqB1vC,G,kDACzB,OAEuB,QADpB,EAAyF,QAA1F,QAAO12D,KAAKygG,WAAWzgG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,gCAAyB,eACtF2F,yBAAiB,Q,IAInBC,qBAAqB74F,EAAgBipD,G,0CACzC,MAAM4mC,QAAgBt9F,KAAKygG,WACzBzgG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,yBAE5CpD,EAAQ+I,kBAAoB54F,QACtBzN,KAAK6gG,YACTvD,EACAt9F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,wBAE9C,G,CAEM6F,mBAAmB7vC,G,oDACvB,OAK8B,QAJ3B,EAIU,QAJX,EAIC,QAJD,QACQ12D,KAAKmgG,WACTngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKkiG,qCAE7C,eAAE/7E,gBAAQ,eAAEqgF,uBAAe,Q,IAI1BC,mBAAmBh5F,EAAgBipD,G,0CACvC,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKkiG,8BAE5C7C,EAAQl5E,SAASqgF,gBAAkB/4F,QAC7BzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKkiG,6BAE9C,G,CAEMwE,mBAAmBhwC,G,oDACvB,OAK8B,QAJ3B,EAIU,QAJX,EAIC,QAJD,QACQ12D,KAAKmgG,WACTngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKkiG,qCAE7C,eAAE/7E,gBAAQ,eAAEwgF,uBAAe,Q,IAI1BC,mBAAmBn5F,EAAgBipD,G,0CACvC,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKkiG,8BAE5C7C,EAAQl5E,SAASwgF,gBAAkBl5F,QAC7BzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKkiG,6BAE9C,G,CAEM2E,wBAAwBnwC,G,kDAC5B,OAE0B,QADvB,EAAyF,QAA1F,QAAO12D,KAAKygG,WAAWzgG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,gCAAyB,eACtFoG,4BAAoB,Q,IAItBC,wBAAwBt5F,EAAgBipD,G,0CAC5C,MAAM4mC,QAAgBt9F,KAAKygG,WACzBzgG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,yBAE5CpD,EAAQwJ,qBAAuBr5F,QACzBzN,KAAK6gG,YACTvD,EACAt9F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,wBAE9C,G,CAEMsG,qBAAqBtwC,G,kDACzB,OAEuB,QADpB,EAAyF,QAA1F,QAAO12D,KAAKygG,WAAWzgG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,gCAAyB,eACtFuG,yBAAiB,Q,IAInBC,qBAAqBz5F,EAAgBipD,G,0CACzC,MAAM4mC,QAAgBt9F,KAAKygG,WACzBzgG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,yBAE5CpD,EAAQ2J,kBAAoBx5F,QACtBzN,KAAK6gG,YACTvD,EACAt9F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,wBAE9C,G,CAEMyG,cAAczwC,G,kDAClB,OAEgB,QADb,EAAyF,QAA1F,QAAO12D,KAAKygG,WAAWzgG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,gCAAyB,eACtF0G,kBAAU,Q,IAIZC,cAAc55F,EAAgBipD,G,0CAClC,MAAM4mC,QAAgBt9F,KAAKygG,WACzBzgG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,yBAE5CpD,EAAQ8J,WAAa35F,QACfzN,KAAK6gG,YACTvD,EACAt9F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,wBAE9C,G,CAGMxmD,oBAAoBwc,G,oDACxB,OAEgB,QAFR,EAED,QAFA,EAEN,QAFM,QACC12D,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKsnG,sCACjE,eAAEr6F,YAAI,eAAEkI,eAAO,eAAEkyC,S,IAGdlI,oBACJ1xC,EACAipD,G,0CAEA,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKsnG,+BAE5CjI,EAAQpyF,KAAKkI,QAAQkyC,UAAY55C,QAC3BzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKsnG,8BAE9C,G,CAGM3kD,wBACJ+T,G,oDAEA,OAEoB,QAFZ,EAED,QAFA,EAEN,QAFM,QACC12D,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKsnG,sCACjE,eAAEr6F,YAAI,eAAEuK,mBAAW,eAAE6vC,S,IAGlBnE,wBACJz1C,EACAipD,G,0CAEA,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKsnG,+BAE5CjI,EAAQpyF,KAAKuK,YAAY6vC,UAAY55C,QAC/BzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKsnG,8BAE9C,G,CAEMvT,+BAA+Br9B,G,gDACnC,OAEC,QAFO,QACA12D,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,gCACjE,eAAEn4F,KAAKq7B,mBAAmByjB,S,IAGvBipC,+BAA+B7iF,EAAeipD,G,0CAClD,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,yBAE5CrB,EAAQ92F,KAAKq7B,mBAAmByjB,UAAY55C,QACtCzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,wBAE9C,G,CAGM6G,oBAAoB7wC,G,oDACxB,OAEgB,QAFR,EAED,QAFA,EAEN,QAFM,QACC12D,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKsnG,sCACjE,eAAEr6F,YAAI,eAAEgb,eAAO,eAAEo/B,S,IAGdmgD,oBACJ/5F,EACAipD,G,0CAEA,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKsnG,+BAE5CjI,EAAQpyF,KAAKgb,QAAQo/B,UAAY55C,QAC3BzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKsnG,8BAE9C,G,CAEMrU,6BACJv8B,G,kDAEA,OAEO,QAFC,EAEP,QAFM,QACC12D,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,gCACjE,eAAEn4F,YAAI,eAAEs7B,iBAAiBwjB,S,IAGtBypC,6BACJrjF,EACAipD,G,0CAEA,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,yBAE5CrB,EAAQ92F,KAAKs7B,iBAAiBwjB,UAAY55C,QACpCzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,wBAE9C,G,CAGMhoC,sCACJhC,G,oDAEA,OAEkC,QAF1B,EAED,QAFA,EAEN,QAFM,QACC12D,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,gCACjE,eAAEzzF,YAAI,eAAEy2B,iCAAyB,eAAE2jB,S,IAGhCgS,sCACJ5rD,EACAipD,G,0CAEA,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,yBAE5CrB,EAAQpyF,KAAKy2B,0BAA0B2jB,UAAY55C,QAC7CzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,wBAE9C,G,CAEMtL,yBAAyB1+B,G,oDAC7B,OAEyB,QAFjB,EAEG,QAFJ,EAEN,QAFM,QACC12D,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,gCACjE,eAAEv6E,gBAAQ,eAAE6d,oBAAY,eAAEqjB,S,IAGvBwtC,yBAAyBpnF,EAAeipD,G,0CAC5C,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,yBAE5CrB,EAAQl5E,SAAS6d,aAAaqjB,UAAY55C,QACpCzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,wBAE9C,G,CAGMzkC,qBAAqBvF,G,oDACzB,OAEiB,QAFT,EAED,QAFA,EAEN,QAFM,QACC12D,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,gCACjE,eAAEzzF,YAAI,eAAEib,gBAAQ,eAAEm/B,S,IAGf6V,qBACJzvD,EACAipD,G,0CAEA,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,yBAE5CrB,EAAQpyF,KAAKib,SAASm/B,UAAY55C,QAC5BzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,wBAE9C,G,CAEMlO,uBAAuB97B,G,kDAC3B,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,yBAE5C,OAAgC,QAAzB,EAAa,QAAb,EAAArB,aAAO,EAAPA,EAAS92F,YAAI,eAAE8P,kBAAU,eAAEgvC,S,IAG9BopC,uBAAuBhjF,EAAeipD,G,0CAC1C,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,yBAE5CrB,EAAQ92F,KAAK8P,WAAWgvC,UAAY55C,QAC9BzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,wBAE9C,G,CAEMhN,yBAAyBh9B,G,oDAC7B,OAEqB,QAFb,EAED,QAFA,EAEN,QAFM,QACC12D,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,gCACjE,eAAEn4F,YAAI,eAAEu7B,oBAAY,eAAEujB,S,IAGnB2pC,yBAAyBvjF,EAAYipD,G,0CACzC,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,yBAE5CrB,EAAQ92F,KAAKu7B,aAAaujB,UAAY55C,QAChCzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,wBAE9C,G,CAGM99B,kBAAkBlM,G,kDACtB,OAEO,QAFC,EAEP,QAFM,QACC12D,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKsnG,sCACjE,eAAEr6F,YAAI,eAAEkb,MAAMk/B,S,IAGX4b,kBACJx1D,EACAipD,G,0CAEA,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKsnG,+BAE5CjI,EAAQpyF,KAAKkb,MAAMk/B,UAAY55C,QACzBzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKsnG,8BAE9C,G,CAEMG,YAAY/wC,G,kDAChB,OAEU,QAFF,EAEP,QAFM,QACC12D,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKkiG,qCACjE,eAAE95E,eAAO,eAAEs/E,Q,IAGRC,YAAYl6F,EAAeipD,G,0CAC/B,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKkiG,8BAE5C7C,EAAQj3E,QAAQs/E,SAAWj6F,QACrBzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKkiG,6BAE9C,G,CAEM0F,cAAclxC,G,kDAClB,OAEU,QAFF,EAEP,QAFM,QACC12D,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKkiG,qCACjE,eAAE95E,eAAO,eAAEy/E,U,IAGRC,cAAcr6F,EAAeipD,G,0CACjC,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKkiG,8BAE5C7C,EAAQj3E,QAAQy/E,WAAap6F,QACvBzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKkiG,6BAE9C,G,CAGM6F,mBAAmBrxC,G,sDACvB,OAA0C,OAAlB,QAApB,QAAO12D,KAAKoO,eAAQ,eAAE6wF,oBACXj/F,KAAKgoG,yBAAyBtxC,IAE7CA,EAAU12D,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,wBACc,QAA1D,EAAyC,QAA1C,EAAgC,QAAhC,QAAO1gG,KAAKmgG,WAAWzpC,UAAS,eAAEvwC,gBAAQ,eAAEzkB,uBAAe,QAAI,IAAIhB,E,IAGtEunG,mBAAmBx6F,EAAwBipD,G,0CAG/C,MAAM4mC,QAAgBt9F,KAAKygG,WACzBzgG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,yBAE5CpD,EAAQ57F,gBAAkB+L,QACpBzN,KAAK6gG,YACTvD,EACAt9F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,wBAE9C,G,CAEMxlD,qBAAqBwb,G,kDACzB,OAEW,QAFH,EAEP,QAFM,QACC12D,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,gCACjE,eAAEv6E,gBAAQ,eAAE9R,iB,IAGTkvD,qBAAqB91D,EAAeipD,G,0CACxC,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,yBAE5CrB,EAAQl5E,SAAS9R,kBAAoB5G,QAC/BzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,wBAE9C,G,CAGMx8C,mBAAmBwS,G,kDACvB,OAEO,QAFC,EAEP,QAFM,QACC12D,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,gCACjE,eAAEzzF,YAAI,eAAEg3C,e,IAGLG,mBAAmB32C,EAAoBipD,G,0CAC3C,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,yBAE5CrB,EAAQpyF,KAAKg3C,gBAAkBx2C,QACzBzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,wBAE9C,G,CAEM52D,oBAAoB4sB,G,oDACxB,OAE+B,QAD5B,EACU,QADX,EAA4F,QAA5F,QAAO12D,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,kCAA2B,eACxFz3E,eAAO,eAAE8/E,wBAAgB,Q,IAI3BC,oBAAoB16F,EAAgBipD,G,0CACxC,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,2BAE5CR,EAAQj3E,QAAQ8/E,iBAAmBz6F,QAC7BzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,0BAE9C,G,CAEMuI,sBAAsB1xC,G,oDAC1B,OAEiC,QAD9B,EACU,QADX,EAA4F,QAA5F,QAAO12D,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,kCAA2B,eACxFz3E,eAAO,eAAE9P,0BAAkB,Q,IAI7B8tD,sBAAsB34D,EAAgBipD,G,0CAC1C,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,2BAE5CR,EAAQj3E,QAAQ9P,mBAAqB7K,QAC/BzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,0BAE9C,G,CAEMwI,oBAAoB3xC,G,gDACxB,OAEC,QAFO,QACA12D,KAAKygG,WAAWzgG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,gCACjE,eAAE4H,gB,IAGCC,oBAAoB96F,EAAeipD,G,0CACvC,MAAM4mC,QAAgBt9F,KAAKygG,WACzBzgG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,yBAE5CpD,EAAQgL,iBAAmB76F,QACrBzN,KAAK6gG,YACTvD,EACAt9F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,wBAE9C,G,CAEMh3D,mBAAmBgtB,G,0CACvB,OAA+C,aAAjC12D,KAAK6oE,eAAenS,KAAwD,aAA5B12D,KAAKs6C,UAAUoc,GAC/E,G,CAEM8xC,iBAAiB9xC,G,kDACrB,OAEU,QAFF,EAEP,QAFM,QACC12D,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,gCACjE,eAAEt4E,eAAO,eAAEnT,a,IAGRwzF,iBAAiBh7F,EAAeipD,G,0CACpC,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,yBAE5CrB,EAAQj3E,QAAQnT,cAAgBxH,QAC1BzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,wBAE9C,G,CAEMgI,WAAWhyC,G,kDACf,OAEU,QAFF,EAEP,QAFM,QACC12D,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,gCACjE,eAAEt4E,eAAO,eAAE+d,O,IAGRwiE,WAAWl7F,EAAgBipD,G,0CAC/B,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,yBAE5CrB,EAAQj3E,QAAQ+d,QAAU14B,QACpBzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,wBAE9C,G,CAEMhP,WAAWh7B,G,kDACf,OAEU,QAFF,EAEP,QAFM,QACC12D,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,gCACjE,eAAEt4E,eAAO,eAAEgoE,O,IAGR1oD,WAAWj6B,EAAeipD,G,0CAC9B,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,yBAE5CrB,EAAQj3E,QAAQgoE,QAAU3iF,QACpBzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,wBAE9C,G,CAEMv5B,cAAczQ,G,0CAClBA,EAAU12D,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,wBAEpD,MAAMlD,QAAwBx9F,KAAK2gC,eAAeF,IAChDl4B,GACAmuD,GAGF,OAAuB,MAAnB8mC,GAA2Bp1F,OAAOG,KAAKi1F,GAAiBt6F,OAAS,EAC5D,KAGFs6F,EAAgB9mC,EAAQjgD,OACjC,G,CAEM+oF,cAAc/xF,EAAeipD,G,gDAEjC,GAAsB,OADtBA,EAAU12D,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,yBACxCjqF,OACV,OAEF,MAAM+mF,EAIF,QAHD,QAAMx9F,KAAK2gC,eAAeF,IACzBl4B,GACAmuD,UACA,QAAI,CAAC,EACT8mC,EAAgB9mC,EAAQjgD,QAAUhJ,QAC5BzN,KAAK2gC,eAAeQ,KAAK54B,GAAsBi1F,EAAiB9mC,E,IAGlEwN,YAAYxN,G,kDAChB,OAEU,QAFF,EAEP,QAFM,QACC12D,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKsnG,sCACjE,eAAEl/E,eAAO,eAAE+7C,Q,IAGRC,YAAY32D,EAAeipD,G,0CAC/B,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKsnG,+BAE5CjI,EAAQj3E,QAAQ+7C,SAAW12D,QACrBzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKsnG,8BAE9C,G,CAEMntD,aAAauc,G,kDACjB,OAEO,QAFC,EAEP,QAFM,QACC12D,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKkiG,qCACjE,eAAEj1F,YAAI,eAAEimC,S,IAELsJ,aAAa/uC,EAAeipD,G,0CAChC,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKkiG,8BAE5C7C,EAAQpyF,KAAKimC,UAAYzlC,QACnBzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKkiG,6BAE9C,G,CAEM0G,UAAUlyC,G,gDACd,OAEC,QAFO,QACA12D,KAAKygG,WAAWzgG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKkiG,qCACjE,eAAEjkC,M,IAGC4qC,UAAUp7F,EAAeipD,G,0CAC7B,MAAM4mC,QAAgBt9F,KAAKygG,WACzBzgG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKkiG,8BAE5C5E,EAAQr/B,OAASxwD,QACXzN,KAAK6gG,YACTvD,EACAt9F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKkiG,6BAE9C,G,CAEM4G,kBAAkBpyC,G,gDACtB,OAEC,QAFO,QACA12D,KAAKygG,WAAWzgG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,kCACjE,eAAEkJ,c,IAGCC,kBAAkBv7F,EAAeipD,G,0CACrC,MAAM4mC,QAAgBt9F,KAAKygG,WACzBzgG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,2BAE5CvC,EAAQyL,eAAiBt7F,QACnBzN,KAAK6gG,YACTvD,EACAt9F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,0BAE9C,G,CAEMoJ,6BAA6BvyC,G,oDACjC,OAEyC,QADtC,EACW,QADZ,EAA0F,QAA1F,QAAO12D,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,gCAAyB,eACtFv6E,gBAAQ,eAAE+iF,iCAAyB,Q,IAIrCC,6BAA6B17F,EAAgBipD,G,0CACjD,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,yBAE5CrB,EAAQl5E,SAAS+iF,0BAA4Bz7F,QACvCzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,wBAE9C,G,CAEM7jD,gBAAgB6Z,G,kDACpB,OAEW,QAFH,EAEP,QAFM,QACC12D,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,gCACjE,eAAEv6E,gBAAQ,eAAEijF,Y,IAGTtsD,gBAAgBrvC,EAA8BipD,G,0CAClD,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,yBAE5CrB,EAAQl5E,SAASijF,aAAe37F,QAC1BzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,wBAE9C,G,CAEM2I,0BAA0B3yC,G,kDAC9B,OAE4B,QADzB,EAAyF,QAA1F,QAAO12D,KAAKygG,WAAWzgG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,gCAAyB,eACtF4I,8BAAsB,Q,IAIxBC,0BAA0B97F,EAAgBipD,G,0CAC9C,MAAM4mC,QAAgBt9F,KAAKygG,WACzBzgG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,yBAE5CpD,EAAQgM,uBAAyB77F,QAC3BzN,KAAK6gG,YACTvD,EACAt9F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,wBAE9C,G,CAEM8I,8BAA8B9yC,G,gDAClC,OAEC,QAFO,QACA12D,KAAKygG,WAAWzgG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,gCACjE,eAAE+I,0B,IAGCC,8BAA8Bj8F,EAAeipD,G,0CACjD,MAAM4mC,QAAgBt9F,KAAKygG,WACzBzgG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,yBAE5CpD,EAAQmM,2BAA6Bh8F,QAC/BzN,KAAK6gG,YACTvD,EACAt9F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,wBAE9C,G,CAEMiJ,eAAejzC,G,kDACnB,OAEiB,QADd,EAAyF,QAA1F,QAAO12D,KAAKygG,WAAWzgG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,gCAAyB,eACtFkJ,mBAAW,Q,IAIbC,eAAep8F,EAAgBipD,G,0CACnC,MAAM4mC,QAAgBt9F,KAAKygG,WACzBzgG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,yBAE5CpD,EAAQsM,YAAcn8F,QAChBzN,KAAK6gG,YACTvD,EACAt9F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,wBAE9C,G,CAEMoJ,0BAA0BpzC,G,gDAC9B,OAEC,QAFO,QACA12D,KAAKygG,WAAWzgG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,kCACjE,eAAEkK,sB,IAGCC,0BAA0Bv8F,EAAYipD,G,0CAC1C,MAAM4mC,QAAgBt9F,KAAKygG,WACzBzgG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,2BAE5CvC,EAAQyM,uBAAyBt8F,QAC3BzN,KAAK6gG,YACTvD,EACAt9F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,0BAE9C,G,CAEMtrC,iBAAiBmC,G,kDACrB,OAEO,QAFC,EAEP,QAFM,QACC12D,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,gCACjE,eAAEzzF,YAAI,eAAEiY,a,IAGLuvC,iBACJhnD,EACAipD,G,0CAEA,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,yBAE5CrB,EAAQpyF,KAAKiY,cAAgBzX,QACvBzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,wBAE9C,G,CAEM9oC,6BAA6BlB,G,kDACjC,OAEW,QAFH,EAEP,QAFM,QACC12D,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKkiG,qCACjE,eAAE/7E,gBAAQ,eAAE8jF,yB,IAGTpyC,6BAA6BpqD,EAAYipD,G,0CAC7C,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKkiG,8BAE5C7C,EAAQl5E,SAAS8jF,0BAA4Bx8F,QACvCzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKkiG,6BAE9C,G,CAEMhwB,6BAA6Bxb,G,kDACjC,OAEW,QAFH,EAEP,QAFM,QACC12D,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKkiG,qCACjE,eAAE/7E,gBAAQ,eAAE+jF,yB,IAGT/3B,6BAA6B1kE,EAAYipD,G,0CAC7C,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKkiG,8BAE5C7C,EAAQl5E,SAAS+jF,0BAA4Bz8F,QACvCzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKkiG,6BAE9C,G,CAEMiI,oBAAoBzzC,G,kDACxB,OAEW,QAFH,EAEP,QAFM,QACC12D,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKkiG,qCACjE,eAAE/7E,gBAAQ,eAAEikF,gB,IAGTC,oBAAoB58F,EAAYipD,G,0CACpC,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKkiG,8BAE5C7C,EAAQl5E,SAASikF,iBAAmB38F,QAC9BzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKkiG,6BAE9C,G,CAEMoI,gBAAgB5zC,G,kDACpB,OAEW,QAFH,EAEP,QAFM,QACC12D,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,gCACjE,eAAEv6E,gBAAQ,eAAEokF,Y,IAGTC,gBAAgB/8F,EAAeipD,G,0CACnC,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,yBAE5CrB,EAAQl5E,SAASokF,aAAe98F,QAC1BzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,wBAE9C,G,CAGMjjC,aAAa/G,G,kDACjB,OAEO,QAFC,EAEP,QAFM,QACC12D,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,gCACjE,eAAEzzF,YAAI,eAAEkY,S,IAGLshB,aACJh5B,EACAipD,G,0CAEA,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,yBAE5CrB,EAAQpyF,KAAKkY,UAAY1X,QACnBzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,wBAE9C,G,CAEMzO,aAAav7B,G,gDACjB,MAAMnuD,EAEL,QAFa,QACNvI,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,kCACjE,eAAEt3F,KACH,IAAI69B,EAAS79B,aAAI,EAAJA,EAAMmU,UAInB,OAHc,MAAV0pB,GAA+C,OAA7B79B,aAAI,EAAJA,EAAMkiG,uBAC1BrkE,EAASxkC,EAAMqhG,sBAAsB16F,EAAKkiG,sBAErCrkE,C,IAGHisD,aAAa5kF,EAAoBipD,G,0CACrC,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,2BAE5CR,EAAQ92F,KAAKmU,UAAYjP,EACzB4xF,EAAQ92F,KAAKkiG,oBAA+B,MAATh9F,EAAgB,KAAO7L,EAAMshG,uBAAuBz1F,SACjFzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,0BAE9C,G,CAEM7gE,gBAAgB03B,G,kDAEpB,OADAA,QAAgB12D,KAAKkgG,8BAA8BxpC,GACJ,QAAvC,EAA+B,QAAhC,QAAO12D,KAAKmgG,WAAWzpC,UAAS,eAAEvyB,cAAM,eAAEnsB,Y,IAG7CuwD,gBAAgB96D,EAAeipD,G,0CACnCA,QAAgB12D,KAAKkgG,8BAA8BxpC,GACnD,MAAM2oC,QAAgBr/F,KAAKmgG,WAAWzpC,GACtC2oC,EAAQl7D,OAAOnsB,aAAevK,QACxBzN,KAAKogG,YAAYf,EAAS3oC,EAClC,G,CAEMg0C,mBAAmBh0C,G,gDACvB,OAEC,QAFO,QACA12D,KAAKygG,WAAWzgG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKkiG,qCACjE,eAAEyI,e,IAGCC,mBAAmBn9F,EAAeipD,G,0CACtC,MAAM4mC,QAAgBt9F,KAAKygG,WACzBzgG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKkiG,8BAE5C5E,EAAQqN,gBAAkBl9F,QACpBzN,KAAK6gG,YACTvD,EACAt9F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKkiG,6BAE9C,G,CAEMr8B,iBAAiBnP,G,kDACrB,OAES,QAFD,EAEP,QAFM,QACC12D,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,kCACjE,eAAE17D,cAAM,eAAEze,a,IAGPsgD,iBAAiBv4D,EAAeipD,G,0CACpC,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,2BAE5CR,EAAQl7D,OAAOze,cAAgBjY,QACzBzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,0BAE9C,G,CAEMp8B,YAAY/M,G,kDAChB,OAEW,QAFH,EAEP,QAFM,QACC12D,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKsnG,sCACjE,eAAEnhF,gBAAQ,eAAEA,Q,IAGTk9C,YAAY51D,EAAeipD,G,0CAC/B,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKsnG,+BAE5CjI,EAAQl5E,SAASA,SAAW1Y,QACtBzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKsnG,8BAE9C,G,CAEMuD,mBAAmBn0C,G,gDACvB,OAEC,QAFO,QACA12D,KAAKygG,WAAWzgG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,gCACjE,eAAEoK,e,IAGCC,mBAAmBt9F,EAAeipD,G,0CACtC,MAAM4mC,QAAgBt9F,KAAKygG,WACzBzgG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,yBAE5CpD,EAAQwN,gBAAkBr9F,QACpBzN,KAAK6gG,YACTvD,EACAt9F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,wBAE9C,G,CAEMsK,oBAAoBt0C,G,gDACxB,OAEC,QAFO,QACA12D,KAAKygG,WAAWzgG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKkiG,qCACjE,eAAE+I,yB,IAGCC,6BAA6Bz9F,EAAeipD,G,0CAChD,MAAM4mC,QAAgBt9F,KAAKygG,WACzBzgG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKkiG,8BAE5C5E,EAAQ2N,0BAA4Bx9F,QAC9BzN,KAAK6gG,YACTvD,EACAt9F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKkiG,6BAE9C,G,CAEMiJ,YAAYz0C,G,gDAChB,OAEC,QAFO,QACA12D,KAAKygG,WAAWzgG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,gCACjE,eAAE0K,Q,IAGCC,YAAY59F,EAAeipD,G,0CAC/B,MAAM4mC,QAAgBt9F,KAAKygG,WACzBzgG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,yBAE5CpD,EAAQ8N,SAAW39F,QACbzN,KAAK6gG,YACTvD,EACAt9F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,wBAE9C,G,CAEM4K,SAAS50C,G,gDACb,OAEC,QAFO,QACA12D,KAAKygG,WAAWzgG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKkiG,qCACjE,eAAE7gG,K,IAGCkqG,SAAS99F,EAAkBipD,G,0CAC/B,MAAM4mC,QAAgBt9F,KAAKygG,WACzBzgG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKkiG,8BAE5C5E,EAAQj8F,MAAQoM,QACVzN,KAAK6gG,YACTvD,EACAt9F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKkiG,6BAE9C,G,CAEMv8D,kBAAkB+wB,G,gDACtB,OAEC,QAFO,QACA12D,KAAKygG,WAAWzgG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKkiG,qCACjE,eAAE52F,c,IAGC+6B,kBAAkB54B,EAAeipD,G,0CACrC,MAAM4mC,QAAgBt9F,KAAKygG,WACzBzgG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKkiG,8BAE5C5E,EAAQhyF,eAAiBmC,QACnBzN,KAAK6gG,YACTvD,EACAt9F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKkiG,6BAE9C,G,CAEM5nD,UAAUoc,G,kDACd,OAEU,QAFF,EAEP,QAFM,QACC12D,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,gCACjE,eAAEt4E,eAAO,eAAE3R,M,IAGR42C,oBAAoBqJ,G,kDACxB,OAEU,QAFF,EAEP,QAFM,QACC12D,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,gCACjE,eAAEt4E,eAAO,eAAE1E,gB,IAGR0pC,oBAAoB3/C,EAAgBipD,G,0CACxC,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,yBAE5CrB,EAAQj3E,QAAQ1E,iBAAmBjW,QAC7BzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,wBAE9C,G,CAEMpJ,gBAAgB5gC,G,kDAIpB,OADW,QAFkB,EAE5B,QAF2B,QACpB12D,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKkiG,qCACjE,eAAE/7E,gBAAQ,eAAE8vD,Y,IAITu1B,gBAAgB/9F,EAAeipD,G,0CACnC,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKkiG,8BAE5C7C,EAAQl5E,SAAS8vD,aAAexoE,QAC1BzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKkiG,6BAE9C,G,CAEMuJ,sBAAsB/0C,G,oDAC1B,MAAMg1C,EAEK,QAFwB,EAElC,QAFiC,QAC1B1rG,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKkiG,qCACjE,eAAE/7E,gBAAQ,eAAE8d,mBACP0nE,EAEL,QAFiC,QAC1B3rG,KAAKygG,WAAWzgG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKkiG,qCACjE,eAAEj+D,mBACH,OAAOynE,QAAAA,EAA6BC,C,IAGhCC,sBAAsBn+F,EAAeipD,G,0CACzC,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKkiG,8BAE5C7C,EAAQl5E,SAAS8d,mBAAqBx2B,QAChCzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAKkiG,6BAE9C,G,CAEM2J,kB,gDACJ,OAAmF,QAA3E,SAAM7rG,KAAKygG,iBAAiBzgG,KAAKkiG,8BAA8B1gG,oBAAY,QAAI,C,IAGnFsqG,gBAAgBr+F,G,0CACpB,MAAM6vF,QAAgBt9F,KAAKygG,iBAAiBzgG,KAAK0gG,wBACjDpD,EAAQ97F,aAAeiM,QACjBzN,KAAK6gG,YAAYvD,QAAet9F,KAAK0gG,uBAC7C,G,CAEMqL,Y,0CACJ,MAAMzO,QAAgBt9F,KAAKygG,iBAAiBzgG,KAAK0gG,wBACjD,OAA0B,OAAnBpD,aAAO,EAAPA,EAAS/7F,SAAkB6G,OAAOG,KAAK+0F,EAAQ/7F,QAAQ2B,OAAS,EACnEo6F,EAAQ/7F,OACR,IAAIJ,CACV,G,CAEM6qG,UAAUv+F,EAAoBipD,G,0CAClC,MAAM4mC,QAAgBt9F,KAAKygG,WACzBzgG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,yBAG5C,OADApD,EAAQ/7F,OAASkM,QACJzN,KAAK6gG,YAChBvD,EACAt9F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,wBAE9C,G,CAEgBD,WAAW/pC,G,0CACzB,IAAI4mC,EASJ,OARIt9F,KAAKisG,UAAUv1C,EAAQw1C,mBACzB5O,QAAgBt9F,KAAKmsG,wBAGnBnsG,KAAKosG,SAAsB,MAAX9O,IAClBA,QAAgBt9F,KAAKqsG,mBAAmB31C,IAGnC4mC,QAAAA,EAAWt9F,KAAK4+F,eACzB,G,CAEgBiC,YAAYvD,EAAuB5mC,G,0CACjD,OAAO12D,KAAKisG,UAAUv1C,EAAQw1C,iBAC1BlsG,KAAKssG,oBAAoBhP,SACnBt9F,KAAKusG,kBAAkBjP,EAAS5mC,EAC5C,G,CAEgBy1C,uB,0CACd,aAAcnsG,KAAKoO,SAASkvF,OAC9B,G,CAEgB+O,mBAAmB31C,G,0CACjC,aAAa12D,KAAK2gC,eAAeF,IAAkBl4B,GAAamuD,EAClE,G,CAEgB41C,oBAAoBhP,G,gDAC5Bt9F,KAAK8+F,aAAmB1wF,GAAU,mCAEtC,OADAA,EAAMkvF,QAAUA,EACTlvF,CACT,KACF,G,CAEgBm+F,kBAAkBjP,EAAuB5mC,G,0CACnDA,EAAQ81C,uBACJxsG,KAAK09F,qBAAqBv8D,KAAK54B,GAAa+0F,EAAS5mC,SAErD12D,KAAK2gC,eAAeQ,KAAK54B,GAAa+0F,EAAS5mC,EAEzD,G,CAEgBypC,WAAWzpC,G,0CACzB,IACE,IAAI2oC,EASJ,OARIr/F,KAAKisG,UAAUv1C,EAAQw1C,mBACzB7M,QAAgBr/F,KAAKysG,qBAAqB/1C,IAGxC12D,KAAKosG,QAAQ11C,EAAQw1C,kBAA+B,MAAX7M,IAC3CA,QAAgBr/F,KAAKo/F,mBAAmB1oC,IAGnC2oC,C,CACP,MAAOp4F,GACPjH,KAAK2kC,WAAWziB,MAAMjb,E,CAE1B,G,CAEgBwlG,qBAAqB/1C,G,0CACnC,aAAa12D,KAAKoO,QAAQ80B,MAAY90B,GAAU,mCAC9C,OAAsB,MAAlBA,EAAMu4D,SACD,KAEFv4D,EAAMu4D,eAAe3mE,KAAK0sG,oBAAoBh2C,GACvD,KACF,G,CAEgBg2C,oBAAoBh2C,G,0CAClC,aAAa12D,KAAKoO,QAAQ80B,MAAM90B,I,QAC9B,OAA0B,OAAnBsoD,aAAO,EAAPA,EAASjgD,QAC2B,QAAvC,EAA8B,QAA9B,EAAArI,EAAMu4D,SAASjQ,EAAQjgD,eAAO,eAAE2R,eAAO,eAAE3R,OACzCrI,EAAM6wF,YAAY,GAE1B,G,CAEgBG,mBAAmB1oC,G,kDACjC,GAAuB,OAAnBA,aAAO,EAAPA,EAASjgD,SAAwD,OAAlB,QAApB,QAAOzW,KAAKoO,eAAQ,eAAE6wF,cACnD,OAAO,KAGT,GAAIj/F,KAAK89F,gBAAiB,CACxB,MAAM6O,EAAgB3sG,KAAKu+F,iBAAiB99D,IAAIi2B,EAAQjgD,QACxD,GAAqB,MAAjBk2F,EACF,OAAOA,C,CAIX,MAAMtN,GAAU3oC,aAAO,EAAPA,EAAS81C,kBACmD,QAAvE,QAAMxsG,KAAK09F,qBAAqBj9D,IAAci2B,EAAQjgD,OAAQigD,UAAS,cACjE12D,KAAK2gC,eAAeF,IACzBi2B,EAAQjgD,OACRzW,KAAK4/F,iBAAiBlpC,EAAS,CAAE31B,oBAAqBrW,GAAoBsW,eAEtEhhC,KAAK2gC,eAAeF,IAAci2B,EAAQjgD,OAAQigD,GAK5D,OAHI12D,KAAK89F,iBACP99F,KAAKu+F,iBAAiB92F,IAAIivD,EAAQjgD,OAAQ4oF,GAErCA,C,IAGC4M,UAAUC,GAClB,OAAOA,IAAoB/O,GAAgByP,QAAUV,IAAoB/O,GAAgB0P,IAC3F,CAEUT,QAAQF,GAChB,OAAOA,IAAoB/O,GAAgB2P,MAAQZ,IAAoB/O,GAAgB0P,IACzF,CAEgBzM,YACdf,EACA3oC,EAA0B,CACxBw1C,gBAAiB/O,GAAgB0P,KACjCL,kBAAkB,I,0CAGpB,OAAOxsG,KAAKisG,UAAUv1C,EAAQw1C,uBACpBlsG,KAAK+sG,oBAAoB1N,SACzBr/F,KAAKgtG,kBAAkB3N,EAAS3oC,EAC5C,G,CAEgBs2C,kBAAkB3N,EAAmB3oC,G,0CACnD,MAAMw1C,EAAkBx1C,EAAQ81C,iBAC5BxsG,KAAK09F,qBACL19F,KAAK2gC,qBAEHurE,EAAgB/qE,KAAK,GAAGu1B,EAAQjgD,SAAU4oF,EAAS3oC,GAErD12D,KAAK89F,iBACP99F,KAAKu+F,iBAAiBt7D,OAAOyzB,EAAQjgD,OAEzC,G,CAEgBs2F,oBAAoB1N,G,0CACoC,OAAlEr/F,KAAKysG,qBAAqB,CAAEh2F,OAAQ4oF,EAAQj3E,QAAQ3R,iBAChDzW,KAAK8+F,aAAa1wF,GACf,IAAI8e,SAAS2V,IAClBz0B,EAAMu4D,SAAS04B,EAAQj3E,QAAQ3R,QAAU4oF,EACzCx8D,EAAQz0B,EAAM,aAIdpO,KAAKk/F,cACb,G,CAEgBK,0BAA0BF,G,0CAExC,MAAM4N,EAAY7vE,KAAKirC,MAAMjrC,KAAKC,UAAUgiE,UACtCr/F,KAAKktG,+BAA+BD,SACpCjtG,KAAKmtG,iCAAiCF,SACtCjtG,KAAKotG,gCAAgCH,EAC7C,G,CAIgBC,+BAA+B7N,G,0CAC7C,MAAMgO,QAAsBrtG,KAAKmgG,WAC/BngG,KAAK4/F,iBACH,CAAEnpF,OAAQ4oF,EAAQj3E,QAAQ3R,cACpBzW,KAAKkiG,8BAITxgG,EAAkB29F,EAAQl5E,SAASzkB,gBACV,OAA3B2rG,aAAa,EAAbA,EAAelnF,UACjBk5E,EAAQl5E,SAAWknF,EAAclnF,gBAClBnmB,KAAK2gC,eAAe8U,IAAIltC,OACvC82F,EAAQl5E,eAAiBnmB,KAAK2gC,eAAeF,IAAqBl4B,UAC5DvI,KAAK2gC,eAAeyzC,OAAO7rE,KAEnC82F,EAAQl5E,SAASzkB,gBAAkBA,EACS,WAAxC29F,EAAQl5E,SAAS8d,oBAAoE,MAAjCo7D,EAAQl5E,SAAS8vD,eACvEopB,EAAQl7D,OAAOvsB,YAAc,KAC7BynF,EAAQl7D,OAAOnsB,aAAe,KAC9BqnF,EAAQj3E,QAAQ04E,eAAiB,KACjCzB,EAAQ92F,KAAKw4F,mBAAqB,YAE9B/gG,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBACH,CAAEnpF,OAAQ4oF,EAAQj3E,QAAQ3R,cACpBzW,KAAKkiG,6BAGjB,G,CAEgBkL,gCAAgC/N,G,0CAC9C,MAAMgO,QAAsBrtG,KAAKmgG,WAC/BngG,KAAK4/F,iBACH,CAAEnpF,OAAQ4oF,EAAQj3E,QAAQ3R,cACpBzW,KAAKsnG,+BAGgB,OAA3B+F,aAAa,EAAbA,EAAelnF,YACjBknF,EAAclnF,SAASzkB,gBAAkB29F,EAAQl5E,SAASzkB,gBAC1D29F,EAAQl5E,SAAWknF,EAAclnF,gBAE7BnmB,KAAK2gC,eAAeQ,KACxBk+D,EAAQj3E,QAAQ3R,OAChB4oF,QACMr/F,KAAKsnG,oCAEPtnG,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBACH,CAAEnpF,OAAQ4oF,EAAQj3E,QAAQ3R,cACpBzW,KAAKsnG,8BAGjB,G,CAEgB6F,iCAAiC9N,G,0CAC/C,MAAMgO,QAAsBrtG,KAAKmgG,WAC/BngG,KAAK4/F,iBAAiB,CAAEnpF,OAAQ4oF,EAAQj3E,QAAQ3R,cAAgBzW,KAAK0gG,yBAExC,OAA3B2M,aAAa,EAAbA,EAAelnF,YACjBknF,EAAclnF,SAASzkB,gBAAkB29F,EAAQl5E,SAASzkB,gBAC1D29F,EAAQl5E,SAAWknF,EAAclnF,gBAE7BnmB,KAAK2gC,eAAeQ,KACxBk+D,EAAQj3E,QAAQ3R,OAChB4oF,QACMr/F,KAAKsnG,oCAEPtnG,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiB,CAAEnpF,OAAQ4oF,EAAQj3E,QAAQ3R,cAAgBzW,KAAK0gG,wBAEzE,G,CAGgBxB,e,gDACRl/F,KAAKstG,8BACLttG,KAAKoO,QAAQ80B,MAAM90B,IACD,MAAlBA,EAAMu4D,UAAoBv+D,OAAOG,KAAK6F,EAAMu4D,UAAUzjE,OAAS,EACjElD,KAAK2mE,SAAS63B,KAAK,MAIrBx+F,KAAK2mE,SAAS63B,KAAKpwF,EAAMu4D,SAAS,GAEtC,G,CAEUi5B,iBACR2N,EACAC,G,cAEA,OAAwB,MAApBD,EACKC,GAETD,EAAiB92F,OAAiC,QAAxB,EAAA82F,aAAgB,EAAhBA,EAAkB92F,cAAM,QAAI+2F,EAAe/2F,OACrE82F,EAAiBrB,gBACkB,QAAjC,EAAAqB,aAAgB,EAAhBA,EAAkBrB,uBAAe,QAAIsB,EAAetB,gBACtDqB,EAAiBf,iBACmB,QAAlC,EAAAe,aAAgB,EAAhBA,EAAkBf,wBAAgB,QAAIgB,EAAehB,iBACvDe,EAAiBxsE,oBACsB,QAArC,EAAAwsE,aAAgB,EAAhBA,EAAkBxsE,2BAAmB,QAAIysE,EAAezsE,oBAC1DwsE,EAAiBtc,UAAuC,QAA3B,EAAAsc,aAAgB,EAAhBA,EAAkBtc,iBAAS,QAAIuc,EAAevc,UACpEsc,EACT,CAEgB1N,yB,0CACd,MAAO,CACLqM,gBAAiB/O,GAAgByP,OACjCn2F,cAAezW,KAAKoO,SAAS6wF,aAEjC,G,CAEgByB,uB,kDACd,MAAO,CACLwL,gBAAiB/O,GAAgB2P,KACjC/rE,oBAAqBrW,GAAoB+iF,QACzCh3F,OAA0C,QAAjC,EAAmB,QAApB,QAAOzW,KAAKoO,eAAQ,eAAE6wF,oBAAY,cAAWj/F,KAAK0tG,6BAC1DlB,kBAAkB,E,IAINtK,4B,kDACd,MAAO,CACLgK,gBAAiB/O,GAAgB2P,KACjC/rE,oBAAqBrW,GAAoBsW,MACzCvqB,OAA0C,QAAjC,EAAmB,QAApB,QAAOzW,KAAKoO,eAAQ,eAAE6wF,oBAAY,cAAWj/F,KAAK0tG,6BAC1DlB,kBAAkB,E,IAINlF,6B,kDACd,MAAO,CACL4E,gBAAiB/O,GAAgB2P,KACjC/rE,oBAAqBrW,GAAoBkiF,OACzCn2F,OAA0C,QAAjC,EAAmB,QAApB,QAAOzW,KAAKoO,eAAQ,eAAE6wF,oBAAY,cAAWj/F,KAAKs6C,YAC1DkyD,kBAAkB,E,IAIN9J,8B,kDACd,MAAO,CACLwJ,gBAAiB/O,GAAgB2P,KACjCN,kBAAkB,EAClB/1F,OAA0C,QAAjC,EAAmB,QAApB,QAAOzW,KAAKoO,eAAQ,eAAE6wF,oBAAY,cAAWj/F,KAAK0tG,6B,IAI9CA,6B,0CACd,aAAa1tG,KAAK2gC,eAAeF,IAAYl4B,GAC/C,G,CAEgBolG,8BAA8Bl3F,EAAiB,M,gDAC7DA,EAASA,QAAAA,EAA8B,QAAnB,QAAMzW,KAAKoO,eAAQ,eAAE6wF,aACzC,MAAMoO,QAAsBrtG,KAAKmgG,WAC/BngG,KAAK4/F,iBAAiB,CAAEnpF,OAAQA,SAAgBzW,KAAKkiG,oCAEjDliG,KAAKogG,YACTpgG,KAAK4tG,aAAaP,GAClBrtG,KAAK4/F,iBAAiB,CAAEnpF,OAAQA,SAAgBzW,KAAKkiG,6B,IAIzC2L,gCAAgCp3F,EAAiB,M,gDAC/DA,EAASA,QAAAA,EAA8B,QAAnB,QAAMzW,KAAKoO,eAAQ,eAAE6wF,aACzC,MAAMoO,QAAsBrtG,KAAKmgG,WAC/BngG,KAAK4/F,iBAAiB,CAAEnpF,OAAQA,SAAgBzW,KAAK0gG,+BAEjD1gG,KAAKogG,YACTpgG,KAAK4tG,aAAaP,GAClBrtG,KAAK4/F,iBAAiB,CAAEnpF,OAAQA,SAAgBzW,KAAK0gG,wB,IAIzCoN,+BAA+Br3F,EAAiB,M,gDAC9DA,EAASA,QAAAA,EAA8B,QAAnB,QAAMzW,KAAKoO,eAAQ,eAAE6wF,mBACnCj/F,KAAKm0F,uBAAuB,KAAM,CAAE19E,OAAQA,UAC5CzW,KAAKo0F,4BAA4B,KAAM,CAAE39E,OAAQA,UACjDzW,KAAK6iG,sBAAsB,KAAM,CAAEpsF,OAAQA,G,IAGnCwpF,wBAAwBxpF,EAAiB,M,gDACjDzW,KAAK8+F,aAAmB1wF,GAAU,mCAQtC,OAPAqI,EAASA,QAAAA,EAAUrI,EAAM6wF,oBAClB7wF,EAAMu4D,SAASlwD,GAElBzW,KAAK89F,iBACP99F,KAAKu+F,iBAAiBt7D,OAAOxsB,GAGxBrI,CACT,KACF,G,CAEgBk/F,wB,gDAEd,IAAK,MAAM72F,KAA8B,QAAnB,QAAMzW,KAAKoO,eAAQ,eAAEu4D,gBAC7B3mE,KAAK0pC,mBAAmB,CAAEjzB,OAAQA,aACtCzW,KAAKigG,wBAAwBxpF,G,IAM/Bm3F,aAAavO,GACrB,MAAM0O,EAA+B,CAAE5nF,SAAUk5E,EAAQl5E,UACzD,OAAO/d,OAAOC,OAAOrI,KAAKS,gBAAiBstG,EAC7C,CAEgBzO,0BAA0BD,G,0CAExC,OADAA,EAAQl5E,SAASzkB,sBAAwB1B,KAAKgoG,2BACvC3I,CACT,G,CAEgB2I,yBAAyBtxC,G,gDAEvC,OADAA,EAAU12D,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK0gG,wBACG,QAA/C,SAAM1gG,KAAKygG,WAAW/pC,IAAUh1D,uBAAe,QAAI,IAAIhB,C,IAGjDg/F,kC,gDACR1/F,KAAK8+F,aAAmB1wF,GAAU,mC,MACtC,MAAMqI,EAASrI,aAAK,EAALA,EAAO6wF,aAKtB,OAJc,MAAVxoF,GAAmD,OAAV,QAAvB,EAAArI,aAAK,EAALA,EAAOu4D,SAASlwD,UAAO,eAAExJ,QAC7CmB,EAAMu4D,SAASlwD,GAAQxJ,KAAO,IAAIw2B,IAG7Br1B,CACT,KACF,G,CAEU3N,cAAcqJ,EAA0B,MAChD,OAAO9J,KAAK69F,aAAap9F,cAAcqJ,EACzC,CAEU80F,cAAc90F,EAA8B,MACpD,OAAO9J,KAAK69F,aAAar9F,aAAasJ,EACxC,CAEgBg2F,sBAAsBrpF,G,gDAC9BzW,KAAK4oE,eAAe,KAAM,CAAEnyD,OAAQA,UACpCzW,KAAKw/F,cAAc,KAAM,CAAE/oF,OAAQA,UACnCzW,KAAK8+F,aAAmB1wF,GAAU,mCAKtC,OAJAA,EAAMmvF,sBAAwBnvF,EAAMmvF,sBAAsB/0F,QAAQ1C,GAAOA,IAAO2Q,UAE1EzW,KAAK2gC,eAAeQ,KAAK54B,GAA4B6F,EAAMmvF,uBAE1DnvF,CACT,KACF,G,CAEgB4xF,sBAAsBvpF,G,gDAC9BzW,KAAK6tG,gCAAgCp3F,SACrCzW,KAAK2tG,8BAA8Bl3F,SACnCzW,KAAK8tG,+BAA+Br3F,EAC5C,G,CAEgBspF,2B,gDACd,MAAMp5B,EAA+B,QAAnB,QAAM3mE,KAAKoO,eAAQ,eAAEu4D,SACvC,GAAgB,MAAZA,GAAoBv+D,OAAOG,KAAKo+D,GAAUzjE,OAAS,QAC/ClD,KAAKy/F,cAAc,WAG3B,IAAK,MAAMhpF,KAAUkwD,EACnB,GAAc,MAAVlwD,EAAJ,CAGA,SAAUzW,KAAK0pC,mBAAmB,CAAEjzB,OAAQA,IAAW,OAC/CzW,KAAKy/F,cAAchpF,GACzB,K,OAEIzW,KAAKy/F,cAAc,K,KAIfS,8BAA8BxpC,G,0CAC1C,MAAMs3C,QAAsBhuG,KAAKyrG,sBAAsB,CAAEh1F,OAAQigD,aAAO,EAAPA,EAASjgD,SACpEuT,QAAgBhqB,KAAKs3F,gBAAgB,CAAE7gF,OAAQigD,aAAO,EAAPA,EAASjgD,SACxD+2F,EACc,WAAlBQ,GAAyC,MAAXhkF,QACpBhqB,KAAK6/F,+BACL7/F,KAAK0gG,uBACjB,OAAO1gG,KAAK4/F,iBAAiBlpC,EAAS82C,EACxC,G,CAEc7K,qBAAqB91F,EAAaY,EAAeipD,G,0CAC7D,OAAgB,MAATjpD,QACGzN,KAAK09F,qBAAqBtpB,OAAO,GAAG1d,EAAQjgD,SAAS5J,IAAO6pD,SAC5D12D,KAAK09F,qBAAqBv8D,KAAK,GAAGu1B,EAAQjgD,SAAS5J,IAAOY,EAAOipD,EAC7E,G,CAEUtoD,QACR,OAAOpO,KAAK29F,qBAAqBl9D,IAAmCl4B,GACtE,CAEco2F,SAASvwF,G,gDACfpO,KAAK29F,qBAAqBx8D,KAAK54B,GAAY6F,EACnD,G,CAEgB0wF,YACdmP,G,gDAEMjuG,KAAKoO,QAAQ80B,MAAY90B,GAAU,mCACvC,MAAM8/F,QAAqBD,EAAa7/F,GACxC,GAAoB,MAAhB8/F,EACF,MAAM,IAAI7oG,MAAM,iDAGZrF,KAAK2+F,SAASuP,EACtB,KACF,G,EAGK,SAASC,GACdruG,EACAsuG,EAA+B,CAACjrG,GAAMA,IAMtC,MAAO,CAAC+E,EAAam6B,EAA8BC,KACjD,MAAMC,EAAiBD,EAAW70B,MAElC,MAAO,CACLA,MAAO,YAAavN,GAClB,MAAMmuG,EAA6B9rE,EAAe99B,MAAMzE,KAAME,GAE9D,KAAMmuG,aAA0BnhF,SAC9B,MAAM,IAAI7nB,MACR,kFAAkFpB,OAChFo+B,MAKN,OAAOgsE,EAAenrE,MAAMkD,GACT,MAAVA,GACLA,EAAOtmC,YAAYoC,OAASpC,EAAY+E,UAAU/E,YAAYoC,KAC5DksG,EAAUhoE,GACVgoE,EACEhmG,OAAOnI,OAAOH,EAAY+E,UAAWuD,OAAOkmG,0BAA0BloE,MAGhF,EACD,CAEL,CAEA,SAASmoE,GACPC,EACAC,EAAqC,CAACtrG,GAAMA,IAM5C,MAAO,CAAC+E,EAAam6B,EAA8BC,KACjD,MAAMC,EAAiBD,EAAW70B,MAElC,MAAO,CACLA,MAAO,YAAavN,GAClB,MAAMmuG,EAAiC9rE,EAAe99B,MAAMzE,KAAME,GAElE,KAAMmuG,aAA0BnhF,SAC9B,MAAM,IAAI7nB,MACR,kFAAkFpB,OAChFo+B,MAKN,OAAOgsE,EAAenrE,MAAMkD,IAC1B,GAAc,MAAVA,EACF,OAAO,KACF,GAAMA,aAAkBxhC,MAO7B,OAAOwhC,EAAOthC,KAAKa,GACL,MAALA,GACLA,EAAE7F,YAAYoC,OAASssG,EAAkB3pG,UAAU/E,YAAYoC,KAC7DusG,EAAgB9oG,GAChB8oG,EACErmG,OAAOnI,OAAOuuG,EAAkB3pG,UAAWuD,OAAOkmG,0BAA0B3oG,OAXpF,MAAM,IAAIN,MACR,0EAA0EpB,OACxEo+B,K,GAcV,EACD,CAEL,CAEA,SAASqsE,GACPC,EACAC,EAAqC,CAACzrG,GAAMA,IAM5C,MAAO,CAAC+E,EAAam6B,EAA8BC,KACjD,MAAMC,EAAiBD,EAAW70B,MAElC,MAAO,CACLA,MAAO,YAAavN,GAClB,MAAMmuG,EAAgD9rE,EAAe99B,MAAMzE,KAAME,GAEjF,KAAMmuG,aAA0BnhF,SAC9B,MAAM,IAAI7nB,MACR,kFAAkFpB,OAChFo+B,MAKN,OAAOgsE,EAAenrE,MAAMkD,IAC1B,GAAc,MAAVA,EACF,OAAO,KAEP,IAAK,MAAOv5B,EAAKs2B,KAAQ/6B,OAAOymG,QAAQzoE,GACtCA,EAAOv5B,GACE,MAAPs2B,GAAeA,EAAIrjC,YAAYoC,OAASysG,EAAkB9pG,UAAU/E,YAAYoC,KAC5E0sG,EAAgBzrE,GAChByrE,EACExmG,OAAOnI,OACL0uG,EAAkB9pG,UAClBuD,OAAOkmG,0BAA0BnrE,KAK7C,OAAOiD,C,GAGb,EACD,CAEL,CAEA,SAAS0oE,GACPH,EACAC,EAAqC,CAACzrG,GAAMA,IAM5C,MAAO,CAAC+E,EAAam6B,EAA8BC,KACjD,MAAMC,EAAiBD,EAAW70B,MAElC,MAAO,CACLA,MAAO,YAAavN,GAClB,MAAMmuG,EAA+B9rE,EAAe99B,MAAMzE,KAAME,GAEhE,KAAMmuG,aAA0BnhF,SAC9B,MAAM,IAAI7nB,MACR,kFAAkFpB,OAChFo+B,MAKN,OAAOgsE,EAAenrE,MAAMkD,IAC1B,GAAc,MAAVA,EACF,OAAO,KACF,GAAIA,aAAkBh/B,IAC3B,OAAOg/B,EAEP,IAAK,MAAMv5B,KAAOzE,OAAOG,KAAK69B,GAC5BA,EAAOv5B,GACU,MAAfu5B,EAAOv5B,IACPu5B,EAAOv5B,GAAK/M,YAAYoC,OAASysG,EAAkB9pG,UAAU/E,YAAYoC,KACrE0sG,EAAgBxoE,EAAOv5B,IACvB+hG,EACExmG,OAAOnI,OACL0uG,EAAkB9pG,UAClBuD,OAAOkmG,0BAA0BloE,EAAOv5B,MAIpD,OAAO,IAAIzF,IAAegB,OAAOymG,QAAQzoE,G,GAG/C,EACD,CAEL,CAz3EE,IADC+nE,GAAcniE,GAAoBA,GAAmBc,U,qIAgItD,IADCyhE,GAA6Bt7D,GAAYA,GAAWnG,U,sIAmBrD,IADCyhE,GAA6BpsD,I,0IAmB9B,IADCgsD,GAAcniE,GAAoBA,GAAmBc,U,iJAsBtD,IADCgiE,GAAoB9iE,GAAoBA,GAAmBc,U,+IAyB5D,IADCyhE,GAA6Bz5C,I,wJAwB9B,IADCq5C,GAAcphE,I,2IAmBf,IADCwhE,GAA6Bl0C,I,uIA2C9B,IADCy0C,GAAoB9iE,GAAoBA,GAAmBc,U,2IAwB5D,IADCyhE,GAA6B/sC,I,oIA4d9B,IADCktC,GAA6BhjE,I,sIAsB9B,IADCgjE,GAA6BxsD,I,0IAyC9B,IADCwsD,GAA6BjiD,I,sIA4C9B,IADC8hD,GAA6Bz5C,I,wJAyC9B,IADC45C,GAA6Bt0C,I,uIAyD9B,IADCs0C,GAA6BvtC,I,oIAwD9B,IADCgtC,GAAcztG,G,qIAwCf,IADC6tG,GAA6BlrD,I,qIAga9B,IADCqrD,GAA6B/qC,I,i2BCh7DzB,MAAMorC,WACH,GAGFC,qBAAwBniG,G,0CAC5B,OAAO7M,KAAK29F,gCAAgCP,SAClCp9F,KAAK29F,qBAAqBsR,eAAkBpiG,SAC5C7M,KAAK29F,qBAAqBl9D,IAAO5zB,EAC7C,G,CAEMqiG,mBAAmBriG,EAAaY,G,gDAC9BzN,KAAK29F,qBAAqBx8D,KAAKt0B,EAAKY,EAC5C,G,CAEMs4B,WAAWs5D,G,8GAEfA,EAAU,IAAInpB,GAAQmpB,SAChB,EAAMt5D,WAAU,UAACs5D,EACzB,G,CAEM31D,mBAAmBgtB,G,8HAGvB,aACS,EAAMhtB,mBAAkB,UAACgtB,KACgC,aAAzD12D,KAAKmgG,iBAAiBngG,KAAK6/F,0BAEtC,G,CAGMsP,iCACJz4C,G,gDAEA,OAEC,QAFO,QACA12D,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,kCACjE,eAAE1pB,S,IAGCi5B,iCACJ3hG,EACAipD,G,0CAEA,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,2BAE5CR,EAAQlpB,UAAY1oE,QACdzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,0BAE9C,G,CAGMwP,+BAA+B34C,G,gDACnC,OAEC,QAFO,QACA12D,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,kCACjE,eAAE1qF,O,IAGCm6F,+BACJ7hG,EACAipD,G,0CAEA,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,2BAE5CR,EAAQlqF,QAAU1H,QACZzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,0BAE9C,G,CAGM0P,6BAA6B74C,G,gDACjC,OAEC,QAFO,QACA12D,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,kCACjE,eAAEtyE,I,IAGCiiF,6BACJ/hG,EACAipD,G,0CAEA,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,2BAE5CR,EAAQ9xE,KAAO9f,QACTzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,0BAE9C,G,CAGM4P,iCAAiC/4C,G,gDACrC,OAEC,QAFO,QACA12D,KAAKmgG,WAAWngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,kCACjE,eAAEzpB,Q,IAGCs5B,iCACJjiG,EACAipD,G,0CAEA,MAAM2oC,QAAgBr/F,KAAKmgG,WACzBngG,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,2BAE5CR,EAAQjpB,SAAW3oE,QACbzN,KAAKogG,YACTf,EACAr/F,KAAK4/F,iBAAiBlpC,QAAe12D,KAAK6/F,0BAE9C,G,EAnFA,IADCsO,GAAcr4B,I,mJAwBf,IADCq4B,GAAct4B,I,iJAsBf,IADCs4B,GAAcp4B,I,+IAsBf,IADCo4B,GAAct4B,I,mJC7GV,MAAM85B,GAOX9tG,6BAA6B+tG,EAAmB9uC,GAC9C,MAAMpC,EAAUixC,GAAmBE,WAAW/uC,GAE9C,OAAIA,EAASgvC,kBACJF,EAAa9qG,KAAK6gB,GAAW+4C,EAAQ/4C,KAErC+4C,EAAQkxC,EAEnB,CAEQ/tG,kBAAkBi/D,GACxB,OAA+B,MAAxBA,EAASivC,YACZjvC,EAASivC,YACRpqF,GAAWvd,OAAOC,OAAO,IAAIy4D,EAASkvC,KAAQrqF,EACrD,E,2SCZK,MAAMsqF,GAOXnwG,YACUowG,EACAtrE,EACAurE,GAER,GAJQ,KAAAD,gBAAAA,EACA,KAAAtrE,aAAAA,EACA,KAAAurE,SAAAA,EARV,KAAArqG,GAAKlE,EAAMs/B,UAGH,KAAAkvE,kBAAmB,IAOnBF,aAA2BnS,GAAA,GAC/B,MAAM,IAAI14F,MAAM,0DAGlB,GAAqB,MAAjB8qG,EAASH,MAAwC,MAAxBG,EAASJ,YACpC,MAAM,IAAI1qG,MAAM,uCAEpB,CAEAyE,OACuD,GAAjD2oE,OAAOU,QAAQO,cAAc28B,mBAIjCrwG,KAAKswG,UACLtwG,KAAKuwG,mBACP,CAEQD,UAINtwG,KAAKghB,aAAehhB,KAAKkwG,gBAAgBv/C,WAAiB6tC,GAAS,mCAC7Dx+F,KAAKowG,iBACPpwG,KAAKowG,kBAAmB,QAGpBpwG,KAAKwwG,cAAchS,EAC3B,KACF,CAEQ+R,mBAENl+B,GAAWo+B,gBACTzwG,KAAK0wG,sBACEl7F,GAAY,gDAAMxV,KAAK2wG,kBAAkBn7F,EAAQ,KAE5D,CAEMm7F,kBAAkBn7F,G,0CACtB,GAAIA,EAAQw9D,SAAWhzE,KAAK0wG,sBAAwBl7F,EAAQ1P,KAAO9F,KAAK8F,GACtE,OAEF,MAAM8pG,QAAqB5vG,KAAK4kC,aAAaoqE,qBAAqBhvG,KAAKmwG,SAASS,YAC1EnjG,EAAQkiG,GAAmBkB,sBAAsBjB,EAAc5vG,KAAKmwG,UAC1EnwG,KAAKowG,kBAAmB,EACxBpwG,KAAKkwG,gBAAgB1R,KAAK/wF,EAC5B,G,CAEc+iG,cAAc/iG,G,gDACpBzN,KAAK4kC,aAAasqE,mBAAmBlvG,KAAKmwG,SAASS,WAAYnjG,SAC/D4kE,GAAWa,YAAYlzE,KAAK0wG,qBAAsB,CAAE5qG,GAAI9F,KAAK8F,IACrE,G,CAEY4qG,2BACV,MAAO,GAAG1wG,KAAKmwG,SAASS,mBAC1B,EC3CK,SAASE,GAAeC,GAC7B,MAAO,CAAClsG,EAAoBw9B,KAE1B,MAAMha,EAAIxjB,EAEoB,MAA1BwjB,EAAE2oF,uBACJ3oF,EAAE2oF,qBAAuB,IAG3B3oF,EAAE2oF,qBAAqBz6F,KAAK,CAC1B8rB,cACAuuE,WAAY,GAAG/rG,EAAU/E,YAAYoC,QAAQmgC,IAC7C2tE,KAAMe,EAAaf,KACnBD,YAAagB,EAAahB,YAC1BD,kBAAmBiB,EAAajB,mBAChC,CAEN,C,2bC1CA,IAAamB,GAAb,cCKO,MAOLnxG,YACU2kC,EACA98B,EACA67C,EACA5e,GAHA,KAAAH,cAAAA,EACA,KAAA98B,YAAAA,EACA,KAAA67C,cAAAA,EACA,KAAA5e,aAAAA,EAVA,KAAAssE,SAAsC,IAAInT,GAAA,EAAgB,IAC1D,KAAAoT,aAA8C,IAAIpT,GAAA,EAAgB,IAE5E,KAAAp1C,SAAW3oD,KAAKkxG,SAAShT,eACzB,KAAA31C,aAAevoD,KAAKmxG,aAAajT,eAQ/Bl+F,KAAK4kC,aAAaw5D,uBAAuBztC,WAAiBygD,GAAa,mCACrE,GAAuD,MAAlDxvG,EAAMY,OAAN,0BACH,OAGF,IAAK4uG,EAGH,OAFApxG,KAAKkxG,SAAS1S,KAAK,SACnBx+F,KAAKmxG,aAAa3S,KAAK,IAIzB,MAAMvxF,QAAajN,KAAK4kC,aAAa2iE,4BAE/BvnG,KAAKqxG,kBAAkBpkG,EAC/B,KACF,CAEMqrC,a,0CACJt4C,KAAKmxG,aAAa3S,KAAK,GACzB,G,CAGMhmD,QAAQnE,EAAmBxnC,G,0CAC/B,MAAMguC,EAAS,IAAIsL,GAGnB,OAFAtL,EAAO/0C,GAAKuuC,EAAMvuC,GAClB+0C,EAAO34C,WAAalC,KAAKykC,cAAc+T,QAAQnE,EAAMnyC,KAAM2K,GACpDguC,CACT,G,CAEMpa,IAAI36B,G,0CAGR,OAFgB9F,KAAKkxG,SAAStqC,WAEf/kC,MAAMgZ,GAAWA,EAAO/0C,KAAOA,GAChD,G,CAKMwrG,2B,0CACJ,MAAMrkG,QAAajN,KAAK4kC,aAAa2iE,sBAC/Bt/E,EAAU7f,OAAOk9C,OAAOr4C,GAAQ,CAAC,GAAGnI,KAAK0L,GAAM,IAAI21C,GAAO31C,KAEhE,OAAOxQ,KAAKuxG,eAAetpF,EAC7B,G,CAEM+0B,OAAOnC,G,0CACX,IAAI5yB,QAAgBjoB,KAAK4kC,aAAa2iE,sBAKtC,GAJe,MAAXt/E,IACFA,EAAU,CAAC,GAGT4yB,aAAkB4R,GAAY,CAChC,MAAMj8C,EAAIqqC,EACV5yB,EAAQzX,EAAE1K,IAAM0K,C,MAEfqqC,EAAwBvzC,SAASkJ,IAChCyX,EAAQzX,EAAE1K,IAAM0K,CAAC,UAIfxQ,KAAKqxG,kBAAkBppF,SACvBjoB,KAAK4kC,aAAa4iE,oBAAoBv/E,EAC9C,G,CAEM1jB,QAAQ0jB,G,gDACNjoB,KAAKqxG,kBAAkBppF,SACvBjoB,KAAK4kC,aAAa4iE,oBAAoBv/E,EAC9C,G,CAEMiuB,MAAMz/B,G,0CACI,MAAVA,GAAkBA,UAAiBzW,KAAK4kC,aAAa0V,eACvDt6C,KAAKkxG,SAAS1S,KAAK,IACnBx+F,KAAKmxG,aAAa3S,KAAK,WAEnBx+F,KAAK4kC,aAAa4iE,oBAAoB,KAAM,CAAE/wF,OAAQA,GAC9D,G,CAEMwsB,OAAOn9B,G,0CACX,MAAMmiB,QAAgBjoB,KAAK4kC,aAAa2iE,sBACxC,GAAe,MAAXt/E,EACF,OAGF,GAAkB,iBAAPniB,EAAiB,CAC1B,GAAmB,MAAfmiB,EAAQniB,GACV,cAEKmiB,EAAQniB,E,MAEdA,EAAgBwB,SAASnE,WACjB8kB,EAAQ9kB,EAAE,UAIfnD,KAAKqxG,kBAAkBppF,SACvBjoB,KAAK4kC,aAAa4iE,oBAAoBv/E,GAG5C,MAAM9S,QAAgBnV,KAAK4kC,aAAasV,sBACxC,GAAe,MAAX/kC,EAAiB,CACnB,MAAMq8F,EAAwB,GAC9B,IAAK,MAAMC,KAAOt8F,EACZA,EAAQs8F,GAAK7hG,WAAa9J,IAC5BqP,EAAQs8F,GAAK7hG,SAAW,KACxB4hG,EAAQj7F,KAAKpB,EAAQs8F,KAGrBD,EAAQtuG,OAAS,GACnBlD,KAAKwjD,cAAcxG,OAAOw0D,E,CAGhC,G,CAEcH,kBAAkB7oD,G,0CAC9B,MAAMvgC,EAAU7f,OAAOk9C,OAAOkD,GAAc,CAAC,GAAG1jD,KAAK0L,GAAM,IAAI21C,GAAO31C,KAEtExQ,KAAKkxG,SAAS1S,KAAKv2E,UAETjoB,KAAKykC,cAAcgW,WAC3Bz6C,KAAKmxG,aAAa3S,WAAWx+F,KAAKuxG,eAAetpF,GAErD,G,CAEcspF,eAAetpF,G,0CAC3B,MAAMypF,EAAwBzpF,EAAQnjB,KAAK0L,GAAMA,EAAE68B,YAC7CskE,QAAyBzkF,QAAQ+hB,IAAIyiE,GAE3CC,EAAiBh8D,KAAK/zC,EAAM8gD,gBAAgB1iD,KAAK2H,YAAa,SAE9D,MAAMiqG,EAAa,IAAI1rD,GAIvB,OAHA0rD,EAAW1vG,KAAOlC,KAAK2H,YAAY8J,EAAE,cACrCkgG,EAAiBp7F,KAAKq7F,GAEfD,CACT,G,KDtJA,IADCb,GAAY,CAAEf,YAAa5pD,GAAOrZ,SAAUgjE,mBAAmB,I,iBAC5C/R,GAAA,I,gCAEpB,IADC+S,GAAY,CAAEf,YAAa7pD,GAAWpZ,SAAUgjE,mBAAmB,I,iBAC5C/R,GAAA,I,oCAJbkT,GAAa,IEMnB,SAAwDnxG,GAC7D,OAAO,cAAcA,EAInBA,eAAeI,GACb0L,SAAS1L,GAGT,MAAM0kC,EAAe1kC,EAAK2hC,MAAMoyC,GAAQA,aAAe86B,KACvD,IAAKnqE,EACH,MAAM,IAAIv/B,MACR,mBAAmBvF,EAAYoC,qEAIF,MAA7BlC,KAAKgxG,sBAAkChxG,KAAKgxG,gCAAgCpsG,QAIhF5E,KAAK6xG,iBAAmB7xG,KAAKgxG,qBAAqBlsG,KAAKg8D,GACrD9gE,KAAK8xG,YAAYhxC,EAAUl8B,KAE/B,CAEAktE,YAAYhxC,EAA8Bl8B,GACxC,MAAMmtE,EAAS,IAAI9B,GAAejwG,KAAa8gE,EAASz+B,aAAcuC,EAAck8B,GAEpF,OADAixC,EAAOjoG,OACAioG,CACT,EAEJ,GFrCad,I,imBGPE,MAAMe,WCEd,MAsELlyG,YACYmyG,EACAC,EACAC,GAFA,KAAAF,eAAAA,EACA,KAAAC,iBAAAA,EACA,KAAAC,eAAAA,EAxEJ,KAAAC,QAAU,IAAIC,GAAA,EAAsB,GAC5C,KAAAr0C,QAA8Bh+D,KAAKoyG,QAAQlU,eAE3C,KAAAoU,4BAAwC,CAAC,MAGzC,KAAAC,YAAc,IAAInrG,IAAoB,CACpC,CAAC,KAAM,aACP,CAAC,KAAM,gBACP,CAAC,KAAM,cACP,CAAC,KAAM,aACP,CAAC,KAAM,SACP,CAAC,KAAM,kBACP,CAAC,KAAM,UACP,CAAC,KAAM,WACP,CAAC,KAAM,SACP,CAAC,KAAM,WACP,CAAC,KAAM,YACP,CAAC,KAAM,WACP,CAAC,QAAS,qBACV,CAAC,QAAS,mBACV,CAAC,KAAM,aACP,CAAC,KAAM,WACP,CAAC,KAAM,SACP,CAAC,KAAM,WACP,CAAC,KAAM,SACP,CAAC,KAAM,SACP,CAAC,MAAO,mBACR,CAAC,KAAM,YACP,CAAC,KAAM,SACP,CAAC,KAAM,UACP,CAAC,KAAM,YACP,CAAC,KAAM,UACP,CAAC,KAAM,oBACP,CAAC,KAAM,YACP,CAAC,KAAM,OACP,CAAC,KAAM,WACP,CAAC,KAAM,8BACP,CAAC,KAAM,SACP,CAAC,KAAM,OACP,CAAC,KAAM,kBACP,CAAC,KAAM,aACP,CAAC,KAAM,cACP,CAAC,KAAM,UACP,CAAC,KAAM,kBACP,CAAC,KAAM,cACP,CAAC,KAAM,iBACP,CAAC,KAAM,UACP,CAAC,QAAS,uBACV,CAAC,QAAS,aACV,CAAC,KAAM,UACP,CAAC,KAAM,WACP,CAAC,KAAM,SACP,CAAC,KAAM,cACP,CAAC,KAAM,gCACP,CAAC,KAAM,UACP,CAAC,KAAM,WACP,CAAC,KAAM,OACP,CAAC,KAAM,UACP,CAAC,KAAM,cACP,CAAC,KAAM,cACP,CAAC,QAAS,YACV,CAAC,QAAS,YAIF,KAAAorG,gBAAuB,CAAC,EACxB,KAAAC,eAAsB,CAAC,EAO/BzyG,KAAKiyG,eAAiBA,EAAe1tG,QAAQ,IAAK,IACpD,CAEMuF,KAAKm0D,G,0CACT,GAAIj+D,KAAK8B,OACP,MAAM,IAAIuD,MAAM,6BAElB,GAAwC,MAApCrF,KAAKsyG,6BAAmF,IAA5CtyG,KAAKsyG,4BAA4BpvG,OAC/E,MAAM,IAAImC,MAAM,wCAGlBrF,KAAK8B,QAAS,EACd9B,KAAK0yG,kBAA8B,MAAVz0C,EAAiBA,EAASj+D,KAAKiyG,eACxDjyG,KAAKoyG,QAAQ5T,KAAKx+F,KAAK0yG,mBAEvB,IACE1yG,KAAK+H,SAAW,IAAI4qG,KAAKC,SAAS5yG,KAAK0yG,kBAAmB,CACxDG,SAAS,EACTC,YAAa,Q,CAEf,SACA9yG,KAAK+H,SAAW,I,EAGwD,IAAtE/H,KAAKsyG,4BAA4B7rG,QAAQzG,KAAK0yG,qBAChD1yG,KAAK0yG,kBAAoB1yG,KAAK0yG,kBAAkBztG,MAAM,EAAG,IAEiB,IAAtEjF,KAAKsyG,4BAA4B7rG,QAAQzG,KAAK0yG,qBAChD1yG,KAAK0yG,kBAAoB1yG,KAAKsyG,4BAA4B,KAIjC,MAAzBtyG,KAAKkyG,yBACDlyG,KAAK+yG,aAAa/yG,KAAK0yG,kBAAmB1yG,KAAKyyG,gBACjDzyG,KAAK0yG,oBAAsB1yG,KAAKsyG,4BAA4B,WACxDtyG,KAAK+yG,aAAa/yG,KAAKsyG,4BAA4B,GAAItyG,KAAKwyG,kBAGxE,G,CAEA/gG,EAAE3L,EAAYktG,EAAaC,EAAaC,GACtC,OAAOlzG,KAAKmzG,UAAUrtG,EAAIktG,EAAIC,EAAIC,EACpC,CAEAC,UAAUrtG,EAAYktG,EAAaC,EAAaC,GAC9C,IAAI9sE,EAuBJ,OApBEA,EADEpmC,KAAKyyG,eAAez8F,eAAelQ,IAAO9F,KAAKyyG,eAAe3sG,GACvD9F,KAAKyyG,eAAe3sG,GAEpB9F,KAAKwyG,gBAAgBx8F,eAAelQ,IAAO9F,KAAKwyG,gBAAgB1sG,GAChE9F,KAAKwyG,gBAAgB1sG,GAErB,GAGI,KAAXsgC,IACQ,MAAN4sE,IACF5sE,EAASA,EAAO/+B,MAAM,UAAUnC,KAAK8tG,IAE7B,MAANC,IACF7sE,EAASA,EAAO/+B,MAAM,UAAUnC,KAAK+tG,IAE7B,MAANC,IACF9sE,EAASA,EAAO/+B,MAAM,UAAUnC,KAAKguG,KAIlC9sE,CACT,CAEc2sE,aAAa90C,EAAgBm1C,G,0CACzC,MAAMC,EAAkBp1C,EAAO15D,QAAQ,IAAK,KACtC+uG,QAAgBtzG,KAAKmyG,eAAekB,GAC1C,IAAK,MAAMzrG,KAAQ0rG,EAEjB,GAAKA,EAAQt9F,eAAepO,KAG5BwrG,EAAYxrG,GAAQ0rG,EAAQ1rG,GAAM4N,QAE9B89F,EAAQ1rG,GAAM2rG,cAChB,IAAK,MAAMC,KAAaF,EAAQ1rG,GAAM2rG,aAAc,CAClD,IACGD,EAAQ1rG,GAAM2rG,aAAav9F,eAAew9F,KAC1CF,EAAQ1rG,GAAM2rG,aAAaC,GAAWC,QAEvC,SAGF,MAAMC,EAAe,MAAQF,EAAU1qG,cAAgB,MACvD,IAAI6qG,EAAiBL,EAAQ1rG,GAAM2rG,aAAaC,GAAWC,QACpC,OAAnBE,GAA8C,OAAnBA,GAA8C,OAAnBA,IACxDA,EAAiB,MAAQA,EAAiB,MAE5CP,EAAYxrG,GAAQwrG,EAAYxrG,GAAMrD,QACpC,IAAIwB,OAAO2tG,EAAc,KACzBC,E,CAKV,G,GDlLA7zG,YAAYmyG,GACVrmG,MAAMqmG,EAAgB,MAAaoB,GAA4B,mCAE7D,MAAMpsF,QAAamF,MAAMpsB,KAAKkyG,iBAAmBmB,EAAkB,kBACnE,aAAapsF,EAAK8F,MACpB,MAGA/sB,KAAKsyG,4BAA8B,CACjC,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,QACA,QACA,KACA,KACA,KACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,QACA,QACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,QACA,QAEJ,CAEA7gG,EAAE3L,EAAYktG,EAAaC,EAAaC,GACtC,OAAOlzG,KAAKmzG,UAAUrtG,EAAIktG,EAAIC,EAAIC,EACpC,CAEAC,UAAUrtG,EAAYktG,EAAaC,EAAaC,GAC9C,GAA6B,MAAzBlzG,KAAKkyG,iBAA0B,CACjC,MAAMqB,EAAyB,GAW/B,OAVU,MAANP,GACFO,EAAah9F,KAAKy8F,GAEV,MAANC,GACFM,EAAah9F,KAAK08F,GAEV,MAANC,GACFK,EAAah9F,KAAK28F,GAGhBK,EAAarwG,OACRuvE,OAAOmC,KAAKg/B,WAAW9tG,EAAIytG,GAE3B9gC,OAAOmC,KAAKg/B,WAAW9tG,E,CAIlC,OAAO8F,MAAMunG,UAAUrtG,EAAIktG,EAAIC,EAAIC,EACrC,EEtFK,MAAMW,GAWX/zG,YAAYgK,GATZ,KAAAgqG,oBAAqB,EAGrB,KAAAC,gBAAiB,EAGjB,KAAAC,aAAc,EACd,KAAAC,8BAA+B,EAG7B7rG,OAAOC,OAAOrI,KAAM8J,EACtB,CAEAoqG,cACEl0G,KAAKm0G,WAAa,KAClBn0G,KAAKyU,OAAS,KACdzU,KAAK8zG,oBAAqB,EAC1B9zG,KAAKo0G,qBAAuB,KAC5Bp0G,KAAK+zG,gBAAiB,EACtB/zG,KAAKq0G,iBAAmB,IAC1B,CAEAC,oBACEt0G,KAAKg0G,aAAc,EACnBh0G,KAAKu0G,uBAAyB,KAC9Bv0G,KAAKk0G,aACP,CAEAM,cACE,OAAQn+D,IACN,IAAIo+D,GAAqB,EA+BzB,MA9BoB,cAAhBz0G,KAAKyU,QAA0BggG,IACjCA,EAAqBp+D,EAAOvmC,UAEV,UAAhB9P,KAAKyU,QAAsBggG,IAC7BA,EAAqBp+D,EAAO7C,WAEP,MAAnBxzC,KAAKm0G,YAAsBM,IAC7BA,EAAqBp+D,EAAOnsC,OAASlK,KAAKm0G,YAExCn0G,KAAK+zG,gBAA2C,MAAzB/zG,KAAKq0G,kBAA4BI,IAC1DA,EAAwC,MAAnBp+D,EAAOzmC,UAE1B5P,KAAK+zG,gBAA2C,MAAzB/zG,KAAKq0G,kBAA4BI,IAC1DA,EAAqBp+D,EAAOzmC,WAAa5P,KAAKq0G,kBAE5Cr0G,KAAK8zG,oBAAmD,MAA7B9zG,KAAKo0G,sBAAgCK,IAClEA,EAC2B,MAAzBp+D,EAAO1mC,iBACkB,MAAxB0mC,EAAOnmC,eAAyD,IAAhCmmC,EAAOnmC,cAAchN,SAEtDlD,KAAK8zG,oBAAmD,MAA7B9zG,KAAKo0G,sBAAgCK,IAClEA,EAC0B,MAAxBp+D,EAAOnmC,eAAyBmmC,EAAOnmC,cAAc6wD,SAAS/gE,KAAKo0G,uBAEpC,MAA/Bp0G,KAAKu0G,wBAAkCE,IACzCA,EAAqBp+D,EAAO1mC,iBAAmB3P,KAAKu0G,wBAElDv0G,KAAKg0G,aAAeS,IACtBA,EAA+C,OAA1Bp+D,EAAO1mC,gBAEvB8kG,CAAkB,CAE7B,E,4BCpEK,MAAMC,GAQX50G,YAAYgK,GACV1B,OAAOC,OAAOrI,KAAM8J,EACtB,CANA6qG,MAAM7uG,GACJ,OAAwB,MAAjB9F,KAAK40G,UAAoB50G,KAAK40G,SAASpsG,QAAQrF,GAASA,EAAE2C,KAAOA,IAAI5C,OAAS,CACvF,ECgBK,MAAe,ICvBf,MAAe,ICIf,MAAe,ICEf,MAAe,ICJf,MAAe,ICGf,MAAe,I,2SCaf,MAAM,GACXpD,YACY8kC,EACA6e,EACA+C,EACAhD,EACAqgB,EACArN,GALA,KAAA5xB,aAAAA,EACA,KAAA6e,oBAAAA,EACA,KAAA+C,cAAAA,EACA,KAAAhD,cAAAA,EACA,KAAAqgB,kBAAAA,EACA,KAAArN,cAAAA,CACT,CAEGq+C,0BAA0BC,G,gDACxB90G,KAAK4kC,aAAa09D,sBAAsB19F,MAAM9B,KAAKgyG,GAC3D,G,CAEMC,4B,0CACJ,OAAO,IAAIt9D,UAAUz3C,KAAK4kC,aAAaw9D,wBACzC,G,CAEM4S,qB,0CACJ,aAAah1G,KAAKyjD,oBAAoBrJ,QACxC,G,CAEA66D,mBAAmBtlG,GACjB,MAAMulG,EAAwBC,GAAgC,mCAC5D,IAAIltF,EACJ,GAAsB,MAAlBtY,EAAwB,CAC1B,MAAMwF,QAAgBnV,KAAKwjD,cAAcnJ,kBACnC+6D,EAAajgG,EAAQ3M,QAAQ9C,GAAMA,EAAEiK,gBAAkBA,IAC7DsY,EAAUktF,EAAc3sG,QACrBgI,GACC4kG,EAAW5sG,QAAQ6sG,GAAOA,EAAGzlG,UAAYY,EAAE1K,KAAI5C,OAAS,GACxDiS,EAAQ3M,QAAQ9C,GAAMA,EAAEkK,UAAYY,EAAE1K,KAAI5C,OAAS,G,MAGvD+kB,EAAUktF,EAEZ,MAAMG,QAAsBt1G,KAAKu1G,oBAAoBttF,GACrD,OAAO,IAAIysF,GAA4B,CACrCE,SAAU3sF,EACVutF,WAAYF,GAEhB,IAEA,OAAOt1G,KAAKwmD,cAAc+B,aAAaktD,MACrC,EAAAC,GAAA,IAAUztF,IAAY,EAAAnlB,GAAA,GAAKoyG,EAAejtF,MAE9C,CAEM0tF,iBAAiBhmG,G,0CACrB,MAAMimG,QAA0B51G,KAAK6jE,kBAAkBxpB,kBACvD,IAAI7iC,EAEFA,EADoB,MAAlB7H,EACYimG,EAAkBptG,QAAQ9C,GAAMA,EAAEiK,iBAAmBA,IAErDimG,EAEhB,MAAMC,QAA0B71G,KAAK6jE,kBAAkB/gB,aAAatrC,GACpE,OAAO,IAAIk9F,GAAgC,CACzCE,SAAUp9F,EACVg+F,WAAYK,GAEhB,G,CAEMC,mC,0CACJ,aAAa91G,KAAKw2D,cAAcoG,oBAAoBhI,GAAWmhD,UACjE,G,CAEMC,kC,0CACJ,aAAah2G,KAAKw2D,cAAcoG,oBAAoBhI,GAAWqhD,kBACjE,G,CAEgBV,oBAAoBttF,G,0CAClC,MAAM86B,EAAgC,GAQtC,OAPA96B,EAAQ3gB,SAASkJ,IACf,MAAM0lG,EAAa,IAAIhwD,GACvBgwD,EAAWpwG,GAAK0K,EAAE1K,GAClBowG,EAAWzpG,aAAe+D,EAAE/D,aAC5B,MAAMjF,EAAkB,MAAVgJ,EAAEtO,KAAesO,EAAEtO,KAAKqC,QAAQ,aAAc,IAAI8C,MAhF7C,KAgFuE,GAC1Fq6C,GAAaK,eAAegB,EAAO,EAAGv7C,EAAO0uG,EAAY,KAjFtC,IAiF6D,IAE3EnzD,CACT,G,CAEMozD,gBAAgBrwG,G,0CACpB,MAAMmiB,QAAgBjoB,KAAKu1G,0BACnB,EAAAjtD,GAAA,GAAetoD,KAAKwmD,cAAc+B,eAE1C,OAAO7G,GAAaO,kBAAkBh6B,EAASniB,EACjD,G,oCAxFW,IAAkB,oE,uBAAlB,GAAkB,QAAlB,GAAkB,OCXxB,MAAMswG,WAA2B,GAMtCt2G,YACE8kC,EACA6e,EACA+C,EACAhD,EACAqgB,EACArN,GAEA5qD,MACEg5B,EACA6e,EACA+C,EACAhD,EACAqgB,EACArN,GAnBJ,KAAA6/C,YAA2B,IAAIxC,GAE/B,KAAAyC,UAAY,YACZ,KAAAC,QAAU,UAkBRv2G,KAAKq2G,YAAYrC,aAAc,EAC/Bh0G,KAAKq2G,YAAY9B,uBAAyB,IAC5C,CAEAiC,iBACE,OAAOx2G,KAAKq2G,WACd,CAEAI,eAAejuG,GACTA,IAAWxI,KAAKs2G,WAClBt2G,KAAKq2G,YAAYrC,aAAc,EAC/Bh0G,KAAKq2G,YAAY9B,uBAAyB,MACjC/rG,IAAWxI,KAAKu2G,SACzBv2G,KAAKq2G,YAAYrC,aAAc,EAC/Bh0G,KAAKq2G,YAAY9B,uBAAyB,OAE1Cv0G,KAAKq2G,YAAYrC,aAAc,EAC/Bh0G,KAAKq2G,YAAY9B,uBAAyB/rG,EAE9C,CAEA0tC,QACEl2C,KAAKy2G,eAAez2G,KAAKs2G,UAC3B,CAEAI,6BAA6BrgE,GAC3B,IAAKr2C,KAAKq2G,YAAY9B,yBAA2Bv0G,KAAKq2G,YAAYrC,YAChE,OAAO,EAET,GAAIh0G,KAAKq2G,YAAY9B,wBACnB,GAAIl+D,EAAO1mC,iBAAmB3P,KAAKq2G,YAAY9B,uBAC7C,OAAO,OAEJ,GAAIv0G,KAAKq2G,YAAYrC,cACrB39D,EAAO1mC,eACV,OAAO,EAGX,OAAO,CACT,E,slBCnEa,MAAMgnG,WCYd,MAGL72G,YACU0jD,EACAgD,EACAqd,EACAp/B,EACEx6B,EACFy6B,EACAmT,EACAjtB,EACA4rC,EACA1vB,EACAlC,EACA4C,EACAovE,EAAqD,KACrDC,EAA0E,MAb1E,KAAArzD,cAAAA,EACA,KAAAgD,cAAAA,EACA,KAAAqd,kBAAAA,EACA,KAAAp/B,cAAAA,EACE,KAAAx6B,qBAAAA,EACF,KAAAy6B,iBAAAA,EACA,KAAAmT,cAAAA,EACA,KAAAjtB,aAAAA,EACA,KAAA4rC,cAAAA,EACA,KAAA1vB,oBAAAA,EACA,KAAAlC,aAAAA,EACA,KAAA4C,YAAAA,EACA,KAAAovE,eAAAA,EACA,KAAAC,kBAAAA,EAhBF,KAAA/0G,QAAS,CAiBd,CAEHgI,KAAK45C,GACC1jD,KAAK8B,SAIT9B,KAAK8B,QAAS,EACV4hD,GACF1jD,KAAK82G,aAET,CAEAA,aACE92G,KAAK+2G,oBACLnzD,aAAY,IAAM5jD,KAAK+2G,qBAAqB,IAC9C,CAEMA,oB,0CACJ,WAAU/2G,KAAKiK,qBAAqBswF,cAIpC,IAAK,MAAM9jF,KAAUzW,KAAK4kC,aAAa+hC,SAASC,WAChC,MAAVnwD,UAAyBzW,KAAKg3G,WAAWvgG,YACrCzW,KAAKi3G,qBAAqBxgG,GAGtC,G,CAEMygG,KAAKC,GAAgB,EAAO1gG,G,0CAEhC,SADqBzW,KAAK4kC,aAAa8E,mBAAmB,CAAEjzB,OAAQA,IACpE,CAIA,SAAUzW,KAAK8mC,oBAAoBumB,sBAAuB,CACxD,MAAM+pD,QAAep3G,KAAKq3G,eAEvBD,EAAO,IAA8D,aAAjDp3G,KAAK4kC,aAAaiiC,6BAAwCuwC,EAAO,WAEhEp3G,KAAKs3G,8BACrBt3G,KAAKopC,OAAO3yB,G,CAIR,MAAVA,GAAkBA,WAAkBzW,KAAK4kC,aAAa0V,eACxDt6C,KAAK63C,cAAcO,mBACbp4C,KAAKwmD,cAAclO,oBAGrBt4C,KAAK4kC,aAAaujE,qBAAoB,EAAM,CAAE1xF,OAAQA,UACtDzW,KAAK4kC,aAAauvD,uBAAuB,KAAM,CAAE19E,OAAQA,UAEzDzW,KAAKykC,cAAcuvD,UAAS,EAAOv9E,SACnCzW,KAAKykC,cAAciwD,cAAa,EAAMj+E,SACtCzW,KAAKykC,cAAc+vD,cAAa,EAAM/9E,SACtCzW,KAAKykC,cAAc6vD,aAAY,EAAM79E,SAErCzW,KAAKwjD,cAAclL,WAAW7hC,SAC9BzW,KAAK6jE,kBAAkBvrB,WAAW7hC,GAExCzW,KAAK0kC,iBAAiBnX,KAAK,SAAU,CAAE9W,OAAQA,IAEpB,MAAvBzW,KAAK42G,uBACD52G,KAAK42G,eAAengG,G,CAE9B,G,CAEM2yB,OAAO3yB,G,0CACmB,MAA1BzW,KAAK62G,0BACD72G,KAAK62G,mBAAkB,EAAOpgG,GAExC,G,CAEM8gG,uBAAuBvtF,EAAiBwtF,G,gDACtCx3G,KAAK4kC,aAAa4mE,gBAAgBxhF,GAIxC,MAAM5e,QAAcpL,KAAK4qB,aAAamT,WAChC/lB,QAAqBhY,KAAK4qB,aAAaoU,kBACvCl0B,QAAiB9K,KAAK4qB,aAAasU,cACnCvzB,QAAqB3L,KAAK4qB,aAAauU,kBAEvCs4E,QAAsBz3G,KAAK4kC,aAAa6mE,wBAC9B,MAAXzhF,GAA+B,IAAZA,GAA6B,WAAXwtF,GAAuBA,IAAWC,UAEpEz3G,KAAK4qB,aAAak+C,oBAGpB9oE,KAAK4kC,aAAagnE,sBAAsB4L,SAExCx3G,KAAK4qB,aAAagV,SAASx0B,SAC3BpL,KAAK4qB,aAAa29C,gBAAgBvwD,SAClChY,KAAK4qB,aAAa49C,YAAY19D,SAC9B9K,KAAK4qB,aAAa69C,gBAAgB98D,SAElC3L,KAAKykC,cAAcswD,WAC3B,G,CAEMsiB,e,0CAGJ,MAAO,CAAiB,aAFGr3G,KAAK4kC,aAAa0lE,mBAEI,aADnBtqG,KAAK4kC,aAAawwD,4BAElD,G,CAEMkiB,qB,0CACJ,aAAat3G,KAAK4kC,aAAa2yD,oBACjC,G,CAEMD,gBAAgB7gF,G,0CACpB,MAAMw/D,QAAqBj2E,KAAK4kC,aAAa0yD,gBAAgB,CAAE7gF,OAAQA,IAEvE,SACQzW,KAAKw2D,cAAcoG,oBAAoBhI,GAAWuI,oBAAqB,KAAM1mD,GACnF,CACA,MAAMqkD,QAAe96D,KAAKw2D,cAAcpc,OAAOwa,GAAWuI,oBAAqB1mD,GAE/E,IAAIuT,EAAUpkB,KAAK8sD,IAAIujB,EAAcnb,EAAO,GAAG7tD,KAAKs8D,SAWpD,OAToB,MAAhB0M,GAAwBjsD,EAAU,KACpCA,EAAU8wC,EAAO,GAAG7tD,KAAKs8D,SAIvB0M,IAAiBjsD,UACbhqB,KAAK4kC,aAAa4mE,gBAAgBxhF,EAAS,CAAEvT,OAAQA,KAGtDuT,C,CAGT,OAAOisD,CACT,G,CAEM//B,MAAMz/B,G,gDACJzW,KAAK4kC,aAAaujE,qBAAoB,EAAO,CAAE1xF,OAAQA,UACvDzW,KAAK4kC,aAAam+D,yBAAyB,KAAM,CAAEtsF,OAAQA,UAC3DzW,KAAK4kC,aAAa4lE,gBAAgB,KAAM,CAAE/zF,OAAQA,GAC1D,G,CAEcugG,WAAWvgG,G,0CACvB,MAAMihG,QAAmB13G,KAAKwnC,YAAYiC,cAAchzB,GACxD,GACEihG,IAAen4G,EAAqB2qC,QACpCwtE,IAAen4G,EAAqBoqC,UAEpC,OAAO,EAGT,MAAMssC,QAAqBj2E,KAAKs3F,gBAAgB7gF,GAChD,GAAoB,MAAhBw/D,GAAwBA,EAAe,EACzC,OAAO,EAGT,MAAM/O,QAAmBlnE,KAAK4kC,aAAauiC,cAAc,CAAE1wD,OAAQA,IACnE,GAAkB,MAAdywD,EACF,OAAO,EAGT,MAAMywC,EAAqC,GAAf1hC,EAE5B,QADqB,IAAIvpE,MAAO6vC,UAAY2qB,GAAc,KACpCywC,CACxB,G,CAEcV,qBAAqBxgG,G,0CAEf,kBADUzW,KAAK4kC,aAAa6mE,sBAAsB,CAAEh1F,OAAQA,WAC3CzW,KAAKopC,OAAO3yB,SAAgBzW,KAAKk3G,MAAK,EAAMzgG,EACjF,G,GDtMAqgG,aACE92G,KAAK+2G,oBACD/2G,KAAKiK,qBAAqBmwF,WAC5Bp6F,KAAK43G,cAELh0D,aAAY,IAAM5jD,KAAK+2G,qBAAqB,IAEhD,CAKMa,c,0CAEJ,OACE,UACQriC,GAAUgmB,iBAAiB,SACjCv7F,KAAK+2G,mB,CACL,MAAO9vG,GAEPm1F,QAAQvE,IAAI,gCAAiC5wF,E,CAGnD,G,6SEjBa,MAAM4wG,GAInB/3G,YACUg4G,EACAC,EACA9tG,EACA+tG,EACAxwE,GAJA,KAAAswE,KAAAA,EACA,KAAAC,0BAAAA,EACA,KAAA9tG,qBAAAA,EACA,KAAA+tG,oBAAAA,EACA,KAAAxwE,YAAAA,EAERxnC,KAAKo6F,SAAWp6F,KAAKiK,qBAAqBmwF,WAC1Cp6F,KAAKm6F,UAAYn6F,KAAKiK,qBAAqBkwF,WAC7C,CAEMrwF,O,0CACJuoE,GAAWo+B,gBACT,uBACA,CAAO38B,EAAUC,EAAsClsD,IAAsB,mCACvD,oBAAhBisD,EAAId,SAAqD,wBAApBc,EAAI7mE,KAAK/E,eAC1ClI,KAAKi4G,eACTnkC,EAAI7mE,KAAKirG,eAAepkC,IAAId,QAC5Bc,EAAI7mE,KAAKirG,eAAenkC,SAIxB/zE,KAAKm6F,WAA6B,8BAAhBrmB,EAAId,SAA2Cc,EAAIqkC,iBACjEn4G,KAAKi4G,eAAenkC,EAAIqkC,SAAUpkC,GAE5C,OAGG/zE,KAAKm6F,WAAa1nB,QAAUA,OAAO2lC,UACtC3lC,OAAO2lC,SAASC,UAAU7kC,aAAmBR,GAAoB,yCACzDhzE,KAAKi4G,eAAejlC,EAC5B,KAEJ,G,CAEcilC,eAAejlC,EAAiBe,G,0CAC5C,OAAQf,GACN,IAAK,0BACGhzE,KAAKs4G,8BACX,MACF,IAAK,uBACGt4G,KAAKu4G,cAAcxkC,EAASA,EAAOhB,IAAM,MAC/C,MACF,IAAK,mBACG/yE,KAAKw4G,YACX,MACF,IAAK,mBACGx4G,KAAKg4G,oBAAoBd,MAAK,GAK1C,G,CAEcoB,8B,0CACZ,MAAM5hD,SAAiB12D,KAAK+3G,0BAA0BpgD,cAAc,GAC9D1oD,QAAiBjP,KAAK+3G,0BAA0BthD,iBAAiBC,GACvE12D,KAAKiK,qBAAqB89D,gBAAgB94D,EAAU,CAAE1N,SACtDvB,KAAK+3G,0BAA0Bj/C,WAAW7pD,EAC5C,G,CAEcspG,cAAcxlC,G,0CAK1B,GAJKA,IACHA,QAAYV,GAAWomC,6BAGd,MAAP1lC,EAAJ,CAIA,UAAW/yE,KAAKwnC,YAAYiC,iBAAmBlqC,EAAqB0qC,SAAU,CAC5E,MAAMyuE,EAAoD,CACxDR,eAAgB,CACdpkC,IAAK,CAAEd,QAAS,kBAChBe,OAAQ,CAAEhB,IAAKA,IAEjB7qE,OAAQ,uBASV,aAPMmqE,GAAWsmC,mBACf5lC,EACA,uCACA2lC,QAGFrmC,GAAWsmC,mBAAmB5lC,EAAK,iB,OAI/B/yE,KAAK83G,KAAKc,mCAAmC7lC,EAAK,e,CAC1D,G,CAEcylC,Y,0CAEPx4G,KAAKo6F,UAIVp6F,KAAK83G,KAAKU,WACZ,G,6SCjGa,MAAMK,GAInB/4G,YACUg4G,EACAt0D,EACAu0D,EACA9tG,EACAu9B,EACA2gD,EACAD,GANA,KAAA4vB,KAAAA,EACA,KAAAt0D,cAAAA,EACA,KAAAu0D,0BAAAA,EACA,KAAA9tG,qBAAAA,EACA,KAAAu9B,YAAAA,EACA,KAAA2gD,aAAAA,EACA,KAAAD,YAAAA,EAVO,KAAA4wB,kBAAoB,OAYnC94G,KAAK+4G,aAAetmC,OAAOsmC,YAC7B,CAEMjvG,O,0CACC9J,KAAK+4G,eAIV/4G,KAAK+4G,aAAaC,UAAUxlC,aAC1B,CAAOpU,EAAuC2T,IAAyB,mCAC7C,sBAApB3T,EAAK65C,iBACDj5G,KAAKs4G,8BACkB,oBAApBl5C,EAAK65C,iBACRj5G,KAAKk5G,kBAAkBnmC,EAAK3T,EAAK2qB,SAEb,aAA1B3qB,EAAK+5C,kBACqB,kBAA1B/5C,EAAK+5C,kBACqB,kBAA1B/5C,EAAK+5C,kBACqB,cAA1B/5C,EAAK+5C,yBAECn5G,KAAKo5G,aAAarmC,EAAK3T,GAEjC,MAGFiT,GAAWo+B,gBACT,2BACA,CAAO38B,EAAUC,EAAsClsD,IAAsB,mCACvD,oBAAhBisD,EAAId,SAAqD,4BAApBc,EAAI7mE,KAAK/E,eAC1ClI,KAAKo5G,aACTtlC,EAAI7mE,KAAKirG,eAAenkC,OAAOhB,IAC/Be,EAAI7mE,KAAKirG,eAAepkC,IAAI7mE,MAGlC,MAEJ,G,CAEcqrG,8B,0CACZ,MAAM5hD,SAAiB12D,KAAK+3G,0BAA0BpgD,cAAc,GAC9D1oD,QAAiBjP,KAAK+3G,0BAA0BthD,iBAAiBC,GACvE12D,KAAKiK,qBAAqB89D,gBAAgB94D,EAAU,CAAE1N,SACtDvB,KAAK+3G,0BAA0Bj/C,WAAW7pD,EAC5C,G,CAEciqG,kBAAkBnmC,EAAsBgX,G,0CACzC,MAAPhX,GAIJV,GAAWY,eAAeF,EAAK,CAAEC,QAAS,qBAAuB,CAAE+W,QAASA,GAC9E,G,CAEcqvB,aAAarmC,EAAsB3T,G,0CAC/C,GAA+B,iBAApBA,EAAK65C,WACd,OAGF,MAAMnzG,EAAKs5D,EAAK65C,WAAW5xG,MAAM,KAAK,GAEtC,UAAWrH,KAAKwnC,YAAYiC,iBAAmBlqC,EAAqB0qC,SAAU,CAC5E,MAAMyuE,EAAoD,CACxDR,eAAgB,CACdpkC,IAAK,CAAEd,QAAShzE,KAAK84G,kBAAmB7rG,KAAMmyD,GAC9C2U,OAAQ,CAAEhB,IAAKA,IAEjB7qE,OAAQ,2BASV,aAPMmqE,GAAWsmC,mBACf5lC,EACA,uCACA2lC,QAGFrmC,GAAWsmC,mBAAmB5lC,EAAK,iB,CAIrC,IAAI18B,EACJ,GAAIvwC,IAAO9F,KAAK84G,kBAAmB,CAEjCziE,SADsBr2C,KAAKwjD,cAAc1I,sBAAsBi4B,EAAI7sE,MAClD27B,MAAMn8B,GAAMA,EAAEkL,WAAapR,EAAmBqR,M,KAC1D,CAELwlC,SADsBr2C,KAAKwjD,cAAcnJ,mBACxBxY,MAAMn8B,GAAMA,EAAEI,KAAOA,G,CAGxC,GAAc,MAAVuwC,EAIJ,GAA8B,aAA1B+oB,EAAK+5C,uBACDn5G,KAAKq5G,kBAAkBtmC,EAAK18B,QAC7B,GAA8B,kBAA1B+oB,EAAK+5C,iBACdn5G,KAAKiK,qBAAqB89D,gBAAgB1xB,EAAOjmC,MAAMzB,SAAU,CAAEpN,cAC9D,GAA8B,kBAA1B69D,EAAK+5C,iBACdn5G,KAAKiK,qBAAqB89D,gBAAgB1xB,EAAOjmC,MAAMnB,SAAU,CAAE1N,SACnEvB,KAAKmoF,aAAatkC,QAAQqB,GAAUo0D,4BAA6BjjE,EAAOvwC,SACnE,GAA8B,cAA1Bs5D,EAAK+5C,iBAAkC,CAChD,MAAMI,QAAkBv5G,KAAKkoF,YAAYje,QAAQ5zB,EAAOjmC,MAAMjB,MAC9DnP,KAAKiK,qBAAqB89D,gBAAgBwxC,EAAW,CAAEh4G,Q,CAE3D,G,CAEc83G,kBAAkBtmC,EAAsB18B,G,0CACpDr2C,KAAK83G,KAAK0B,gBAAkBnjE,EACjB,MAAP08B,GAIJV,GAAWY,eAAeF,EAAK,CAC7BC,QAAS,qBACTD,IAAKA,EACLgB,OAAQ,eAEZ,G,6SCzIa,MAAM0lC,GAKnB35G,YACUk4G,EACApzE,EACA80E,GAFA,KAAA1B,oBAAAA,EACA,KAAApzE,aAAAA,EACA,KAAA80E,qBAAAA,EANF,KAAAC,UAAoB,KACpB,KAAAC,UAAY,SAOlB55G,KAAK65G,KAAOpnC,OAAOonC,OAAoB,MAAXxmC,QAAkBA,QAAQwmC,KAAO,KAC/D,CAEM/vG,O,0CACJ,IAAK9J,KAAK65G,KACR,OAGF,MAAMC,EAAeC,IACF,WAAbA,EACF/5G,KAAK05G,qBAAqB9nD,wBAE1B5xD,KAAK05G,qBAAqB7nD,0B,EAG1B7xD,KAAK65G,KAAKG,gBAAkBh6G,KAAK65G,KAAKI,sBACxCj6G,KAAK65G,KAAKI,qBA5BK,KA6Bfj6G,KAAK65G,KAAKG,eAAexmC,YAAYsmC,IAErC95G,KAAKk6G,SAASJ,GAGZ95G,KAAK65G,KAAKG,gBACZh6G,KAAK65G,KAAKG,eAAexmC,aAAmBumC,GAAqB,mCAC/D,GAAiB,WAAbA,EAAuB,CAGzB,IAAiB,WADK/5G,KAAK4kC,aAAa0yD,mBACpB,CAGH,kBADMt3F,KAAK4kC,aAAa6mE,+BAE/BzrG,KAAKg4G,oBAAoB5uE,eAEzBppC,KAAKg4G,oBAAoBd,MAAK,E,EAI5C,KAEJ,G,CAEQgD,SAASC,GACO,MAAlBn6G,KAAK25G,YACPp4G,OAAOkpC,aAAazqC,KAAK25G,WACzB35G,KAAK25G,UAAY,MAEnB35G,KAAK65G,KAAKO,WA1DO,KA0DmBhsG,IAC9BA,IAAUpO,KAAK45G,YACjB55G,KAAK45G,UAAYxrG,EACjB+rG,EAAQ/rG,IAEVpO,KAAK25G,UAAYp4G,OAAOipC,YAAW,IAAMxqC,KAAKk6G,SAASC,IAAU,IAAK,GAE1E,E,2SCfK,MAAME,GAaXv6G,YACU2kC,EACApD,EACAi5E,EACA3yG,EACA+8B,EACA5Z,EACA7gB,EACA26B,EACAD,EACA6C,G,MATA,KAAA/C,cAAAA,EACA,KAAApD,sBAAAA,EACA,KAAAi5E,kBAAAA,EACA,KAAA3yG,YAAAA,EACA,KAAA+8B,iBAAAA,EACA,KAAA5Z,aAAAA,EACA,KAAA7gB,qBAAAA,EACA,KAAA26B,aAAAA,EACA,KAAAD,WAAAA,EACA,KAAA6C,YAAAA,EAtBF,KAAAgpB,WAAY,EAIZ,KAAA+pD,SAAgB,KAChB,KAAAliG,WAA0B,KAC1B,KAAAqE,UAAyB,KACzB,KAAA89F,mBAA0B,KAiBhCx6G,KAAK4kC,aAAa68D,kCAAiC,IAE5B,QAAnB,EAAM,OAANhvB,aAAM,IAANA,YAAM,EAANA,OAAQnvD,mBAAW,eAAEm3F,UAEvBhoC,OAAOnvD,YAAYm3F,QAAQjnC,aAAalwD,IACtC+uD,GAAWqoC,gBAAgB,KAAK,GAGtC,CAEMC,U,0CAIJ,OAHA36G,KAAKgK,YAAchK,KAAK8qB,aAAa2U,WACrCz/B,KAAK4kC,aAAa68D,kCAAiC,GAE5C,IAAIv0E,SAAc,CAAC2V,EAAS1V,KACjCntB,KAAK46G,KAAOvoC,GAAW6C,cAAc,sBAErCl1E,KAAK66G,YAAa,EAElB,MAAMC,EAAoB,KACxB96G,KAAKwwD,WAAY,EACjBxwD,KAAK66G,YAAa,EAClBh4E,GAAS,EAKP7iC,KAAKiK,qBAAqBmwF,YAC5B0gB,IAGF96G,KAAK46G,KAAK/mC,UAAUL,aAAmBh+D,GAAiC,mCACtE,OAAQA,EAAQw9D,SACd,IAAK,YACH8nC,IACA,MACF,IAAK,eACC96G,KAAK66G,YACP1tF,EAAO,gBAETntB,KAAKwwD,WAAY,EACjBxwD,KAAK46G,KAAKG,aACV,MACF,IAAK,kBAAmB,CAEtB,GAAIvlG,EAAQxL,QAAUhK,KAAKgK,MACzB,OAGF,MAAMq9C,EAAYzlD,EAAMyB,eAAemS,EAAQwlG,cACzCriD,QAAkB34D,KAAKqhC,sBAAsBsuD,WACjDtoC,EAAUxjD,OACV7D,KAAKqY,WAjHS,QAqHZrY,KAAKi7G,wBACPj7G,KAAKi7G,uBAAwB,EAC7Bj7G,KAAK4kC,aAAa68D,kCAAiC,IAErDzhG,KAAKg7G,aAAe,IAAIhvE,GAAmB2sB,GAC3C34D,KAAKw6G,qBACL,K,CAEF,IAAK,uBAEH,GAAIhlG,EAAQxL,QAAUhK,KAAKgK,MACzB,OAGFhK,KAAKg7G,aAAe,KACpBh7G,KAAKqY,WAAa,KAClBrY,KAAKwwD,WAAY,EAEjBxwD,KAAK0kC,iBAAiBnX,KAAK,aAAc,CACvCzG,KAAM9mB,KAAK2H,YAAY8J,EAAE,wCACzB7D,MAAO5N,KAAK2H,YAAY8J,EAAE,yCAC1BupF,YAAah7F,KAAK2H,YAAY8J,EAAE,MAChCvH,KAAM,UAER,MACF,IAAK,oBACsB,MAArBlK,KAAKg7G,eACPh7G,KAAKi7G,uBAAwB,EAC7Bj7G,KAAKk7G,yBAEP,MAEF,IAAK,cACHl7G,KAAKm7G,sBACL,MACF,QAEE,IAAKn7G,KAAKiK,qBAAqBmwF,YAAc5kF,EAAQxL,QAAUhK,KAAKgK,MAClE,OAGFhK,KAAK6zE,UAAUr+D,EAAQA,SAE7B,MAEAxV,KAAK46G,KAAKQ,aAAa5nC,aAAanrD,IAClC,IAAInG,EAEFA,EADEmwD,GAAWmC,mBACLnsD,EAAEnG,MAAM1M,QAERi9D,OAAOU,QAAQC,UAAU59D,QAGnCxV,KAAKg7G,aAAe,KACpBh7G,KAAKqY,WAAa,KAClBrY,KAAKwwD,WAAY,EAGjBrjC,EADwB,MAATjL,EAAgB,6BAA+B,KAChD,GACd,GAEN,G,CAEAi5F,sBACEn7G,KAAK0kC,iBAAiBnX,KAAK,aAAc,CACvCzG,KAAM9mB,KAAK2H,YAAY8J,EAAE,gCACzB7D,MAAO5N,KAAK2H,YAAY8J,EAAE,iCAC1BupF,YAAah7F,KAAK2H,YAAY8J,EAAE,MAChCvH,KAAM,SAEV,CAEMqjB,KAAK/X,G,0CACJxV,KAAKwwD,kBACFxwD,KAAK26G,WAGbnlG,EAAQiB,aAAezW,KAAK4kC,aAAa0V,YACzC9kC,EAAQ6lG,UAAY3uG,KAAKm7C,MAErB7nD,KAAKiK,qBAAqBmwF,WAC5Bp6F,KAAKs7G,YAAY9lG,GAEjBxV,KAAKs7G,YAAY,CAAEtxG,MAAOhK,KAAKgK,MAAOwL,cAAexV,KAAKu7G,eAAe/lG,IAE7E,G,CAEM+lG,eAAe/lG,G,0CAKnB,OAJyB,MAArBxV,KAAKg7G,qBACDh7G,KAAKw7G,6BAGAx7G,KAAKykC,cAAc+T,QAAQpb,KAAKC,UAAU7nB,GAAUxV,KAAKg7G,aACxE,G,CAEAS,cACE,OAAO,IAAIvuF,SAAQ,CAAC2V,EAAS1V,KAC3BntB,KAAKu6G,SAAW13E,CAAO,GAE3B,CAEQy4E,YAAY9lG,GAElB,IACE,MAAMs+D,EAAWt+D,EACbA,EAAQA,mBAAmBu3B,KAE7B+mC,EAAIt+D,QAAU,CACZmxB,gBAAiBnxB,EAAQA,QAAQmxB,gBACjCoH,eAAgBv4B,EAAQA,QAAQu4B,eAChC9gC,KAAMuI,EAAQA,QAAQvI,KACtBggC,GAAIz3B,EAAQA,QAAQy3B,GACpBC,IAAK13B,EAAQA,QAAQ03B,MAGzBltC,KAAK46G,KAAKU,YAAYxnC,E,CACtB,MAAO7sE,GACPjH,KAAK2kC,WAAWziB,MAAM,qDAEtBliB,KAAKg7G,aAAe,KACpBh7G,KAAKqY,WAAa,KAClBrY,KAAKwwD,WAAY,EAEjBxwD,KAAK0kC,iBAAiBnX,KAAK,aAAc,CACvCzG,KAAM9mB,KAAK2H,YAAY8J,EAAE,wCACzB7D,MAAO5N,KAAK2H,YAAY8J,EAAE,yCAC1BupF,YAAah7F,KAAK2H,YAAY8J,EAAE,MAChCvH,KAAM,S,CAGZ,CAEc2pE,UAAU6nC,G,0CACtB,IAAIlmG,EAAUkmG,EAOd,GANK17G,KAAKiK,qBAAqBmwF,aAC7B5kF,EAAU4nB,KAAKirC,YACProE,KAAKykC,cAAckJ,cAAc+tE,EAAyB17G,KAAKg7G,gBAIrEp1G,KAAK+1G,IAAInmG,EAAQ6lG,UAAY3uG,KAAKm7C,OAlQd,IAmQtB7nD,KAAK2kC,WAAWziB,MAAM,0CADxB,CAKA,OAAQ1M,EAAQw9D,SACd,IAAK,kBAAmB,CAGtB,SAFMhzE,KAAK4kC,aAAa28D,+BAA+B,MAE9B,gBAArB/rF,EAAQvJ,SAA4B,CACtCjM,KAAK0kC,iBAAiBnX,KAAK,aAAc,CACvCzG,KAAM9mB,KAAK2H,YAAY8J,EAAE,4BACzB7D,MAAO5N,KAAK2H,YAAY8J,EAAE,6BAC1BupF,YAAah7F,KAAK2H,YAAY8J,EAAE,MAChCvH,KAAM,UAER,K,CACK,GAAyB,kBAArBsL,EAAQvJ,SAA8B,CAC/CjM,KAAK0kC,iBAAiBnX,KAAK,aAAc,CACvCzG,KAAM9mB,KAAK2H,YAAY8J,EAAE,8BACzB7D,MAAO5N,KAAK2H,YAAY8J,EAAE,+BAC1BupF,YAAah7F,KAAK2H,YAAY8J,EAAE,MAChCvH,KAAM,UAER,K,CAGF,MAAMuR,QAAgBzb,KAAK4kC,aAAa2yD,qBACxC,GAAgB,OAAZ97E,IAAgC,IAAZA,EAAmB,CAChB,aAArBjG,EAAQvJ,iBACJjM,KAAK4kC,aAAak9D,oBAAmB,IAE7C,K,CAIF,UAAW9hG,KAAKwnC,YAAYiC,mBAAqBlqC,EAAqB0qC,SACpE,MAGF,GAAyB,aAArBz0B,EAAQvJ,SAAyB,OAC7BjM,KAAKykC,cAAcgD,OACvB,IAAIuE,GAAmBpqC,EAAMyB,eAAemS,EAAQ+2B,QAAQ1oC,SAI9D,UACQ7D,KAAKykC,cAAcguD,qBAAqBzyF,KAAK4kC,aAAa0V,Y,CAChE,MAAOrzC,GASP,OARAjH,KAAK2kC,WAAWziB,MAAM,yBAA2Bjb,SAC3CjH,KAAKykC,cAAcuvD,WACzBh0F,KAAKm7G,2BAGDn7G,KAAKu6G,UACPv6G,KAAKu6G,SAAS/kG,G,CAKlBxV,KAAKs6G,kBAAkBsB,eAAe,CAAE5oC,QAAS,YAAc,KAAM,K,CAEvE,K,CAEF,QACEhzE,KAAK2kC,WAAWziB,MAAM,uCAAyC1M,EAAQw9D,SAIvEhzE,KAAKu6G,UACPv6G,KAAKu6G,SAAS/kG,E,CAElB,G,CAEcgmG,sB,0CACZ,MAAO9+F,EAAWrE,SAAoBrY,KAAKqhC,sBAAsBs0D,mBAAmB,MAUpF,OATA31F,KAAK0c,UAAYA,EACjB1c,KAAKqY,WAAaA,EAElBrY,KAAK67G,gBAAgB,CACnB7oC,QAAS,kBACTt2D,UAAW9a,EAAMyC,gBAAgBqY,GACjCjG,aAAczW,KAAK4kC,aAAa0V,cAG3B,IAAIptB,SAAQ,CAAC2V,EAAS1V,IAAYntB,KAAKw6G,mBAAqB33E,GACrE,G,CAEcg5E,gBAAgBrmG,G,0CACvBxV,KAAKwwD,kBACFxwD,KAAK26G,WAGbnlG,EAAQ6lG,UAAY3uG,KAAKm7C,MAEzB7nD,KAAKs7G,YAAY,CAAEtxG,MAAOhK,KAAKgK,MAAOwL,QAASA,GACjD,G,CAEc0lG,wB,0CACZ,MAAMY,SACE97G,KAAKykC,cAAcguD,qBAAqBzyF,KAAK4kC,aAAa0V,YAAat6C,KAAK0c,YAClFxX,KAAK,KAEPlF,KAAK0kC,iBAAiBnX,KAAK,aAAc,CACvC6tE,KAAM,GAAGp7F,KAAK2H,YAAY8J,EACxB,wDACkBqqG,aACpBluG,MAAO5N,KAAK2H,YAAY8J,EAAE,gCAC1BupF,YAAah7F,KAAK2H,YAAY8J,EAAE,MAChCvH,KAAM,WAEV,G,ECnYF,IAAY6xG,IAAZ,SAAYA,GACV,2BACA,sCACD,CAHD,CAAYA,KAAAA,GAA4B,K,2SCyBzB,MAAMC,GAGnBl8G,YACUm8G,EACAz4D,EACAhc,EACAgvB,EACAhQ,EACA5hB,GALA,KAAAq3E,gBAAAA,EACA,KAAAz4D,cAAAA,EACA,KAAAhc,YAAAA,EACA,KAAAgvB,cAAAA,EACA,KAAAhQ,cAAAA,EACA,KAAA5hB,aAAAA,EARF,KAAAs3E,kBAA8E,EASnF,CAEGpyG,O,0CACkB,MAAlB2oE,OAAOU,UAIXd,GAAWo+B,gBACT,2BACA,CAAO38B,EAAUC,IAAyC,yCAClD/zE,KAAK47G,eAAe9nC,EAAKC,EACjC,MAGF/zE,KAAKm8G,2BACP,G,CAEMP,eAAe9nC,EAAUC,G,0CAC7B,OAAQD,EAAId,SACV,IAAK,kBACH,GAAwB,4BAApBc,EAAI7mE,KAAK/E,OACX,aAEIlI,KAAK47G,eAAe9nC,EAAI7mE,KAAKirG,eAAepkC,IAAKA,EAAI7mE,KAAKirG,eAAenkC,QAC/E,MACF,IAAK,wBACG/zE,KAAKo8G,cAAcroC,EAAOhB,IAAKe,EAAIuoC,iBACzC,MACF,IAAK,+BACGhqC,GAAWsmC,mBAAmB5kC,EAAOhB,IAAK,wBAChD,MACF,IAAK,gCACGV,GAAWsmC,mBAAmB5kC,EAAOhB,IAAK,wBAAyBe,EAAI7mE,MAC7E,MACF,IAAK,mBACGjN,KAAKs8G,SAASxoC,EAAI1jE,MAAO2jE,EAAOhB,KACtC,MACF,IAAK,0BACG/yE,KAAKu8G,gBAAgBzoC,EAAI7mE,KAAM8mE,EAAOhB,KAC5C,MACF,IAAK,aACL,IAAK,gBACH/yE,KAAKw8G,+BAA+BzoC,EAAOhB,KAC3C,MACF,IAAK,YACL,IAAK,eACH,UAAW/yE,KAAKwnC,YAAYiC,iBAAmBlqC,EAAqB0qC,SAAU,CAC5E,MAAMyuE,EAAoD,CACxDR,eAAgB,CACdpkC,IAAKA,EACLC,OAAQA,GAEV7rE,OAAQ,2BAQV,aANMmqE,GAAWsmC,mBACf5kC,EAAOhB,IACP,uCACA2lC,cAEIrmC,GAAWsmC,mBAAmB5kC,EAAOhB,IAAK,kB,OAG5C/yE,KAAKy8G,wBAAwB1oC,EAAOhB,IAAKe,EAAIj5B,QACnD,MACF,IAAK,oBACG76C,KAAK08G,UAAU3oC,EAAOhB,KAC5B,MACF,IAAK,6BACH,OAAQe,EAAIC,QACV,IAAK,kBAAmB,CACtB,MAAM2U,EAAQ1oF,KAAKi8G,gBAAgB7zB,2BAA2BtU,EAAIthE,eAC5D6/D,GAAWsmC,mBAAmB7kC,EAAIf,IAAK,6BAA8B,CACzEvgE,QAASshE,EAAIthE,QACbk2E,MAAOA,IAET,K,GASV,G,CAEMi0B,uBAAuB5pC,EAAuB,M,0CAClD,GAAsC,IAAlC/yE,KAAKk8G,kBAAkBh5G,OACzB,OAGF,GAAW,MAAP6vE,EAEF,YADA/yE,KAAK48G,yBAAyB7pC,GAIhC,MAAM8pC,QAAmBxqC,GAAWmY,0BAClB,MAAdqyB,GACF78G,KAAK48G,yBAAyBC,EAElC,G,CAEQV,2BACN,IAAK,IAAIh5G,EAAInD,KAAKk8G,kBAAkBh5G,OAAS,EAAGC,GAAK,EAAGA,IAClDnD,KAAKk8G,kBAAkB/4G,GAAG25G,QAAU,IAAIpwG,MAC1C1M,KAAKk8G,kBAAkBl5E,OAAO7/B,EAAG,GAGrCqnC,YAAW,IAAMxqC,KAAKm8G,4BAA4B,KACpD,CAEQS,yBAAyB7pC,GAC/B,GAAW,MAAPA,EACF,OAGF,MAAMgqC,EAAYn7G,EAAMoF,UAAU+rE,EAAI7sE,KACtC,GAAiB,MAAb62G,EAIJ,IAAK,IAAI55G,EAAI,EAAGA,EAAInD,KAAKk8G,kBAAkBh5G,OAAQC,IACjD,GACEnD,KAAKk8G,kBAAkB/4G,GAAGkxE,QAAUtB,EAAIjtE,IACxC9F,KAAKk8G,kBAAkB/4G,GAAG+D,SAAW61G,EAFvC,CAOI/8G,KAAKk8G,kBAAkB/4G,GAAG+G,OAAS6xG,GAA6BiB,SAClE3qC,GAAWsmC,mBAAmB5lC,EAAK,sBAAuB,CACxD7oE,KAAM,MACN+yG,SAAU,CACRC,cAAel9G,KAAKk8G,kBAAkB/4G,GAAGg6G,kBAGpCn9G,KAAKk8G,kBAAkB/4G,GAAG+G,OAAS6xG,GAA6BqB,gBACzE/qC,GAAWsmC,mBAAmB5lC,EAAK,sBAAuB,CACxD7oE,KAAM,SACN+yG,SAAU,CACRC,cAAel9G,KAAKk8G,kBAAkB/4G,GAAGg6G,kBAI/C,K,CAEJ,CAEQX,+BAA+BzpC,GACrC,IAAK,IAAI5vE,EAAInD,KAAKk8G,kBAAkBh5G,OAAS,EAAGC,GAAK,EAAGA,IAClDnD,KAAKk8G,kBAAkB/4G,GAAGkxE,QAAUtB,EAAIjtE,IAC1C9F,KAAKk8G,kBAAkBl5E,OAAO7/B,EAAG,EAGvC,CAEcm5G,SAASe,EAAmCtqC,G,0CACxD,MAAM2kC,QAAmB13G,KAAKwnC,YAAYiC,gBAC1C,GAAIiuE,IAAen4G,EAAqBoqC,UACtC,OAGF,MAAM2zE,EAAc17G,EAAMoF,UAAUq2G,EAAUn3G,KAC9C,GAAmB,MAAfo3G,EACF,OAGF,IAAIC,EAAqBF,EAAU1uG,SACT,MAAtB4uG,IACFA,EAAqBA,EAAmB71G,eAG1C,MAAM81G,QAAyBx9G,KAAK4kC,aAAay+D,iCACjD,GAAIqU,IAAen4G,EAAqB2qC,OAAQ,CAC9C,GAAIszE,EACF,OAGF,WAAYx9G,KAAKy9G,0BACf,OAIF,YADAz9G,KAAK09G,oBAAoBJ,EAAaD,EAAWtqC,GAAK,E,CAIxD,MACM4qC,SADgB39G,KAAKwjD,cAAc1I,sBAAsBuiE,EAAUn3G,MACzCsC,QAC7B9C,GAA0B,MAApBA,EAAE0K,MAAMzB,UAAoBjJ,EAAE0K,MAAMzB,SAASjH,gBAAkB61G,IAExE,GAA+B,IAA3BI,EAAgBz6G,OAAc,CAChC,GAAIs6G,EACF,OAGF,WAAYx9G,KAAKy9G,0BACf,OAGFz9G,KAAK09G,oBAAoBJ,EAAaD,EAAWtqC,E,MAC5C,GACsB,IAA3B4qC,EAAgBz6G,QAChBy6G,EAAgB,GAAGvtG,MAAMnB,WAAaouG,EAAUpuG,SAChD,CAGA,SADQjP,KAAK4kC,aAAao/D,wCAExB,OAEFhkG,KAAK49G,0BAA0BD,EAAgB,GAAG73G,GAAIw3G,EAAaD,EAAUpuG,SAAU8jE,E,CAE3F,G,CAEc2qC,oBACZJ,EACAD,EACAtqC,EACAmqC,GAAgB,G,0CAGhBl9G,KAAKw8G,+BAA+BzpC,GACpC,MAAMv9D,EAAgC,CACpCtL,KAAM6xG,GAA6BiB,SACnCruG,SAAU0uG,EAAU1uG,SACpBM,SAAUouG,EAAUpuG,SACpB/H,OAAQo2G,EACRvuG,IAAKsuG,EAAUn3G,IACfmuE,MAAOtB,EAAIjtE,GACXg3G,QAAS,IAAIpwG,MAAK,IAAIA,MAAO6vC,UAAY,KACzC4gE,eAAgBD,GAElBl9G,KAAKk8G,kBAAkB3lG,KAAKf,SACtBxV,KAAK28G,uBAAuB5pC,EACpC,G,CAEcwpC,gBAAgBsB,EAA0C9qC,G,0CACtE,MAAMuqC,EAAc17G,EAAMoF,UAAU62G,EAAW33G,KAC/C,GAAmB,MAAfo3G,EACF,OAGF,UAAWt9G,KAAKwnC,YAAYiC,iBAAmBlqC,EAAqB0qC,SAElE,YADAjqC,KAAK49G,0BAA0B,KAAMN,EAAaO,EAAWxhD,YAAa0W,GAAK,GAIjF,IAAIjtE,EAAa,KACjB,MAAMqP,QAAgBnV,KAAKwjD,cAAc1I,sBAAsB+iE,EAAW33G,KAC1E,GAAkC,MAA9B23G,EAAWC,gBAAyB,CACtC,MAAMC,EAAkB5oG,EAAQ3M,QAC7B9C,GAAMA,EAAE0K,MAAMnB,WAAa4uG,EAAWC,kBAEV,IAA3BC,EAAgB76G,SAClB4C,EAAKi4G,EAAgB,GAAGj4G,G,MAEE,IAAnBqP,EAAQjS,SACjB4C,EAAKqP,EAAQ,GAAGrP,IAER,MAANA,GACF9F,KAAK49G,0BAA0B93G,EAAIw3G,EAAaO,EAAWxhD,YAAa0W,EAE5E,G,CAEc6qC,0BACZjnG,EACA2mG,EACAjhD,EACA0W,EACAmqC,GAAgB,G,0CAGhBl9G,KAAKw8G,+BAA+BzpC,GACpC,MAAMv9D,EAAyC,CAC7CtL,KAAM6xG,GAA6BqB,eACnCzmG,SAAUA,EACV0lD,YAAaA,EACbn1D,OAAQo2G,EACRjpC,MAAOtB,EAAIjtE,GACXg3G,QAAS,IAAIpwG,MAAK,IAAIA,MAAO6vC,UAAY,KACzC4gE,eAAgBD,GAElBl9G,KAAKk8G,kBAAkB3lG,KAAKf,SACtBxV,KAAK28G,uBAAuB5pC,EACpC,G,CAEc0pC,wBAAwB1pC,EAAsBnjE,G,0CAC1D,IAAK,IAAIzM,EAAInD,KAAKk8G,kBAAkBh5G,OAAS,EAAGC,GAAK,EAAGA,IAAK,CAC3D,MAAM66G,EAAeh+G,KAAKk8G,kBAAkB/4G,GAC5C,GACE66G,EAAa3pC,QAAUtB,EAAIjtE,IAC1Bk4G,EAAa9zG,OAAS6xG,GAA6BiB,UAClDgB,EAAa9zG,OAAS6xG,GAA6BqB,eAErD,SAGF,MAAML,EAAYn7G,EAAMoF,UAAU+rE,EAAI7sE,KACtC,GAAiB,MAAb62G,GAAqBA,IAAciB,EAAa92G,OAApD,CAOA,GAHAlH,KAAKk8G,kBAAkBl5E,OAAO7/B,EAAG,GACjCkvE,GAAWsmC,mBAAmB5lC,EAAK,wBAE/BirC,EAAa9zG,OAAS6xG,GAA6BqB,eAAgB,CACrE,MAAMa,EAAwBD,EACxB3nE,QAAer2C,KAAKk+G,uBAAuBD,EAAsBtnG,UACvE,GAAc,MAAV0/B,EACF,OAGF,kBADMr2C,KAAKm+G,aAAa9nE,EAAQ4nE,EAAsB5hD,a,CAIxD,GAAI2hD,EAAa9zG,OAAS6xG,GAA6BiB,SAAU,CAC/D,IAAKgB,EAAab,eAGhB,aAFMn9G,KAAKo+G,gBAAgBJ,EAAsCpuG,QACjEyiE,GAAWsmC,mBAAmB5lC,EAAK,eAKrC,MAAMsrC,EAAkBL,EAElBL,SADgB39G,KAAKwjD,cAAc1I,sBAAsBujE,EAAgBtvG,MAC/CvG,QAC7B9C,GACqB,MAApBA,EAAE0K,MAAMzB,UAAoBjJ,EAAE0K,MAAMzB,SAASjH,gBAAkB22G,EAAgB1vG,WAGnF,GAAIgvG,EAAgBz6G,QAAU,EAE5B,kBADMlD,KAAKm+G,aAAaR,EAAgB,GAAIU,EAAgBpvG,iBAIxDjP,KAAKo+G,gBAAgBC,EAAiBzuG,GAC5CyiE,GAAWsmC,mBAAmB5lC,EAAK,c,GAGzC,G,CAEcqrC,gBAAgBJ,EAAoCpuG,G,0CAChE,MAAM0uG,EAAa,IAAI7rE,GACjBwO,EAAW,IAAItP,GACrBsP,EAASlyC,IAAMivG,EAAajvG,IAC5BuvG,EAAWjvG,KAAO,CAAC4xC,GACnBq9D,EAAW3vG,SAAWqvG,EAAarvG,SACnC2vG,EAAWrvG,SAAW+uG,EAAa/uG,SACnC,MAAMolC,EAAQ,IAAIpB,GAMlB,GALAoB,EAAMnyC,KAAON,EAAMswC,YAAY8rE,EAAajvG,MAAQivG,EAAa92G,OACjEmtC,EAAMnyC,KAAOmyC,EAAMnyC,KAAKqC,QAAQ,SAAU,IAC1C8vC,EAAMnqC,KAAOzK,EAAWksC,MACxB0I,EAAMjkC,MAAQkuG,GAET18G,EAAMiU,mBAAmBjG,GAAW,QACjB,EAAA04C,GAAA,GAAetoD,KAAKwmD,cAAc+B,eAC5C1V,MAAM7tC,GAAMA,EAAEc,KAAO8J,MAC/BykC,EAAMzkC,SAAWA,E,CAIrB,MAAMymC,QAAer2C,KAAKwjD,cAAchL,QAAQnE,SAC1Cr0C,KAAKwjD,cAAczG,eAAe1G,EAC1C,G,CAEc6nE,uBAAuBvnG,G,0CACnC,MAAM0/B,QAAer2C,KAAKwjD,cAAc/iB,IAAI9pB,GAC5C,OAAc,MAAV0/B,GAAkBA,EAAOnsC,OAASzK,EAAWksC,YAClC0K,EAAOhJ,UAEf,IACT,G,CAEc8wE,aAAa9nE,EAAoBgmB,G,0CAC7C,GAAc,MAAVhmB,GAAkBA,EAAOnsC,OAASzK,EAAWksC,MAAO,CACtD0K,EAAOjmC,MAAMnB,SAAWotD,EACxB,MAAMkiD,QAAkBv+G,KAAKwjD,cAAchL,QAAQnC,SAC7Cr2C,KAAKwjD,cAAczG,eAAewhE,E,CAE5C,G,CAEc7B,UAAU3pC,G,0CACtB,IAAK,IAAI5vE,EAAInD,KAAKk8G,kBAAkBh5G,OAAS,EAAGC,GAAK,EAAGA,IAAK,CAC3D,MAAM66G,EAAeh+G,KAAKk8G,kBAAkB/4G,GAC5C,GACE66G,EAAa3pC,QAAUtB,EAAIjtE,IAC3Bk4G,EAAa9zG,OAAS6xG,GAA6BiB,SAEnD,SAGF,MAAMD,EAAYn7G,EAAMoF,UAAU+rE,EAAI7sE,KACtC,GAAiB,MAAb62G,GAAqBA,IAAciB,EAAa92G,OAClD,SAGFlH,KAAKk8G,kBAAkBl5E,OAAO7/B,EAAG,GACjCkvE,GAAWsmC,mBAAmB5lC,EAAK,wBAEnC,MAAM3sE,EAAWxE,EAAMswC,YAAY6gC,EAAI7sE,WACjClG,KAAKwjD,cAAc5G,gBAAgBx2C,E,CAE7C,G,CAEcg2G,cAAcrpC,EAAsBspC,G,0CAChD,MAAMzmC,EAAoB,CAAC,EACH,kCAApBymC,IACFzmC,EAAa3tD,cAAgB,EAAAqgC,GAAA,GAAetoD,KAAKwmD,cAAc+B,qBAG3D8pB,GAAWsmC,mBAAmB5lC,EAAKspC,EAAiBzmC,EAC5D,G,CAEc6nC,yB,0CACZ,cAAez9G,KAAKw2D,cAAcoG,oBAAoBhI,GAAWqhD,mBACnE,G,6SCjba,MAAMuI,GAMnB1+G,YACUg4G,EACAmE,EACAhyG,EACAtC,EACA+xG,EACA+E,EACA5zF,EACA6Z,EACAC,GARA,KAAAmzE,KAAAA,EACA,KAAAmE,gBAAAA,EACA,KAAAhyG,qBAAAA,EACA,KAAAtC,YAAAA,EACA,KAAA+xG,qBAAAA,EACA,KAAA+E,cAAAA,EACA,KAAA5zF,mBAAAA,EACA,KAAA6Z,iBAAAA,EACA,KAAAC,WAAAA,EAbF,KAAA+5E,sBAA+B,GAC/B,KAAAC,kBAA4B,KAC5B,KAAAC,gCAAyE,GAc/EnsC,OAAOU,QAAQ0rC,YAAYrrC,aAAahhE,IACtCxS,KAAK2+G,kBAAoBnsG,EAAQssG,MAAM,GAE3C,CAEMh1G,O,0CACJ,IAAK2oE,OAAOU,QACV,aAGInzE,KAAK++G,mBACX,MAAMC,EAA4B,CAChClrC,EACAC,EACAlsD,IACG,yCACG7nB,KAAK47G,eAAe9nC,EAAKC,EAAQlsD,EACzC,IAEAwqD,GAAWo+B,gBAAgB,qBAAsBuO,GAC7Ch/G,KAAK83G,KAAKmH,gBACX19G,OAAe29G,mCAAqCF,EAEzD,G,CAEMpD,eAAe9nC,EAAUC,EAAalsD,G,oDAC1C,OAAQisD,EAAId,SACV,IAAK,WACL,IAAK,WAAY,CACf,IAAI78D,GAEoC,QAApC,EAAAnW,KAAK4+G,uCAA+B,eAAE17G,QAAS,UAC3CmvE,GAAW8sC,gBAEjBhpG,EAAOnW,KAAK4+G,gCAAgC1lD,OACT,QAA/B,EAA0B,QAA1B,EAAA/iD,EAAK+hG,eAAenkC,cAAM,eAAEhB,WAAG,eAAEjtE,YAC7BusE,GAAW+sC,kBAAkBjpG,EAAK+hG,eAAenkC,OAAOhB,IAAIjtE,YAIhE9F,KAAK83G,KAAKuH,gBACVr/G,KAAK83G,KAAKwH,qBAAoB,GACpCt/G,KAAK05G,qBAAqBhoD,iBAAiC,aAAhBoiB,EAAId,SAC/ChzE,KAAKy+G,cAAc33C,sBAEf3wD,UACIk8D,GAAWsmC,mBACfxiG,EAAK+hG,eAAenkC,OAAOhB,IAC3B,kBACA58D,IAGJ,K,CAEF,IAAK,uCACHnW,KAAK4+G,gCAAgCroG,KAAKu9D,EAAI7mE,MAC9C,MACF,IAAK,eACGjN,KAAK83G,KAAKyH,OAAOzrC,EAAInS,QAASmS,EAAIr9D,QACxC,MACF,IAAK,gBACCq9D,EAAInO,cACNn7B,YAAW,IAAY,gDAAMxqC,KAAK83G,KAAKwH,qBAAqB,KAAE,KAEhE,MACF,IAAK,kBACGt/G,KAAK83G,KAAKU,YAChB,MACF,IAAK,uBACGnmC,GAAWuoB,aAAa,sCAAsC,GAAM,GAC1E,MACF,IAAK,oBACH56F,KAAKiK,qBAAqBwyF,qBAAqB3oB,EAAIqnB,SAAUrnB,EAAI4oB,WACjE,MACF,IAAK,6BACG18F,KAAK83G,KAAKc,mCAAmC7kC,EAAOhB,IAAKe,EAAIC,OAAQA,EAAOgW,SAClF,MACF,IAAK,sBACL,IAAK,eACL,IAAK,cACL,IAAK,sBACG/pF,KAAK83G,KAAKwH,sBAChB,MACF,IAAK,wBACGt/G,KAAK83G,KAAK0H,gBAChB,MACF,IAAK,6BACH,OAAQ1rC,EAAIC,QACV,IAAK,aACL,IAAK,eAAgB,CACnB,MAAMsW,QAAiBrqF,KAAKi8G,gBAAgB3xB,oBAC1C,CACE,CACEP,QAAShW,EAAOgW,QAChBhX,IAAKe,EAAIf,IACTvgE,QAASshE,EAAIthE,UAGF,iBAAfshE,EAAIC,QAEU,MAAZsW,GACFrqF,KAAKiK,qBAAqB89D,gBAAgBsiB,EAAU,CAAE9oF,SAExD,K,CAEF,IAAK,cACHkpC,aAAazqC,KAAKy/G,iBAClBz/G,KAAK0+G,sBAAsBnoG,KAAK,CAC9BwzE,QAAShW,EAAOgW,QAChBhX,IAAKe,EAAIf,IACTvgE,QAASshE,EAAIthE,UAEfxS,KAAKy/G,gBAAkBj1E,YAAW,IAAY,gDAAMxqC,KAAK0/G,aAAa5rC,EAAIf,IAAI,KAAE,KAKpF,MACF,IAAK,aAAc,CACjB,MAAM4sC,EAAW3/G,KAAK6qB,mBAAmB+0F,iBAEzC,GAAoB,MAAhB9rC,EAAI+rC,UAAoBj+G,EAAMswC,YAAYytE,KAAc7rC,EAAI+rC,SAC9D,OAGF,IACExtC,GAAWuoB,aACT,gDACEj3F,mBAAmBmwE,EAAIvmE,MACvB,UACA5J,mBAAmBmwE,EAAI1lE,O,CAE3B,SACApO,KAAK2kC,WAAWziB,MAAM,gC,CAExB,K,CAEF,IAAK,iBAAkB,CACrB,MAAMy9F,EAAW3/G,KAAK6qB,mBAAmB+0F,iBAEzC,GAAoB,MAAhB9rC,EAAI+rC,UAAoBj+G,EAAMswC,YAAYytE,KAAc7rC,EAAI+rC,SAC9D,OAGF,MAAMv/E,EACJ,oBAAoB38B,mBAAmBmwE,EAAI7mE,kBAC/BtJ,mBAAmBmwE,EAAIroE,YACrC4mE,GAAWuoB,aACT,2CAA2Ct6D,SAC3Cj0B,GACA,GAEF,K,CAEF,IAAK,cACHrM,KAAK0kC,iBAAiBnX,KAAK,eAC3B,MACF,IAAK,4BACHvtB,KAAK0kC,iBAAiBnX,KAAK,aAAc,CACvC4tE,SAAU,4BACVvtF,MAAO5N,KAAK2H,YAAY8J,EAAE,6BAC1BqV,KAAM9mB,KAAK2H,YAAY8J,EAAE,iCACzBupF,YAAah7F,KAAK2H,YAAY8J,EAAE,MAChCvH,KAAM,SAER,MACF,IAAK,4BACHlK,KAAKiK,qBAAqB89D,gBAAgB+L,EAAIzpE,WAAY,CAAE9I,S,IAOpDm+G,aAAaI,G,0CACzB,MAAMz1B,QAAiBrqF,KAAKi8G,gBAAgBhzB,WAAW,CACrDlW,IAAK+sC,EACLzpE,OAAQr2C,KAAK83G,KAAK0B,gBAClBnxB,YAAaroF,KAAK0+G,sBAClB90B,iBAAiB,IAGH,MAAZS,GACFrqF,KAAKiK,qBAAqB89D,gBAAgBsiB,EAAU,CAAE9oF,SAIxDvB,KAAK83G,KAAK0B,gBAAkB,KAC5Bx5G,KAAK0+G,sBAAwB,EAC/B,G,CAEcK,mB,0CACZv0E,YAAW,IAAY,mCACS,MAA1BxqC,KAAK2+G,oBACwB,YAA3B3+G,KAAK2+G,oBACPtsC,GAAWuoB,aAAa,+CAEd56F,KAAK6qB,mBAAmBk1F,iCAC1B//G,KAAK6qB,mBAAmBm1F,gCAIlChgH,KAAK2+G,kBAAoB,KAE7B,KAAG,IACL,G,kBC/OK,MAAMsB,I,2SCON,MAAMC,GAIXpgH,YAAYkJ,GACVhJ,KAAKmgH,YAA+B,IAAfn3G,EAAIm3G,OAAyBn3G,EAAIm3G,OAAS,KAC/DngH,KAAKogH,OACDpgH,KAAKmgH,aAAuC,IAAtBn3G,EAAIm3G,OAAOC,OAAyBp3G,EAAIm3G,OAAOC,OAAS,IACpF,CAEM59C,OACJvzD,EACA83C,EACAs5D,EACApqB,G,0CAEA,MAAMqqB,EAAsB,WAAdD,EAAyB,IAAM,IACvCE,EAAcvgH,KAAKwgH,MAAMvxG,GAGzBwxG,EAA6B,CACjCv+G,KAAM,SACN6kD,KAJc/mD,KAAKwgH,MAAMz5D,GAKzBkvC,WAAYA,EACZx0D,KAAM,CAAEv/B,KAAMlC,KAAK0gH,qBAAqBL,KAGpCM,QAAe3gH,KAAKogH,OAAOQ,UAC/B,MACAL,EACA,CAAEr+G,KAAM,WACR,EACA,CAAC,eAEH,aAAalC,KAAKogH,OAAOS,WAAWJ,EAAcE,EAAQL,EAC5D,G,CAEMvqB,KACJ+qB,EACA/5D,EACAqY,EACA2hD,EACAV,G,0CAEA,MAGMW,EAAyB,CAC7B9+G,KAAM,OACN6kD,KALc/mD,KAAKwgH,MAAMz5D,GAMzBqY,KALcp/D,KAAKwgH,MAAMphD,GAMzB39B,KAAM,CAAEv/B,KAAMlC,KAAK0gH,qBAAqBL,KAGpCM,QAAe3gH,KAAKogH,OAAOQ,UAAU,MAAOE,EAAK,CAAE5+G,KAAM,SAAiB,EAAO,CACrF,eAEF,aAAalC,KAAKogH,OAAOS,WAAWG,EAAmBL,EAAyB,EAAjBI,EACjE,G,CAGMnuB,WACJquB,EACA7hD,EACA2hD,EACAV,G,0CAEA,MAAMa,EAAwB,WAAdb,EAAyB,GAAK,GAC9C,GAAIU,EAAiB,IAAMG,EACzB,MAAM,IAAI77G,MAAM,gCAGlB,GADe,IAAIzC,WAAWq+G,GACnB/9G,OAASg+G,EAClB,MAAM,IAAI77G,MAAM,qBAElB,MAAM87G,EAAUnhH,KAAKwgH,MAAMphD,GACrBgiD,EAAU,IAAIx+G,WAAWu+G,GAC/B,IAAIE,EAAmB,EACnBC,EAAY,IAAI1+G,WAAW,GAC/B,MAAMowC,EAAIptC,KAAK2kD,KAAKw2D,EAAiBG,GAC/BK,EAAM,IAAI3+G,WAAWowC,EAAIkuE,GAC/B,IAAK,IAAI/9G,EAAI,EAAGA,EAAI6vC,EAAG7vC,IAAK,CAC1B,MAAMsO,EAAI,IAAI7O,WAAW0+G,EAAUp+G,OAASk+G,EAAQl+G,OAAS,GAO7D,GANAuO,EAAEhK,IAAI65G,GACN7vG,EAAEhK,IAAI25G,EAASE,EAAUp+G,QACzBuO,EAAEhK,IAAI,CAACtE,EAAI,GAAIsO,EAAEvO,OAAS,GAC1Bo+G,EAAY,IAAI1+G,iBAAiB5C,KAAKksE,KAAKz6D,EAAE5N,OAAQo9G,EAAKZ,IAC1DkB,EAAI95G,IAAI65G,EAAWD,GACnBA,GAAoBC,EAAUp+G,OAC1Bm+G,GAAoBN,EACtB,K,CAGJ,OAAOQ,EAAIt8G,MAAM,EAAG87G,GAAgBl9G,MACtC,G,CAEM49B,KACJh0B,EACA4yG,G,0CAEA,GAAkB,QAAdA,EAAqB,CACvB,MAAMmB,EAAmB,QAAdnB,EAAsB,mBAAwB,oBACnDoB,EAAazhH,KAAK0hH,aAAaj0G,GAErC,OADA+zG,EAAGltC,OAAOmtC,EAAY,OACf7/G,EAAMqhG,sBAAsBue,EAAGG,SAAS10G,MAAMpJ,M,CAGvD,MAAM+9G,EAAW5hH,KAAKwgH,MAAM/yG,GAC5B,aAAazN,KAAKogH,OAAOuB,OAAO,CAAEz/G,KAAMlC,KAAK0gH,qBAAqBL,IAAcuB,EAClF,G,CAEM11C,KACJz+D,EACAZ,EACAwzG,G,0CAEA,MAAMwB,EAAmB,CACvB3/G,KAAM,OACNu/B,KAAM,CAAEv/B,KAAMlC,KAAK0gH,qBAAqBL,KAGpCM,QAAe3gH,KAAKogH,OAAOQ,UAAU,MAAO/zG,EAAKg1G,GAAkB,EAAO,CAAC,SACjF,aAAa7hH,KAAKogH,OAAOh1C,KAAKy2C,EAAkBlB,EAAQlzG,EAC1D,G,CAKMzF,QAAQH,EAAgBC,G,0CAC5B,MAAMukC,QAAersC,KAAKgnD,YAAY,IAChC66D,EAAmB,CACvB3/G,KAAM,OACNu/B,KAAM,CAAEv/B,KAAM,YAEVy+G,QAAe3gH,KAAKogH,OAAOQ,UAAU,MAAOv0E,EAAQw1E,GAAkB,EAAO,CAAC,SAC9EC,QAAa9hH,KAAKogH,OAAOh1C,KAAKy2C,EAAkBlB,EAAQ94G,GACxDk6G,QAAa/hH,KAAKogH,OAAOh1C,KAAKy2C,EAAkBlB,EAAQ74G,GAE9D,GAAIg6G,EAAK99G,aAAe+9G,EAAK/9G,WAC3B,OAAO,EAGT,MAAMg+G,EAAO,IAAIp/G,WAAWk/G,GACtBG,EAAO,IAAIr/G,WAAWm/G,GAC5B,IAAK,IAAI5+G,EAAI,EAAGA,EAAI8+G,EAAK/+G,OAAQC,IAC/B,GAAI6+G,EAAK7+G,KAAO8+G,EAAK9+G,GACnB,OAAO,EAIX,OAAO,CACT,G,CAEA++G,SAASz0G,EAAeZ,EAAawzG,GACnC,MAAMn0C,EAAO,iBACbA,EAAK3vC,MAAM8jF,EAAWxzG,GACtBq/D,EAAKoI,OAAO7mE,GACZ,MAAMxK,EAAQipE,EAAKy1C,SAASQ,WAC5B,OAAOj1F,QAAQ2V,QAAQ5/B,EACzB,CAEMm/G,YAAYv6G,EAAWC,G,0CAC3B,MAAMu6G,QAAariH,KAAKgnD,YAAY,IAC9B/jD,EAAQ,IAAIq/G,YAAYD,GACxBx+G,EAAS,uBACf,IAAK,IAAIV,EAAI,EAAGA,EAAIF,EAAMC,OAAQC,IAChCU,EAAO0+G,SAASt/G,EAAME,IAExB,MAAMkpC,EAASxoC,EAAOs+G,WAEhBj2C,EAAO,iBACbA,EAAK3vC,MAAM,SAAU8P,GACrB6/B,EAAKoI,OAAOzsE,GACZ,MAAMi6G,EAAO51C,EAAKy1C,SAASQ,WAE3Bj2C,EAAK3vC,MAAM,KAAM,MACjB2vC,EAAKoI,OAAOxsE,GAIZ,OADeg6G,IAFF51C,EAAKy1C,SAASQ,UAI7B,G,CAEMK,WAAWv1G,EAAmBggC,EAAiBpgC,G,0CACnD,MAAM8zG,QAAe3gH,KAAKogH,OAAOQ,UAAU,MAAO/zG,EAAK,CAAE3K,KAAM,YAAoB,EAAO,CACxF,YAEF,aAAalC,KAAKogH,OAAO5nE,QAAQ,CAAEt2C,KAAM,UAAW+qC,GAAIA,GAAM0zE,EAAQ1zG,EACxE,G,CAEAw1G,yBACEx1G,EACAggC,EACAC,EACArgC,GAEA,MAAMwb,EAAI,IAAI43F,GA8Bd,OA7BgB,MAAZpzG,EAAI61G,OACNr6F,EAAE+jB,OAASv/B,EAAI61G,KAAKC,iBACpBt6F,EAAEgkB,OAASx/B,EAAI61G,KAAKE,kBAGN,MAAZv6F,EAAE+jB,SACJ/jB,EAAE+jB,OAAS,iBAAoBv/B,EAAI2/B,YAErCnkB,EAAEpb,KAAO,iBAAoBA,GAC7Bob,EAAE4kB,GAAK,iBAAoBA,GAC3B5kB,EAAEw6F,QAAUx6F,EAAE4kB,GAAK5kB,EAAEpb,KACL,MAAZob,EAAEgkB,QAAmC,MAAjBx/B,EAAI4/B,YAC1BpkB,EAAEgkB,OAAS,iBAAoBx/B,EAAI4/B,YAE1B,MAAPS,IACF7kB,EAAE6kB,IAAM,iBAAoBA,IAId,MAAZrgC,EAAI61G,OACN71G,EAAI61G,KAAO,CAAC,GAEmB,MAA7B71G,EAAI61G,KAAKC,mBACX91G,EAAI61G,KAAKC,iBAAmBt6F,EAAE+jB,QAEhB,MAAZ/jB,EAAEgkB,QAA+C,MAA7Bx/B,EAAI61G,KAAKE,mBAC/B/1G,EAAI61G,KAAKE,iBAAmBv6F,EAAEgkB,QAGzBhkB,CACT,CAEAy6F,eAAeC,GACb,MAAMC,EAAa,qBAAwBD,EAAW91G,MAChDg2G,EAAW,yBAA4B,UAAWF,EAAW32E,QACnE62E,EAAS1mF,MAAM,CAAE0Q,GAAI81E,EAAW91E,KAChCg2E,EAAS3uC,OAAO0uC,GAChBC,EAASC,SACT,MAAM//E,EAAM8/E,EAAS79G,OAAOtB,WAC5B,OAAOopB,QAAQ2V,QAAQM,EACzB,CAEMggF,WAAWl2G,EAAmBggC,EAAiBpgC,G,0CACnD,MAAM8zG,QAAe3gH,KAAKogH,OAAOQ,UAAU,MAAO/zG,EAAK,CAAE3K,KAAM,YAAoB,EAAO,CACxF,YAEF,aAAalC,KAAKogH,OAAO/yE,QAAQ,CAAEnrC,KAAM,UAAW+qC,GAAIA,GAAM0zE,EAAQ1zG,EACxE,G,CAEMwoF,WACJxoF,EACAyP,EACA2jG,G,0CAIA,MAAM+C,EAAY,CAChBlhH,KAAM,WACNu/B,KAAM,CAAEv/B,KAAMlC,KAAK0gH,qBAAqBL,KAEpCM,QAAe3gH,KAAKogH,OAAOQ,UAAU,OAAQlkG,EAAW0mG,GAAW,EAAO,CAAC,YACjF,aAAapjH,KAAKogH,OAAO5nE,QAAQ4qE,EAAWzC,EAAQ1zG,EACtD,G,CAEM0iF,WACJ1iF,EACAoL,EACAgoG,G,0CAIA,MAAM+C,EAAY,CAChBlhH,KAAM,WACNu/B,KAAM,CAAEv/B,KAAMlC,KAAK0gH,qBAAqBL,KAEpCM,QAAe3gH,KAAKogH,OAAOQ,UAAU,QAASvoG,EAAY+qG,GAAW,EAAO,CAAC,YACnF,aAAapjH,KAAKogH,OAAO/yE,QAAQ+1E,EAAWzC,EAAQ1zG,EACtD,G,CAEMmlF,oBAAoB/5E,G,0CACxB,MAAM+qG,EAAY,CAChBlhH,KAAM,WAENu/B,KAAM,CAAEv/B,KAAMlC,KAAK0gH,qBAAqB,UAEpC2C,QAAsBrjH,KAAKogH,OAAOQ,UAAU,QAASvoG,EAAY+qG,GAAW,EAAM,CACtF,YAEIE,QAAsBtjH,KAAKogH,OAAOmD,UAAU,MAAOF,GACnDG,EAAqB,CACzBC,IAAK,MACLx8G,EAAGq8G,EAAcr8G,EACjB+rC,EAAGswE,EAActwE,EACjBm3B,IAAK,WACLu5C,KAAK,GAEDC,QAAqB3jH,KAAKogH,OAAOQ,UAAU,MAAO4C,EAAoBJ,GAAW,EAAM,CAC3F,YAEF,aAAapjH,KAAKogH,OAAOmD,UAAU,OAAQI,EAC7C,G,CAEMhuB,mBAAmBzyF,G,0CACvB,MAAMkgH,EAAY,CAChBlhH,KAAM,WACN0hH,cAAe1gH,EACf2gH,eAAgB,IAAIjhH,WAAW,CAAC,EAAM,EAAM,IAE5C6+B,KAAM,CAAEv/B,KAAMlC,KAAK0gH,qBAAqB,UAEpChrB,QAAiB11F,KAAKogH,OAAO0D,YAAYV,GAAW,EAAM,CAC9D,UACA,YAIF,MAAO,OAFiBpjH,KAAKogH,OAAOmD,UAAU,OAAQ7tB,EAAQh5E,iBACrC1c,KAAKogH,OAAOmD,UAAU,QAAS7tB,EAAQr9E,YAElE,G,CAEA2uC,YAAY9jD,GACV,MAAMU,EAAM,IAAIhB,WAAWM,GAE3B,OADAlD,KAAKmgH,OAAO4D,gBAAgBngH,GACrBspB,QAAQ2V,QAAQj/B,EAAIC,OAC7B,CAEQ28G,MAAM/yG,GACZ,IAAIu2G,EAMJ,OAJEA,EADmB,iBAAVv2G,EACH7L,EAAM6D,gBAAgBgI,GAAO5J,OAE7B4J,EAEDu2G,CACT,CAEQtC,aAAaj0G,GACnB,IAAIxK,EAMJ,OAJEA,EADmB,iBAAVwK,EACD,mBAAsBA,GAEtB7L,EAAMshG,uBAAuBz1F,GAEhCxK,CACT,CAEQy9G,qBAAqBL,GAC3B,GAAkB,QAAdA,EACF,MAAM,IAAIh7G,MAAM,sCAElB,MAAqB,SAAdg7G,EAAuB,QAAwB,WAAdA,EAAyB,UAAY,SAC/E,EC1VK,SAAS4D,GAIdC,EAAwBhiH,EAAaiiH,EAAaF,GAClD,IAAIG,EAAWF,EAAehiH,GAS9B,OARIiiH,EAAKE,4BAA+BD,IACtCA,EAAWH,KAGRE,EAAKG,+BACRJ,EAAehiH,GAAQkiH,GAGlBA,CACT,CCVO,SAASG,GACd53F,EACAw3F,GAEA,OAAOF,GACLt3F,EACA,wBACAw3F,GACA,IAAM,IAAIjE,GAAyBiE,EAAKK,6BAA6Bx7G,MAEzE,CCrBO,MAAMy7G,I,ICFDC,G,uSCYL,MAAMC,GACX7kH,YACUuhC,EACAsD,EACAigF,GAFA,KAAAvjF,sBAAAA,EACA,KAAAsD,WAAAA,EACA,KAAAigF,eAAAA,CACP,CAEGpsE,QAAQ89C,EAAkCzpF,G,0CAC9C,GAAW,MAAPA,EACF,MAAM,IAAIxH,MAAM,+BAGlB,GAAkB,MAAdixF,EACF,OAAOppE,QAAQ2V,QAAQ,MAGzB,IAAIgiF,EAEFA,EADwB,iBAAfvuB,EACE10F,EAAM6D,gBAAgB6wF,GAAYzyF,OAElCyyF,EAGb,MAAMwuB,QAAe9kH,KAAKwiH,WAAWqC,EAAUh4G,GACzCogC,EAAKrrC,EAAMyC,gBAAgBygH,EAAO73E,IAClChgC,EAAOrL,EAAMyC,gBAAgBygH,EAAO73G,MACpCigC,EAAoB,MAAd43E,EAAO53E,IAActrC,EAAMyC,gBAAgBygH,EAAO53E,KAAO,KACrE,OAAO,IAAIH,GAAU+3E,EAAOj4G,IAAIo/B,QAASh/B,EAAMggC,EAAIC,EACrD,G,CAEMqR,eAAe+3C,EAAyBzpF,G,0CAC5C,GAAW,MAAPA,EACF,MAAM,IAAIxH,MAAM,+BAGlB,MAAMkxF,QAAiBv2F,KAAKwiH,WAAWlsB,EAAYzpF,GACnD,IAAIk4G,EAAS,EACO,MAAhBxuB,EAASrpD,MACX63E,EAASxuB,EAASrpD,IAAIlpC,YAGxB,MAAM+wC,EAAW,IAAInyC,WAAW,EAAI2zF,EAAStpD,GAAGjpC,WAAa+gH,EAASxuB,EAAStpF,KAAKjJ,YAQpF,OAPA+wC,EAASttC,IAAI,CAAC8uF,EAAS1pF,IAAIo/B,UAC3B8I,EAASttC,IAAI,IAAI7E,WAAW2zF,EAAStpD,IAAK,GACtB,MAAhBspD,EAASrpD,KACX6H,EAASttC,IAAI,IAAI7E,WAAW2zF,EAASrpD,KAAM,EAAIqpD,EAAStpD,GAAGjpC,YAG7D+wC,EAASttC,IAAI,IAAI7E,WAAW2zF,EAAStpF,MAAO,EAAIspF,EAAStpD,GAAGjpC,WAAa+gH,GAClE,IAAIjwE,GAAeC,EAASlxC,OACrC,G,CAEM8pC,cAAcgpD,EAAsB9pF,G,0CACxC,GAAW,MAAPA,EACF,MAAM,IAAIxH,MAAM,mCAKlB,GAAkB,OAFlBwH,EAAM7M,KAAKglH,iBAAiBn4G,EAAK8pF,IAEzBtqD,QAAoC,OAAlBsqD,aAAS,EAATA,EAAWzpD,KAEnC,OADAltC,KAAK2kC,WAAWziB,MAAM,iBACf,KAGT,GAAIrV,EAAIo/B,UAAY0qD,EAAU5oD,eAE5B,OADA/tC,KAAK2kC,WAAWziB,MAAM,wBACf,KAGT,MAAM+iG,EAAajlH,KAAKqhC,sBAAsBohF,yBAC5C9rB,EAAU1pF,KACV0pF,EAAU1pD,GACV0pD,EAAUzpD,IACVrgC,GAEF,GAAyB,MAArBo4G,EAAW54E,QAAoC,MAAlB44E,EAAW/3E,IAAa,CACvD,MAAMg4E,QAAoBllH,KAAKqhC,sBAAsB6gF,SACnD+C,EAAWpC,QACXoC,EAAW54E,OACX,UAGF,WADwBrsC,KAAKqhC,sBAAsB+gF,YAAY6C,EAAW/3E,IAAKg4E,IAG7E,OADAllH,KAAKmlH,aAAa,eACX,I,CAIX,OAAOnlH,KAAKqhC,sBAAsByhF,eAAemC,EACnD,G,CAEMz1E,eAAe41E,EAAsBv4G,G,0CACzC,GAAW,MAAPA,EACF,MAAM,IAAIxH,MAAM,+BAGlB,GAAgB,MAAZ+/G,EACF,MAAM,IAAI//G,MAAM,oCAKlB,GAAkB,OAFlBwH,EAAM7M,KAAKglH,iBAAiBn4G,EAAKu4G,IAEzB/4E,QAAuC,MAArB+4E,EAASv3E,SACjC,OAAO,KAGT,GAAIhhC,EAAIo/B,UAAYm5E,EAASr3E,eAC3B,OAAO,KAGT,GAAkB,MAAdlhC,EAAIw/B,QAAuC,MAArB+4E,EAASv3E,SAAkB,CACnD,MAAMg1E,EAAU,IAAIjgH,WAAWwiH,EAASx3E,QAAQ5pC,WAAaohH,EAASt3E,UAAU9pC,YAChF6+G,EAAQp7G,IAAI,IAAI7E,WAAWwiH,EAASx3E,SAAU,GAC9Ci1E,EAAQp7G,IAAI,IAAI7E,WAAWwiH,EAASt3E,WAAYs3E,EAASx3E,QAAQ5pC,YACjE,MAAMkhH,QAAoBllH,KAAKqhC,sBAAsB6qC,KACnD22C,EAAQh/G,OACRgJ,EAAIw/B,OACJ,UAEF,GAAoB,OAAhB64E,EACF,OAAO,KAIT,WADwBllH,KAAKqhC,sBAAsBr5B,QAAQo9G,EAASv3E,SAAUq3E,IAG5E,OADAllH,KAAKmlH,aAAa,eACX,I,CAIX,MAAM/+E,QAAepmC,KAAKqhC,sBAAsB8hF,WAC9CiC,EAASt3E,UACTs3E,EAASx3E,QACT/gC,EAAIu/B,QAGN,OAAOhG,QAAAA,EAAU,IACnB,G,CAEco8E,WAAWv1G,EAAmBJ,G,0CAC1C,MAAMvE,EAAM,IAAIm8G,GAKhB,GAJAn8G,EAAIuE,IAAMA,EACVvE,EAAI2kC,SAAWjtC,KAAKqhC,sBAAsB2lB,YAAY,IACtD1+C,EAAI2E,WAAajN,KAAKqhC,sBAAsBmhF,WAAWv1G,EAAM3E,EAAI2kC,GAAI3kC,EAAIuE,IAAIu/B,QAEvD,MAAlB9jC,EAAIuE,IAAIw/B,OAAgB,CAC1B,MAAMw2E,EAAU,IAAIjgH,WAAW0F,EAAI2kC,GAAGjpC,WAAasE,EAAI2E,KAAKjJ,YAC5D6+G,EAAQp7G,IAAI,IAAI7E,WAAW0F,EAAI2kC,IAAK,GACpC41E,EAAQp7G,IAAI,IAAI7E,WAAW0F,EAAI2E,MAAO3E,EAAI2kC,GAAGjpC,YAC7CsE,EAAI4kC,UAAYltC,KAAKqhC,sBAAsB6qC,KAAK22C,EAAQh/G,OAAQyE,EAAIuE,IAAIw/B,OAAQ,S,CAGlF,OAAO/jC,CACT,G,CAEQ68G,aAAarxC,GACf9zE,KAAK4kH,gBACP5kH,KAAK2kC,WAAWziB,MAAM4xD,EAE1B,CAMAkxC,iBAAiBn4G,EAAyBu4G,GACxC,OACEA,EAASr3E,iBAAmBnD,GAAe0B,0BAC3Cz/B,EAAIo/B,UAAYrB,GAAesB,cAExB,IAAIF,GAAmBn/B,EAAIA,IAAK+9B,GAAe0B,0BAGjDz/B,CACT,GD1LF,SAAY63G,GACV,qBACA,mBACA,yBACA,oBACD,CALD,CAAYA,KAAAA,GAAY,KEGjB,MAAMW,GAGXvlH,YACY+tB,EACArlB,EAA2C,MAD3C,KAAAqlB,MAAAA,EACA,KAAArlB,OAAAA,EAJF,KAAA88G,UAA2C,IAAIl+G,GAKtD,CAEHm+G,MAAM/vG,GACCxV,KAAK6tB,OAGV7tB,KAAKwlH,MAAMd,GAAae,MAAOjwG,EACjC,CAEA4pD,KAAK5pD,GACHxV,KAAKwlH,MAAMd,GAAagB,KAAMlwG,EAChC,CAEAg8E,QAAQh8E,GACNxV,KAAKwlH,MAAMd,GAAaiB,QAASnwG,EACnC,CAEA0M,MAAM1M,GACJxV,KAAKwlH,MAAMd,GAAar/G,MAAOmQ,EACjC,CAEAgwG,MAAMI,EAAqBpwG,GACzB,GAAmB,MAAfxV,KAAKwI,SAAkBxI,KAAKwI,OAAOo9G,GAIvC,OAAQA,GACN,KAAKlB,GAAae,MAIlB,KAAKf,GAAagB,KAEhBtpB,QAAQvE,IAAIriF,GACZ,MACF,KAAKkvG,GAAaiB,QAEhBvpB,QAAQC,KAAK7mF,GACb,MACF,KAAKkvG,GAAar/G,MAEhB+2F,QAAQl6E,MAAM1M,GAKpB,ECxCK,SAASqwG,GACdl5F,EACAw3F,GAEA,OAAOF,GACLt3F,EACA,aACAw3F,GACA,IAAM,IAAIkB,GAAkBlB,EAAK2B,kBAAkBj4F,MAAOs2F,EAAK2B,kBAAkBt9G,SAErF,CCNO,SAASu9G,GACdp5F,EACAw3F,GAEA,OAAOF,GACLt3F,EACA,iBACAw3F,GACA,IACE,IAAIQ,GACFJ,GAA6B53F,EAAOw3F,GACpC0B,GAAkBl5F,EAAOw3F,GACzBA,EAAK6B,sBAAsBpB,iBAGnC,C,kmBC3BO,MAAMqB,WCEN,MAcLnmH,YAAoB8kC,GAAA,KAAAA,aAAAA,EAbH,KAAAshF,YAAc,IAAIC,GAAA,EACnC,KAAAzqG,KAAyB1b,KAAKkmH,YAUtB,KAAAE,QAAkB,KAGxBpmH,KAAK4kC,aAAaq5D,eAAettC,WAAU,IAAY,yCAC/C3wD,KAAKqmH,oBACb,KACF,CAEA9lF,aACE,OAAuB,MAAhBvgC,KAAKkqD,OACd,CAEA0G,sBACE,OAA6B,MAAzB5wD,KAAKsmH,iBACAtmH,KAAKsmH,iBAGM,MAAhBtmH,KAAKkqD,QACAlqD,KAAKkqD,QAAU,iBAGjB,qCACT,CAEA01D,iBACE,OAAwB,MAApB5/G,KAAKumH,YACAvmH,KAAKumH,YAGVvmH,KAAKkqD,QACAlqD,KAAKkqD,QAEP,6BACT,CAEAs8D,aACE,MAAiC,gCAA1BxmH,KAAK4/G,iBACR,+BACA5/G,KAAK4/G,iBAAmB,UAC9B,CAEA6G,cACE,OAAqB,MAAjBzmH,KAAK0mH,SACA1mH,KAAK0mH,SAGV1mH,KAAKkqD,QACAlqD,KAAKkqD,QAAU,SAGjB,6BACT,CAEAp8B,YACE,OAAmB,MAAf9tB,KAAKiwB,OACAjwB,KAAKiwB,OAGVjwB,KAAKkqD,QACAlqD,KAAKkqD,QAAU,OAGjB,2BACT,CAEA59B,iBACE,OAAwB,MAApBtsB,KAAK2mH,YACA3mH,KAAK2mH,YAGV3mH,KAAKkqD,QACAlqD,KAAKkqD,QAAU,YAGjB,gCACT,CAEA/sB,eACE,OAAsB,MAAlBn9B,KAAK4mH,UACA5mH,KAAK4mH,UAGV5mH,KAAKkqD,QACAlqD,KAAKkqD,QAAU,UAGjB,8BACT,CAEAnjB,qBACE,OAAO/mC,KAAKwY,eACd,CAEAquG,aACE,OAAoB,MAAhB7mH,KAAKomH,QACApmH,KAAKomH,QAAU,MAGS,gCAA1BpmH,KAAK4/G,iBACR,gCACA5/G,KAAK4/G,iBAAmB,UAC9B,CAEMyG,qB,0CACJ,MAAM3qG,QAAkB1b,KAAK4kC,aAAamjE,qBACpC+e,EAAU,IAAIpmH,EAEpBV,KAAKkqD,QAAU48D,EAAQnmH,KAAO+a,EAAK/a,KACnCX,KAAKumH,YAAc7qG,EAAKza,SACxBjB,KAAKiwB,OAAS62F,EAAQlmH,IAAM8a,EAAK9a,IACjCZ,KAAK2mH,YAAcG,EAAQjmH,SAAW6a,EAAK7a,SAC3Cb,KAAK0mH,SAAWhrG,EAAK5a,MACrBd,KAAKsmH,iBAAmB5qG,EAAK3a,cAC7Bf,KAAK4mH,UAAYE,EAAQ9lH,OAAS0a,EAAK1a,OACvChB,KAAKwY,gBAAkBkD,EAAKxa,YAE9B,G,CAEM6lH,QAAQrrG,G,gDAqCZ,OApCAA,EAAK/a,KAAOX,KAAKgnH,UAAUtrG,EAAK/a,MAChC+a,EAAKza,SAAWjB,KAAKgnH,UAAUtrG,EAAKza,UACpCya,EAAK9a,IAAMZ,KAAKgnH,UAAUtrG,EAAK9a,KAC/B8a,EAAK7a,SAAWb,KAAKgnH,UAAUtrG,EAAK7a,UACpC6a,EAAK5a,MAAQd,KAAKgnH,UAAUtrG,EAAK5a,OACjC4a,EAAK3a,cAAgBf,KAAKgnH,UAAUtrG,EAAK3a,eACzC2a,EAAK1a,OAAShB,KAAKgnH,UAAUtrG,EAAK1a,QAClC0a,EAAKxa,aAAelB,KAAKgnH,UAAUtrG,EAAKxa,cAGxCwa,EAAKurG,KAAgC,QAAzB,EAAAjnH,KAAKgnH,UAAUtrG,EAAKurG,aAAK,QAAIjnH,KAAKomH,cAExCpmH,KAAK4kC,aAAaqjE,mBAAmB,CACzCtnG,KAAM+a,EAAK/a,KACXC,IAAK8a,EAAK9a,IACVC,SAAU6a,EAAK7a,SACfI,SAAUya,EAAKza,SACfH,MAAO4a,EAAK5a,MACZC,cAAe2a,EAAK3a,cACpBC,OAAQ0a,EAAK1a,OACbE,aAAcwa,EAAKxa,eAIrBlB,KAAKkqD,QAAUxuC,EAAK/a,KACpBX,KAAKumH,YAAc7qG,EAAKza,SACxBjB,KAAKiwB,OAASvU,EAAK9a,IACnBZ,KAAK2mH,YAAcjrG,EAAK7a,SACxBb,KAAK0mH,SAAWhrG,EAAK5a,MACrBd,KAAKsmH,iBAAmB5qG,EAAK3a,cAC7Bf,KAAK4mH,UAAYlrG,EAAK1a,OACtBhB,KAAKwY,gBAAkBkD,EAAKxa,aAC5BlB,KAAKomH,QAAU1qG,EAAKurG,KAEpBjnH,KAAKkmH,YAAY1nB,KAAK9iF,GAEfA,C,IAGTwrG,UACE,MAAO,CACLvmH,KAAMX,KAAKkqD,QACXjpD,SAAUjB,KAAKumH,YACf3lH,IAAKZ,KAAKiwB,OACVpvB,SAAUb,KAAK2mH,YACf7lH,MAAOd,KAAK0mH,SACZ3lH,cAAef,KAAKsmH,iBACpBtlH,OAAQhB,KAAK4mH,UACb1lH,aAAclB,KAAKwY,gBACnByuG,KAAMjnH,KAAKomH,QAEf,CAEQY,UAAU9gH,GAChB,OAAW,MAAPA,GAAuB,KAARA,EACV,OAGTA,EAAMA,EAAI3B,QAAQ,QAAS,KAClBgC,WAAW,YAAeL,EAAIK,WAAW,cAChDL,EAAM,WAAaA,GAGdA,EAAII,OACb,GDpMAxG,YAAY8kC,EAAoCD,GAC9C/4B,MAAMg5B,GADwC,KAAAD,WAAAA,CAEhD,CAEMo7E,wB,0CACJ,IACE,OAA+C,aAAjC//G,KAAKmnH,wB,CACnB,MAAOlgH,GAEP,OADAjH,KAAK2kC,WAAWziB,MAAMjb,IACf,C,CAEX,G,CAEMmgH,sB,0CACJ,MAAMC,QAAYrnH,KAAKmnH,wBAEvB,OACEE,EAAI1mH,MAAQX,KAAKkqD,SACjBm9D,EAAIpmH,UAAYjB,KAAKumH,aACrBc,EAAIzmH,KAAOZ,KAAKumH,aAChBc,EAAIxmH,UAAYb,KAAK2mH,aACrBU,EAAIvmH,OAASd,KAAK0mH,UAClBW,EAAItmH,eAAiBf,KAAKsmH,kBAC1Be,EAAIrmH,QAAUhB,KAAK4mH,SAEvB,G,CAEAO,wBACE,OAEI,IAAIj6F,SAAQ,CAAC2V,EAAS1V,KACpBslD,OAAO60C,QAAQC,QAAQ9mF,IAAI,eAAgB2F,IACzC,GAAIqsC,OAAOU,QAAQC,UACjB,OAAOjmD,EAAOslD,OAAOU,QAAQC,WAG/BvwC,EAAQuD,EAAOohF,YAAY,GAC3B,GAEV,CAEMxH,8B,0CACJ,MAAMqH,QAAYrnH,KAAKmnH,8BACjBnnH,KAAK+mH,QAAQ,CACjBpmH,KAAM0mH,EAAI1mH,KACVM,SAAUomH,EAAIpmH,SACdL,IAAKymH,EAAIzmH,IACTC,SAAUwmH,EAAIxmH,SACdC,MAAOumH,EAAIvmH,MACXC,cAAesmH,EAAItmH,cACnBC,OAAQqmH,EAAIrmH,QAEhB,G,6SEpCF,MAAMymH,GAAoC,CACxC7vG,YAAa,cACb+oF,eAAgB,iBAChB+mB,wBAAyB,0BACzBvmB,0BAA2B,4BAC3BG,4BAA6B,8BAC7BE,8BAA+B,gCAC/BG,cAAe,gBACfE,gBAAiB,YACjBr6B,eAAgB,oBAChB18D,SAAU,kBACVa,aAAc,sBACd02F,mBAAoB,qBACpBE,6BAA8B,+BAC9BY,gBAAiB,kBACjBG,4BAA6B,8BAC7BG,4BAA6B,yBAC7BE,oBAAqB,sBACrBG,oBAAqB,sBACrBG,mCAAoC,qCACpCG,uBAAwB,yBACxBG,eAAgB,iBAChBG,UAAW,YACXG,wBAAyB,0BACzBG,6BAA8B,+BAC9B3/E,cAAe,gBACfggF,kBAAmB,uBACnBI,yBAA0B,2BAC1BkiB,gBAAiB,mBACjB5hB,yBAA0B,2BAC1BG,oCAAqC,sCACrCG,kBAAmB,oBACnBG,gBAAiB,kBACjBohB,gBAAiB,kBACjB9gB,qBAAsB,uBACtBG,kBAAmB,uBACnBG,WAAY,aACZh7D,OAAQ,SACRy7E,WAAY,aACZC,WAAY,gBACZr0B,gBAAiB,kBACjBiU,SAAU,WACVG,WAAY,aACZnmG,gBAAiB,kBACjB2S,kBAAmB,oBACnB4vC,gBAAiB,kBACjB3rC,mBAAoB,qBACpBshD,QAAS,2BACT0uC,iBAAkB,mBAClBtzF,IAAK,MACLC,cAAe,gBACfpI,IAAK,MACLujF,QAAS,UACTlpB,WAAY,aACZh0B,UAAW,iBACX+qB,OAAQ,SACR8qC,eAAgB,iBAChBG,0BAA2B,+BAC3BE,aAAc,eACdK,2BAA4B,6BAC5BG,YAAa,cACbK,0BAA2B,4BAC3BjmE,aAAc,kBACdumE,aAAc,eACdvyF,aAAc,eACd8yF,gBAAiB,kBACjBid,cAAe,mBACf3c,SAAU,WACVxlC,MAAO,gBACPvkE,MAAO,QACP2kD,UAAW,YACXvvC,OAAQ,SACRuxG,cAAe,mBACf/jF,mBAAoB,qBACpBgyC,aAAc,aACd00B,gBAAiB,mBAGbsd,GAA2C,CAC/C9yG,QAAS,WACTqC,YAAa,eACbyQ,QAAS,WACTk8C,SAAU,YACVj8C,SAAU,YACV5c,eAAgB,kBAChB4Z,cAAe,iBACfC,UAAW,aACXgD,MAAO,SACPhC,SAAU,aAGN,GACI,SADJ,GAEmB,wBAFnB,GAGU,eAHV,GAIiB,sBAJjB,GAKa,kBAGb,GACK,kBADL,GAEU,uBAFV,GAGO,aAGN,MAAM+hG,GAIXpoH,YACY6gC,EACA+8D,EACAG,GAFA,KAAAl9D,eAAAA,EACA,KAAA+8D,qBAAAA,EACA,KAAAG,aAAAA,CACT,CAEGY,iB,0CACJ,MAAM0pB,QAA4BnoH,KAAKooH,yBACvC,OAA8B,MAAvBD,GAA+BA,EAAsBzoH,EAAa2oH,MAC3E,G,CAEM3pB,U,0CACJ,IAAIypB,QAA4BnoH,KAAKooH,yBACrC,KAAOD,EAAsBzoH,EAAa2oH,QAAQ,CAChD,OAAQF,GACN,KAAKzoH,EAAa+B,UACVzB,KAAKsoH,uBACX,MACF,KAAK5oH,EAAa6oH,UACVvoH,KAAKwoH,uBACX,MACF,KAAK9oH,EAAa+oH,YACVzoH,KAAK0oH,uBACX,MACF,KAAKhpH,EAAaipH,KAAM,CACtB,MAAMprB,QAA8Bv9F,KAAK4oH,2BACzC,IAAK,MAAMvpB,KAAW9B,EAAuB,CAC3C,MAAMsrB,QAAwB7oH,KAAK8oH,uBAAuBzpB,SACpDr/F,KAAKyH,IAAI43F,EAAQj3E,QAAQ3R,OAAQoyG,E,OAEnC7oH,KAAK+oH,uBAAuBrpH,EAAaspH,MAC/C,K,CAEF,KAAKtpH,EAAaspH,KAAM,CACtB,MAAMzrB,QAA8Bv9F,KAAK4oH,2BACzC,IAAK,MAAMvpB,KAAW9B,EAAuB,CAC3C,MAAMsrB,QAAwB7oH,KAAKipH,uBAAuB5pB,SACpDr/F,KAAKyH,IAAI43F,EAAQj3E,QAAQ3R,OAAQoyG,E,OAEnC7oH,KAAK+oH,uBAAuBrpH,EAAawpH,KAC/C,K,EAIJf,GAAuB,C,CAE3B,G,CAEgBG,uB,8IACd,MAAMa,EAAqBC,GAA4B,mCACrD,IAAK,MAAMv8G,KAAO46G,GACL,MAAP56G,UAGE7M,KAAKyH,IAAIggH,GAAO56G,GAAM,OAE9B,GAAsB,MAAlBu8G,EACF,IAAK,MAAMC,KAAapB,GACL,MAAboB,UAGErpH,KAAKyH,IAAIwgH,GAAcoB,GAAa5yG,EAAQ,MAGxD,IAQM6mF,EACsC,QAAzC,QAAMt9F,KAAKygC,IAAiB,WAAa,QAAIzgC,KAAK69F,aAAar9F,aAAa,MAC/E88F,EAAQ97F,aAAe9B,EAAa6oH,IACpCjrB,EAAQ57F,gBACmD,QAAxD,QAAM1B,KAAKygC,IAAqBgnF,GAAO/lH,wBAAiB,QAAI47F,EAAQ57F,gBACvE47F,EAAQr/B,OAAgD,QAAtC,QAAMj+D,KAAKygC,IAAYgnF,GAAOxpD,eAAQ,QAAIq/B,EAAQr/B,OACpEq/B,EAAQgM,uBACuD,QAA5D,QAAMtpG,KAAKygC,IAAagnF,GAAOhkB,oCAA6B,QAC7DnG,EAAQgM,uBACVhM,EAAQmM,2BACqD,QAA1D,QAAMzpG,KAAKygC,IAAYgnF,GAAOhe,mCAA4B,QAC3DnM,EAAQmM,2BACVnM,EAAQwN,gBAC0C,QAA/C,QAAM9qG,KAAKygC,IAAYgnF,GAAO3c,wBAAiB,QAAIxN,EAAQwN,gBAC9DxN,EAAQ2N,0BACwC,QAA7C,QAAMjrG,KAAKygC,IAAYgnF,GAAOM,sBAAe,QAAIzqB,EAAQ2N,0BAC5D3N,EAAQ8N,SAAiD,QAArC,QAAMprG,KAAKygC,IAASgnF,GAAOrc,iBAAU,QAAI9N,EAAQ8N,SACrE9N,EAAQqN,gBAC0C,QAA/C,QAAM3qG,KAAKygC,IAAYgnF,GAAO9c,wBAAiB,QAAIrN,EAAQqN,gBAC9DrN,EAAQj8F,MAAiD,QAAxC,QAAMrB,KAAKygC,IAAegnF,GAAOpmH,cAAO,QAAIi8F,EAAQj8F,MACrEi8F,EAAQrnB,aAA4D,QAA5C,QAAMj2E,KAAKygC,IAAYgnF,GAAOxxC,qBAAc,QAAIqnB,EAAQrnB,aAChFqnB,EAAQr5D,mBAC6C,QAAlD,QAAMjkC,KAAKygC,IAAYgnF,GAAOxjF,2BAAoB,QAAIq5D,EAAQr5D,mBACjEq5D,EAAQ/7F,OAAqD,QAA3C,QAAMvB,KAAKygC,IAASgnF,GAAO1e,uBAAgB,QAAIzL,EAAQ/7F,OACzE+7F,EAAQ8J,WAAyD,QAA3C,QAAMpnG,KAAKygC,IAAagnF,GAAOrgB,mBAAY,QAAI9J,EAAQ8J,WAC7E9J,EAAQwJ,qBACgD,QAArD,QAAM9mG,KAAKygC,IAAagnF,GAAO3gB,6BAAsB,QAAIxJ,EAAQwJ,qBACpExJ,EAAQ+I,kBAC6C,QAAlD,QAAMrmG,KAAKygC,IAAagnF,GAAOphB,0BAAmB,QAAI/I,EAAQ+I,kBACjE/I,EAAQ2J,kBAC6C,QAAlD,QAAMjnG,KAAKygC,IAAagnF,GAAOxgB,0BAAmB,QAAI3J,EAAQ2J,kBACjE3J,EAAQsM,YAA2D,QAA5C,QAAM5pG,KAAKygC,IAAagnF,GAAO7d,oBAAa,QAAItM,EAAQsM,YAC/EtM,EAAQqD,eAC0C,QAA/C,QAAM3gG,KAAKygC,IAAagnF,GAAO9mB,uBAAgB,QAAIrD,EAAQqD,eAC9DrD,EAAQyI,yBACoD,QAAzD,QAAM/lG,KAAKygC,IAAagnF,GAAO1hB,iCAA0B,QAC1DzI,EAAQyI,yBACVzI,EAAQ4I,oCAC+D,QAApE,QAAMlmG,KAAKygC,IAAagnF,GAAOvhB,4CAAqC,QACrE5I,EAAQ4I,oCAEV,MAAMzvF,EACmC,QAAtC,QAAMzW,KAAKygC,IAAYgnF,GAAOhxG,eAAQ,cAAWzW,KAAKygC,IAAYgnF,GAAO/f,UAEtE4hB,EAAiBtpH,KAAK69F,aAAap9F,cAAc,MACjD8oH,EAAmC,CACvCtoB,wBAC2D,QAAxD,QAAMjhG,KAAKygC,IAAagnF,GAAOC,gCAAyB,QACzD4B,EAAenjG,SAAS86E,wBAC1BE,0BAC6D,QAA1D,QAAMnhG,KAAKygC,IAAagnF,GAAOtmB,kCAA2B,QAC3DmoB,EAAenjG,SAASg7E,0BAC1BU,gBACmD,QAAhD,QAAM7hG,KAAKygC,IAAagnF,GAAO5lB,wBAAiB,QACjDynB,EAAenjG,SAAS07E,gBAC1Br6B,eACiD,QAA9C,QAAMxnE,KAAKygC,IAAYgnF,GAAOjgD,uBAAgB,QAAI8hD,EAAenjG,SAASqhD,eAC7E27B,gBAC+C,QAA5C,QAAMnjG,KAAKygC,IAASgnF,GAAOtkB,wBAAiB,QAAImmB,EAAenjG,SAASg9E,gBAC3EG,4BAC+D,QAA5D,QAAMtjG,KAAKygC,IAAagnF,GAAOnkB,oCAA6B,QAC7DgmB,EAAenjG,SAASm9E,4BAC1BG,4BAC+D,QAA5D,QAAMzjG,KAAKygC,IAAagnF,GAAOhkB,oCAA6B,QAC7D6lB,EAAenjG,SAASs9E,4BAC1BE,oBACuD,QAApD,QAAM3jG,KAAKygC,IAAagnF,GAAO9jB,4BAAqB,QACrD2lB,EAAenjG,SAASw9E,oBAC1BG,oBACuD,QAApD,QAAM9jG,KAAKygC,IAAagnF,GAAO3jB,4BAAqB,QACrDwlB,EAAenjG,SAAS29E,oBAC1BG,mCACsE,QAAnE,QAAMjkG,KAAKygC,IAAagnF,GAAOxjB,2CAAoC,QACpEqlB,EAAenjG,SAAS89E,mCAC1BG,uBAC0D,QAAvD,QAAMpkG,KAAKygC,IAAagnF,GAAOrjB,+BAAwB,QACxDklB,EAAenjG,SAASi+E,uBAC1BM,UAAsD,QAA1C,QAAM1kG,KAAKygC,IAAagnF,GAAO/iB,kBAAW,QAAI4kB,EAAenjG,SAASu+E,UAClFG,wBAC2D,QAAxD,QAAM7kG,KAAKygC,IAAagnF,GAAO5iB,gCAAyB,QACzDykB,EAAenjG,SAAS0+E,wBAC1BG,6BACgE,QAA7D,QAAMhlG,KAAKygC,IAAagnF,GAAOziB,qCAA8B,QAC9DskB,EAAenjG,SAAS6+E,6BAC1BK,kBACqD,QAAlD,QAAMrlG,KAAKygC,IAAagnF,GAAOpiB,0BAAmB,QACnDikB,EAAenjG,SAASk/E,kBAC1BI,yBAC4D,QAAzD,QAAMzlG,KAAKygC,IAAagnF,GAAOhiB,iCAA0B,QAC1D6jB,EAAenjG,SAASs/E,yBAC1BkiB,gBACmD,QAAhD,QAAM3nH,KAAKygC,IAAagnF,GAAOE,wBAAiB,QACjD2B,EAAenjG,SAASwhG,gBAC1BnhB,gBACmD,QAAhD,QAAMxmG,KAAKygC,IAAagnF,GAAOjhB,wBAAiB,QACjD8iB,EAAenjG,SAASqgF,gBAC1BG,gBACmD,QAAhD,QAAM3mG,KAAKygC,IAAagnF,GAAOG,wBAAiB,QACjD0B,EAAenjG,SAASwgF,gBAC1BjlG,gBAAwC,QAAvB,EAAA47F,EAAQ57F,uBAAe,QAAI4nH,EAAenjG,SAASzkB,gBACpE2S,kBACiD,QAA9C,QAAMrU,KAAKygC,IAASgnF,GAAOpzG,0BAAmB,QAC/Ci1G,EAAenjG,SAAS9R,kBAC1B60F,0BAC6D,QAA1D,QAAMlpG,KAAKygC,IAAagnF,GAAOve,kCAA2B,QAC3DogB,EAAenjG,SAAS+iF,0BAC1BE,aAC4C,QAAzC,QAAMppG,KAAKygC,IAASgnF,GAAOre,qBAAc,QAAIkgB,EAAenjG,SAASijF,aACxEa,0BACyD,QAAtD,QAAMjqG,KAAKygC,IAASgnF,GAAOxd,kCAA2B,QACvDqf,EAAenjG,SAAS8jF,0BAC1BjmE,aAAc,CACZ20B,UAAW,KACXtR,gBAAiBrnD,KAAKygC,IAAYgnF,GAAOzjF,eAE3CumE,mBAAoBvqG,KAAKygC,IAAYgnF,GAAOld,cAC5CpkF,SAAoB,MAAV1P,EAAiB,WAAazW,KAAKygC,IAASwnF,GAAc9hG,SAAW1P,GAC/Ew/D,aAC+C,QAA5C,QAAMj2E,KAAKygC,IAAYgnF,GAAOxxC,qBAAc,QAAIqzC,EAAenjG,SAAS8vD,aAC3EhyC,mBACqD,QAAlD,QAAMjkC,KAAKygC,IAAYgnF,GAAOxjF,2BAAoB,QACnDqlF,EAAenjG,SAAS8d,oBAK5B,GAAc,MAAVxtB,EAMF,aALMzW,KAAKyH,IAAI,GAA0B8hH,SACnCvpH,KAAKyH,IAAI,GAAa61F,SACtBt9F,KAAKyH,IAAI,GAA4B,UACrCzH,KAAKyH,IAAI,GAAmB,iBAC5B0hH,KAIR7rB,EAAQhyF,qBAAuBtL,KAAKygC,IAAYwnF,GAAc38G,eAAiBmL,SACzEzW,KAAKyH,IAAI,GAAa61F,SACtBt9F,KAAKyH,IAAIgP,EAAQ,CACrBxJ,KAAM,CACJqzF,kBAAmB,KACnBnrF,QAAS,CACPwjD,UAAW,KACXtR,gBAAiBrnD,KAAKygC,IAAkCwnF,GAAc9yG,QAAUsB,IAElF4rF,mBAAoB,KACpB7qF,YAAa,CACXmhD,UAAW,KACXtR,gBAAiBrnD,KAAKygC,IACpBwnF,GAAczwG,YAAcf,IAGhCwtC,sBAAuBjkD,KAAKygC,IAAiBgnF,GAAOxjE,iBACpDh8B,QAAS,CACP0wC,UAAW,KACXtR,gBAAiBrnD,KAAKygC,IAAkCwnF,GAAchgG,QAAUxR,IAElFy8B,UAAW,KACXhuB,oBAAqBllB,KAAKygC,IACxBwnF,GAAc/iG,cAAgBzO,GAEhCitB,0BAA2B,CACzBi1B,UAAW,KACXtR,gBAAiBrnD,KAAKygC,IAAgCgnF,GAAO7tD,UAE/D1xC,SAAU,CACRywC,UAAW,KACXtR,gBAAiBrnD,KAAKygC,IAAkCwnF,GAAc//F,SAAWzR,IAEnF0O,gBAAiBnlB,KAAKygC,IAAoCwnF,GAAc9iG,UAAY1O,GACpF0R,MAAO,CACLwwC,UAAW,KACXtR,gBAAiBrnD,KAAKygC,IAAgCwnF,GAAc9/F,MAAQ1R,KAGhFlO,KAAM,CACJw4F,yBAA0B/gG,KAAKygC,IAAYgnF,GAAO97G,cAClD62F,gBAAiB,KACjBgnB,oBAAqB,KACrBC,mBAAoB,KACpBC,yBAA0B,KAC1B9lF,mBAAoB,CAClByjB,gBAAiBrnD,KAAKygC,IAAYgnF,GAAOr7E,QACzCusB,UAAW,MAEbgxD,aAAc,KACd9lF,iBAAkB,CAChB80B,UAAW,KACXtR,gBAAiBrnD,KAAKygC,IAASgnF,GAAOI,aAExCxvG,WAAY,CACVsgD,UAAW,KACXtR,gBAAiBrnD,KAAKygC,IAAYgnF,GAAOK,aAE3ChkF,aAAc,CACZ60B,UAAW,KACXtR,gBAAiBrnD,KAAKygC,IAASgnF,GAAOh0B,kBAExC/2E,UAAW,MAEb0L,QAAS,CACP04E,qBAAsB9gG,KAAKygC,IAAYgnF,GAAO38G,UAC9C8+G,qBAAsB,KACtBrnB,mCAAoCviG,KAAKygC,IAAagnF,GAAOllB,8BAC7D/zF,YAAaxO,KAAKygC,IAAYgnF,GAAOzhE,WACrC3gC,oBAAqBrlB,KAAKygC,IAAagnF,GAAOpiG,eAC9CqiF,SAAU,KACVG,WAAY,KACZK,iBAAkB,KAClB5vF,mBAAoB,KACpB2tB,qBAAsB,KACtBhxB,oBAAqBjV,KAAKygC,IAAYgnF,GAAOxyG,eAC7CkxB,cAAenmC,KAAKygC,IAAagnF,GAAOzyG,KACxCo7E,cAAepwF,KAAKygC,IAAYgnF,GAAOr3B,SACvCjsB,SAAU,KACV1tD,OAAQA,EACRiN,iBAAkB,MAEpByC,SAAUojG,EACVplF,OAAQ,CACNvsB,kBAAmB5X,KAAKygC,IAAYgnF,GAAO7vG,aAC3CynB,aAAc,KACdrnB,mBAAoBhY,KAAKygC,IAAYgnF,GAAOzvG,cAC5C0N,cAAe,cAIb1lB,KAAKyH,IAAI,GAA4B,CAACgP,UACtCzW,KAAKyH,IAAI,GAAmBgP,GAElC,MAAM+mF,GAAgD,CACpD,CAAC/mF,SAAezW,KAAKygC,IAAYgnF,GAAOvgD,aAE1Cs2B,GAAgB/mF,SAAgBzW,KAAKygC,IAAYgnF,GAAOvgD,kBAClDlnE,KAAKyH,IAAI,GAAsB+1F,UAE/B2rB,EAAY1yG,UAERzW,KAAK09F,qBAAqBjoD,IAAIgyE,GAAO56G,IAAK,CAAEokF,UAAW,uBACzDjxF,KAAK09F,qBAAqBv8D,KAC9B,GAAG1qB,IAAS,WACNzW,KAAK09F,qBAAqBj9D,IAAIgnF,GAAO56G,IAAK,CAAEokF,UAAW,cAC7D,CAAEA,UAAW,oBAETjxF,KAAK09F,qBAAqBtpB,OAAOqzC,GAAO56G,IAAK,CAAEokF,UAAW,sBAGxDjxF,KAAK09F,qBAAqBjoD,IAAIgyE,GAAO56G,IAAK,CAAEokF,UAAW,kBACzDjxF,KAAK09F,qBAAqBv8D,KAC9B,GAAG1qB,IAAS,WACNzW,KAAK09F,qBAAqBj9D,IAAIgnF,GAAO56G,IAAK,CAAEokF,UAAW,SAC7D,CAAEA,UAAW,eAETjxF,KAAK09F,qBAAqBtpB,OAAOqzC,GAAO56G,IAAK,CAAEokF,UAAW,iBAGxDjxF,KAAK09F,qBAAqBjoD,IAAIgyE,GAAO56G,cACvC7M,KAAK09F,qBAAqBv8D,KAC9B,GAAG1qB,IAAS,WACNzW,KAAK09F,qBAAqBj9D,IAAIgnF,GAAO56G,YAEvC7M,KAAK09F,qBAAqBtpB,OAAOqzC,GAAO56G,K,IAIlC27G,uB,0CACd,MAAMqB,QAA6B7pH,KAAKygC,IAAc,UAChDvT,QAAQ+hB,IACZ46E,EAAqB/kH,KAAW2R,GAAW,mC,QACzC,MAAM4oF,QAAgBr/F,KAAKygC,IAAchqB,GACzC,GAC6C,QAA3B,QAAhB,EAAA4oF,aAAO,EAAPA,EAASj3E,eAAO,eAAE6d,uBACa,OAAjB,QAAd,EAAAo5D,EAAQl7D,cAAM,eAAEvsB,aAChB,CACA,MAAMynB,QAAqB6oC,GAAa5oC,YAAY+/D,EAAQl7D,OAAOvsB,aACnEynF,EAAQj3E,QAAQ6d,qBAAuB5G,EAAa6G,cAC9ClmC,KAAKyH,IAAIgP,EAAQ4oF,E,CAE3B,OAGF,MAAM/B,QAAgBt9F,KAAKygG,aAC3BnD,EAAQ97F,aAAe9B,EAAa+oH,YAC9BzoH,KAAKyH,IAAI,GAAa61F,EAC9B,G,CAEgBorB,uB,0CACd,MAAMmB,QAA6B7pH,KAAKygC,IAAc,UAChDvT,QAAQ+hB,IACZ46E,EAAqB/kH,KAAW2R,GAAW,mC,MACzC,MAAM4oF,QAAgBr/F,KAAKygC,IAAchqB,GACzC,GAA0C,OAAtB,QAAhB,EAAA4oF,aAAO,EAAPA,EAASj3E,eAAO,eAAE8/E,kBAEpB,cADO7I,EAAQj3E,QAAQ8/E,iBAChBloG,KAAKyH,IAAIgP,EAAQ4oF,EAE5B,OAGF,MAAM/B,QAAgBt9F,KAAKygG,aAC3BnD,EAAQ97F,aAAe9B,EAAaipH,WAC9B3oH,KAAKyH,IAAI,GAAa61F,EAC9B,G,CAEgBwrB,uBAAuBzpB,G,kDACrC,MAAMyqB,EAAiD,QAA9B,EAAY,QAAZ,EAAAzqB,EAAQ92F,YAAI,eAAEs7B,wBAAgB,eAAEwjB,UACzD,GAAwB,MAApByiE,EACF,IAAK,MAAOrhF,EAAO2D,KAAWhkC,OAAOymG,QAAQib,GAC3CA,EAAiBrhF,GAAS,CACxBv+B,KAAM,eACN2C,IAAKu/B,GAKX,OAAOizD,C,IAGO4pB,uBAAuB5pB,G,gDAErC,OAD4B,QAApB,EAAAA,EAAgB92F,YAAI,gBAAEohH,aACvBtqB,C,IAGK3oC,cACZ,MAAO,CAAE31B,oBAAqBrW,GAAoBsW,MACpD,CAEUP,IAAO5zB,GACf,OAAO7M,KAAK2gC,eAAeF,IAAO5zB,EAAK7M,KAAK02D,QAC9C,CAEUjvD,IAAIoF,EAAaY,GACzB,OAAa,MAATA,EACKzN,KAAK2gC,eAAeyzC,OAAOvnE,EAAK7M,KAAK02D,SAEvC12D,KAAK2gC,eAAeQ,KAAKt0B,EAAKY,EAAOzN,KAAK02D,QACnD,CAEgB+pC,a,0CACd,aAAazgG,KAAKygC,IAAkB,GACtC,G,CAEgB2nF,yB,kDACd,OAA8C,QAAtC,EAAwB,QAAzB,QAAOpoH,KAAKygG,oBAAa,eAAEj/F,oBAAY,QAAI9B,EAAa+B,G,IAGjDsnH,uBAAuBgB,G,0CACrC,MAAMzsB,QAAgBt9F,KAAKygG,aAC3BnD,EAAQ97F,aAAeuoH,QACjB/pH,KAAKyH,IAAI,GAAa61F,EAC9B,G,CAEgBsrB,2B,0CACd,MAAMiB,QAA6B7pH,KAAKygC,IAAc,IACtD,OAAOvT,QAAQ+hB,IAAI46E,EAAqB/kH,KAAKgB,GAAO9F,KAAKygC,IAAc36B,KACzE,G,6SC5iBK,MAAMkkH,GAAb,cACU,KAAAC,MAAQ,IAAI7iH,GA0BtB,CAxBEq5B,IAAO5zB,GACL,GAAI7M,KAAKiqH,MAAMx0E,IAAI5oC,GAAM,CACvB,MAAMvE,EAAMtI,KAAKiqH,MAAMxpF,IAAI5zB,GAC3B,OAAOqgB,QAAQ2V,QAAQv6B,E,CAEzB,OAAO4kB,QAAQ2V,QAAQ,KACzB,CAEM4S,IAAI5oC,G,0CACR,OAAwB,MAAjB7M,KAAKygC,IAAI5zB,EAClB,G,CAEAs0B,KAAKt0B,EAAavE,GAChB,OAAW,MAAPA,EACKtI,KAAKo0E,OAAOvnE,IAErB7M,KAAKiqH,MAAMxiH,IAAIoF,EAAKvE,GACb4kB,QAAQ2V,UACjB,CAEAuxC,OAAOvnE,GAEL,OADA7M,KAAKiqH,MAAMhnF,OAAOp2B,GACXqgB,QAAQ2V,SACjB,E,2SC1Ba,MAAeqnF,GAGtBzpF,IAAO5zB,G,0CACX,OAAO,IAAIqgB,SAAS2V,IAClB7iC,KAAKmqH,iBAAiB1pF,IAAI5zB,GAAMvE,IACnB,MAAPA,GAA2B,MAAZA,EAAIuE,GAIvBg2B,EAAQ,MAHNA,EAAQv6B,EAAIuE,GAGD,GACb,GAEN,G,CAEM4oC,IAAI5oC,G,0CACR,OAAgC,aAAlB7M,KAAKygC,IAAI5zB,GACzB,G,CAEMs0B,KAAKt0B,EAAavE,G,0CACtB,GAAW,MAAPA,EAEF,OAAO,IAAI4kB,SAAe2V,IACxB7iC,KAAKmqH,iBAAiB/1C,OAAOvnE,GAAK,KAChCg2B,GAAS,GACT,IAIFv6B,aAAemvC,MACjBnvC,EAAM1D,MAAM9B,KAAKwF,IAGnB,MAAM8hH,EAAW,CAAE,CAACv9G,GAAMvE,GAC1B,OAAO,IAAI4kB,SAAe2V,IACxB7iC,KAAKmqH,iBAAiB1iH,IAAI2iH,GAAU,KAClCvnF,GAAS,GACT,GAEN,G,CAEMuxC,OAAOvnE,G,0CACX,OAAO,IAAIqgB,SAAe2V,IACxB7iC,KAAKmqH,iBAAiB/1C,OAAOvnE,GAAK,KAChCg2B,GAAS,GACT,GAEN,G,EC/Ca,MAAMwnF,WAAmCH,GAAxD,c,oBACY,KAAAC,iBAAmB13C,OAAO60C,QAAQgD,KAC9C,ECFe,MAAMC,WAAoCL,GAAzD,c,oBACY,KAAAC,iBAAmB13C,OAAO60C,QAAQkD,OAC9C,E,kuBCQA,MAAM,GACI,qBADJ,GAEQ,UAGP,MAAMC,WAAyCrtB,GAKpDt9F,YACUkwF,EACA06B,GAER9+G,QAHQ,KAAAokF,eAAAA,EACA,KAAA06B,qBAAAA,EANF,KAAA/9F,MAAQ,IAAIvlB,IACZ,KAAAujH,aAAe,IAAIN,GACnB,KAAAO,eAAiB,IAAIL,EAO7B,CAEM9pF,IAAO5zB,G,0CACX,OAAI7M,KAAK2sB,MAAM8oB,IAAI5oC,GACV7M,KAAK2sB,MAAM8T,IAAI5zB,SAGX7M,KAAKivG,eAAepiG,EACnC,G,CAEMoiG,eAAkBpiG,G,0CACtB,MAAM29G,QAAgBxqH,KAAK6qH,sBAAsB7qH,KAAK8qH,oBACtD,OAAe,MAAXN,GAAoBpiH,OAAOG,KAAKiiH,GAASzpD,SAASl0D,IAItD7M,KAAK2sB,MAAMllB,IAAIoF,EAAK29G,EAAQ39G,IACrB7M,KAAK2sB,MAAM8T,IAAI5zB,IAJb,IAKX,G,CAEM4oC,IAAI5oC,G,0CACR,OAAgC,aAAlB7M,KAAKygC,IAAI5zB,GACzB,G,CAEMs0B,KAAQt0B,EAAavE,G,gDACd,MAAPA,EACFtI,KAAK2sB,MAAMsW,OAAOp2B,GAElB7M,KAAK2sB,MAAMllB,IAAIoF,EAAKvE,GAGtB,MAAMyiH,QAAsB/qH,KAAK8qH,mBAC3BE,EAA0D,QAA1C,QAAMhrH,KAAK6qH,gBAAgBE,UAAe,QAAI,CAAC,EACrEC,EAAan+G,GAAOvE,QACdtI,KAAKirH,gBAAgBD,EAAcD,E,IAGrC32C,OAAOvnE,G,gDACL7M,KAAKmhC,KAAKt0B,EAAK,KACvB,G,CAEMg+G,gBAAgBz+E,G,0CACpB,MAAMk+E,QAActqH,KAAK2qH,aAAalqF,IAAY,IAElD,GAAa,MAAT6pF,EACF,OAAO,KAOT,MAAMY,QAAoBlrH,KAAKgwF,eAAeriD,cAAc,IAAIZ,GAAUu9E,GAAQl+E,GAClF,OAAmB,MAAf8+E,SAEIlrH,KAAKmrH,iBAAiB,YACtBnrH,KAAK2qH,aAAav2C,OAAO,IACxB,MAEFh3C,KAAKirC,MAAM6iD,EACpB,G,CAEMD,gBAAgBT,EAAkC39G,G,gDAI9C7M,KAAKorH,yBAAyBZ,EAAS39G,EAEjD,G,CAGMw+G,yBAAyBb,G,0CAE7B,MAAMc,EAAcluF,KAAKirC,MAAMjrC,KAAKC,UAAUmtF,IAC/B,MAAXA,QACIxqH,KAAK2qH,aAAav2C,OAAO,UAEzBp0E,KAAK2qH,aAAaxpF,KAAK,GAAiBmqF,EAElD,G,CAEMF,yBAAyBZ,EAAkC39G,G,0CAC/D,MAAMy+G,EAAcluF,KAAKC,UAAUmtF,GAC7Be,QAAmBvrH,KAAKgwF,eAAex3C,QAAQ8yE,EAAaz+G,GAElE,GAAkB,MAAd0+G,EACF,aAAavrH,KAAK2qH,aAAav2C,OAAO,UAElCp0E,KAAK2qH,aAAaxpF,KAAK,GAAiBoqF,EAAW5kF,gBAC3D,G,CAEMmkF,mB,0CACJ,IAAIU,QAAkBxrH,KAAK4qH,eAAenqF,IAAwB,IAKlE,OAJiB,MAAb+qF,GAAsD,GAAjCpjH,OAAOG,KAAKijH,GAAWtoH,SAC9CsoH,QAAkBxrH,KAAK0qH,qBAAqBe,yBACtCzrH,KAAKmrH,iBAAiBK,IAEvBx/E,GAAmBc,SAAS0+E,EACrC,G,CAEML,iBAAiBO,G,0CACR,MAATA,QACI1rH,KAAK4qH,eAAex2C,OAAO,UAE3Bp0E,KAAK4qH,eAAezpF,KAAK,GAAauqF,EAEhD,G,EAnCA,IC/FO,SAAUxjH,EAAam6B,EAAqBC,GAC1BA,EAAW70B,MAClC60B,EAAW70B,MAAQ,YAAavN,GAE5B,MAAM,IAAImF,MACR,4EAIN,CACF,E,sbCRK,MAAMsmH,GACX7rH,YAAoBuhC,GAAA,KAAAA,sBAAAA,CAA+C,CAE7DoqF,iBAAiBG,EAAW,I,0CAChC,MAAM/1B,QAAoB71F,KAAKqhC,sBAAsB2lB,YAAY4kE,GAC3D/+G,QAAY7M,KAAKqhC,sBAAsB00D,KAC3CF,EACA,sBACA,YACA,GACA,UAEF,OAAO,IAAI7pD,GAAmBn/B,EAChC,G,ECGK,SAASg/G,GACdl/F,EACAw3F,GAEA,OAAOF,GAAQt3F,EAAO,qBAAsBw3F,GAAM,IAAM,IAAIkG,IAC9D,CAEO,SAASyB,GACdn/F,EACAw3F,GAEA,OAAOF,GAAQt3F,EAAO,uBAAwBw3F,GAAM,IAAM,IAAIkG,IAChE,CAEO,SAAS0B,GACdp/F,EACAw3F,GAEA,OAAOF,GAAQt3F,EAAO,uBAAwBw3F,GAAM,IACG,GAAjD1xC,OAAOU,QAAQO,cAAc28B,iBACxB,IAAIoa,GACT1E,GAAsBp5F,EAAOw3F,GC7B9B,SACLx3F,EACAw3F,GAEA,OAAOF,GACLt3F,EACA,uBACAw3F,GACA,IAAM,IAAIwH,GAAqBpH,GAA6B53F,EAAOw3F,KAEvE,CDoBQ6H,CAA4Br/F,EAAOw3F,IAGhC,IAAI6F,IAEf,CExBO,SAASiC,GACdt/F,EACAw3F,GAEA,OAAOF,GACLt3F,EACA,wBACAw3F,GACA,IACE,IAAI+D,GACF2D,GAA0Bl/F,EAAOw3F,GACjC2H,GAA4Bn/F,EAAOw3F,GACnCA,EAAK+H,6BAA6BruB,eAG1C,CCJO,SAASsuB,GACdx/F,EACAw3F,GAEA,OAAOF,GACLt3F,EACA,eACAw3F,GACA,IACE,IAAIpV,GACF8c,GAA0Bl/F,EAAOw3F,GACjC2H,GAA4Bn/F,EAAOw3F,GACnC4H,GAA4Bp/F,EAAOw3F,GACnC0B,GAAkBl5F,EAAOw3F,GACzB8H,GAA6Bt/F,EAAOw3F,GACpCA,EAAKiI,oBAAoBvuB,aACzBsmB,EAAKiI,oBAAoBtuB,kBAGjC,CCvCO,SAASuuB,GACd1/F,EACAw3F,GAEA,OAAOF,GACLt3F,EACA,qBACAw3F,GACA,IACE,IAAI8B,GACFkG,GAAoBx/F,EAAOw3F,GAC3B0B,GAAkBl5F,EAAOw3F,KAGjC,C,2SC1Be,MAAMmI,GACnBxsH,YACUg4G,EACAyU,GADA,KAAAzU,KAAAA,EACA,KAAAyU,uBAAAA,CACP,CAIGziH,O,0CACC2oE,OAAOK,MAASL,OAAOC,UAI5BD,OAAOC,QAAQ85C,eAAeh5C,aAAmBhB,GAAqB,mCACnD,OAAbA,GAAqBA,EAAW,IAIpCxyE,KAAKysH,gBAAkBj6C,EACvBxyE,KAAK83G,KAAKpzE,iBAAiBnX,KAAK,iBAClC,MAEAklD,OAAOK,KAAK45C,YAAYl5C,aAAmBm5C,GAA0C,yCAC7E3sH,KAAK83G,KAAKwH,sBAChBt/G,KAAK83G,KAAKpzE,iBAAiBnX,KAAK,aAClC,MAEAklD,OAAOK,KAAK85C,WAAWp5C,aAAY,CAAOq5C,EAAoBC,IAAyB,mCACjF9sH,KAAK83G,KAAKiV,gBAGd/sH,KAAK83G,KAAKiV,eAAgB,QAEpB/sH,KAAKusH,uBAAuB5P,+BAC5B38G,KAAK83G,KAAKwH,sBAChBt/G,KAAK83G,KAAKpzE,iBAAiBnX,KAAK,cAClC,MAEAklD,OAAOK,KAAKk6C,UAAUx5C,aACpB,CAAOa,EAAe44C,EAAuCl6C,IAAyB,mCAChF/yE,KAAKysH,gBAAkB,GAAK15C,EAAIP,UAAYxyE,KAAKysH,iBAIhD15C,EAAIR,SAILvyE,KAAK83G,KAAKoV,eAGdltH,KAAK83G,KAAKoV,cAAe,QAEnBltH,KAAKusH,uBAAuB5P,uBAAuB5pC,SACnD/yE,KAAK83G,KAAKwH,sBAChBt/G,KAAK83G,KAAKpzE,iBAAiBnX,KAAK,eAClC,MAEJ,G,6SCvDa,MAAM4/F,GAKnBrtH,YACEmK,EACQu5C,EACAhc,GADA,KAAAgc,cAAAA,EACA,KAAAhc,YAAAA,EAPF,KAAA4lF,oBAA6B,GAUD,IADjB36C,OAAOU,QAAQO,cACnB28B,mBACXrwG,KAAKqtH,WAAc9rH,OAAekxE,OAAO46C,YAE3CrtH,KAAK+5F,UAAY9vF,EAAqB8vF,WACxC,CAEMjwF,O,0CACC9J,KAAKqtH,YAAertH,KAAKqtH,WAAWC,iBAIzCttH,KAAKqtH,WAAWC,eAAe95C,aAC7B,CAAOhhE,EAAc62B,IAAkB,mCACrC,GAAK72B,EAAQtM,MAAgE,IAAzDlG,KAAKotH,oBAAoB3mH,QAAQ+L,EAAQ+6G,WAA7D,CASA,GAFAvtH,KAAKotH,oBAAoB72G,KAAK/D,EAAQ+6G,WAElCvtH,KAAK+5F,UAEP,OAAO,IAAI7sE,SAAQ,CAAO2V,EAAS1V,IAAW,yCACtCntB,KAAKwtH,uBAAuBh7G,EAAQtM,IAAK28B,EAAS1V,EAC1D,YAEMntB,KAAKwtH,uBAAuBh7G,EAAQtM,IAAKmjC,EAAUA,E,MAdrDA,GACFA,GAeN,KACA,CAAE3tB,KAAM,CAAC,aAAc,gBACvB,CAAC1b,KAAK+5F,UAAY,WAAa,kBAGjC/5F,KAAKqtH,WAAWI,YAAYj6C,aAAahhE,GAAiBxS,KAAK0tH,oBAAoBl7G,IAAU,CAC3FkJ,KAAM,CAAC,gBAET1b,KAAKqtH,WAAWM,gBAAgBn6C,aAC7BhhE,GAAiBxS,KAAK0tH,oBAAoBl7G,IAC3C,CACEkJ,KAAM,CAAC,gBAGb,G,CAGc8xG,uBAAuBtmH,EAAgB6e,EAAmB7D,G,0CACtE,UAAWliB,KAAKwnC,YAAYiC,iBAAmBlqC,EAAqB0qC,SAClE/nB,SAIF,IACE,MAAM/M,QAAgBnV,KAAKwjD,cAAc1I,sBACvC5zC,EACA,KACAyjC,GAAa+Q,MAEf,GAAe,MAAXvmC,GAAsC,IAAnBA,EAAQjS,OAE7B,YADAgf,IAIF6D,EAAQ,CACN6nG,gBAAiB,CACfj/G,SAAUwG,EAAQ,GAAG/E,MAAMzB,SAC3BM,SAAUkG,EAAQ,GAAG/E,MAAMnB,W,CAG/B,SACAiT,G,CAEJ,G,CAEQwrG,oBAAoBl7G,GAC1B,MAAMrP,EAAInD,KAAKotH,oBAAoB3mH,QAAQ+L,EAAQ+6G,WAC/CpqH,GAAK,GACPnD,KAAKotH,oBAAoBpqF,OAAO7/B,EAAG,EAEvC,E,2SCgBa,MAAM0qH,GAuEnB/tH,YAAmBm/G,GAAyB,GAAzB,KAAAA,cAAAA,EArBnB,KAAA6O,iBAAmBvsH,OAInB,KAAAi4G,gBAA8B,KAYtB,KAAAuU,kBAA2B,GAOjC,MAYMhjG,EAAiB,CAAO42C,EAAkBlrD,IAAmB,mCACjE,aAAMzW,KAAKu/G,OAAO59C,EAASlrD,EAAO,IAE9Bu3G,EAAoC,CAAC,EACrCC,EAAiB,CACrBnI,kBAAmB,CACjBj4F,OAAO,GAET22F,6BAA8B,CAC5Bx7G,IAAKzH,QAEP2qH,6BAA8B,CAC5BruB,aAAc,IAAIx9F,EAAae,EAAa80E,KAE9Ck2C,oBAAqB,CACnBvuB,aAAc,IAAIx9F,EAAae,EAAa80E,MAIhDl2E,KAAK0kC,iBAAmBu6E,EACpB,IAAIpmB,GACJ,IAAID,GACR54F,KAAK2kC,WAAakhF,GAAkBmI,EAAUC,GAC9CjuH,KAAKqhC,sBAAwBkjF,GAA6ByJ,EAAUC,GACpEjuH,KAAK2gC,eAAiBkrF,GAA0BmC,EAAUC,GAC1DjuH,KAAK09F,qBAAuBouB,GAA4BkC,EAAUC,GAClEjuH,KAAK29F,qBAAuBouB,GAA4BiC,EAAU,OAAF,wBAC3DC,GAAc,CACjBjI,sBAAuB,CACrBpB,gBAAgB,MAGpB5kH,KAAK49F,sBAAwBquB,GAA6B+B,EAAUC,GACpEjuH,KAAK4kC,aAAeunF,GAAoB6B,EAAU,OAAF,wBAC3CC,GAAc,CACjBjI,sBAAuB,CAAEpB,gBAAgB,MAE3C5kH,KAAKiK,qBAAuB,IAAI+uF,GAC9Bh5F,KAAK0kC,iBACL1kC,KAAK4kC,cACL,CAAC6iC,EAAgB6zB,KACW,MAAtBt7F,KAAKy+G,eACPz+G,KAAKy+G,cAAcj3C,eAAeC,EAAgB6zB,E,IAGtD,IAAY,mCACV,GAAsC,MAAlCt7F,KAAKkuH,0BAAmC,CAC1C,MAAM35E,EAAUv0C,KAAKkuH,0BAA0BzS,cAE/C,UACQz7G,KAAKkuH,0BAA0B3gG,KAAK,CAAEylD,QAAS,mB,CACrD,MAAO/rE,GACP,OAAOimB,QAAQC,OAAOlmB,E,CAGxB,OAAOstC,EAAQrR,MAAMkD,GAA+B,aAApBA,EAAOn6B,U,CAE3C,MAEFjM,KAAK2H,YAAc,IAAIqqG,GAAY3/B,GAAWwC,cAActzE,SAC5DvB,KAAKgwF,eAAiB+1B,GAAsBiI,EAAU,OAAF,wBAC/CC,GAAc,CACjBjI,sBAAuB,CACrBpB,gBAAgB,GAElBP,4BAA4B,KAE9BrkH,KAAKykC,cAAgB,IAAIi0D,GACvB14F,KAAKqhC,sBACLrhC,KAAKgwF,eACLhwF,KAAKiK,qBACLjK,KAAK2kC,WACL3kC,KAAK4kC,cAEP5kC,KAAK4qB,aAAe,IAAIs9C,GAAaloE,KAAK4kC,cAC1C5kC,KAAK8qB,aAAe,IAAI4V,GAAa1gC,KAAK2gC,gBAC1C3gC,KAAK6qB,mBAAqBwhG,GAA0B2B,EAAU,OAAF,wBACvDC,GAAc,CACjBjI,sBAAuB,CACrBpB,gBAAgB,MAGpB5kH,KAAKshC,WAAa,IAAI3W,GACpB3qB,KAAK4qB,aACL5qB,KAAKiK,qBACLjK,KAAK6qB,mBACL7qB,KAAK8qB,cACJ62C,GAAqB3hE,KAAKu/G,OAAO59C,KAEpC3hE,KAAK23C,gBAAkB,IAAIyrB,GAAgBpjE,KAAK4kC,cAChD5kC,KAAK43C,kBAAoB,IAAIsU,GAAkBlsD,KAAK2kC,WAAY3kC,KAAKshC,YACrEthC,KAAKwjD,cAAgB,IAAI9L,GACvB13C,KAAKykC,cACLzkC,KAAK23C,gBACL33C,KAAKshC,WACLthC,KAAK43C,kBACL53C,KAAK2H,aACL,IAAM3H,KAAK63C,eACX73C,KAAK2kC,WACL3kC,KAAK4kC,cAEP5kC,KAAKwmD,cAAgB,IAAIyqD,GACvBjxG,KAAKykC,cACLzkC,KAAK2H,YACL3H,KAAKwjD,cACLxjD,KAAK4kC,cAEP5kC,KAAKgkE,iBAAmB,IAAIpX,GAAiB5sD,KAAKwmD,cAAexmD,KAAKshC,YACtEthC,KAAK6jE,kBAAoB,IAAIxhB,GAC3BriD,KAAKykC,cACLzkC,KAAK2H,YACL3H,KAAK4kC,cAEP5kC,KAAK63C,cAAgB,IAAI8lB,GAAc39D,KAAKwjD,cAAexjD,KAAK2kC,WAAY3kC,KAAK2H,aACjF3H,KAAK8jE,YAAc,IAAI1B,GACrBpiE,KAAKykC,cACLzkC,KAAKshC,WACLthC,KAAK43C,kBACL53C,KAAK2H,YACL3H,KAAKqhC,sBACLrhC,KAAK4kC,cAEP5kC,KAAKyjD,oBAAsB,IAAI6Q,GAAoBt0D,KAAK4kC,cACxD5kC,KAAKw2D,cAAgB,IAAIqF,GAAc77D,KAAK4kC,aAAc5kC,KAAKyjD,qBAC/DzjD,KAAKmuH,iBAAmB,IAAI7zD,GAC1Bt6D,KAAKw2D,cACLx2D,KAAKshC,WACLthC,KAAK4kC,aACL5kC,KAAKyjD,qBAEPzjD,KAAK8mC,oBAAsB,IAAIqmB,GAC7BntD,KAAK4kC,aACL5kC,KAAKykC,cACLzkC,KAAKshC,WACLthC,KAAK4qB,aACL5qB,KAAK2kC,WACL3kC,KAAKyjD,oBACLzjD,KAAKqhC,sBACLtW,GAEF/qB,KAAKouH,mBAAqB,IAAIhY,GAC5Bp2G,KAAK4kC,aACL5kC,KAAKyjD,oBACLzjD,KAAKwmD,cACLxmD,KAAKwjD,cACLxjD,KAAK6jE,kBACL7jE,KAAKw2D,eAGPx2D,KAAK6kC,iBAAmB,IAAI8nC,GAAiB3sE,KAAK2H,YAAa3H,KAAKiK,sBAGpE,MAAMokH,EAAOruH,KACPsuH,EAA6B,IAAI,cC/VpC,QD+VqC,c,oBAEtC,KAAA/gG,KAAO,CAACymD,EAAoBC,EAAW,CAAC,KACtC,MAAMz+D,EAAUpN,OAAOC,OAAO,CAAC,EAAG,CAAE2qE,QAASgB,GAAcC,GAC3Do6C,EAAK/T,kBAAkBsB,eAAepmG,EAAS64G,EAAM,KAAK,CAE9D,GACAruH,KAAKwnC,YAAc,IAAIoB,GACrB5oC,KAAKykC,cACLzkC,KAAKshC,WACLthC,KAAK4qB,aACL5qB,KAAK8qB,aACL9qB,KAAKiK,qBACLqkH,EACAtuH,KAAK2kC,WACL3kC,KAAK8mC,oBACL9mC,KAAK6qB,mBACL7qB,KAAK4kC,aACL5kC,KAAK6kC,iBACL7kC,KAAK2H,aAGP3H,KAAKg4G,oBAAsB,IAAIrB,GAC7B32G,KAAKwjD,cACLxjD,KAAKwmD,cACLxmD,KAAK6jE,kBACL7jE,KAAKykC,cACLzkC,KAAKiK,qBACLjK,KAAK0kC,iBACL1kC,KAAK63C,cACL73C,KAAK4qB,aACL5qB,KAAKw2D,cACLx2D,KAAK8mC,oBACL9mC,KAAK4kC,aACL5kC,KAAKwnC,aAvMuB/wB,GAAoB,mCACf,MAA7BzW,KAAK05G,sBACP15G,KAAK05G,qBAAqBhoD,kBAAiB,SAEvC1xD,KAAKq/G,gBACLr/G,KAAKs/G,qBAAoB,GACL,MAAtBt/G,KAAKy+G,sBACDz+G,KAAKy+G,cAAcx2C,8BACnBjoE,KAAKy+G,cAAc/3C,mBAAmB1mE,KAAKwnC,aAErD,KA+LEzc,GAEF/qB,KAAK+jE,gBAAkB,IAAIvG,GAAgBx9D,KAAK4kC,cAChD5kC,KAAKuwD,YAAc,IAAIqT,GACrB5jE,KAAKshC,WACLthC,KAAK23C,gBACL33C,KAAKwmD,cACLxmD,KAAKwjD,cACLxjD,KAAKykC,cACLzkC,KAAK6jE,kBACL7jE,KAAK0kC,iBACL1kC,KAAKw2D,cACLx2D,KAAK8jE,YACL9jE,KAAK2kC,WACL3kC,KAAK8mC,oBACL9mC,KAAK4kC,aACL5kC,KAAKyjD,oBACLzjD,KAAK+jE,gBACL/jE,KAAKgkE,iBACLj5C,GAEF/qB,KAAKmoF,aAAe,IAAI5kC,GACtBvjD,KAAKshC,WACLthC,KAAKwjD,cACLxjD,KAAK4kC,aACL5kC,KAAK2kC,WACL3kC,KAAKyjD,qBAEPzjD,KAAK+3G,0BAA4B,IAAIxhD,GACnCv2D,KAAKykC,cACLzkC,KAAKw2D,cACLx2D,KAAK4kC,cAEP5kC,KAAKkoF,YAAc,IAAIle,GAAYhqE,KAAKqhC,sBAAuBrhC,KAAK2kC,YACpE3kC,KAAKi8G,gBAAkB,IAAIh0B,GACzBjoF,KAAKwjD,cACLxjD,KAAK4kC,aACL5kC,KAAKkoF,YACLloF,KAAKmoF,aACLnoF,KAAK2kC,YAEP3kC,KAAKutC,iBAAmB,IAAI4V,GAAiBnjD,KAAKykC,eAClDzkC,KAAKuuH,aAAe,IAAIntF,GAAaphC,KAAKqhC,sBAAuBrhC,KAAKshC,YACtEthC,KAAKwuH,cAAgB,IAAIjoE,GACvBvmD,KAAKwmD,cACLxmD,KAAKwjD,cACLxjD,KAAKshC,WACLthC,KAAKykC,cACLzkC,KAAKqhC,uBAEPrhC,KAAK05G,qBAAuB,IAAIppD,GAC9BtwD,KAAKuwD,YACLvwD,KAAK8qB,aACL9qB,KAAKshC,WACLthC,KAAK6qB,mBACLE,EACA/qB,KAAK2kC,WACL3kC,KAAK4kC,aACL5kC,KAAKwnC,aAEPxnC,KAAKyuH,kBAAoB,IAAIp4C,GAAkB4oC,GAE/Cj/G,KAAKguE,2BAA6B,IAAIP,GAA2BztE,KAAKshC,YAEtEthC,KAAK0uH,wBAA0B,IAAI3gD,GACjC/tE,KAAKykC,cACLzkC,KAAK2H,YACL3H,KAAKguE,4BAYPhuE,KAAKy+G,cAAgB,IAAIp4C,GACvBrmE,KAAK0kC,iBACL1kC,KAAKiK,sBAXkC,KACvC,MAAM0kH,EACJ3uH,KAAKiK,qBAAqBmwF,YAC1Bp6F,KAAKiK,qBAAqB8vF,aAC1B/5F,KAAKiK,qBAAqBiwF,UAE5B,OADA7nB,GAAWqoC,gBAAgBiU,EAAoBptH,OAAS,MACjD2rB,QAAQ2V,SAAS,GAOxB7iC,KAAK4kC,cAIP5kC,KAAKo6F,SAAWp6F,KAAKiK,qBAAqBmwF,WAC1Cp6F,KAAKk9F,cAAgBl9F,KAAKo6F,SACtB,KACe,oBAARb,KAAuBA,IAAI2D,cAClC3D,IAAI2D,cACH37F,OAAekxE,OAAOyqB,cAG3Bl9F,KAAKs6G,kBAAoB,IAAIkE,GAC3Bx+G,KACAA,KAAKi8G,gBACLj8G,KAAKiK,qBACLjK,KAAK2H,YACL3H,KAAK05G,qBACL15G,KAAKy+G,cACLz+G,KAAK6qB,mBACL7qB,KAAK0kC,iBACL1kC,KAAK2kC,YAEP3kC,KAAKkuH,0BAA4B,IAAI7T,GACnCr6G,KAAKykC,cACLzkC,KAAKqhC,sBACLrhC,KAAKs6G,kBACLt6G,KAAK2H,YACL3H,KAAK0kC,iBACL1kC,KAAK8qB,aACL9qB,KAAKiK,qBACLjK,KAAK4kC,aACL5kC,KAAK2kC,WACL3kC,KAAKwnC,aAEPxnC,KAAK4uH,mBAAqB,IAAI/W,GAC5B73G,KACAA,KAAK+3G,0BACL/3G,KAAKiK,qBACLjK,KAAKg4G,oBACLh4G,KAAKwnC,aAEPxnC,KAAKusH,uBAAyB,IAAIvQ,GAChCh8G,KAAKi8G,gBACLj8G,KAAKwjD,cACLxjD,KAAKwnC,YACLxnC,KAAKw2D,cACLx2D,KAAKwmD,cACLxmD,KAAK4kC,cAGP5kC,KAAK6uH,eAAiB,IAAIvC,GAAetsH,KAAMA,KAAKusH,wBACpDvsH,KAAK8uH,uBAAyB,IAAIjW,GAChC74G,KACAA,KAAKwjD,cACLxjD,KAAK+3G,0BACL/3G,KAAKiK,qBACLjK,KAAKwnC,YACLxnC,KAAKmoF,aACLnoF,KAAKkoF,aAEPloF,KAAK+uH,eAAiB,IAAItV,GACxBz5G,KAAKg4G,oBACLh4G,KAAK4kC,aACL5kC,KAAK05G,sBAEP15G,KAAKgvH,qBAAuB,IAAI7B,GAC9BntH,KAAKiK,qBACLjK,KAAKwjD,cACLxjD,KAAKwnC,aAGPxnC,KAAKivH,0BAA4B,IAAIt+C,GACnC3wE,KAAKykC,cACLzkC,KAAK4kC,aACL5kC,KAAKshC,WAET,CAEM4tF,Y,0CAmBJ,GAlBAlvH,KAAKutC,iBAAiB6V,eAAe7hD,cAE/BvB,KAAK4kC,aAAa96B,aAEjB9J,KAAKg4G,oBAA4CluG,MAAK,SACtD9J,KAAK2H,YAA4BmC,aACjC9J,KAAKmoF,aAA8Br+E,MAAK,SACzC9J,KAAKs6G,kBAAkBxwG,aACvB9J,KAAKusH,uBAAuBziH,aAC5B9J,KAAK4uH,mBAAmB9kH,OAE9B9J,KAAK6kC,iBAAiB/6B,aAEhB9J,KAAK6uH,eAAe/kH,aACpB9J,KAAK8uH,uBAAuBhlH,aAC5B9J,KAAK+uH,eAAejlH,aACpB9J,KAAKgvH,qBAAqBllH,OAE5B9J,KAAKiK,qBAAqB8vF,cAAgB/5F,KAAKi/G,cAAe,QAEnC5sC,GAAW88C,yBACzB7nH,SAAe0B,GAAQ,yCAC9BhJ,KAAKovH,cAAc38C,OAAO48C,cAAe,GAAIrmH,EAAIlD,UACjD9F,KAAKovH,cAAcpvH,KAAKk9F,cAAe,GAAIl0F,EAAIlD,GACvD,MAEAusE,GAAWi9C,iBAAuBtmH,GAAQ,mCACpCA,EAAIsqE,kBACAtzE,KAAKovH,cAAc38C,OAAO48C,cAAe,GAAIrmH,EAAIlD,UACjD9F,KAAKovH,cAAcpvH,KAAKk9F,cAAe,GAAIl0F,EAAIlD,IAEzD,K,CAGF,OAAO,IAAIonB,SAAe2V,IACxB2H,YAAW,IAAY,yCACfxqC,KAAK6qB,mBAAmBw7F,2BACxBrmH,KAAKq/G,UACXr/G,KAAKuyD,UAAS,GACd/nB,YAAW,IAAMxqC,KAAK05G,qBAAqB5vG,QAAQ,MACnD+4B,GACF,KAAG,IAAI,GAEX,G,CAEMw8E,U,0CACJ,IAAM5sC,OAAO48C,gBAAkBrvH,KAAKk9F,eAAkBl9F,KAAKi/G,cACzD,OAGF,MAAMvH,QAAmB13G,KAAKwnC,YAAYiC,gBAE1C,IAAI8lF,EAAS,GACT7X,IAAen4G,EAAqBoqC,UACtC4lF,EAAS,QACA7X,IAAen4G,EAAqB2qC,SAC7CqlF,EAAS,iBAGLvvH,KAAKovH,cAAc38C,OAAO48C,cAAeE,SACzCvvH,KAAKovH,cAAcpvH,KAAKk9F,cAAeqyB,EAC/C,G,CAEMjQ,oBAAoBkQ,GAAY,G,0CACpC,IAAK/8C,OAAOC,UAAYD,OAAOsmC,aAC7B,OAGF,MAAM0W,QAAqBzvH,KAAK4kC,aAAau/D,4BAO7C,GANKsrB,QAGGzvH,KAAK0vH,8BAFL1vH,KAAK2vH,mBAKTH,EAGF,aAFMxvH,KAAK4vH,wCAAwCH,QACnDzvH,KAAKktH,aAAeltH,KAAK+sH,eAAgB,GAI3C,MAAMh6C,QAAYV,GAAWmY,0BACzBzX,UACI/yE,KAAK6vH,iBAAiB98C,GAAM08C,GAEtC,G,CAEMlQ,OAAO59C,EAAkBlrD,G,gDACvBzW,KAAKmoF,aAAaxkC,aAAaltC,SAE/ByW,QAAQ+hB,IAAI,CAChBjvC,KAAKmoF,aAAa7jC,YAAY7tC,GAC9BzW,KAAKuwD,YAAY6T,YAAY,IAAI13D,KAAK,GAAI+J,GAC1CzW,KAAKykC,cAAcqwD,UAAUr+E,GAC7BzW,KAAK23C,gBAAgBzB,MAAMz/B,GAC3BzW,KAAKwjD,cAActN,MAAMz/B,GACzBzW,KAAKwmD,cAActQ,MAAMz/B,GACzBzW,KAAK6jE,kBAAkB3tB,MAAMz/B,GAC7BzW,KAAKw2D,cAActgB,MAAMz/B,GACzBzW,KAAK+3G,0BAA0B7hE,MAAMz/B,GACrCzW,KAAKg4G,oBAAoB9hE,MAAMz/B,GAC/BzW,KAAK8mC,oBAAoBoP,QACzBl2C,KAAKouH,mBAAmBl4E,gBAGpBl2C,KAAK4kC,aAAa+6D,MAAM,CAAElpF,OAAQA,IAE1B,MAAVA,GAAkBA,WAAkBzW,KAAK4kC,aAAa0V,eACxDt6C,KAAK63C,cAAcO,aACnBp4C,KAAK0kC,iBAAiBnX,KAAK,iBAAkB,CAAEo0C,QAASA,EAASlrD,OAAQA,WAGrEzW,KAAKq/G,gBACLr/G,KAAKs/G,qBAAoB,SACzBt/G,KAAKw/G,gBACXx/G,KAAK05G,qBAAqBhoD,kBAAiB,SACrC1xD,KAAKy+G,cAAcx2C,8BACnBjoE,KAAKy+G,cAAc/3C,mBAAmB1mE,KAAKwnC,YACnD,G,CAEMoxE,mCAAmC7lC,EAAUgB,EAAgBgW,EAAkB,M,0CACnF,GAAW,MAAPhX,IAAgBA,EAAIjtE,GACtB,OAGF,MAAM4wD,EAAe,CAAC,EACP,MAAXqzB,IACFrzB,EAAQqzB,QAAUA,GAGpB1X,GAAWY,eACTF,EACA,CACEC,QAAS,qBACTD,IAAKA,EACLgB,OAAQA,GAEVrd,EAEJ,G,CAEM8hD,Y,0CAICx4G,KAAKo6F,iBAGJ7kB,GAAUgmB,iBAAiB,cAAe,MAAM,GACxD,G,CAEMikB,gB,0CACJ,IACGx/G,KAAKiK,qBAAqB+vF,aAC1Bh6F,KAAKiK,qBAAqBkwF,cAC1Bn6F,KAAKiK,qBAAqBiwF,UAE3B,OAIF,GAA2B,aADOl6F,KAAK4kC,aAAa0yD,mBAElD,OAGF,MAUMgwB,QATJ,IAAIp6F,SAAS2V,IACX4vC,OAAO60C,QAAQgD,MAAM7pF,IAAI,MAAO9a,GAAWkd,EAAQld,IAAG,UAIxD,IAAIuH,SAAS2V,IACX4vC,OAAO60C,QAAQgD,MAAMp0E,OAAM,IAAMrT,KAAU,IAM/C,IAAK,MAAMh2B,KAAOy6G,EAEXA,EAAQtxG,eAAenJ,WAGtB7M,KAAK2gC,eAAeQ,KAAKt0B,EAAKy6G,EAAQz6G,IAEhD,G,CAEc8iH,mB,0CACPl9C,OAAOsmC,eAAgB/4G,KAAK8vH,sBAIjC9vH,KAAK8vH,qBAAsB,QACrB9vH,KAAK0vH,8BAEL1vH,KAAK+vH,mBAAmB,CAC5B7lH,KAAM,SACNpE,GAAI,OACJkqH,SAAU,CAAC,OACXpiH,MAAO,oBAGH5N,KAAK+vH,mBAAmB,CAC5B7lH,KAAM,SACNpE,GAAI,WACJmqH,SAAU,OACVD,SAAU,CAAC,OACXpiH,MAAO5N,KAAK2H,YAAY8J,EAAE,oBAGtBzR,KAAK+vH,mBAAmB,CAC5B7lH,KAAM,SACNpE,GAAI,gBACJmqH,SAAU,OACVD,SAAU,CAAC,OACXpiH,MAAO5N,KAAK2H,YAAY8J,EAAE,wBAGtBzR,KAAK+vH,mBAAmB,CAC5B7lH,KAAM,SACNpE,GAAI,gBACJmqH,SAAU,OACVD,SAAU,CAAC,OACXpiH,MAAO5N,KAAK2H,YAAY8J,EAAE,yBAGlBzR,KAAK4kC,aAAawkD,+BACpBppF,KAAK+vH,mBAAmB,CAC5B7lH,KAAM,SACNpE,GAAI,YACJmqH,SAAU,OACVD,SAAU,CAAC,OACXpiH,MAAO5N,KAAK2H,YAAY8J,EAAE,iCAIxBzR,KAAK+vH,mBAAmB,CAC5B7lH,KAAM,YACN+lH,SAAU,eAGNjwH,KAAK+vH,mBAAmB,CAC5B7lH,KAAM,SACNpE,GAAI,oBACJmqH,SAAU,OACVD,SAAU,CAAC,OACXpiH,MAAO5N,KAAK2H,YAAY8J,EAAE,kCAGtBzR,KAAK+vH,mBAAmB,CAC5B7lH,KAAM,SACNpE,GAAI,kBACJmqH,SAAU,OACVD,SAAU,CAAC,OACXpiH,MAAO5N,KAAK2H,YAAY8J,EAAE,2BAG5BzR,KAAK8vH,qBAAsB,EAC7B,G,CAEcD,iBAAiB98C,EAAUm9C,G,gDACjClwH,KAAKmwH,uBAAuBp9C,EAAI7sE,IAAK6sE,EAAIjtE,GAAIoqH,GACnDlwH,KAAKktH,aAAeltH,KAAK+sH,eAAgB,CAC3C,G,CAEcoD,uBAAuBjqH,EAAamuE,EAAe67C,G,0CAC/D,IAAKhqH,IAASusE,OAAO48C,gBAAkBrvH,KAAKk9F,cAC1C,OAGFl9F,KAAKowH,8BAA8B39C,OAAO48C,eAC1CrvH,KAAKowH,8BAA8BpwH,KAAKk9F,eAExCl9F,KAAK+tH,kBAAoB,GAEzB,UADyB/tH,KAAKwnC,YAAYiC,mBACvBlqC,EAAqB0qC,SACtC,IACE,MAAM90B,QAAgBnV,KAAKwjD,cAAc1I,sBAAsB50C,GAC/DiP,EAAQwgC,MAAK,CAAC9tC,EAAGC,IAAM9H,KAAKwjD,cAAc3D,8BAA8Bh4C,EAAGC,KAEvEooH,GACF/6G,EAAQ7N,SAAS+uC,IACfr2C,KAAKqwH,4BAA4Bh6E,EAAO,IAI5C,MAAMytD,QAA4B9jG,KAAK4kC,aAAai/D,yBACpD,IAAIysB,EAAU,GAiBd,OAfKxsB,IACC3uF,EAAQjS,OAAS,GAAKiS,EAAQjS,QAAU,EAC1CotH,EAAUn7G,EAAQjS,OAAOY,WAChBqR,EAAQjS,OAAS,IAC1BotH,EAAU,OAIVJ,GAAyC,IAAnB/6G,EAAQjS,eAC1BlD,KAAKuwH,+BAA+BvwH,KAAK2H,YAAY8J,EAAE,sBAG/DzR,KAAKwwH,0BAA0BF,EAASj8C,QACxCr0E,KAAKywH,0BAA0BH,EAASj8C,E,CAGxC,MAAOptE,GACPjH,KAAK2kC,WAAWziB,MAAMjb,E,OAIpBjH,KAAK4vH,uCAAuCM,EACpD,G,CAEcN,uCAAuCM,G,0CACnD,GAAIA,EAAoB,CACtB,MAAMrwF,QAAe7/B,KAAK4kC,aAAa8E,2BACjC1pC,KAAKuwH,+BACTvwH,KAAK2H,YAAY8J,EAAEouB,EAAS,kBAAoB,oB,CAIpD,MAAMizC,QAAaT,GAAWq+C,gBAClB,MAAR59C,GACFA,EAAKxrE,SAASyrE,IACE,MAAVA,EAAIjtE,KACN9F,KAAKywH,0BAA0B,GAAI19C,EAAIjtE,IACvC9F,KAAKwwH,0BAA0B,GAAIz9C,EAAIjtE,I,GAI/C,G,CAEcuqH,4BAA4Bh6E,G,0CACxC,GACY,MAAVA,GACAA,EAAOnsC,OAASzK,EAAWksC,OAC3B0K,EAAOzlC,WAAapR,EAAmBqR,KAEvC,OAGF,IAAIjD,EAAQyoC,EAAOn0C,KACfm0C,EAAOjmC,MAAMzB,UAAsC,KAA1B0nC,EAAOjmC,MAAMzB,WACxCf,GAAS,KAAOyoC,EAAOjmC,MAAMzB,SAAW,WAEpC3O,KAAK2wH,uBAAuB/iH,EAAOyoC,EAAOvwC,GAAIuwC,EACtD,G,CAEck6E,+BAA+BK,G,gDACrC5wH,KAAK2wH,uBAAuBC,EAAiB,OAAQ,KAC7D,G,CAEcD,uBAAuB/iH,EAAeijH,EAAkBx6E,G,0CACpE,IACGo8B,OAAOsmC,cACR/4G,KAAK+tH,kBAAkBtnH,QAAQoqH,IAAa,GACjC,MAAVx6E,GAAkBA,EAAOnsC,OAASzK,EAAWksC,MAE9C,OAGF3rC,KAAK+tH,kBAAkBx3G,KAAKs6G,IAEd,MAAVx6E,GAAmBA,EAAOjmC,MAAMnB,UAAsC,KAA1BonC,EAAOjmC,MAAMnB,kBACrDjP,KAAK+vH,mBAAmB,CAC5B7lH,KAAM,SACNpE,GAAI,YAAc+qH,EAClBZ,SAAU,WACVD,SAAU,CAAC,OACXpiH,MAAO5N,KAAK8wH,yBAAyBljH,OAI3B,MAAVyoC,GAAmBA,EAAOjmC,MAAMzB,UAAsC,KAA1B0nC,EAAOjmC,MAAMzB,kBACrD3O,KAAK+vH,mBAAmB,CAC5B7lH,KAAM,SACNpE,GAAI,iBAAmB+qH,EACvBZ,SAAU,gBACVD,SAAU,CAAC,OACXpiH,MAAO5N,KAAK8wH,yBAAyBljH,OAK7B,MAAVyoC,GACCA,EAAOjmC,MAAMnB,UAAsC,KAA1BonC,EAAOjmC,MAAMnB,UAAmBonC,EAAOrmC,sBAE3DhQ,KAAK+vH,mBAAmB,CAC5B7lH,KAAM,SACNpE,GAAI,iBAAmB+qH,EACvBZ,SAAU,gBACVD,SAAU,CAAC,OACXpiH,MAAO5N,KAAK8wH,yBAAyBljH,aAIV5N,KAAK4kC,aAAawkD,yBACd,MAAV/yC,GAAmBA,EAAOjmC,MAAMjB,MAA8B,KAAtBknC,EAAOjmC,MAAMjB,cACtEnP,KAAK+vH,mBAAmB,CAC5B7lH,KAAM,SACNpE,GAAI,aAAe+qH,EACnBZ,SAAU,YACVD,SAAU,CAAC,OACXpiH,MAAO5N,KAAK8wH,yBAAyBljH,KAG3C,G,CAEQkjH,yBAAyBljH,GAC/B,OAAOA,EAAMrJ,QAAQ,KAAM,KAC7B,CAEcguD,SAASw+D,GAAW,G,0CAChC,MAAMC,EAAe,MACf7sD,QAAiBnkE,KAAKuwD,YAAY2T,cAExC,IAAI+sD,EAAcD,SACF,MAAZ7sD,IACF8sD,GAAc,IAAIvkH,MAAO6vC,UAAY4nB,EAAS5nB,WAG5Cw0E,GAAYE,GAAeD,SACvBhxH,KAAKuwD,YAAYgC,SAASw+D,GAChC/wH,KAAKkxH,oBAELlxH,KAAKkxH,kBAET,G,CAEQA,mBACFlxH,KAAKmxH,aACP1mF,aAAazqC,KAAKmxH,aAGpBnxH,KAAKmxH,YAAc3mF,YAAW,IAAY,gDAAMxqC,KAAKuyD,UAAU,KAAE,IACnE,CAIQm9D,wBACN,OAAO,IAAIxiG,SAAe2V,IACxB4vC,OAAOsmC,aAAaqY,WAAU,KAC5BvuF,IACI4vC,OAAOU,QAAQC,S,GAGnB,GAEN,CAEQ28C,mBAAmBr5D,GACzB,OAAO,IAAIxpC,SAAe2V,IACxB4vC,OAAOsmC,aAAa94G,OAAOy2D,GAAS,KAClC7zB,IACI4vC,OAAOU,QAAQC,S,GAGnB,GAEN,CAEcg8C,cAAciC,EAAgB9B,EAAgB/8C,G,0CAC1D,IAAK6+C,IAAcA,EAAUhS,QAC3B,OAGF,MAAM3oD,EAAuB,CAC3BzkC,KAAM,CACJ,GAAI,gBAAkBs9F,EAAS,OAC/B,GAAI,gBAAkBA,EAAS,SAInC,GAAIvvH,KAAKiK,qBAAqB8vF,YAC5BrjC,EAAQ8b,SAAWA,QACb6+C,EAAUhS,QAAQ3oD,OACnB,KAAI12D,KAAKiK,qBAAqBmwF,WAKnC,OAAO,IAAIltE,SAAe2V,IACxBwuF,EAAUhS,QAAQ3oD,GAAS,IAAM7zB,KAAU,IAH7CwuF,EAAUhS,QAAQ3oD,E,CAMtB,G,CAEQ05D,8BAA8B5Y,GAChCA,GAAUA,EAAO8Z,yBACnB9Z,EAAO8Z,wBAAwB,CAAEC,MAAO,WAE5C,CAEQd,0BAA0B3pG,EAAcutD,GAC1C5B,OAAO48C,eAAiB58C,OAAO48C,cAAcmC,cAC/C/+C,OAAO48C,cAAcmC,aAAa,CAChC1qG,KAAMA,EACNutD,MAAOA,GAGb,CAEQm8C,0BAA0B1pG,EAAcutD,GAC9C,GAAKr0E,KAAKk9F,cAIV,GAAIl9F,KAAKk9F,cAAcs0B,aACrBxxH,KAAKk9F,cAAcs0B,aAAa,CAC9B1qG,KAAMA,EACNutD,MAAOA,SAEJ,GAAIr0E,KAAKk9F,cAAcu0B,SAAU,CACtC,IAAI7jH,EAAQ,YACRkZ,GAAiB,KAATA,IACVlZ,GAAS,KAAOkZ,EAAO,KAGzB9mB,KAAKk9F,cAAcu0B,SAAS,CAC1B7jH,MAAOA,EACPymE,MAAOA,G,CAGb,EE1iCa,MAAMq9C,GACnB5xH,cACE,GAAsD,IAAlD2yE,OAAOU,QAAQO,cAAc28B,iBAC/B,MAAM,IAAIhrG,MAAM,iEAEpB,CAEAw+C,QAAQC,EAAsBntC,EAAmBotC,GAC/C,OAAO72B,QAAQ2V,SACjB,CACA8gB,aAAaltC,GACX,OAAOyW,QAAQ2V,SACjB,CACAyhB,YAAY7tC,GACV,OAAOyW,QAAQ2V,SACjB,E,2SCnBK,MAAM8uF,GACX7xH,YAAoBm8G,GAAA,KAAAA,gBAAAA,CAAmC,CAEjD2V,2BAA2B7+C,G,0CAC/B,IAAKA,EAAIjtE,GACP,MAAM,IAAIT,MAAM,sDAGlB,MAAMmN,QAAgBxS,KAAK6xH,mBAAmB9+C,EAAIjtE,UAC5C9F,KAAKi8G,gBAAgB/xB,gBACzB,CACE,CACEH,QAAS,EACThX,IAAKA,EACLvgE,QAASA,IAGbugE,GACA,EAEJ,G,CAEc8+C,mBAAmBx9C,G,0CAC/B,OAAO,IAAInnD,SAAQ,CAAC2V,EAAS1V,KAC3BslD,OAAOK,KAAKI,YACVmB,EACA,CACErB,QAAS,kCAEV/mE,IACKwmE,OAAOU,QAAQC,UACjBjmD,EAAOslD,OAAOU,QAAQC,WAIxBvwC,EAAQ52B,EAAS,GAEpB,GAEL,G,6SCjBK,MAAM6lH,GAAoB,CAAO9+C,EAAiBD,IAAyB,qCAChF,GACO,mBADCC,QAEE++C,GAAgBh/C,EAG5B,IAEMg/C,GAAyBh/C,GAAwC,qCACrE,MAAMpuC,EAAa,IAAI0gF,IAAkB,GAEnChkF,EAAwB,IAAI6+E,GAAyBx9G,MAErDi+B,EAAiB,IAAI0pF,GAErB3sB,EAAuB,IAAI2sB,GAE3B1sB,EAAuB,IAAI8sB,GAC/B,IAAI9F,GAAetjF,EAAuBsD,GAAY,GACtD,IAAIgnF,GAAqBtqF,IAGrBw8D,EAAe,IAAIx9F,EAAae,EAAa80E,IAE7C0nB,EAAwB,IAAIsqB,GAChCvnF,EACA+8D,EACAG,GAGIj5D,EAAqC,IAAImqE,GAC7CpuE,EACA+8D,EACAC,EACAh5D,EACAi5D,EACAC,SAGIj5D,EAAa96B,OAEnB,MAAMkoH,EAAgB,IAAIh5B,GACxB,KACAp0D,EACA,KACA,MAGIH,EAAgB,IAAIi0D,GACxBr3D,EACA,KACA2wF,EACArtF,EACAC,GAGI+S,EAAkB,IAAIyrB,GAAgBx+B,GAEtCj9B,EAAc,IAAIqqG,GAAYv/B,OAAOmC,KAAKC,uBAE1CltE,EAAYmC,OAGlB,IAAI+tC,EAA+B,KAEnC,MAAM2L,EAAgB,IAAI9L,GACxBjT,EACAkT,EACA,KACA,KACAhwC,GACA,IAAMkwC,GACNlT,EACAC,GAIFiT,EAAgB,IAAI8lB,GAAcna,EAAe7e,EAAYh9B,GAG7D,MAAMwgF,EAAe,IAAIupC,GAEnBzV,EAAkB,IAAIh0B,GAC1BzkC,EACA5e,EACA,KACAujD,EACAxjD,GAGI6C,EAAc,IAAIoB,GACtBnE,EACA,KACA,KACA,KACAutF,EACA,KACArtF,EACA,KACA,KACAC,EACA,KACAj9B,GAIF,UADyB6/B,EAAYiC,iBACpBlqC,EAAqB0qC,SAGpC,YADAtF,EAAWy6B,KAAK,8EAIlB,MAAM4T,EAAU,IAAI2+C,GAAyB1V,SACvCjpC,EAAQ4+C,2BAA2B7+C,EAC3C,I,2SCrIA,GAAkC,IAFjBN,OAAOU,QAAQO,cAEnB28B,iBACX59B,OAAO2lC,SAASC,UAAU7kC,YAAYs+C,IACtCr/C,OAAOU,QAAQ0rC,YAAYrrC,aCDtB,SAA2BhhE,GAChC,MAkBMqY,EAAqBwhG,GAlBb,CAAC,EACF,CACXrG,sBAAuB,CACrBpB,gBAAgB,GAElBJ,6BAA8B,CAC5Bx7G,IAAKtG,MAEPojH,kBAAmB,CACjBj4F,OAAO,GAETu+F,oBAAqB,CACnBvuB,aAAc,IAAIx9F,EAAae,EAAa80E,KAE9Cg2C,6BAA8B,CAC5BruB,aAAc,IAAIx9F,EAAae,EAAa80E,OAKhD1rC,YAAW,IAAY,mCACC,MAAlBh4B,EAAQssG,QAAqC,YAAnBtsG,EAAQssG,SACpCzsC,GAAWuoB,aAAa,+CAEd/vE,EAAmBk1F,iCACrBl1F,EAAmBm1F,+BAG/B,KAAG,IACL,QD5BO,EACmBz+G,OAAe0wH,cAAgB,IAAIpE,IAC7CqB,YAAYhsF,MAAK,Q,iBEV7BgvF,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqB/lH,IAAjBgmH,EACH,OAAOA,EAAaC,QAGrB,IAAIC,EAASL,EAAyBE,GAAY,CACjDtsH,GAAIssH,EACJI,QAAQ,EACRF,QAAS,CAAC,GAUX,OANAG,EAAoBL,GAAUrtH,KAAKwtH,EAAOD,QAASC,EAAQA,EAAOD,QAASH,GAG3EI,EAAOC,QAAS,EAGTD,EAAOD,OACf,CAGAH,EAAoBO,EAAID,ExV5BpBnzH,EAAW,GACf6yH,EAAoBQ,EAAI,CAACvsF,EAAQwsF,EAAUC,EAAIxmD,KAC9C,IAAGumD,EAAH,CAMA,IAAIE,EAAeC,IACnB,IAAS5vH,EAAI,EAAGA,EAAI7D,EAAS4D,OAAQC,IAAK,CAGzC,IAFA,IAAKyvH,EAAUC,EAAIxmD,GAAY/sE,EAAS6D,GACpC6vH,GAAY,EACPl5D,EAAI,EAAGA,EAAI84D,EAAS1vH,OAAQ42D,MACpB,EAAXuS,GAAsBymD,GAAgBzmD,IAAajkE,OAAOG,KAAK4pH,EAAoBQ,GAAGnzD,OAAO3yD,GAASslH,EAAoBQ,EAAE9lH,GAAK+lH,EAAS94D,MAC9I84D,EAAS5vF,OAAO82B,IAAK,IAErBk5D,GAAY,EACT3mD,EAAWymD,IAAcA,EAAezmD,IAG7C,GAAG2mD,EAAW,CACb1zH,EAAS0jC,OAAO7/B,IAAK,GACrB,IAAIwC,EAAIktH,SACExmH,IAAN1G,IAAiBygC,EAASzgC,EAC/B,CACD,CACA,OAAOygC,CAnBP,CAJCimC,EAAWA,GAAY,EACvB,IAAI,IAAIlpE,EAAI7D,EAAS4D,OAAQC,EAAI,GAAK7D,EAAS6D,EAAI,GAAG,GAAKkpE,EAAUlpE,IAAK7D,EAAS6D,GAAK7D,EAAS6D,EAAI,GACrG7D,EAAS6D,GAAK,CAACyvH,EAAUC,EAAIxmD,EAqBjB,EyVzBd8lD,EAAoB79G,EAAI,CAACg+G,EAASW,KACjC,IAAI,IAAIpmH,KAAOomH,EACXd,EAAoBxsG,EAAEstG,EAAYpmH,KAASslH,EAAoBxsG,EAAE2sG,EAASzlH,IAC5EzE,OAAO8qH,eAAeZ,EAASzlH,EAAK,CAAEsmH,YAAY,EAAM1yF,IAAKwyF,EAAWpmH,IAE1E,ECNDslH,EAAoB1vH,EAAI,WACvB,GAA0B,iBAAf2wH,WAAyB,OAAOA,WAC3C,IACC,OAAOpzH,MAAQ,IAAIqzH,SAAS,cAAb,EAGhB,CAFE,MAAOpsH,GACR,GAAsB,iBAAX1F,OAAqB,OAAOA,MACxC,CACA,CAPuB,GCAxB4wH,EAAoBxsG,EAAI,CAACrd,EAAKV,IAAUQ,OAAOvD,UAAUmR,eAAejR,KAAKuD,EAAKV,GCAlFuqH,EAAoBmB,IAAOf,IAC1BA,EAAOgB,MAAQ,GACVhB,EAAO9wE,WAAU8wE,EAAO9wE,SAAW,IACjC8wE,G,MCER,IAAIiB,EAAkB,CACrB,IAAK,GAaNrB,EAAoBQ,EAAE74D,EAAK25D,GAA0C,IAA7BD,EAAgBC,GAGxD,IAAIC,EAAuB,CAACC,EAA4B1mH,KACvD,IAGImlH,EAAUqB,GAHTb,EAAUgB,EAAazgD,GAAWlmE,EAGhB9J,EAAI,EAC3B,GAAGyvH,EAAS//E,MAAM/sC,GAAgC,IAAxB0tH,EAAgB1tH,KAAa,CACtD,IAAIssH,KAAYwB,EACZzB,EAAoBxsG,EAAEiuG,EAAaxB,KACrCD,EAAoBO,EAAEN,GAAYwB,EAAYxB,IAGhD,GAAGj/C,EAAS,IAAI/sC,EAAS+sC,EAAQg/C,EAClC,CAEA,IADGwB,GAA4BA,EAA2B1mH,GACrD9J,EAAIyvH,EAAS1vH,OAAQC,IACzBswH,EAAUb,EAASzvH,GAChBgvH,EAAoBxsG,EAAE6tG,EAAiBC,IAAYD,EAAgBC,IACrED,EAAgBC,GAAS,KAE1BD,EAAgBC,GAAW,EAE5B,OAAOtB,EAAoBQ,EAAEvsF,EAAO,EAGjCytF,EAAqBnxH,KAAqC,+BAAIA,KAAqC,gCAAK,GAC5GmxH,EAAmBvsH,QAAQosH,EAAqBI,KAAK,KAAM,IAC3DD,EAAmBt9G,KAAOm9G,EAAqBI,KAAK,KAAMD,EAAmBt9G,KAAKu9G,KAAKD,G,KC7CvF,IAAIE,EAAsB5B,EAAoBQ,OAAEtmH,EAAW,CAAC,MAAM,IAAO8lH,EAAoB,QAC7F4B,EAAsB5B,EAAoBQ,EAAEoB,E","sources":["webpack:///webpack/runtime/chunk loaded","webpack:///../../libs/common/src/enums/authenticationStatus.ts","webpack:///../../libs/common/src/enums/cipherRepromptType.ts","webpack:///../../libs/common/src/enums/cipherType.ts","webpack:///../../libs/common/src/enums/stateVersion.ts","webpack:///../../libs/common/src/enums/themeType.ts","webpack:///../../libs/common/src/enums/deviceType.ts","webpack:///../../libs/common/src/factories/accountFactory.ts","webpack:///../../libs/common/src/factories/globalStateFactory.ts","webpack:///../../libs/common/src/factories/stateFactory.ts","webpack:///../../libs/common/src/models/domain/environmentUrls.ts","webpack:///../../libs/common/src/models/domain/windowState.ts","webpack:///../../libs/common/src/models/domain/globalState.ts","webpack:///../../libs/common/src/misc/utils.ts","webpack:///../../libs/common/src/models/request/deviceRequest.ts","webpack:///../../libs/common/src/models/request/identityToken/tokenRequest.ts","webpack:///../../libs/common/src/models/request/identityToken/apiTokenRequest.ts","webpack:///../../libs/common/src/models/request/identityToken/tokenRequestTwoFactor.ts","webpack:///../../libs/common/src/models/response/baseResponse.ts","webpack:///../../libs/common/src/models/response/apiKeyResponse.ts","webpack:///../../libs/common/src/models/response/attachmentResponse.ts","webpack:///../../libs/common/src/models/api/cardApi.ts","webpack:///../../libs/common/src/models/api/fieldApi.ts","webpack:///../../libs/common/src/models/api/identityApi.ts","webpack:///../../libs/common/src/models/api/loginUriApi.ts","webpack:///../../libs/common/src/models/api/loginApi.ts","webpack:///../../libs/common/src/models/api/secureNoteApi.ts","webpack:///../../libs/common/src/models/response/passwordHistoryResponse.ts","webpack:///../../libs/common/src/models/response/cipherResponse.ts","webpack:///../../libs/common/src/models/response/attachmentUploadDataResponse.ts","webpack:///../../libs/common/src/models/response/billingResponse.ts","webpack:///../../libs/common/src/models/response/billingHistoryResponse.ts","webpack:///../../libs/common/src/models/response/billingPaymentResponse.ts","webpack:///../../libs/common/src/models/response/breachAccountResponse.ts","webpack:///../../libs/common/src/models/response/selectionReadOnlyResponse.ts","webpack:///../../libs/common/src/models/response/collectionResponse.ts","webpack:///../../libs/common/src/models/response/deviceVerificationResponse.ts","webpack:///../../libs/common/src/models/response/globalDomainResponse.ts","webpack:///../../libs/common/src/models/response/domainsResponse.ts","webpack:///../../libs/common/src/models/response/emergencyAccessResponse.ts","webpack:///../../libs/common/src/models/response/errorResponse.ts","webpack:///../../libs/common/src/models/response/eventResponse.ts","webpack:///../../libs/common/src/models/response/groupResponse.ts","webpack:///../../libs/common/src/models/response/identityCaptchaResponse.ts","webpack:///../../libs/common/src/models/response/identityTokenResponse.ts","webpack:///../../libs/common/src/models/response/identityTwoFactorResponse.ts","webpack:///../../libs/common/src/models/response/keyConnectorUserKeyResponse.ts","webpack:///../../libs/common/src/models/response/listResponse.ts","webpack:///../../libs/common/src/enums/ssoEnums.ts","webpack:///../../libs/common/src/models/api/ssoConfigApi.ts","webpack:///../../libs/common/src/models/response/organization/organizationSsoResponse.ts","webpack:///../../libs/common/src/models/response/organizationApiKeyInformationResponse.ts","webpack:///../../libs/common/src/models/response/organizationAutoEnrollStatusResponse.ts","webpack:///../../libs/common/src/models/response/organizationConnectionResponse.ts","webpack:///../../libs/common/src/models/response/organizationExportResponse.ts","webpack:///../../libs/common/src/models/response/keysResponse.ts","webpack:///../../libs/common/src/models/response/organizationKeysResponse.ts","webpack:///../../libs/common/src/models/response/planResponse.ts","webpack:///../../libs/common/src/models/response/organizationResponse.ts","webpack:///../../libs/common/src/models/response/organizationSponsorshipSyncStatusResponse.ts","webpack:///../../libs/common/src/models/response/subscriptionResponse.ts","webpack:///../../libs/common/src/models/response/organizationSubscriptionResponse.ts","webpack:///../../libs/common/src/models/response/organizationUserBulkPublicKeyResponse.ts","webpack:///../../libs/common/src/models/response/organizationUserBulkResponse.ts","webpack:///../../libs/common/src/models/api/permissionsApi.ts","webpack:///../../libs/common/src/models/response/organizationUserResponse.ts","webpack:///../../libs/common/src/models/response/profileOrganizationResponse.ts","webpack:///../../libs/common/src/models/response/profileProviderOrganizationResponse.ts","webpack:///../../libs/common/src/models/response/profileProviderResponse.ts","webpack:///../../libs/common/src/models/response/profileResponse.ts","webpack:///../../libs/common/src/models/response/paymentResponse.ts","webpack:///../../libs/common/src/models/response/policyResponse.ts","webpack:///../../libs/common/src/models/response/preloginResponse.ts","webpack:///../../libs/common/src/models/response/provider/providerOrganizationResponse.ts","webpack:///../../libs/common/src/models/response/provider/providerResponse.ts","webpack:///../../libs/common/src/models/response/provider/providerUserBulkPublicKeyResponse.ts","webpack:///../../libs/common/src/models/response/provider/providerUserBulkResponse.ts","webpack:///../../libs/common/src/models/response/provider/providerUserResponse.ts","webpack:///../../libs/common/src/models/api/sendFileApi.ts","webpack:///../../libs/common/src/models/api/sendTextApi.ts","webpack:///../../libs/common/src/models/response/sendAccessResponse.ts","webpack:///../../libs/common/src/models/response/sendFileDownloadDataResponse.ts","webpack:///../../libs/common/src/models/response/sendResponse.ts","webpack:///../../libs/common/src/models/response/sendFileUploadDataResponse.ts","webpack:///../../libs/common/src/models/response/ssoPreValidateResponse.ts","webpack:///../../libs/common/src/models/response/folderResponse.ts","webpack:///../../libs/common/src/models/response/syncResponse.ts","webpack:///../../libs/common/src/models/response/taxInfoResponse.ts","webpack:///../../libs/common/src/models/response/taxRateResponse.ts","webpack:///../../libs/common/src/models/response/twoFactorAuthenticatorResponse.ts","webpack:///../../libs/common/src/models/response/twoFactorDuoResponse.ts","webpack:///../../libs/common/src/models/response/twoFactorEmailResponse.ts","webpack:///../../libs/common/src/models/response/twoFactorProviderResponse.ts","webpack:///../../libs/common/src/models/response/twoFactorRescoverResponse.ts","webpack:///../../libs/common/src/models/response/twoFactorWebAuthnResponse.ts","webpack:///../../libs/common/src/models/response/twoFactorYubiKeyResponse.ts","webpack:///../../libs/common/src/models/response/userKeyResponse.ts","webpack:///../../libs/common/src/enums/htmlStorageLocation.ts","webpack:///../../libs/common/src/services/api.service.ts","webpack:///../../libs/common/src/services/appId.service.ts","webpack:///../../libs/common/src/services/audit.service.ts","webpack:///../../libs/common/src/misc/throttle.ts","webpack:///../../libs/common/src/enums/authenticationType.ts","webpack:///../../libs/common/src/enums/keySuffixOptions.ts","webpack:///../../libs/common/src/enums/twoFactorProviderType.ts","webpack:///../../libs/common/src/models/domain/account.ts","webpack:///../../libs/common/src/models/domain/authResult.ts","webpack:///../../libs/common/src/models/request/keysRequest.ts","webpack:///../../libs/common/src/misc/logInStrategies/logIn.strategy.ts","webpack:///../../libs/common/src/enums/hashPurpose.ts","webpack:///../../libs/common/src/misc/logInStrategies/apiLogin.strategy.ts","webpack:///../../libs/common/src/models/request/identityToken/passwordTokenRequest.ts","webpack:///../../libs/common/src/misc/logInStrategies/passwordLogin.strategy.ts","webpack:///../../libs/common/src/models/request/identityToken/ssoTokenRequest.ts","webpack:///../../libs/common/src/misc/logInStrategies/ssoLogin.strategy.ts","webpack:///../../libs/common/src/models/request/preloginRequest.ts","webpack:///../../libs/common/src/services/auth.service.ts","webpack:///../../libs/common/src/enums/fieldType.ts","webpack:///../../libs/common/src/enums/uriMatchType.ts","webpack:///../../libs/common/src/enums/encryptionType.ts","webpack:///../../libs/common/src/misc/sequentialize.ts","webpack:///../../libs/common/src/models/data/attachmentData.ts","webpack:///../../libs/common/src/models/data/cardData.ts","webpack:///../../libs/common/src/models/data/fieldData.ts","webpack:///../../libs/common/src/models/data/identityData.ts","webpack:///../../libs/common/src/models/data/loginUriData.ts","webpack:///../../libs/common/src/models/data/loginData.ts","webpack:///../../libs/common/src/models/data/passwordHistoryData.ts","webpack:///../../libs/common/src/models/data/secureNoteData.ts","webpack:///../../libs/common/src/models/data/cipherData.ts","webpack:///../../libs/common/src/models/domain/symmetricCryptoKey.ts","webpack:///../../libs/common/src/models/view/attachmentView.ts","webpack:///../../libs/common/src/models/domain/encString.ts","webpack:///../../libs/common/src/models/domain/domainBase.ts","webpack:///../../libs/common/src/enums/linkedIdType.ts","webpack:///../../libs/common/src/models/domain/attachment.ts","webpack:///../../libs/common/src/misc/linkedFieldOption.decorator.ts","webpack:///../../libs/common/src/models/view/itemView.ts","webpack:///../../libs/common/src/models/view/cardView.ts","webpack:///../../libs/common/src/models/domain/card.ts","webpack:///../../libs/common/src/models/view/fieldView.ts","webpack:///../../libs/common/src/models/view/identityView.ts","webpack:///../../libs/common/src/models/view/loginUriView.ts","webpack:///../../libs/common/src/models/view/loginView.ts","webpack:///../../libs/common/src/models/view/passwordHistoryView.ts","webpack:///../../libs/common/src/models/view/secureNoteView.ts","webpack:///../../libs/common/src/models/view/cipherView.ts","webpack:///../../libs/common/src/models/domain/field.ts","webpack:///../../libs/common/src/models/domain/identity.ts","webpack:///../../libs/common/src/models/domain/loginUri.ts","webpack:///../../libs/common/src/models/domain/login.ts","webpack:///../../libs/common/src/models/domain/password.ts","webpack:///../../libs/common/src/models/domain/secureNote.ts","webpack:///../../libs/common/src/models/domain/cipher.ts","webpack:///../../libs/common/src/models/domain/encArrayBuffer.ts","webpack:///../../libs/common/src/models/domain/sortedCiphersCache.ts","webpack:///../../libs/common/src/models/request/cipherBulkDeleteRequest.ts","webpack:///../../libs/common/src/models/request/cipherBulkMoveRequest.ts","webpack:///../../libs/common/src/models/request/cipherBulkRestoreRequest.ts","webpack:///../../libs/common/src/models/request/attachmentRequest.ts","webpack:///../../libs/common/src/models/request/cipherRequest.ts","webpack:///../../libs/common/src/models/request/cipherWithIdRequest.ts","webpack:///../../libs/common/src/models/request/cipherBulkShareRequest.ts","webpack:///../../libs/common/src/models/request/cipherCollectionsRequest.ts","webpack:///../../libs/common/src/models/request/cipherCreateRequest.ts","webpack:///../../libs/common/src/models/request/cipherShareRequest.ts","webpack:///../../libs/common/src/services/cipher.service.ts","webpack:///../../libs/common/src/models/domain/treeNode.ts","webpack:///../../libs/common/src/misc/serviceUtils.ts","webpack:///../../libs/common/src/models/data/collectionData.ts","webpack:///../../libs/common/src/models/view/collectionView.ts","webpack:///../../libs/common/src/models/domain/collection.ts","webpack:///../../libs/common/src/services/collection.service.ts","webpack:///../../libs/common/src/services/container.service.ts","webpack:///../../libs/common/src/models/data/eventData.ts","webpack:///../../libs/common/src/models/request/eventRequest.ts","webpack:///../../libs/common/src/services/event.service.ts","webpack:///../../libs/common/src/enums/kdfType.ts","webpack:///../../libs/common/src/models/export/cardExport.ts","webpack:///../../libs/common/src/models/export/fieldExport.ts","webpack:///../../libs/common/src/models/export/identityExport.ts","webpack:///../../libs/common/src/models/export/loginUriExport.ts","webpack:///../../libs/common/src/models/export/loginExport.ts","webpack:///../../libs/common/src/enums/secureNoteType.ts","webpack:///../../libs/common/src/enums/eventType.ts","webpack:///../../libs/common/src/models/export/secureNoteExport.ts","webpack:///../../libs/common/src/models/export/cipherExport.ts","webpack:///../../libs/common/src/models/export/cipherWithIdsExport.ts","webpack:///../../libs/common/src/models/export/collectionExport.ts","webpack:///../../libs/common/src/models/export/collectionWithIdExport.ts","webpack:///../../libs/common/src/models/export/eventExport.ts","webpack:///../../libs/common/src/models/view/folderView.ts","webpack:///../../libs/common/src/models/domain/folder.ts","webpack:///../../libs/common/src/models/export/folderExport.ts","webpack:///../../libs/common/src/models/export/folderWithIdExport.ts","webpack:///../../libs/common/src/enums/fileUploadType.ts","webpack:///../../libs/common/src/services/export.service.ts","webpack:///../../libs/common/src/services/azureFileUpload.service.ts","webpack:///../../libs/common/src/services/bitwardenFileUpload.service.ts","webpack:///../../libs/common/src/services/fileUpload.service.ts","webpack:///../../libs/common/src/models/data/folderData.ts","webpack:///../../libs/common/src/models/request/folderRequest.ts","webpack:///../../libs/common/src/enums/organizationUserType.ts","webpack:///../../libs/common/src/services/folder/folder-api.service.ts","webpack:///../../libs/common/src/models/request/account/setKeyConnectorKeyRequest.ts","webpack:///../../libs/common/src/models/request/keyConnectorUserKeyRequest.ts","webpack:///../../libs/common/src/services/keyConnector.service.ts","webpack:///../../libs/common/src/enums/notificationType.ts","webpack:///../../libs/common/src/models/response/notificationResponse.ts","webpack:///../../libs/common/src/enums/organizationUserStatusType.ts","webpack:///../../libs/common/src/services/notifications.service.ts","webpack:///../../libs/common/src/models/domain/organization.ts","webpack:///../../libs/common/src/services/organization.service.ts","webpack:///../../libs/common/src/enums/policyType.ts","webpack:///../../libs/common/src/misc/wordlist.ts","webpack:///../../libs/common/src/models/domain/generatedPasswordHistory.ts","webpack:///../../libs/common/src/models/domain/passwordGeneratorPolicyOptions.ts","webpack:///../../libs/common/src/services/passwordGeneration.service.ts","webpack:///../../libs/common/src/models/data/policyData.ts","webpack:///../../libs/common/src/models/domain/policy.ts","webpack:///../../libs/common/src/services/policy/policy-api.service.ts","webpack:///../../libs/common/src/models/domain/masterPasswordPolicyOptions.ts","webpack:///../../libs/common/src/models/domain/resetPasswordPolicyOptions.ts","webpack:///../../libs/common/src/enums/providerUserStatusType.ts","webpack:///../../libs/common/src/enums/providerUserType.ts","webpack:///../../libs/common/src/services/policy/policy.service.ts","webpack:///../../libs/common/src/models/domain/provider.ts","webpack:///../../libs/common/src/services/provider.service.ts","webpack:///../../libs/common/src/enums/sendType.ts","webpack:///../../libs/common/src/services/search.service.ts","webpack:///../../libs/common/src/models/data/sendFileData.ts","webpack:///../../libs/common/src/models/data/sendTextData.ts","webpack:///../../libs/common/src/models/data/sendData.ts","webpack:///../../libs/common/src/models/view/sendFileView.ts","webpack:///../../libs/common/src/models/view/sendTextView.ts","webpack:///../../libs/common/src/models/view/sendView.ts","webpack:///../../libs/common/src/models/domain/sendFile.ts","webpack:///../../libs/common/src/models/domain/sendText.ts","webpack:///../../libs/common/src/models/domain/send.ts","webpack:///../../libs/common/src/models/request/sendRequest.ts","webpack:///../../libs/common/src/services/send.service.ts","webpack:///../../libs/common/src/services/settings.service.ts","webpack:///../../libs/common/src/models/data/organizationData.ts","webpack:///../../libs/common/src/models/data/providerData.ts","webpack:///../../libs/common/src/services/sync.service.ts","webpack:///../../libs/common/src/services/system.service.ts","webpack:///../../libs/common/src/services/token.service.ts","webpack:///../../libs/common/src/services/totp.service.ts","webpack:///../../libs/common/src/services/twoFactor.service.ts","webpack:///../../libs/common/src/enums/verificationType.ts","webpack:///../../libs/common/src/services/userVerification/userVerification-api.service.ts","webpack:///../../libs/common/src/models/request/account/verifyOTPRequest.ts","webpack:///../../libs/common/src/models/request/secretVerificationRequest.ts","webpack:///../../libs/common/src/services/userVerification/userVerification.service.ts","webpack:///../../libs/common/src/emailForwarders/anonAddyForwarder.ts","webpack:///../../libs/common/src/emailForwarders/duckDuckGoForwarder.ts","webpack:///../../libs/common/src/emailForwarders/fastmailForwarder.ts","webpack:///../../libs/common/src/emailForwarders/firefoxRelayForwarder.ts","webpack:///../../libs/common/src/emailForwarders/forwarderOptions.ts","webpack:///../../libs/common/src/emailForwarders/simpleLoginForwarder.ts","webpack:///../../libs/common/src/services/usernameGeneration.service.ts","webpack:///./src/browser/browserApi.ts","webpack:///./src/browser/safariApp.ts","webpack:///./src/models/browserComponentState.ts","webpack:///./src/models/browserGroupingsComponentState.ts","webpack:///./src/models/browserSendComponentState.ts","webpack:///./src/models/account.ts","webpack:///./src/popup/services/popup-utils.service.ts","webpack:///./src/models/autofillScript.ts","webpack:///./src/services/autofillConstants.ts","webpack:///./src/services/autofill.service.ts","webpack:///../../libs/common/src/models/domain/encryptedOrganizationKey.ts","webpack:///../../libs/common/src/services/crypto.service.ts","webpack:///../../libs/common/src/enums/clientType.ts","webpack:///./src/services/browserCrypto.service.ts","webpack:///./src/services/browserMessaging.service.ts","webpack:///./src/services/browserMessagingPrivateModeBackground.service.ts","webpack:///./src/services/browserPlatformUtils.service.ts","webpack:///../../libs/common/src/enums/storageLocation.ts","webpack:///../../libs/common/src/abstractions/storage.service.ts","webpack:///../../libs/common/src/models/domain/state.ts","webpack:///../../libs/common/src/services/state.service.ts","webpack:///./src/services/state.service.ts","webpack:///./src/decorators/session-sync-observable/sync-item-metadata.ts","webpack:///./src/decorators/session-sync-observable/session-syncer.ts","webpack:///./src/decorators/session-sync-observable/session-sync.decorator.ts","webpack:///./src/services/folders/folder.service.ts","webpack:///../../libs/common/src/services/folder/folder.service.ts","webpack:///./src/decorators/session-sync-observable/browser-session.decorator.ts","webpack:///./src/services/i18n.service.ts","webpack:///../../libs/common/src/services/i18n.service.ts","webpack:///../../libs/angular/src/vault/vault-filter/models/vault-filter.model.ts","webpack:///../../libs/angular/src/vault/vault-filter/models/dynamic-tree-node.model.ts","webpack:///../../libs/common/src/abstractions/state.service.ts","webpack:///../../libs/common/src/abstractions/organization.service.ts","webpack:///../../libs/common/src/abstractions/folder/folder.service.abstraction.ts","webpack:///../../libs/common/src/abstractions/cipher.service.ts","webpack:///../../libs/common/src/abstractions/collection.service.ts","webpack:///../../libs/common/src/abstractions/policy/policy.service.abstraction.ts","webpack:///../../libs/angular/src/vault/vault-filter/services/vault-filter.service.ts","webpack:///./src/services/vaultFilter.service.ts","webpack:///./src/services/vaultTimeout.service.ts","webpack:///../../libs/common/src/services/vaultTimeout.service.ts","webpack:///./src/background/commands.background.ts","webpack:///./src/background/contextMenus.background.ts","webpack:///./src/background/idle.background.ts","webpack:///./src/background/nativeMessaging.background.ts","webpack:///./src/background/models/notificationQueueMessageType.ts","webpack:///./src/background/notification.background.ts","webpack:///./src/background/runtime.background.ts","webpack:///../../libs/common/src/models/domain/decryptParameters.ts","webpack:///../../libs/common/src/services/webCryptoFunction.service.ts","webpack:///./src/background/service_factories/factory-options.ts","webpack:///./src/background/service_factories/crypto-function-service.factory.ts","webpack:///../../libs/common/src/models/domain/encryptedObject.ts","webpack:///../../libs/common/src/enums/logLevelType.ts","webpack:///../../libs/common/src/services/encrypt.service.ts","webpack:///../../libs/common/src/services/consoleLog.service.ts","webpack:///./src/background/service_factories/log-service.factory.ts","webpack:///./src/background/service_factories/encrypt-service.factory.ts","webpack:///./src/services/browser-environment.service.ts","webpack:///../../libs/common/src/services/environment.service.ts","webpack:///../../libs/common/src/services/stateMigration.service.ts","webpack:///../../libs/common/src/services/memoryStorage.service.ts","webpack:///./src/services/abstractChromeStorageApi.service.ts","webpack:///./src/services/browserLocalStorage.service.ts","webpack:///./src/services/browserMemoryStorage.service.ts","webpack:///./src/services/localBackedSessionStorage.service.ts","webpack:///./src/decorators/dev-flag.decorator.ts","webpack:///./src/services/keyGeneration.service.ts","webpack:///./src/background/service_factories/storage-service.factory.ts","webpack:///./src/background/service_factories/key-generation-service.factory.ts","webpack:///./src/background/service_factories/state-migration-service.factory.ts","webpack:///./src/background/service_factories/state-service.factory.ts","webpack:///./src/background/service_factories/environment-service.factory.ts","webpack:///./src/background/tabs.background.ts","webpack:///./src/background/webRequest.background.ts","webpack:///./src/background/main.background.ts","webpack:///../../libs/common/src/abstractions/messaging.service.ts","webpack:///../../libs/common/src/services/noOpEvent.service.ts","webpack:///./src/commands/autoFillActiveTabCommand.ts","webpack:///./src/listeners/onCommandListener.ts","webpack:///./src/background.ts","webpack:///./src/listeners/onInstallListener.ts","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/global","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/node module decorator","webpack:///webpack/runtime/jsonp chunk loading","webpack:///webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","export enum AuthenticationStatus {\n  LoggedOut = 0,\n  Locked = 1,\n  Unlocked = 2,\n}\n","export enum CipherRepromptType {\n  None = 0,\n  Password = 1,\n}\n","export enum CipherType {\n  Login = 1,\n  SecureNote = 2,\n  Card = 3,\n  Identity = 4,\n}\n","export enum StateVersion {\n  One = 1, // Original flat key/value pair store\n  Two = 2, // Move to a typed State object\n  Three = 3, // Fix migration of users' premium status\n  Four = 4, // Fix 'Never Lock' option by removing stale data\n  Five = 5, // Migrate to new storage of encrypted organization keys\n  Six = 6, // Delete account.keys.legacyEtmKey property\n  Latest = Six,\n}\n","export enum ThemeType {\n  System = \"system\",\n  Light = \"light\",\n  Dark = \"dark\",\n  Nord = \"nord\",\n  SolarizedDark = \"solarizedDark\",\n}\n","export enum DeviceType {\n  Android = 0,\n  iOS = 1,\n  ChromeExtension = 2,\n  FirefoxExtension = 3,\n  OperaExtension = 4,\n  EdgeExtension = 5,\n  WindowsDesktop = 6,\n  MacOsDesktop = 7,\n  LinuxDesktop = 8,\n  ChromeBrowser = 9,\n  FirefoxBrowser = 10,\n  OperaBrowser = 11,\n  EdgeBrowser = 12,\n  IEBrowser = 13,\n  UnknownBrowser = 14,\n  AndroidAmazon = 15,\n  UWP = 16,\n  SafariBrowser = 17,\n  VivaldiBrowser = 18,\n  VivaldiExtension = 19,\n  SafariExtension = 20,\n}\n","import { Account } from \"../models/domain/account\";\n\nexport class AccountFactory<T extends Account = Account> {\n  private accountConstructor: new (init: Partial<T>) => T;\n\n  constructor(accountConstructor: new (init: Partial<T>) => T) {\n    this.accountConstructor = accountConstructor;\n  }\n\n  create(args: Partial<T>) {\n    return new this.accountConstructor(args);\n  }\n}\n","import { GlobalState } from \"../models/domain/globalState\";\n\nexport class GlobalStateFactory<T extends GlobalState = GlobalState> {\n  private globalStateConstructor: new (init: Partial<T>) => T;\n\n  constructor(globalStateConstructor: new (init: Partial<T>) => T) {\n    this.globalStateConstructor = globalStateConstructor;\n  }\n\n  create(args?: Partial<T>) {\n    return new this.globalStateConstructor(args);\n  }\n}\n","import { Account } from \"../models/domain/account\";\nimport { GlobalState } from \"../models/domain/globalState\";\n\nimport { AccountFactory } from \"./accountFactory\";\nimport { GlobalStateFactory } from \"./globalStateFactory\";\n\nexport class StateFactory<\n  TGlobal extends GlobalState = GlobalState,\n  TAccount extends Account = Account\n> {\n  private globalStateFactory: GlobalStateFactory<TGlobal>;\n  private accountFactory: AccountFactory<TAccount>;\n\n  constructor(\n    globalStateConstructor: new (init: Partial<TGlobal>) => TGlobal,\n    accountConstructor: new (init: Partial<TAccount>) => TAccount\n  ) {\n    this.globalStateFactory = new GlobalStateFactory(globalStateConstructor);\n    this.accountFactory = new AccountFactory(accountConstructor);\n  }\n\n  createGlobal(args: Partial<TGlobal>): TGlobal {\n    return this.globalStateFactory.create(args);\n  }\n\n  createAccount(args: Partial<TAccount>): TAccount {\n    return this.accountFactory.create(args);\n  }\n}\n","export class EnvironmentUrls {\n  base: string = null;\n  api: string = null;\n  identity: string = null;\n  icons: string = null;\n  notifications: string = null;\n  events: string = null;\n  webVault: string = null;\n  keyConnector: string = null;\n}\n","export class WindowState {\n  width?: number;\n  height?: number;\n  isMaximized?: boolean;\n  // TODO: displayBounds is an Electron.Rectangle.\n  // We need to establish some kind of client-specific global state, similiar to the way we already extend a base Account.\n  displayBounds: any;\n  x?: number;\n  y?: number;\n}\n","import { StateVersion } from \"../../enums/stateVersion\";\nimport { ThemeType } from \"../../enums/themeType\";\n\nimport { EnvironmentUrls } from \"./environmentUrls\";\nimport { WindowState } from \"./windowState\";\n\nexport class GlobalState {\n  enableAlwaysOnTop?: boolean;\n  installedVersion?: string;\n  locale?: string;\n  organizationInvitation?: any;\n  ssoCodeVerifier?: string;\n  ssoOrganizationIdentifier?: string;\n  ssoState?: string;\n  rememberedEmail?: string;\n  theme?: ThemeType = ThemeType.System;\n  window?: WindowState = new WindowState();\n  twoFactorToken?: string;\n  disableFavicon?: boolean;\n  biometricAwaitingAcceptance?: boolean;\n  biometricFingerprintValidated?: boolean;\n  vaultTimeout?: number;\n  vaultTimeoutAction?: string;\n  loginRedirect?: any;\n  mainWindowSize?: number;\n  enableBiometrics?: boolean;\n  biometricText?: string;\n  noAutoPromptBiometrics?: boolean;\n  noAutoPromptBiometricsText?: string;\n  stateVersion: StateVersion = StateVersion.One;\n  environmentUrls: EnvironmentUrls = new EnvironmentUrls();\n  enableTray?: boolean;\n  enableMinimizeToTray?: boolean;\n  enableCloseToTray?: boolean;\n  enableStartToTray?: boolean;\n  openAtLogin?: boolean;\n  alwaysShowDock?: boolean;\n  enableBrowserIntegration?: boolean;\n  enableBrowserIntegrationFingerprint?: boolean;\n}\n","/* eslint-disable no-useless-escape */\nimport * as tldjs from \"tldjs\";\n\nimport { CryptoService } from \"@bitwarden/common/abstractions/crypto.service\";\n\nimport { I18nService } from \"../abstractions/i18n.service\";\n\nconst nodeURL = typeof window === \"undefined\" ? require(\"url\") : null;\n\ndeclare global {\n  /* eslint-disable-next-line no-var */\n  var bitwardenContainerService: BitwardenContainerService;\n}\n\ninterface BitwardenContainerService {\n  getCryptoService: () => CryptoService;\n}\n\nexport class Utils {\n  static inited = false;\n  static isNode = false;\n  static isBrowser = true;\n  static isMobileBrowser = false;\n  static isAppleMobileBrowser = false;\n  static global: typeof global = null;\n  static tldEndingRegex =\n    /.*\\.(com|net|org|edu|uk|gov|ca|de|jp|fr|au|ru|ch|io|es|us|co|xyz|info|ly|mil)$/;\n  // Transpiled version of /\\p{Emoji_Presentation}/gu using https://mothereff.in/regexpu. Used for compatability in older browsers.\n  static regexpEmojiPresentation =\n    /(?:[\\u231A\\u231B\\u23E9-\\u23EC\\u23F0\\u23F3\\u25FD\\u25FE\\u2614\\u2615\\u2648-\\u2653\\u267F\\u2693\\u26A1\\u26AA\\u26AB\\u26BD\\u26BE\\u26C4\\u26C5\\u26CE\\u26D4\\u26EA\\u26F2\\u26F3\\u26F5\\u26FA\\u26FD\\u2705\\u270A\\u270B\\u2728\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2795-\\u2797\\u27B0\\u27BF\\u2B1B\\u2B1C\\u2B50\\u2B55]|\\uD83C[\\uDC04\\uDCCF\\uDD8E\\uDD91-\\uDD9A\\uDDE6-\\uDDFF\\uDE01\\uDE1A\\uDE2F\\uDE32-\\uDE36\\uDE38-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF20\\uDF2D-\\uDF35\\uDF37-\\uDF7C\\uDF7E-\\uDF93\\uDFA0-\\uDFCA\\uDFCF-\\uDFD3\\uDFE0-\\uDFF0\\uDFF4\\uDFF8-\\uDFFF]|\\uD83D[\\uDC00-\\uDC3E\\uDC40\\uDC42-\\uDCFC\\uDCFF-\\uDD3D\\uDD4B-\\uDD4E\\uDD50-\\uDD67\\uDD7A\\uDD95\\uDD96\\uDDA4\\uDDFB-\\uDE4F\\uDE80-\\uDEC5\\uDECC\\uDED0-\\uDED2\\uDED5-\\uDED7\\uDEEB\\uDEEC\\uDEF4-\\uDEFC\\uDFE0-\\uDFEB]|\\uD83E[\\uDD0C-\\uDD3A\\uDD3C-\\uDD45\\uDD47-\\uDD78\\uDD7A-\\uDDCB\\uDDCD-\\uDDFF\\uDE70-\\uDE74\\uDE78-\\uDE7A\\uDE80-\\uDE86\\uDE90-\\uDEA8\\uDEB0-\\uDEB6\\uDEC0-\\uDEC2\\uDED0-\\uDED6])/g;\n\n  static init() {\n    if (Utils.inited) {\n      return;\n    }\n\n    Utils.inited = true;\n    Utils.isNode =\n      typeof process !== \"undefined\" &&\n      (process as any).release != null &&\n      (process as any).release.name === \"node\";\n    Utils.isBrowser = typeof window !== \"undefined\";\n\n    Utils.isMobileBrowser = Utils.isBrowser && this.isMobile(window);\n    Utils.isAppleMobileBrowser = Utils.isBrowser && this.isAppleMobile(window);\n\n    if (Utils.isNode) {\n      Utils.global = global;\n    } else if (Utils.isBrowser) {\n      Utils.global = window;\n    } else {\n      // If it's not browser or node then it must be a service worker\n      Utils.global = self;\n    }\n  }\n\n  static fromB64ToArray(str: string): Uint8Array {\n    if (Utils.isNode) {\n      return new Uint8Array(Buffer.from(str, \"base64\"));\n    } else {\n      const binaryString = Utils.global.atob(str);\n      const bytes = new Uint8Array(binaryString.length);\n      for (let i = 0; i < binaryString.length; i++) {\n        bytes[i] = binaryString.charCodeAt(i);\n      }\n      return bytes;\n    }\n  }\n\n  static fromUrlB64ToArray(str: string): Uint8Array {\n    return Utils.fromB64ToArray(Utils.fromUrlB64ToB64(str));\n  }\n\n  static fromHexToArray(str: string): Uint8Array {\n    if (Utils.isNode) {\n      return new Uint8Array(Buffer.from(str, \"hex\"));\n    } else {\n      const bytes = new Uint8Array(str.length / 2);\n      for (let i = 0; i < str.length; i += 2) {\n        bytes[i / 2] = parseInt(str.substr(i, 2), 16);\n      }\n      return bytes;\n    }\n  }\n\n  static fromUtf8ToArray(str: string): Uint8Array {\n    if (Utils.isNode) {\n      return new Uint8Array(Buffer.from(str, \"utf8\"));\n    } else {\n      const strUtf8 = unescape(encodeURIComponent(str));\n      const arr = new Uint8Array(strUtf8.length);\n      for (let i = 0; i < strUtf8.length; i++) {\n        arr[i] = strUtf8.charCodeAt(i);\n      }\n      return arr;\n    }\n  }\n\n  static fromByteStringToArray(str: string): Uint8Array {\n    const arr = new Uint8Array(str.length);\n    for (let i = 0; i < str.length; i++) {\n      arr[i] = str.charCodeAt(i);\n    }\n    return arr;\n  }\n\n  static fromBufferToB64(buffer: ArrayBuffer): string {\n    if (Utils.isNode) {\n      return Buffer.from(buffer).toString(\"base64\");\n    } else {\n      let binary = \"\";\n      const bytes = new Uint8Array(buffer);\n      for (let i = 0; i < bytes.byteLength; i++) {\n        binary += String.fromCharCode(bytes[i]);\n      }\n      return Utils.global.btoa(binary);\n    }\n  }\n\n  static fromBufferToUrlB64(buffer: ArrayBuffer): string {\n    return Utils.fromB64toUrlB64(Utils.fromBufferToB64(buffer));\n  }\n\n  static fromB64toUrlB64(b64Str: string) {\n    return b64Str.replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=/g, \"\");\n  }\n\n  static fromBufferToUtf8(buffer: ArrayBuffer): string {\n    if (Utils.isNode) {\n      return Buffer.from(buffer).toString(\"utf8\");\n    } else {\n      const bytes = new Uint8Array(buffer);\n      const encodedString = String.fromCharCode.apply(null, bytes);\n      return decodeURIComponent(escape(encodedString));\n    }\n  }\n\n  static fromBufferToByteString(buffer: ArrayBuffer): string {\n    return String.fromCharCode.apply(null, new Uint8Array(buffer));\n  }\n\n  // ref: https://stackoverflow.com/a/40031979/1090359\n  static fromBufferToHex(buffer: ArrayBuffer): string {\n    if (Utils.isNode) {\n      return Buffer.from(buffer).toString(\"hex\");\n    } else {\n      const bytes = new Uint8Array(buffer);\n      return Array.prototype.map\n        .call(bytes, (x: number) => (\"00\" + x.toString(16)).slice(-2))\n        .join(\"\");\n    }\n  }\n\n  static fromUrlB64ToB64(urlB64Str: string): string {\n    let output = urlB64Str.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    switch (output.length % 4) {\n      case 0:\n        break;\n      case 2:\n        output += \"==\";\n        break;\n      case 3:\n        output += \"=\";\n        break;\n      default:\n        throw new Error(\"Illegal base64url string!\");\n    }\n\n    return output;\n  }\n\n  static fromUrlB64ToUtf8(urlB64Str: string): string {\n    return Utils.fromB64ToUtf8(Utils.fromUrlB64ToB64(urlB64Str));\n  }\n\n  static fromUtf8ToB64(utfStr: string): string {\n    if (Utils.isNode) {\n      return Buffer.from(utfStr, \"utf8\").toString(\"base64\");\n    } else {\n      return decodeURIComponent(escape(Utils.global.btoa(utfStr)));\n    }\n  }\n\n  static fromUtf8ToUrlB64(utfStr: string): string {\n    return Utils.fromBufferToUrlB64(Utils.fromUtf8ToArray(utfStr));\n  }\n\n  static fromB64ToUtf8(b64Str: string): string {\n    if (Utils.isNode) {\n      return Buffer.from(b64Str, \"base64\").toString(\"utf8\");\n    } else {\n      return decodeURIComponent(escape(Utils.global.atob(b64Str)));\n    }\n  }\n\n  // ref: http://stackoverflow.com/a/2117523/1090359\n  static newGuid(): string {\n    return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c) => {\n      const r = (Math.random() * 16) | 0;\n      const v = c === \"x\" ? r : (r & 0x3) | 0x8;\n      return v.toString(16);\n    });\n  }\n\n  static isGuid(id: string) {\n    return RegExp(\n      /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/,\n      \"i\"\n    ).test(id);\n  }\n\n  static getHostname(uriString: string): string {\n    const url = Utils.getUrl(uriString);\n    try {\n      return url != null && url.hostname !== \"\" ? url.hostname : null;\n    } catch {\n      return null;\n    }\n  }\n\n  static getHost(uriString: string): string {\n    const url = Utils.getUrl(uriString);\n    try {\n      return url != null && url.host !== \"\" ? url.host : null;\n    } catch {\n      return null;\n    }\n  }\n\n  static getDomain(uriString: string): string {\n    if (uriString == null) {\n      return null;\n    }\n\n    uriString = uriString.trim();\n    if (uriString === \"\") {\n      return null;\n    }\n\n    if (uriString.startsWith(\"data:\")) {\n      return null;\n    }\n\n    let httpUrl = uriString.startsWith(\"http://\") || uriString.startsWith(\"https://\");\n    if (\n      !httpUrl &&\n      uriString.indexOf(\"://\") < 0 &&\n      Utils.tldEndingRegex.test(uriString) &&\n      uriString.indexOf(\"@\") < 0\n    ) {\n      uriString = \"http://\" + uriString;\n      httpUrl = true;\n    }\n\n    if (httpUrl) {\n      try {\n        const url = Utils.getUrlObject(uriString);\n        const validHostname = tldjs?.isValid != null ? tldjs.isValid(url.hostname) : true;\n        if (!validHostname) {\n          return null;\n        }\n\n        if (url.hostname === \"localhost\" || Utils.validIpAddress(url.hostname)) {\n          return url.hostname;\n        }\n\n        const urlDomain =\n          tldjs != null && tldjs.getDomain != null ? tldjs.getDomain(url.hostname) : null;\n        return urlDomain != null ? urlDomain : url.hostname;\n      } catch (e) {\n        // Invalid domain, try another approach below.\n      }\n    }\n\n    try {\n      const domain = tldjs != null && tldjs.getDomain != null ? tldjs.getDomain(uriString) : null;\n\n      if (domain != null) {\n        return domain;\n      }\n    } catch {\n      return null;\n    }\n\n    return null;\n  }\n\n  static getQueryParams(uriString: string): Map<string, string> {\n    const url = Utils.getUrl(uriString);\n    if (url == null || url.search == null || url.search === \"\") {\n      return null;\n    }\n    const map = new Map<string, string>();\n    const pairs = (url.search[0] === \"?\" ? url.search.substr(1) : url.search).split(\"&\");\n    pairs.forEach((pair) => {\n      const parts = pair.split(\"=\");\n      if (parts.length < 1) {\n        return;\n      }\n      map.set(\n        decodeURIComponent(parts[0]).toLowerCase(),\n        parts[1] == null ? \"\" : decodeURIComponent(parts[1])\n      );\n    });\n    return map;\n  }\n\n  static getSortFunction(i18nService: I18nService, prop: string) {\n    return (a: any, b: any) => {\n      if (a[prop] == null && b[prop] != null) {\n        return -1;\n      }\n      if (a[prop] != null && b[prop] == null) {\n        return 1;\n      }\n      if (a[prop] == null && b[prop] == null) {\n        return 0;\n      }\n\n      return i18nService.collator\n        ? i18nService.collator.compare(a[prop], b[prop])\n        : a[prop].localeCompare(b[prop]);\n    };\n  }\n\n  static isNullOrWhitespace(str: string): boolean {\n    return str == null || typeof str !== \"string\" || str.trim() === \"\";\n  }\n\n  static isNullOrEmpty(str: string): boolean {\n    return str == null || typeof str !== \"string\" || str == \"\";\n  }\n\n  static nameOf<T>(name: string & keyof T) {\n    return name;\n  }\n\n  static assign<T>(target: T, source: Partial<T>): T {\n    return Object.assign(target, source);\n  }\n\n  static iterateEnum<O extends object, K extends keyof O = keyof O>(obj: O) {\n    return (Object.keys(obj).filter((k) => Number.isNaN(+k)) as K[]).map((k) => obj[k]);\n  }\n\n  static getUrl(uriString: string): URL {\n    if (uriString == null) {\n      return null;\n    }\n\n    uriString = uriString.trim();\n    if (uriString === \"\") {\n      return null;\n    }\n\n    let url = Utils.getUrlObject(uriString);\n    if (url == null) {\n      const hasHttpProtocol =\n        uriString.indexOf(\"http://\") === 0 || uriString.indexOf(\"https://\") === 0;\n      if (!hasHttpProtocol && uriString.indexOf(\".\") > -1) {\n        url = Utils.getUrlObject(\"http://\" + uriString);\n      }\n    }\n    return url;\n  }\n\n  static camelToPascalCase(s: string) {\n    return s.charAt(0).toUpperCase() + s.slice(1);\n  }\n\n  private static validIpAddress(ipString: string): boolean {\n    const ipRegex =\n      /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;\n    return ipRegex.test(ipString);\n  }\n\n  private static isMobile(win: Window) {\n    let mobile = false;\n    ((a) => {\n      if (\n        /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(\n          a\n        ) ||\n        /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(\n          a.substr(0, 4)\n        )\n      ) {\n        mobile = true;\n      }\n    })(win.navigator.userAgent || win.navigator.vendor || (win as any).opera);\n    return mobile || win.navigator.userAgent.match(/iPad/i) != null;\n  }\n\n  private static isAppleMobile(win: Window) {\n    return (\n      win.navigator.userAgent.match(/iPhone/i) != null ||\n      win.navigator.userAgent.match(/iPad/i) != null\n    );\n  }\n\n  private static getUrlObject(uriString: string): URL {\n    try {\n      if (nodeURL != null) {\n        return new nodeURL.URL(uriString);\n      } else if (typeof URL === \"function\") {\n        return new URL(uriString);\n      } else if (typeof window !== \"undefined\") {\n        const hasProtocol = uriString.indexOf(\"://\") > -1;\n        if (!hasProtocol && uriString.indexOf(\".\") > -1) {\n          uriString = \"http://\" + uriString;\n        } else if (!hasProtocol) {\n          return null;\n        }\n        const anchor = window.document.createElement(\"a\");\n        anchor.href = uriString;\n        return anchor as any;\n      }\n    } catch (e) {\n      // Ignore error\n    }\n\n    return null;\n  }\n}\n\nUtils.init();\n","import { PlatformUtilsService } from \"../../abstractions/platformUtils.service\";\nimport { DeviceType } from \"../../enums/deviceType\";\n\nexport class DeviceRequest {\n  type: DeviceType;\n  name: string;\n  identifier: string;\n  pushToken?: string;\n\n  constructor(appId: string, platformUtilsService: PlatformUtilsService) {\n    this.type = platformUtilsService.getDevice();\n    this.name = platformUtilsService.getDeviceString();\n    this.identifier = appId;\n    this.pushToken = null;\n  }\n}\n","import { DeviceRequest } from \"../deviceRequest\";\n\nimport { TokenRequestTwoFactor } from \"./tokenRequestTwoFactor\";\n\nexport abstract class TokenRequest {\n  protected device?: DeviceRequest;\n\n  constructor(protected twoFactor: TokenRequestTwoFactor, device?: DeviceRequest) {\n    this.device = device != null ? device : null;\n  }\n\n  // eslint-disable-next-line\n  alterIdentityTokenHeaders(headers: Headers) {\n    // Implemented in subclass if required\n  }\n\n  setTwoFactor(twoFactor: TokenRequestTwoFactor) {\n    this.twoFactor = twoFactor;\n  }\n\n  protected toIdentityToken(clientId: string) {\n    const obj: any = {\n      scope: \"api offline_access\",\n      client_id: clientId,\n    };\n\n    if (this.device) {\n      obj.deviceType = this.device.type;\n      obj.deviceIdentifier = this.device.identifier;\n      obj.deviceName = this.device.name;\n      // no push tokens for browser apps yet\n      // obj.devicePushToken = this.device.pushToken;\n    }\n\n    if (this.twoFactor.token && this.twoFactor.provider != null) {\n      obj.twoFactorToken = this.twoFactor.token;\n      obj.twoFactorProvider = this.twoFactor.provider;\n      obj.twoFactorRemember = this.twoFactor.remember ? \"1\" : \"0\";\n    }\n\n    return obj;\n  }\n}\n","import { DeviceRequest } from \"../deviceRequest\";\n\nimport { TokenRequest } from \"./tokenRequest\";\nimport { TokenRequestTwoFactor } from \"./tokenRequestTwoFactor\";\n\nexport class ApiTokenRequest extends TokenRequest {\n  constructor(\n    public clientId: string,\n    public clientSecret: string,\n    protected twoFactor: TokenRequestTwoFactor,\n    device?: DeviceRequest\n  ) {\n    super(twoFactor, device);\n  }\n\n  toIdentityToken() {\n    const obj = super.toIdentityToken(this.clientId);\n\n    obj.scope = this.clientId.startsWith(\"organization\") ? \"api.organization\" : \"api\";\n    obj.grant_type = \"client_credentials\";\n    obj.client_secret = this.clientSecret;\n\n    return obj;\n  }\n}\n","import { TwoFactorProviderType } from \"../../../enums/twoFactorProviderType\";\n\nexport class TokenRequestTwoFactor {\n  constructor(\n    public provider: TwoFactorProviderType = null,\n    public token: string = null,\n    public remember: boolean = false\n  ) {}\n}\n","export abstract class BaseResponse {\n  private response: any;\n\n  constructor(response: any) {\n    this.response = response;\n  }\n\n  protected getResponseProperty(\n    propertyName: string,\n    response: any = null,\n    exactName = false\n  ): any {\n    if (propertyName == null || propertyName === \"\") {\n      throw new Error(\"propertyName must not be null/empty.\");\n    }\n    if (response == null && this.response != null) {\n      response = this.response;\n    }\n    if (response == null) {\n      return null;\n    }\n    if (!exactName && response[propertyName] === undefined) {\n      let otherCasePropertyName: string = null;\n      if (propertyName.charAt(0) === propertyName.charAt(0).toUpperCase()) {\n        otherCasePropertyName = propertyName.charAt(0).toLowerCase();\n      } else {\n        otherCasePropertyName = propertyName.charAt(0).toUpperCase();\n      }\n      if (propertyName.length > 1) {\n        otherCasePropertyName += propertyName.slice(1);\n      }\n\n      propertyName = otherCasePropertyName;\n      if (response[propertyName] === undefined) {\n        propertyName = propertyName.toLowerCase();\n      }\n      if (response[propertyName] === undefined) {\n        propertyName = propertyName.toUpperCase();\n      }\n    }\n    return response[propertyName];\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class ApiKeyResponse extends BaseResponse {\n  apiKey: string;\n  revisionDate: Date;\n\n  constructor(response: any) {\n    super(response);\n    this.apiKey = this.getResponseProperty(\"ApiKey\");\n    this.revisionDate = new Date(this.getResponseProperty(\"RevisionDate\"));\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class AttachmentResponse extends BaseResponse {\n  id: string;\n  url: string;\n  fileName: string;\n  key: string;\n  size: string;\n  sizeName: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.url = this.getResponseProperty(\"Url\");\n    this.fileName = this.getResponseProperty(\"FileName\");\n    this.key = this.getResponseProperty(\"Key\");\n    this.size = this.getResponseProperty(\"Size\");\n    this.sizeName = this.getResponseProperty(\"SizeName\");\n  }\n}\n","import { BaseResponse } from \"../response/baseResponse\";\n\nexport class CardApi extends BaseResponse {\n  cardholderName: string;\n  brand: string;\n  number: string;\n  expMonth: string;\n  expYear: string;\n  code: string;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n    this.cardholderName = this.getResponseProperty(\"CardholderName\");\n    this.brand = this.getResponseProperty(\"Brand\");\n    this.number = this.getResponseProperty(\"Number\");\n    this.expMonth = this.getResponseProperty(\"ExpMonth\");\n    this.expYear = this.getResponseProperty(\"ExpYear\");\n    this.code = this.getResponseProperty(\"Code\");\n  }\n}\n","import { FieldType } from \"../../enums/fieldType\";\nimport { LinkedIdType } from \"../../enums/linkedIdType\";\nimport { BaseResponse } from \"../response/baseResponse\";\n\nexport class FieldApi extends BaseResponse {\n  name: string;\n  value: string;\n  type: FieldType;\n  linkedId: LinkedIdType;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n    this.type = this.getResponseProperty(\"Type\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.value = this.getResponseProperty(\"Value\");\n    this.linkedId = this.getResponseProperty(\"linkedId\");\n  }\n}\n","import { BaseResponse } from \"../response/baseResponse\";\n\nexport class IdentityApi extends BaseResponse {\n  title: string;\n  firstName: string;\n  middleName: string;\n  lastName: string;\n  address1: string;\n  address2: string;\n  address3: string;\n  city: string;\n  state: string;\n  postalCode: string;\n  country: string;\n  company: string;\n  email: string;\n  phone: string;\n  ssn: string;\n  username: string;\n  passportNumber: string;\n  licenseNumber: string;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n    this.title = this.getResponseProperty(\"Title\");\n    this.firstName = this.getResponseProperty(\"FirstName\");\n    this.middleName = this.getResponseProperty(\"MiddleName\");\n    this.lastName = this.getResponseProperty(\"LastName\");\n    this.address1 = this.getResponseProperty(\"Address1\");\n    this.address2 = this.getResponseProperty(\"Address2\");\n    this.address3 = this.getResponseProperty(\"Address3\");\n    this.city = this.getResponseProperty(\"City\");\n    this.state = this.getResponseProperty(\"State\");\n    this.postalCode = this.getResponseProperty(\"PostalCode\");\n    this.country = this.getResponseProperty(\"Country\");\n    this.company = this.getResponseProperty(\"Company\");\n    this.email = this.getResponseProperty(\"Email\");\n    this.phone = this.getResponseProperty(\"Phone\");\n    this.ssn = this.getResponseProperty(\"SSN\");\n    this.username = this.getResponseProperty(\"Username\");\n    this.passportNumber = this.getResponseProperty(\"PassportNumber\");\n    this.licenseNumber = this.getResponseProperty(\"LicenseNumber\");\n  }\n}\n","import { UriMatchType } from \"../../enums/uriMatchType\";\nimport { BaseResponse } from \"../response/baseResponse\";\n\nexport class LoginUriApi extends BaseResponse {\n  uri: string;\n  match: UriMatchType = null;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n    this.uri = this.getResponseProperty(\"Uri\");\n    const match = this.getResponseProperty(\"Match\");\n    this.match = match != null ? match : null;\n  }\n}\n","import { BaseResponse } from \"../response/baseResponse\";\n\nimport { LoginUriApi } from \"./loginUriApi\";\n\nexport class LoginApi extends BaseResponse {\n  uris: LoginUriApi[];\n  username: string;\n  password: string;\n  passwordRevisionDate: string;\n  totp: string;\n  autofillOnPageLoad: boolean;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n    this.username = this.getResponseProperty(\"Username\");\n    this.password = this.getResponseProperty(\"Password\");\n    this.passwordRevisionDate = this.getResponseProperty(\"PasswordRevisionDate\");\n    this.totp = this.getResponseProperty(\"Totp\");\n    this.autofillOnPageLoad = this.getResponseProperty(\"AutofillOnPageLoad\");\n\n    const uris = this.getResponseProperty(\"Uris\");\n    if (uris != null) {\n      this.uris = uris.map((u: any) => new LoginUriApi(u));\n    }\n  }\n}\n","import { SecureNoteType } from \"../../enums/secureNoteType\";\nimport { BaseResponse } from \"../response/baseResponse\";\n\nexport class SecureNoteApi extends BaseResponse {\n  type: SecureNoteType;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n    this.type = this.getResponseProperty(\"Type\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class PasswordHistoryResponse extends BaseResponse {\n  password: string;\n  lastUsedDate: string;\n\n  constructor(response: any) {\n    super(response);\n    this.password = this.getResponseProperty(\"Password\");\n    this.lastUsedDate = this.getResponseProperty(\"LastUsedDate\");\n  }\n}\n","import { CipherRepromptType } from \"../../enums/cipherRepromptType\";\nimport { CardApi } from \"../api/cardApi\";\nimport { FieldApi } from \"../api/fieldApi\";\nimport { IdentityApi } from \"../api/identityApi\";\nimport { LoginApi } from \"../api/loginApi\";\nimport { SecureNoteApi } from \"../api/secureNoteApi\";\n\nimport { AttachmentResponse } from \"./attachmentResponse\";\nimport { BaseResponse } from \"./baseResponse\";\nimport { PasswordHistoryResponse } from \"./passwordHistoryResponse\";\n\nexport class CipherResponse extends BaseResponse {\n  id: string;\n  organizationId: string;\n  folderId: string;\n  type: number;\n  name: string;\n  notes: string;\n  fields: FieldApi[];\n  login: LoginApi;\n  card: CardApi;\n  identity: IdentityApi;\n  secureNote: SecureNoteApi;\n  favorite: boolean;\n  edit: boolean;\n  viewPassword: boolean;\n  organizationUseTotp: boolean;\n  revisionDate: string;\n  attachments: AttachmentResponse[];\n  passwordHistory: PasswordHistoryResponse[];\n  collectionIds: string[];\n  deletedDate: string;\n  reprompt: CipherRepromptType;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.folderId = this.getResponseProperty(\"FolderId\") || null;\n    this.type = this.getResponseProperty(\"Type\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.notes = this.getResponseProperty(\"Notes\");\n    this.favorite = this.getResponseProperty(\"Favorite\") || false;\n    this.edit = !!this.getResponseProperty(\"Edit\");\n    if (this.getResponseProperty(\"ViewPassword\") == null) {\n      this.viewPassword = true;\n    } else {\n      this.viewPassword = this.getResponseProperty(\"ViewPassword\");\n    }\n    this.organizationUseTotp = this.getResponseProperty(\"OrganizationUseTotp\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n    this.collectionIds = this.getResponseProperty(\"CollectionIds\");\n    this.deletedDate = this.getResponseProperty(\"DeletedDate\");\n\n    const login = this.getResponseProperty(\"Login\");\n    if (login != null) {\n      this.login = new LoginApi(login);\n    }\n\n    const card = this.getResponseProperty(\"Card\");\n    if (card != null) {\n      this.card = new CardApi(card);\n    }\n\n    const identity = this.getResponseProperty(\"Identity\");\n    if (identity != null) {\n      this.identity = new IdentityApi(identity);\n    }\n\n    const secureNote = this.getResponseProperty(\"SecureNote\");\n    if (secureNote != null) {\n      this.secureNote = new SecureNoteApi(secureNote);\n    }\n\n    const fields = this.getResponseProperty(\"Fields\");\n    if (fields != null) {\n      this.fields = fields.map((f: any) => new FieldApi(f));\n    }\n\n    const attachments = this.getResponseProperty(\"Attachments\");\n    if (attachments != null) {\n      this.attachments = attachments.map((a: any) => new AttachmentResponse(a));\n    }\n\n    const passwordHistory = this.getResponseProperty(\"PasswordHistory\");\n    if (passwordHistory != null) {\n      this.passwordHistory = passwordHistory.map((h: any) => new PasswordHistoryResponse(h));\n    }\n\n    this.reprompt = this.getResponseProperty(\"Reprompt\") || CipherRepromptType.None;\n  }\n}\n","import { FileUploadType } from \"../../enums/fileUploadType\";\n\nimport { BaseResponse } from \"./baseResponse\";\nimport { CipherResponse } from \"./cipherResponse\";\n\nexport class AttachmentUploadDataResponse extends BaseResponse {\n  attachmentId: string;\n  fileUploadType: FileUploadType;\n  cipherResponse: CipherResponse;\n  cipherMiniResponse: CipherResponse;\n  url: string = null;\n  constructor(response: any) {\n    super(response);\n    this.attachmentId = this.getResponseProperty(\"AttachmentId\");\n    this.fileUploadType = this.getResponseProperty(\"FileUploadType\");\n    const cipherResponse = this.getResponseProperty(\"CipherResponse\");\n    const cipherMiniResponse = this.getResponseProperty(\"CipherMiniResponse\");\n    this.cipherResponse = cipherResponse == null ? null : new CipherResponse(cipherResponse);\n    this.cipherMiniResponse =\n      cipherMiniResponse == null ? null : new CipherResponse(cipherMiniResponse);\n    this.url = this.getResponseProperty(\"Url\");\n  }\n}\n","import { PaymentMethodType } from \"../../enums/paymentMethodType\";\nimport { TransactionType } from \"../../enums/transactionType\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class BillingResponse extends BaseResponse {\n  balance: number;\n  paymentSource: BillingSourceResponse;\n  invoices: BillingInvoiceResponse[] = [];\n  transactions: BillingTransactionResponse[] = [];\n\n  constructor(response: any) {\n    super(response);\n    this.balance = this.getResponseProperty(\"Balance\");\n    const paymentSource = this.getResponseProperty(\"PaymentSource\");\n    const transactions = this.getResponseProperty(\"Transactions\");\n    const invoices = this.getResponseProperty(\"Invoices\");\n    this.paymentSource = paymentSource == null ? null : new BillingSourceResponse(paymentSource);\n    if (transactions != null) {\n      this.transactions = transactions.map((t: any) => new BillingTransactionResponse(t));\n    }\n    if (invoices != null) {\n      this.invoices = invoices.map((i: any) => new BillingInvoiceResponse(i));\n    }\n  }\n}\n\nexport class BillingSourceResponse extends BaseResponse {\n  type: PaymentMethodType;\n  cardBrand: string;\n  description: string;\n  needsVerification: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.type = this.getResponseProperty(\"Type\");\n    this.cardBrand = this.getResponseProperty(\"CardBrand\");\n    this.description = this.getResponseProperty(\"Description\");\n    this.needsVerification = this.getResponseProperty(\"NeedsVerification\");\n  }\n}\n\nexport class BillingInvoiceResponse extends BaseResponse {\n  url: string;\n  pdfUrl: string;\n  number: string;\n  paid: boolean;\n  date: string;\n  amount: number;\n\n  constructor(response: any) {\n    super(response);\n    this.url = this.getResponseProperty(\"Url\");\n    this.pdfUrl = this.getResponseProperty(\"PdfUrl\");\n    this.number = this.getResponseProperty(\"Number\");\n    this.paid = this.getResponseProperty(\"Paid\");\n    this.date = this.getResponseProperty(\"Date\");\n    this.amount = this.getResponseProperty(\"Amount\");\n  }\n}\n\nexport class BillingTransactionResponse extends BaseResponse {\n  createdDate: string;\n  amount: number;\n  refunded: boolean;\n  partiallyRefunded: boolean;\n  refundedAmount: number;\n  type: TransactionType;\n  paymentMethodType: PaymentMethodType;\n  details: string;\n\n  constructor(response: any) {\n    super(response);\n    this.createdDate = this.getResponseProperty(\"CreatedDate\");\n    this.amount = this.getResponseProperty(\"Amount\");\n    this.refunded = this.getResponseProperty(\"Refunded\");\n    this.partiallyRefunded = this.getResponseProperty(\"PartiallyRefunded\");\n    this.refundedAmount = this.getResponseProperty(\"RefundedAmount\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.paymentMethodType = this.getResponseProperty(\"PaymentMethodType\");\n    this.details = this.getResponseProperty(\"Details\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\nimport { BillingInvoiceResponse, BillingTransactionResponse } from \"./billingResponse\";\n\nexport class BillingHistoryResponse extends BaseResponse {\n  invoices: BillingInvoiceResponse[] = [];\n  transactions: BillingTransactionResponse[] = [];\n\n  constructor(response: any) {\n    super(response);\n    const transactions = this.getResponseProperty(\"Transactions\");\n    const invoices = this.getResponseProperty(\"Invoices\");\n    if (transactions != null) {\n      this.transactions = transactions.map((t: any) => new BillingTransactionResponse(t));\n    }\n    if (invoices != null) {\n      this.invoices = invoices.map((i: any) => new BillingInvoiceResponse(i));\n    }\n  }\n\n  get hasNoHistory() {\n    return this.invoices.length == 0 && this.transactions.length == 0;\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\nimport { BillingSourceResponse } from \"./billingResponse\";\n\nexport class BillingPaymentResponse extends BaseResponse {\n  balance: number;\n  paymentSource: BillingSourceResponse;\n\n  constructor(response: any) {\n    super(response);\n    this.balance = this.getResponseProperty(\"Balance\");\n    const paymentSource = this.getResponseProperty(\"PaymentSource\");\n    this.paymentSource = paymentSource == null ? null : new BillingSourceResponse(paymentSource);\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class BreachAccountResponse extends BaseResponse {\n  addedDate: string;\n  breachDate: string;\n  dataClasses: string[];\n  description: string;\n  domain: string;\n  isActive: boolean;\n  isVerified: boolean;\n  logoPath: string;\n  modifiedDate: string;\n  name: string;\n  pwnCount: number;\n  title: string;\n\n  constructor(response: any) {\n    super(response);\n    this.addedDate = this.getResponseProperty(\"AddedDate\");\n    this.breachDate = this.getResponseProperty(\"BreachDate\");\n    this.dataClasses = this.getResponseProperty(\"DataClasses\");\n    this.description = this.getResponseProperty(\"Description\");\n    this.domain = this.getResponseProperty(\"Domain\");\n    this.isActive = this.getResponseProperty(\"IsActive\");\n    this.isVerified = this.getResponseProperty(\"IsVerified\");\n    this.logoPath = this.getResponseProperty(\"LogoPath\");\n    this.modifiedDate = this.getResponseProperty(\"ModifiedDate\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.pwnCount = this.getResponseProperty(\"PwnCount\");\n    this.title = this.getResponseProperty(\"Title\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class SelectionReadOnlyResponse extends BaseResponse {\n  id: string;\n  readOnly: boolean;\n  hidePasswords: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.readOnly = this.getResponseProperty(\"ReadOnly\");\n    this.hidePasswords = this.getResponseProperty(\"HidePasswords\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\nimport { SelectionReadOnlyResponse } from \"./selectionReadOnlyResponse\";\n\nexport class CollectionResponse extends BaseResponse {\n  id: string;\n  organizationId: string;\n  name: string;\n  externalId: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.externalId = this.getResponseProperty(\"ExternalId\");\n  }\n}\n\nexport class CollectionDetailsResponse extends CollectionResponse {\n  readOnly: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.readOnly = this.getResponseProperty(\"ReadOnly\") || false;\n  }\n}\n\nexport class CollectionGroupDetailsResponse extends CollectionResponse {\n  groups: SelectionReadOnlyResponse[] = [];\n\n  constructor(response: any) {\n    super(response);\n    const groups = this.getResponseProperty(\"Groups\");\n    if (groups != null) {\n      this.groups = groups.map((g: any) => new SelectionReadOnlyResponse(g));\n    }\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class DeviceVerificationResponse extends BaseResponse {\n  isDeviceVerificationSectionEnabled: boolean;\n  unknownDeviceVerificationEnabled: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.isDeviceVerificationSectionEnabled = this.getResponseProperty(\n      \"IsDeviceVerificationSectionEnabled\"\n    );\n    this.unknownDeviceVerificationEnabled = this.getResponseProperty(\n      \"UnknownDeviceVerificationEnabled\"\n    );\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class GlobalDomainResponse extends BaseResponse {\n  type: number;\n  domains: string[];\n  excluded: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.type = this.getResponseProperty(\"Type\");\n    this.domains = this.getResponseProperty(\"Domains\");\n    this.excluded = this.getResponseProperty(\"Excluded\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\nimport { GlobalDomainResponse } from \"./globalDomainResponse\";\n\nexport class DomainsResponse extends BaseResponse {\n  equivalentDomains: string[][];\n  globalEquivalentDomains: GlobalDomainResponse[] = [];\n\n  constructor(response: any) {\n    super(response);\n    this.equivalentDomains = this.getResponseProperty(\"EquivalentDomains\");\n    const globalEquivalentDomains = this.getResponseProperty(\"GlobalEquivalentDomains\");\n    if (globalEquivalentDomains != null) {\n      this.globalEquivalentDomains = globalEquivalentDomains.map(\n        (d: any) => new GlobalDomainResponse(d)\n      );\n    } else {\n      this.globalEquivalentDomains = [];\n    }\n  }\n}\n","import { EmergencyAccessStatusType } from \"../../enums/emergencyAccessStatusType\";\nimport { EmergencyAccessType } from \"../../enums/emergencyAccessType\";\nimport { KdfType } from \"../../enums/kdfType\";\n\nimport { BaseResponse } from \"./baseResponse\";\nimport { CipherResponse } from \"./cipherResponse\";\n\nexport class EmergencyAccessGranteeDetailsResponse extends BaseResponse {\n  id: string;\n  granteeId: string;\n  name: string;\n  email: string;\n  type: EmergencyAccessType;\n  status: EmergencyAccessStatusType;\n  waitTimeDays: number;\n  creationDate: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.granteeId = this.getResponseProperty(\"GranteeId\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.email = this.getResponseProperty(\"Email\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.status = this.getResponseProperty(\"Status\");\n    this.waitTimeDays = this.getResponseProperty(\"WaitTimeDays\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n  }\n}\n\nexport class EmergencyAccessGrantorDetailsResponse extends BaseResponse {\n  id: string;\n  grantorId: string;\n  name: string;\n  email: string;\n  type: EmergencyAccessType;\n  status: EmergencyAccessStatusType;\n  waitTimeDays: number;\n  creationDate: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.grantorId = this.getResponseProperty(\"GrantorId\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.email = this.getResponseProperty(\"Email\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.status = this.getResponseProperty(\"Status\");\n    this.waitTimeDays = this.getResponseProperty(\"WaitTimeDays\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n  }\n}\n\nexport class EmergencyAccessTakeoverResponse extends BaseResponse {\n  keyEncrypted: string;\n  kdf: KdfType;\n  kdfIterations: number;\n\n  constructor(response: any) {\n    super(response);\n\n    this.keyEncrypted = this.getResponseProperty(\"KeyEncrypted\");\n    this.kdf = this.getResponseProperty(\"Kdf\");\n    this.kdfIterations = this.getResponseProperty(\"KdfIterations\");\n  }\n}\n\nexport class EmergencyAccessViewResponse extends BaseResponse {\n  keyEncrypted: string;\n  ciphers: CipherResponse[] = [];\n\n  constructor(response: any) {\n    super(response);\n\n    this.keyEncrypted = this.getResponseProperty(\"KeyEncrypted\");\n\n    const ciphers = this.getResponseProperty(\"Ciphers\");\n    if (ciphers != null) {\n      this.ciphers = ciphers.map((c: any) => new CipherResponse(c));\n    }\n  }\n}\n","import { Utils } from \"../../misc/utils\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class ErrorResponse extends BaseResponse {\n  message: string;\n  validationErrors: { [key: string]: string[] };\n  statusCode: number;\n  captchaRequired: boolean;\n  captchaSiteKey: string;\n\n  constructor(response: any, status: number, identityResponse?: boolean) {\n    super(response);\n    let errorModel = null;\n    if (response != null) {\n      const responseErrorModel = this.getResponseProperty(\"ErrorModel\");\n      if (responseErrorModel && identityResponse) {\n        errorModel = responseErrorModel;\n      } else {\n        errorModel = response;\n      }\n    }\n\n    if (status === 429) {\n      this.message = \"Rate limit exceeded. Try again later.\";\n    } else if (errorModel) {\n      this.message = this.getResponseProperty(\"Message\", errorModel);\n      this.validationErrors = this.getResponseProperty(\"ValidationErrors\", errorModel);\n      this.captchaSiteKey = this.validationErrors?.HCaptcha_SiteKey?.[0];\n      this.captchaRequired = !Utils.isNullOrWhitespace(this.captchaSiteKey);\n    }\n    this.statusCode = status;\n  }\n\n  getSingleMessage(): string {\n    if (this.validationErrors == null) {\n      return this.message;\n    }\n    for (const key in this.validationErrors) {\n      // eslint-disable-next-line\n      if (!this.validationErrors.hasOwnProperty(key)) {\n        continue;\n      }\n      if (this.validationErrors[key].length) {\n        return this.validationErrors[key][0];\n      }\n    }\n    return this.message;\n  }\n\n  getAllMessages(): string[] {\n    const messages: string[] = [];\n    if (this.validationErrors == null) {\n      return messages;\n    }\n    for (const key in this.validationErrors) {\n      // eslint-disable-next-line\n      if (!this.validationErrors.hasOwnProperty(key)) {\n        continue;\n      }\n      this.validationErrors[key].forEach((item: string) => {\n        let prefix = \"\";\n        if (key.indexOf(\"[\") > -1 && key.indexOf(\"]\") > -1) {\n          const lastSep = key.lastIndexOf(\".\");\n          prefix = key.substr(0, lastSep > -1 ? lastSep : key.length) + \": \";\n        }\n        messages.push(prefix + item);\n      });\n    }\n    return messages;\n  }\n}\n","import { DeviceType } from \"../../enums/deviceType\";\nimport { EventType } from \"../../enums/eventType\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class EventResponse extends BaseResponse {\n  type: EventType;\n  userId: string;\n  organizationId: string;\n  providerId: string;\n  cipherId: string;\n  collectionId: string;\n  groupId: string;\n  policyId: string;\n  organizationUserId: string;\n  providerUserId: string;\n  providerOrganizationId: string;\n  actingUserId: string;\n  date: string;\n  deviceType: DeviceType;\n  ipAddress: string;\n  installationId: string;\n\n  constructor(response: any) {\n    super(response);\n    this.type = this.getResponseProperty(\"Type\");\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.providerId = this.getResponseProperty(\"ProviderId\");\n    this.cipherId = this.getResponseProperty(\"CipherId\");\n    this.collectionId = this.getResponseProperty(\"CollectionId\");\n    this.groupId = this.getResponseProperty(\"GroupId\");\n    this.policyId = this.getResponseProperty(\"PolicyId\");\n    this.organizationUserId = this.getResponseProperty(\"OrganizationUserId\");\n    this.providerUserId = this.getResponseProperty(\"ProviderUserId\");\n    this.providerOrganizationId = this.getResponseProperty(\"ProviderOrganizationId\");\n    this.actingUserId = this.getResponseProperty(\"ActingUserId\");\n    this.date = this.getResponseProperty(\"Date\");\n    this.deviceType = this.getResponseProperty(\"DeviceType\");\n    this.ipAddress = this.getResponseProperty(\"IpAddress\");\n    this.installationId = this.getResponseProperty(\"InstallationId\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\nimport { SelectionReadOnlyResponse } from \"./selectionReadOnlyResponse\";\n\nexport class GroupResponse extends BaseResponse {\n  id: string;\n  organizationId: string;\n  name: string;\n  accessAll: boolean;\n  externalId: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.accessAll = this.getResponseProperty(\"AccessAll\");\n    this.externalId = this.getResponseProperty(\"ExternalId\");\n  }\n}\n\nexport class GroupDetailsResponse extends GroupResponse {\n  collections: SelectionReadOnlyResponse[] = [];\n\n  constructor(response: any) {\n    super(response);\n    const collections = this.getResponseProperty(\"Collections\");\n    if (collections != null) {\n      this.collections = collections.map((c: any) => new SelectionReadOnlyResponse(c));\n    }\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class IdentityCaptchaResponse extends BaseResponse {\n  siteKey: string;\n\n  constructor(response: any) {\n    super(response);\n    this.siteKey = this.getResponseProperty(\"HCaptcha_SiteKey\");\n  }\n}\n","import { KdfType } from \"../../enums/kdfType\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class IdentityTokenResponse extends BaseResponse {\n  accessToken: string;\n  expiresIn: number;\n  refreshToken: string;\n  tokenType: string;\n\n  resetMasterPassword: boolean;\n  privateKey: string;\n  key: string;\n  twoFactorToken: string;\n  kdf: KdfType;\n  kdfIterations: number;\n  forcePasswordReset: boolean;\n  apiUseKeyConnector: boolean;\n  keyConnectorUrl: string;\n\n  constructor(response: any) {\n    super(response);\n    this.accessToken = response.access_token;\n    this.expiresIn = response.expires_in;\n    this.refreshToken = response.refresh_token;\n    this.tokenType = response.token_type;\n\n    this.resetMasterPassword = this.getResponseProperty(\"ResetMasterPassword\");\n    this.privateKey = this.getResponseProperty(\"PrivateKey\");\n    this.key = this.getResponseProperty(\"Key\");\n    this.twoFactorToken = this.getResponseProperty(\"TwoFactorToken\");\n    this.kdf = this.getResponseProperty(\"Kdf\");\n    this.kdfIterations = this.getResponseProperty(\"KdfIterations\");\n    this.forcePasswordReset = this.getResponseProperty(\"ForcePasswordReset\");\n    this.apiUseKeyConnector = this.getResponseProperty(\"ApiUseKeyConnector\");\n    this.keyConnectorUrl = this.getResponseProperty(\"KeyConnectorUrl\");\n  }\n}\n","import { TwoFactorProviderType } from \"../../enums/twoFactorProviderType\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class IdentityTwoFactorResponse extends BaseResponse {\n  twoFactorProviders: TwoFactorProviderType[];\n  twoFactorProviders2 = new Map<TwoFactorProviderType, { [key: string]: string }>();\n  captchaToken: string;\n\n  constructor(response: any) {\n    super(response);\n    this.captchaToken = this.getResponseProperty(\"CaptchaBypassToken\");\n    this.twoFactorProviders = this.getResponseProperty(\"TwoFactorProviders\");\n    const twoFactorProviders2 = this.getResponseProperty(\"TwoFactorProviders2\");\n    if (twoFactorProviders2 != null) {\n      for (const prop in twoFactorProviders2) {\n        // eslint-disable-next-line\n        if (twoFactorProviders2.hasOwnProperty(prop)) {\n          this.twoFactorProviders2.set(parseInt(prop, null), twoFactorProviders2[prop]);\n        }\n      }\n    }\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class KeyConnectorUserKeyResponse extends BaseResponse {\n  key: string;\n\n  constructor(response: any) {\n    super(response);\n    this.key = this.getResponseProperty(\"Key\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class ListResponse<T> extends BaseResponse {\n  data: T[];\n  continuationToken: string;\n\n  constructor(response: any, t: new (dataResponse: any) => T) {\n    super(response);\n    const data = this.getResponseProperty(\"Data\");\n    this.data = data == null ? [] : data.map((dr: any) => new t(dr));\n    this.continuationToken = this.getResponseProperty(\"ContinuationToken\");\n  }\n}\n","export enum SsoType {\n  None = 0,\n  OpenIdConnect = 1,\n  Saml2 = 2,\n}\n\nexport enum OpenIdConnectRedirectBehavior {\n  RedirectGet = 0,\n  FormPost = 1,\n}\n\nexport enum Saml2BindingType {\n  HttpRedirect = 1,\n  HttpPost = 2,\n}\n\nexport enum Saml2NameIdFormat {\n  NotConfigured = 0,\n  Unspecified = 1,\n  EmailAddress = 2,\n  X509SubjectName = 3,\n  WindowsDomainQualifiedName = 4,\n  KerberosPrincipalName = 5,\n  EntityIdentifier = 6,\n  Persistent = 7,\n  Transient = 8,\n}\n\nexport enum Saml2SigningBehavior {\n  IfIdpWantAuthnRequestsSigned = 0,\n  Always = 1,\n  Never = 3,\n}\n","import {\n  OpenIdConnectRedirectBehavior,\n  Saml2BindingType,\n  Saml2NameIdFormat,\n  Saml2SigningBehavior,\n  SsoType,\n} from \"../../enums/ssoEnums\";\nimport { BaseResponse } from \"../response/baseResponse\";\nimport { SsoConfigView } from \"../view/ssoConfigView\";\n\nexport class SsoConfigApi extends BaseResponse {\n  static fromView(view: SsoConfigView, api = new SsoConfigApi()) {\n    api.configType = view.configType;\n\n    api.keyConnectorEnabled = view.keyConnectorEnabled;\n    api.keyConnectorUrl = view.keyConnectorUrl;\n\n    if (api.configType === SsoType.OpenIdConnect) {\n      api.authority = view.openId.authority;\n      api.clientId = view.openId.clientId;\n      api.clientSecret = view.openId.clientSecret;\n      api.metadataAddress = view.openId.metadataAddress;\n      api.redirectBehavior = view.openId.redirectBehavior;\n      api.getClaimsFromUserInfoEndpoint = view.openId.getClaimsFromUserInfoEndpoint;\n      api.additionalScopes = view.openId.additionalScopes;\n      api.additionalUserIdClaimTypes = view.openId.additionalUserIdClaimTypes;\n      api.additionalEmailClaimTypes = view.openId.additionalEmailClaimTypes;\n      api.additionalNameClaimTypes = view.openId.additionalNameClaimTypes;\n      api.acrValues = view.openId.acrValues;\n      api.expectedReturnAcrValue = view.openId.expectedReturnAcrValue;\n    } else if (api.configType === SsoType.Saml2) {\n      api.spNameIdFormat = view.saml.spNameIdFormat;\n      api.spOutboundSigningAlgorithm = view.saml.spOutboundSigningAlgorithm;\n      api.spSigningBehavior = view.saml.spSigningBehavior;\n      api.spMinIncomingSigningAlgorithm = view.saml.spMinIncomingSigningAlgorithm;\n      api.spWantAssertionsSigned = view.saml.spWantAssertionsSigned;\n      api.spValidateCertificates = view.saml.spValidateCertificates;\n\n      api.idpEntityId = view.saml.idpEntityId;\n      api.idpBindingType = view.saml.idpBindingType;\n      api.idpSingleSignOnServiceUrl = view.saml.idpSingleSignOnServiceUrl;\n      api.idpSingleLogoutServiceUrl = view.saml.idpSingleLogoutServiceUrl;\n      api.idpX509PublicCert = view.saml.idpX509PublicCert;\n      api.idpOutboundSigningAlgorithm = view.saml.idpOutboundSigningAlgorithm;\n      api.idpAllowUnsolicitedAuthnResponse = view.saml.idpAllowUnsolicitedAuthnResponse;\n      api.idpWantAuthnRequestsSigned = view.saml.idpWantAuthnRequestsSigned;\n\n      // Value is inverted in the api model (disable instead of allow)\n      api.idpDisableOutboundLogoutRequests = !view.saml.idpAllowOutboundLogoutRequests;\n    }\n\n    return api;\n  }\n  configType: SsoType;\n\n  keyConnectorEnabled: boolean;\n  keyConnectorUrl: string;\n\n  // OpenId\n  authority: string;\n  clientId: string;\n  clientSecret: string;\n  metadataAddress: string;\n  redirectBehavior: OpenIdConnectRedirectBehavior;\n  getClaimsFromUserInfoEndpoint: boolean;\n  additionalScopes: string;\n  additionalUserIdClaimTypes: string;\n  additionalEmailClaimTypes: string;\n  additionalNameClaimTypes: string;\n  acrValues: string;\n  expectedReturnAcrValue: string;\n\n  // SAML\n  spNameIdFormat: Saml2NameIdFormat;\n  spOutboundSigningAlgorithm: string;\n  spSigningBehavior: Saml2SigningBehavior;\n  spMinIncomingSigningAlgorithm: boolean;\n  spWantAssertionsSigned: boolean;\n  spValidateCertificates: boolean;\n\n  idpEntityId: string;\n  idpBindingType: Saml2BindingType;\n  idpSingleSignOnServiceUrl: string;\n  idpSingleLogoutServiceUrl: string;\n  idpX509PublicCert: string;\n  idpOutboundSigningAlgorithm: string;\n  idpAllowUnsolicitedAuthnResponse: boolean;\n  idpDisableOutboundLogoutRequests: boolean;\n  idpWantAuthnRequestsSigned: boolean;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n\n    this.configType = this.getResponseProperty(\"ConfigType\");\n\n    this.keyConnectorEnabled = this.getResponseProperty(\"KeyConnectorEnabled\");\n    this.keyConnectorUrl = this.getResponseProperty(\"KeyConnectorUrl\");\n\n    this.authority = this.getResponseProperty(\"Authority\");\n    this.clientId = this.getResponseProperty(\"ClientId\");\n    this.clientSecret = this.getResponseProperty(\"ClientSecret\");\n    this.metadataAddress = this.getResponseProperty(\"MetadataAddress\");\n    this.redirectBehavior = this.getResponseProperty(\"RedirectBehavior\");\n    this.getClaimsFromUserInfoEndpoint = this.getResponseProperty(\"GetClaimsFromUserInfoEndpoint\");\n    this.additionalScopes = this.getResponseProperty(\"AdditionalScopes\");\n    this.additionalUserIdClaimTypes = this.getResponseProperty(\"AdditionalUserIdClaimTypes\");\n    this.additionalEmailClaimTypes = this.getResponseProperty(\"AdditionalEmailClaimTypes\");\n    this.additionalNameClaimTypes = this.getResponseProperty(\"AdditionalNameClaimTypes\");\n    this.acrValues = this.getResponseProperty(\"AcrValues\");\n    this.expectedReturnAcrValue = this.getResponseProperty(\"ExpectedReturnAcrValue\");\n\n    this.spNameIdFormat = this.getResponseProperty(\"SpNameIdFormat\");\n    this.spOutboundSigningAlgorithm = this.getResponseProperty(\"SpOutboundSigningAlgorithm\");\n    this.spSigningBehavior = this.getResponseProperty(\"SpSigningBehavior\");\n    this.spMinIncomingSigningAlgorithm = this.getResponseProperty(\"SpMinIncomingSigningAlgorithm\");\n    this.spWantAssertionsSigned = this.getResponseProperty(\"SpWantAssertionsSigned\");\n    this.spValidateCertificates = this.getResponseProperty(\"SpValidateCertificates\");\n\n    this.idpEntityId = this.getResponseProperty(\"IdpEntityId\");\n    this.idpBindingType = this.getResponseProperty(\"IdpBindingType\");\n    this.idpSingleSignOnServiceUrl = this.getResponseProperty(\"IdpSingleSignOnServiceUrl\");\n    this.idpSingleLogoutServiceUrl = this.getResponseProperty(\"IdpSingleLogoutServiceUrl\");\n    this.idpX509PublicCert = this.getResponseProperty(\"IdpX509PublicCert\");\n    this.idpOutboundSigningAlgorithm = this.getResponseProperty(\"IdpOutboundSigningAlgorithm\");\n    this.idpAllowUnsolicitedAuthnResponse = this.getResponseProperty(\n      \"IdpAllowUnsolicitedAuthnResponse\"\n    );\n    this.idpDisableOutboundLogoutRequests = this.getResponseProperty(\n      \"IdpDisableOutboundLogoutRequests\"\n    );\n    this.idpWantAuthnRequestsSigned = this.getResponseProperty(\"IdpWantAuthnRequestsSigned\");\n  }\n}\n","import { SsoConfigApi } from \"../../api/ssoConfigApi\";\nimport { BaseResponse } from \"../baseResponse\";\n\nexport class OrganizationSsoResponse extends BaseResponse {\n  enabled: boolean;\n  data: SsoConfigApi;\n  urls: SsoUrls;\n\n  constructor(response: any) {\n    super(response);\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    this.data =\n      this.getResponseProperty(\"Data\") != null\n        ? new SsoConfigApi(this.getResponseProperty(\"Data\"))\n        : null;\n    this.urls = new SsoUrls(this.getResponseProperty(\"Urls\"));\n  }\n}\n\nclass SsoUrls extends BaseResponse {\n  callbackPath: string;\n  signedOutCallbackPath: string;\n  spEntityId: string;\n  spMetadataUrl: string;\n  spAcsUrl: string;\n\n  constructor(response: any) {\n    super(response);\n    this.callbackPath = this.getResponseProperty(\"CallbackPath\");\n    this.signedOutCallbackPath = this.getResponseProperty(\"SignedOutCallbackPath\");\n    this.spEntityId = this.getResponseProperty(\"SpEntityId\");\n    this.spMetadataUrl = this.getResponseProperty(\"SpMetadataUrl\");\n    this.spAcsUrl = this.getResponseProperty(\"SpAcsUrl\");\n  }\n}\n","import { OrganizationApiKeyType } from \"../../enums/organizationApiKeyType\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class OrganizationApiKeyInformationResponse extends BaseResponse {\n  keyType: OrganizationApiKeyType;\n\n  constructor(response: any) {\n    super(response);\n    this.keyType = this.getResponseProperty(\"KeyType\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class OrganizationAutoEnrollStatusResponse extends BaseResponse {\n  id: string;\n  resetPasswordEnabled: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.resetPasswordEnabled = this.getResponseProperty(\"ResetPasswordEnabled\");\n  }\n}\n","import { OrganizationConnectionType } from \"../../enums/organizationConnectionType\";\nimport { BillingSyncConfigApi } from \"../api/billingSyncConfigApi\";\nimport { ScimConfigApi } from \"../api/scimConfigApi\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\n/**API response config types for OrganizationConnectionResponse */\nexport type OrganizationConnectionConfigApis = BillingSyncConfigApi | ScimConfigApi;\n\nexport class OrganizationConnectionResponse<\n  TConfig extends OrganizationConnectionConfigApis\n> extends BaseResponse {\n  id: string;\n  type: OrganizationConnectionType;\n  organizationId: string;\n  enabled: boolean;\n  config: TConfig;\n\n  constructor(response: any, configType: { new (response: any): TConfig }) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    const rawConfig = this.getResponseProperty(\"Config\");\n    this.config = rawConfig == null ? null : new configType(rawConfig);\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\nimport { CipherResponse } from \"./cipherResponse\";\nimport { CollectionResponse } from \"./collectionResponse\";\nimport { ListResponse } from \"./listResponse\";\n\nexport class OrganizationExportResponse extends BaseResponse {\n  collections: ListResponse<CollectionResponse>;\n  ciphers: ListResponse<CipherResponse>;\n\n  constructor(response: any) {\n    super(response);\n    this.collections = this.getResponseProperty(\"Collections\");\n    this.ciphers = this.getResponseProperty(\"Ciphers\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class KeysResponse extends BaseResponse {\n  privateKey: string;\n  publicKey: string;\n\n  constructor(response: any) {\n    super(response);\n    this.privateKey = this.getResponseProperty(\"PrivateKey\");\n    this.publicKey = this.getResponseProperty(\"PublicKey\");\n  }\n}\n","import { KeysResponse } from \"./keysResponse\";\n\nexport class OrganizationKeysResponse extends KeysResponse {\n  constructor(response: any) {\n    super(response);\n  }\n}\n","import { PlanType } from \"../../enums/planType\";\nimport { ProductType } from \"../../enums/productType\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class PlanResponse extends BaseResponse {\n  type: PlanType;\n  product: ProductType;\n  name: string;\n  isAnnual: boolean;\n  nameLocalizationKey: string;\n  descriptionLocalizationKey: string;\n  canBeUsedByBusiness: boolean;\n  baseSeats: number;\n  baseStorageGb: number;\n  maxCollections: number;\n  maxUsers: number;\n\n  hasAdditionalSeatsOption: boolean;\n  maxAdditionalSeats: number;\n  hasAdditionalStorageOption: boolean;\n  maxAdditionalStorage: number;\n  hasPremiumAccessOption: boolean;\n  trialPeriodDays: number;\n\n  hasSelfHost: boolean;\n  hasPolicies: boolean;\n  hasGroups: boolean;\n  hasDirectory: boolean;\n  hasEvents: boolean;\n  hasTotp: boolean;\n  has2fa: boolean;\n  hasApi: boolean;\n  hasSso: boolean;\n  hasResetPassword: boolean;\n  usersGetPremium: boolean;\n\n  upgradeSortOrder: number;\n  displaySortOrder: number;\n  legacyYear: number;\n  disabled: boolean;\n\n  stripePlanId: string;\n  stripeSeatPlanId: string;\n  stripeStoragePlanId: string;\n  stripePremiumAccessPlanId: string;\n  basePrice: number;\n  seatPrice: number;\n  additionalStoragePricePerGb: number;\n  premiumAccessOptionPrice: number;\n\n  constructor(response: any) {\n    super(response);\n    this.type = this.getResponseProperty(\"Type\");\n    this.product = this.getResponseProperty(\"Product\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.isAnnual = this.getResponseProperty(\"IsAnnual\");\n    this.nameLocalizationKey = this.getResponseProperty(\"NameLocalizationKey\");\n    this.descriptionLocalizationKey = this.getResponseProperty(\"DescriptionLocalizationKey\");\n    this.canBeUsedByBusiness = this.getResponseProperty(\"CanBeUsedByBusiness\");\n    this.baseSeats = this.getResponseProperty(\"BaseSeats\");\n    this.baseStorageGb = this.getResponseProperty(\"BaseStorageGb\");\n    this.maxCollections = this.getResponseProperty(\"MaxCollections\");\n    this.maxUsers = this.getResponseProperty(\"MaxUsers\");\n    this.hasAdditionalSeatsOption = this.getResponseProperty(\"HasAdditionalSeatsOption\");\n    this.maxAdditionalSeats = this.getResponseProperty(\"MaxAdditionalSeats\");\n    this.hasAdditionalStorageOption = this.getResponseProperty(\"HasAdditionalStorageOption\");\n    this.maxAdditionalStorage = this.getResponseProperty(\"MaxAdditionalStorage\");\n    this.hasPremiumAccessOption = this.getResponseProperty(\"HasPremiumAccessOption\");\n    this.trialPeriodDays = this.getResponseProperty(\"TrialPeriodDays\");\n    this.hasSelfHost = this.getResponseProperty(\"HasSelfHost\");\n    this.hasPolicies = this.getResponseProperty(\"HasPolicies\");\n    this.hasGroups = this.getResponseProperty(\"HasGroups\");\n    this.hasDirectory = this.getResponseProperty(\"HasDirectory\");\n    this.hasEvents = this.getResponseProperty(\"HasEvents\");\n    this.hasTotp = this.getResponseProperty(\"HasTotp\");\n    this.has2fa = this.getResponseProperty(\"Has2fa\");\n    this.hasApi = this.getResponseProperty(\"HasApi\");\n    this.hasSso = this.getResponseProperty(\"HasSso\");\n    this.hasResetPassword = this.getResponseProperty(\"HasResetPassword\");\n    this.usersGetPremium = this.getResponseProperty(\"UsersGetPremium\");\n    this.upgradeSortOrder = this.getResponseProperty(\"UpgradeSortOrder\");\n    this.displaySortOrder = this.getResponseProperty(\"SortOrder\");\n    this.legacyYear = this.getResponseProperty(\"LegacyYear\");\n    this.disabled = this.getResponseProperty(\"Disabled\");\n    this.stripePlanId = this.getResponseProperty(\"StripePlanId\");\n    this.stripeSeatPlanId = this.getResponseProperty(\"StripeSeatPlanId\");\n    this.stripeStoragePlanId = this.getResponseProperty(\"StripeStoragePlanId\");\n    this.stripePremiumAccessPlanId = this.getResponseProperty(\"StripePremiumAccessPlanId\");\n    this.basePrice = this.getResponseProperty(\"BasePrice\");\n    this.seatPrice = this.getResponseProperty(\"SeatPrice\");\n    this.additionalStoragePricePerGb = this.getResponseProperty(\"AdditionalStoragePricePerGb\");\n    this.premiumAccessOptionPrice = this.getResponseProperty(\"PremiumAccessOptionPrice\");\n  }\n}\n","import { PlanType } from \"../../enums/planType\";\n\nimport { BaseResponse } from \"./baseResponse\";\nimport { PlanResponse } from \"./planResponse\";\n\nexport class OrganizationResponse extends BaseResponse {\n  id: string;\n  identifier: string;\n  name: string;\n  businessName: string;\n  businessAddress1: string;\n  businessAddress2: string;\n  businessAddress3: string;\n  businessCountry: string;\n  businessTaxNumber: string;\n  billingEmail: string;\n  plan: PlanResponse;\n  planType: PlanType;\n  seats: number;\n  maxAutoscaleSeats: number;\n  maxCollections: number;\n  maxStorageGb: number;\n  useGroups: boolean;\n  useDirectory: boolean;\n  useEvents: boolean;\n  useTotp: boolean;\n  use2fa: boolean;\n  useApi: boolean;\n  useResetPassword: boolean;\n  hasPublicAndPrivateKeys: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.identifier = this.getResponseProperty(\"Identifier\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.businessName = this.getResponseProperty(\"BusinessName\");\n    this.businessAddress1 = this.getResponseProperty(\"BusinessAddress1\");\n    this.businessAddress2 = this.getResponseProperty(\"BusinessAddress2\");\n    this.businessAddress3 = this.getResponseProperty(\"BusinessAddress3\");\n    this.businessCountry = this.getResponseProperty(\"BusinessCountry\");\n    this.businessTaxNumber = this.getResponseProperty(\"BusinessTaxNumber\");\n    this.billingEmail = this.getResponseProperty(\"BillingEmail\");\n    const plan = this.getResponseProperty(\"Plan\");\n    this.plan = plan == null ? null : new PlanResponse(plan);\n    this.planType = this.getResponseProperty(\"PlanType\");\n    this.seats = this.getResponseProperty(\"Seats\");\n    this.maxAutoscaleSeats = this.getResponseProperty(\"MaxAutoscaleSeats\");\n    this.maxCollections = this.getResponseProperty(\"MaxCollections\");\n    this.maxStorageGb = this.getResponseProperty(\"MaxStorageGb\");\n    this.useGroups = this.getResponseProperty(\"UseGroups\");\n    this.useDirectory = this.getResponseProperty(\"UseDirectory\");\n    this.useEvents = this.getResponseProperty(\"UseEvents\");\n    this.useTotp = this.getResponseProperty(\"UseTotp\");\n    this.use2fa = this.getResponseProperty(\"Use2fa\");\n    this.useApi = this.getResponseProperty(\"UseApi\");\n    this.useResetPassword = this.getResponseProperty(\"UseResetPassword\");\n    this.hasPublicAndPrivateKeys = this.getResponseProperty(\"HasPublicAndPrivateKeys\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class OrganizationSponsorshipSyncStatusResponse extends BaseResponse {\n  lastSyncDate?: Date;\n\n  constructor(response: any) {\n    super(response);\n    const lastSyncDate = this.getResponseProperty(\"LastSyncDate\");\n    if (lastSyncDate) {\n      this.lastSyncDate = new Date(lastSyncDate);\n    }\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class SubscriptionResponse extends BaseResponse {\n  storageName: string;\n  storageGb: number;\n  maxStorageGb: number;\n  subscription: BillingSubscriptionResponse;\n  upcomingInvoice: BillingSubscriptionUpcomingInvoiceResponse;\n  license: any;\n  expiration: string;\n  usingInAppPurchase: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.storageName = this.getResponseProperty(\"StorageName\");\n    this.storageGb = this.getResponseProperty(\"StorageGb\");\n    this.maxStorageGb = this.getResponseProperty(\"MaxStorageGb\");\n    this.license = this.getResponseProperty(\"License\");\n    this.expiration = this.getResponseProperty(\"Expiration\");\n    this.usingInAppPurchase = this.getResponseProperty(\"UsingInAppPurchase\");\n    const subscription = this.getResponseProperty(\"Subscription\");\n    const upcomingInvoice = this.getResponseProperty(\"UpcomingInvoice\");\n    this.subscription = subscription == null ? null : new BillingSubscriptionResponse(subscription);\n    this.upcomingInvoice =\n      upcomingInvoice == null\n        ? null\n        : new BillingSubscriptionUpcomingInvoiceResponse(upcomingInvoice);\n  }\n}\n\nexport class BillingSubscriptionResponse extends BaseResponse {\n  trialStartDate: string;\n  trialEndDate: string;\n  periodStartDate: string;\n  periodEndDate: string;\n  cancelledDate: string;\n  cancelAtEndDate: boolean;\n  status: string;\n  cancelled: boolean;\n  items: BillingSubscriptionItemResponse[] = [];\n\n  constructor(response: any) {\n    super(response);\n    this.trialEndDate = this.getResponseProperty(\"TrialStartDate\");\n    this.trialEndDate = this.getResponseProperty(\"TrialEndDate\");\n    this.periodStartDate = this.getResponseProperty(\"PeriodStartDate\");\n    this.periodEndDate = this.getResponseProperty(\"PeriodEndDate\");\n    this.cancelledDate = this.getResponseProperty(\"CancelledDate\");\n    this.cancelAtEndDate = this.getResponseProperty(\"CancelAtEndDate\");\n    this.status = this.getResponseProperty(\"Status\");\n    this.cancelled = this.getResponseProperty(\"Cancelled\");\n    const items = this.getResponseProperty(\"Items\");\n    if (items != null) {\n      this.items = items.map((i: any) => new BillingSubscriptionItemResponse(i));\n    }\n  }\n}\n\nexport class BillingSubscriptionItemResponse extends BaseResponse {\n  name: string;\n  amount: number;\n  quantity: number;\n  interval: string;\n  sponsoredSubscriptionItem: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.name = this.getResponseProperty(\"Name\");\n    this.amount = this.getResponseProperty(\"Amount\");\n    this.quantity = this.getResponseProperty(\"Quantity\");\n    this.interval = this.getResponseProperty(\"Interval\");\n    this.sponsoredSubscriptionItem = this.getResponseProperty(\"SponsoredSubscriptionItem\");\n  }\n}\n\nexport class BillingSubscriptionUpcomingInvoiceResponse extends BaseResponse {\n  date: string;\n  amount: number;\n\n  constructor(response: any) {\n    super(response);\n    this.date = this.getResponseProperty(\"Date\");\n    this.amount = this.getResponseProperty(\"Amount\");\n  }\n}\n","import { OrganizationResponse } from \"./organizationResponse\";\nimport {\n  BillingSubscriptionResponse,\n  BillingSubscriptionUpcomingInvoiceResponse,\n} from \"./subscriptionResponse\";\n\nexport class OrganizationSubscriptionResponse extends OrganizationResponse {\n  storageName: string;\n  storageGb: number;\n  subscription: BillingSubscriptionResponse;\n  upcomingInvoice: BillingSubscriptionUpcomingInvoiceResponse;\n  expiration: string;\n\n  constructor(response: any) {\n    super(response);\n    this.storageName = this.getResponseProperty(\"StorageName\");\n    this.storageGb = this.getResponseProperty(\"StorageGb\");\n    const subscription = this.getResponseProperty(\"Subscription\");\n    this.subscription = subscription == null ? null : new BillingSubscriptionResponse(subscription);\n    const upcomingInvoice = this.getResponseProperty(\"UpcomingInvoice\");\n    this.upcomingInvoice =\n      upcomingInvoice == null\n        ? null\n        : new BillingSubscriptionUpcomingInvoiceResponse(upcomingInvoice);\n    this.expiration = this.getResponseProperty(\"Expiration\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class OrganizationUserBulkPublicKeyResponse extends BaseResponse {\n  id: string;\n  userId: string;\n  key: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.key = this.getResponseProperty(\"Key\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class OrganizationUserBulkResponse extends BaseResponse {\n  id: string;\n  error: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.error = this.getResponseProperty(\"Error\");\n  }\n}\n","import { BaseResponse } from \"../response/baseResponse\";\n\nexport class PermissionsApi extends BaseResponse {\n  accessEventLogs: boolean;\n  accessImportExport: boolean;\n  accessReports: boolean;\n  /**\n   * @deprecated Sep 29 2021: This permission has been split out to `createNewCollections`, `editAnyCollection`, and\n   * `deleteAnyCollection`. It exists here for backwards compatibility with Server versions <= 1.43.0\n   */\n  manageAllCollections: boolean;\n  createNewCollections: boolean;\n  editAnyCollection: boolean;\n  deleteAnyCollection: boolean;\n  /**\n   * @deprecated Sep 29 2021: This permission has been split out to `editAssignedCollections` and\n   * `deleteAssignedCollections`. It exists here for backwards compatibility with Server versions <= 1.43.0\n   */\n  manageAssignedCollections: boolean;\n  editAssignedCollections: boolean;\n  deleteAssignedCollections: boolean;\n  manageCiphers: boolean;\n  manageGroups: boolean;\n  manageSso: boolean;\n  managePolicies: boolean;\n  manageUsers: boolean;\n  manageResetPassword: boolean;\n  manageScim: boolean;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return this;\n    }\n    this.accessEventLogs = this.getResponseProperty(\"AccessEventLogs\");\n    this.accessImportExport = this.getResponseProperty(\"AccessImportExport\");\n    this.accessReports = this.getResponseProperty(\"AccessReports\");\n\n    // For backwards compatibility with Server <= 1.43.0\n    this.manageAllCollections = this.getResponseProperty(\"ManageAllCollections\");\n    this.manageAssignedCollections = this.getResponseProperty(\"ManageAssignedCollections\");\n\n    this.createNewCollections = this.getResponseProperty(\"CreateNewCollections\");\n    this.editAnyCollection = this.getResponseProperty(\"EditAnyCollection\");\n    this.deleteAnyCollection = this.getResponseProperty(\"DeleteAnyCollection\");\n    this.editAssignedCollections = this.getResponseProperty(\"EditAssignedCollections\");\n    this.deleteAssignedCollections = this.getResponseProperty(\"DeleteAssignedCollections\");\n\n    this.manageCiphers = this.getResponseProperty(\"ManageCiphers\");\n    this.manageGroups = this.getResponseProperty(\"ManageGroups\");\n    this.manageSso = this.getResponseProperty(\"ManageSso\");\n    this.managePolicies = this.getResponseProperty(\"ManagePolicies\");\n    this.manageUsers = this.getResponseProperty(\"ManageUsers\");\n    this.manageResetPassword = this.getResponseProperty(\"ManageResetPassword\");\n    this.manageScim = this.getResponseProperty(\"ManageScim\");\n  }\n}\n","import { KdfType } from \"../../enums/kdfType\";\nimport { OrganizationUserStatusType } from \"../../enums/organizationUserStatusType\";\nimport { OrganizationUserType } from \"../../enums/organizationUserType\";\nimport { PermissionsApi } from \"../api/permissionsApi\";\n\nimport { BaseResponse } from \"./baseResponse\";\nimport { SelectionReadOnlyResponse } from \"./selectionReadOnlyResponse\";\n\nexport class OrganizationUserResponse extends BaseResponse {\n  id: string;\n  userId: string;\n  type: OrganizationUserType;\n  status: OrganizationUserStatusType;\n  accessAll: boolean;\n  permissions: PermissionsApi;\n  resetPasswordEnrolled: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.status = this.getResponseProperty(\"Status\");\n    this.permissions = new PermissionsApi(this.getResponseProperty(\"Permissions\"));\n    this.accessAll = this.getResponseProperty(\"AccessAll\");\n    this.resetPasswordEnrolled = this.getResponseProperty(\"ResetPasswordEnrolled\");\n  }\n}\n\nexport class OrganizationUserUserDetailsResponse extends OrganizationUserResponse {\n  name: string;\n  email: string;\n  twoFactorEnabled: boolean;\n  usesKeyConnector: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.name = this.getResponseProperty(\"Name\");\n    this.email = this.getResponseProperty(\"Email\");\n    this.twoFactorEnabled = this.getResponseProperty(\"TwoFactorEnabled\");\n    this.usesKeyConnector = this.getResponseProperty(\"UsesKeyConnector\") ?? false;\n  }\n}\n\nexport class OrganizationUserDetailsResponse extends OrganizationUserResponse {\n  collections: SelectionReadOnlyResponse[] = [];\n\n  constructor(response: any) {\n    super(response);\n    const collections = this.getResponseProperty(\"Collections\");\n    if (collections != null) {\n      this.collections = collections.map((c: any) => new SelectionReadOnlyResponse(c));\n    }\n  }\n}\n\nexport class OrganizationUserResetPasswordDetailsReponse extends BaseResponse {\n  kdf: KdfType;\n  kdfIterations: number;\n  resetPasswordKey: string;\n  encryptedPrivateKey: string;\n\n  constructor(response: any) {\n    super(response);\n    this.kdf = this.getResponseProperty(\"Kdf\");\n    this.kdfIterations = this.getResponseProperty(\"KdfIterations\");\n    this.resetPasswordKey = this.getResponseProperty(\"ResetPasswordKey\");\n    this.encryptedPrivateKey = this.getResponseProperty(\"EncryptedPrivateKey\");\n  }\n}\n","import { OrganizationUserStatusType } from \"../../enums/organizationUserStatusType\";\nimport { OrganizationUserType } from \"../../enums/organizationUserType\";\nimport { ProductType } from \"../../enums/productType\";\nimport { PermissionsApi } from \"../api/permissionsApi\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class ProfileOrganizationResponse extends BaseResponse {\n  id: string;\n  name: string;\n  usePolicies: boolean;\n  useGroups: boolean;\n  useDirectory: boolean;\n  useEvents: boolean;\n  useTotp: boolean;\n  use2fa: boolean;\n  useApi: boolean;\n  useSso: boolean;\n  useKeyConnector: boolean;\n  useScim: boolean;\n  useResetPassword: boolean;\n  selfHost: boolean;\n  usersGetPremium: boolean;\n  seats: number;\n  maxCollections: number;\n  maxStorageGb?: number;\n  key: string;\n  hasPublicAndPrivateKeys: boolean;\n  status: OrganizationUserStatusType;\n  type: OrganizationUserType;\n  enabled: boolean;\n  ssoBound: boolean;\n  identifier: string;\n  permissions: PermissionsApi;\n  resetPasswordEnrolled: boolean;\n  userId: string;\n  providerId: string;\n  providerName: string;\n  familySponsorshipFriendlyName: string;\n  familySponsorshipAvailable: boolean;\n  planProductType: ProductType;\n  keyConnectorEnabled: boolean;\n  keyConnectorUrl: string;\n  familySponsorshipLastSyncDate?: Date;\n  familySponsorshipValidUntil?: Date;\n  familySponsorshipToDelete?: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.usePolicies = this.getResponseProperty(\"UsePolicies\");\n    this.useGroups = this.getResponseProperty(\"UseGroups\");\n    this.useDirectory = this.getResponseProperty(\"UseDirectory\");\n    this.useEvents = this.getResponseProperty(\"UseEvents\");\n    this.useTotp = this.getResponseProperty(\"UseTotp\");\n    this.use2fa = this.getResponseProperty(\"Use2fa\");\n    this.useApi = this.getResponseProperty(\"UseApi\");\n    this.useSso = this.getResponseProperty(\"UseSso\");\n    this.useKeyConnector = this.getResponseProperty(\"UseKeyConnector\") ?? false;\n    this.useScim = this.getResponseProperty(\"UseScim\") ?? false;\n    this.useResetPassword = this.getResponseProperty(\"UseResetPassword\");\n    this.selfHost = this.getResponseProperty(\"SelfHost\");\n    this.usersGetPremium = this.getResponseProperty(\"UsersGetPremium\");\n    this.seats = this.getResponseProperty(\"Seats\");\n    this.maxCollections = this.getResponseProperty(\"MaxCollections\");\n    this.maxStorageGb = this.getResponseProperty(\"MaxStorageGb\");\n    this.key = this.getResponseProperty(\"Key\");\n    this.hasPublicAndPrivateKeys = this.getResponseProperty(\"HasPublicAndPrivateKeys\");\n    this.status = this.getResponseProperty(\"Status\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    this.ssoBound = this.getResponseProperty(\"SsoBound\");\n    this.identifier = this.getResponseProperty(\"Identifier\");\n    this.permissions = new PermissionsApi(this.getResponseProperty(\"permissions\"));\n    this.resetPasswordEnrolled = this.getResponseProperty(\"ResetPasswordEnrolled\");\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.providerId = this.getResponseProperty(\"ProviderId\");\n    this.providerName = this.getResponseProperty(\"ProviderName\");\n    this.familySponsorshipFriendlyName = this.getResponseProperty(\"FamilySponsorshipFriendlyName\");\n    this.familySponsorshipAvailable = this.getResponseProperty(\"FamilySponsorshipAvailable\");\n    this.planProductType = this.getResponseProperty(\"PlanProductType\");\n    this.keyConnectorEnabled = this.getResponseProperty(\"KeyConnectorEnabled\") ?? false;\n    this.keyConnectorUrl = this.getResponseProperty(\"KeyConnectorUrl\");\n    const familySponsorshipLastSyncDateString = this.getResponseProperty(\n      \"FamilySponsorshipLastSyncDate\"\n    );\n    if (familySponsorshipLastSyncDateString) {\n      this.familySponsorshipLastSyncDate = new Date(familySponsorshipLastSyncDateString);\n    }\n    const familySponsorshipValidUntilString = this.getResponseProperty(\n      \"FamilySponsorshipValidUntil\"\n    );\n    if (familySponsorshipValidUntilString) {\n      this.familySponsorshipValidUntil = new Date(familySponsorshipValidUntilString);\n    }\n    this.familySponsorshipToDelete = this.getResponseProperty(\"FamilySponsorshipToDelete\");\n  }\n}\n","import { ProfileOrganizationResponse } from \"./profileOrganizationResponse\";\n\nexport class ProfileProviderOrganizationResponse extends ProfileOrganizationResponse {\n  constructor(response: any) {\n    super(response);\n    this.keyConnectorEnabled = false;\n  }\n}\n","import { ProviderUserStatusType } from \"../../enums/providerUserStatusType\";\nimport { ProviderUserType } from \"../../enums/providerUserType\";\nimport { PermissionsApi } from \"../api/permissionsApi\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class ProfileProviderResponse extends BaseResponse {\n  id: string;\n  name: string;\n  key: string;\n  status: ProviderUserStatusType;\n  type: ProviderUserType;\n  enabled: boolean;\n  permissions: PermissionsApi;\n  userId: string;\n  useEvents: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.key = this.getResponseProperty(\"Key\");\n    this.status = this.getResponseProperty(\"Status\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    this.permissions = new PermissionsApi(this.getResponseProperty(\"permissions\"));\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.useEvents = this.getResponseProperty(\"UseEvents\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\nimport { ProfileOrganizationResponse } from \"./profileOrganizationResponse\";\nimport { ProfileProviderOrganizationResponse } from \"./profileProviderOrganizationResponse\";\nimport { ProfileProviderResponse } from \"./profileProviderResponse\";\n\nexport class ProfileResponse extends BaseResponse {\n  id: string;\n  name: string;\n  email: string;\n  emailVerified: boolean;\n  masterPasswordHint: string;\n  premiumPersonally: boolean;\n  premiumFromOrganization: boolean;\n  culture: string;\n  twoFactorEnabled: boolean;\n  key: string;\n  privateKey: string;\n  securityStamp: string;\n  forcePasswordReset: boolean;\n  usesKeyConnector: boolean;\n  organizations: ProfileOrganizationResponse[] = [];\n  providers: ProfileProviderResponse[] = [];\n  providerOrganizations: ProfileProviderOrganizationResponse[] = [];\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.email = this.getResponseProperty(\"Email\");\n    this.emailVerified = this.getResponseProperty(\"EmailVerified\");\n    this.masterPasswordHint = this.getResponseProperty(\"MasterPasswordHint\");\n    this.premiumPersonally = this.getResponseProperty(\"Premium\");\n    this.premiumFromOrganization = this.getResponseProperty(\"PremiumFromOrganization\");\n    this.culture = this.getResponseProperty(\"Culture\");\n    this.twoFactorEnabled = this.getResponseProperty(\"TwoFactorEnabled\");\n    this.key = this.getResponseProperty(\"Key\");\n    this.privateKey = this.getResponseProperty(\"PrivateKey\");\n    this.securityStamp = this.getResponseProperty(\"SecurityStamp\");\n    this.forcePasswordReset = this.getResponseProperty(\"ForcePasswordReset\") ?? false;\n    this.usesKeyConnector = this.getResponseProperty(\"UsesKeyConnector\") ?? false;\n\n    const organizations = this.getResponseProperty(\"Organizations\");\n    if (organizations != null) {\n      this.organizations = organizations.map((o: any) => new ProfileOrganizationResponse(o));\n    }\n    const providers = this.getResponseProperty(\"Providers\");\n    if (providers != null) {\n      this.providers = providers.map((o: any) => new ProfileProviderResponse(o));\n    }\n    const providerOrganizations = this.getResponseProperty(\"ProviderOrganizations\");\n    if (providerOrganizations != null) {\n      this.providerOrganizations = providerOrganizations.map(\n        (o: any) => new ProfileProviderOrganizationResponse(o)\n      );\n    }\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\nimport { ProfileResponse } from \"./profileResponse\";\n\nexport class PaymentResponse extends BaseResponse {\n  userProfile: ProfileResponse;\n  paymentIntentClientSecret: string;\n  success: boolean;\n\n  constructor(response: any) {\n    super(response);\n    const userProfile = this.getResponseProperty(\"UserProfile\");\n    if (userProfile != null) {\n      this.userProfile = new ProfileResponse(userProfile);\n    }\n    this.paymentIntentClientSecret = this.getResponseProperty(\"PaymentIntentClientSecret\");\n    this.success = this.getResponseProperty(\"Success\");\n  }\n}\n","import { PolicyType } from \"../../enums/policyType\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class PolicyResponse extends BaseResponse {\n  id: string;\n  organizationId: string;\n  type: PolicyType;\n  data: any;\n  enabled: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.data = this.getResponseProperty(\"Data\");\n    this.enabled = this.getResponseProperty(\"Enabled\");\n  }\n}\n","import { KdfType } from \"../../enums/kdfType\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class PreloginResponse extends BaseResponse {\n  kdf: KdfType;\n  kdfIterations: number;\n\n  constructor(response: any) {\n    super(response);\n    this.kdf = this.getResponseProperty(\"Kdf\");\n    this.kdfIterations = this.getResponseProperty(\"KdfIterations\");\n  }\n}\n","import { BaseResponse } from \"../baseResponse\";\n\nexport class ProviderOrganizationResponse extends BaseResponse {\n  id: string;\n  providerId: string;\n  organizationId: string;\n  key: string;\n  settings: string;\n  creationDate: string;\n  revisionDate: string;\n  userCount: number;\n  seats?: number;\n  plan?: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.providerId = this.getResponseProperty(\"ProviderId\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.key = this.getResponseProperty(\"Key\");\n    this.settings = this.getResponseProperty(\"Settings\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n    this.userCount = this.getResponseProperty(\"UserCount\");\n    this.seats = this.getResponseProperty(\"Seats\");\n    this.plan = this.getResponseProperty(\"Plan\");\n  }\n}\n\nexport class ProviderOrganizationOrganizationDetailsResponse extends ProviderOrganizationResponse {\n  organizationName: string;\n\n  constructor(response: any) {\n    super(response);\n    this.organizationName = this.getResponseProperty(\"OrganizationName\");\n  }\n}\n","import { BaseResponse } from \"../baseResponse\";\n\nexport class ProviderResponse extends BaseResponse {\n  id: string;\n  name: string;\n  businessName: string;\n  billingEmail: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.businessName = this.getResponseProperty(\"BusinessName\");\n    this.billingEmail = this.getResponseProperty(\"BillingEmail\");\n  }\n}\n","import { OrganizationUserBulkPublicKeyResponse } from \"../organizationUserBulkPublicKeyResponse\";\n\nexport class ProviderUserBulkPublicKeyResponse extends OrganizationUserBulkPublicKeyResponse {}\n","import { BaseResponse } from \"../baseResponse\";\n\nexport class ProviderUserBulkResponse extends BaseResponse {\n  id: string;\n  error: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.error = this.getResponseProperty(\"Error\");\n  }\n}\n","import { ProviderUserStatusType } from \"../../../enums/providerUserStatusType\";\nimport { ProviderUserType } from \"../../../enums/providerUserType\";\nimport { PermissionsApi } from \"../../api/permissionsApi\";\nimport { BaseResponse } from \"../baseResponse\";\n\nexport class ProviderUserResponse extends BaseResponse {\n  id: string;\n  userId: string;\n  type: ProviderUserType;\n  status: ProviderUserStatusType;\n  permissions: PermissionsApi;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.status = this.getResponseProperty(\"Status\");\n    this.permissions = new PermissionsApi(this.getResponseProperty(\"Permissions\"));\n  }\n}\n\nexport class ProviderUserUserDetailsResponse extends ProviderUserResponse {\n  name: string;\n  email: string;\n\n  constructor(response: any) {\n    super(response);\n    this.name = this.getResponseProperty(\"Name\");\n    this.email = this.getResponseProperty(\"Email\");\n  }\n}\n","import { BaseResponse } from \"../response/baseResponse\";\n\nexport class SendFileApi extends BaseResponse {\n  id: string;\n  fileName: string;\n  size: string;\n  sizeName: string;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n    this.id = this.getResponseProperty(\"Id\");\n    this.fileName = this.getResponseProperty(\"FileName\");\n    this.size = this.getResponseProperty(\"Size\");\n    this.sizeName = this.getResponseProperty(\"SizeName\");\n  }\n}\n","import { BaseResponse } from \"../response/baseResponse\";\n\nexport class SendTextApi extends BaseResponse {\n  text: string;\n  hidden: boolean;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n    this.text = this.getResponseProperty(\"Text\");\n    this.hidden = this.getResponseProperty(\"Hidden\") || false;\n  }\n}\n","import { SendType } from \"../../enums/sendType\";\nimport { SendFileApi } from \"../api/sendFileApi\";\nimport { SendTextApi } from \"../api/sendTextApi\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class SendAccessResponse extends BaseResponse {\n  id: string;\n  type: SendType;\n  name: string;\n  file: SendFileApi;\n  text: SendTextApi;\n  expirationDate: Date;\n  creatorIdentifier: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.name = this.getResponseProperty(\"Name\");\n\n    const text = this.getResponseProperty(\"Text\");\n    if (text != null) {\n      this.text = new SendTextApi(text);\n    }\n\n    const file = this.getResponseProperty(\"File\");\n    if (file != null) {\n      this.file = new SendFileApi(file);\n    }\n\n    this.expirationDate = this.getResponseProperty(\"ExpirationDate\");\n    this.creatorIdentifier = this.getResponseProperty(\"CreatorIdentifier\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class SendFileDownloadDataResponse extends BaseResponse {\n  id: string = null;\n  url: string = null;\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.url = this.getResponseProperty(\"Url\");\n  }\n}\n","import { SendType } from \"../../enums/sendType\";\nimport { SendFileApi } from \"../api/sendFileApi\";\nimport { SendTextApi } from \"../api/sendTextApi\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class SendResponse extends BaseResponse {\n  id: string;\n  accessId: string;\n  type: SendType;\n  name: string;\n  notes: string;\n  file: SendFileApi;\n  text: SendTextApi;\n  key: string;\n  maxAccessCount?: number;\n  accessCount: number;\n  revisionDate: string;\n  expirationDate: string;\n  deletionDate: string;\n  password: string;\n  disable: boolean;\n  hideEmail: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.accessId = this.getResponseProperty(\"AccessId\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.notes = this.getResponseProperty(\"Notes\");\n    this.key = this.getResponseProperty(\"Key\");\n    this.maxAccessCount = this.getResponseProperty(\"MaxAccessCount\");\n    this.accessCount = this.getResponseProperty(\"AccessCount\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n    this.expirationDate = this.getResponseProperty(\"ExpirationDate\");\n    this.deletionDate = this.getResponseProperty(\"DeletionDate\");\n    this.password = this.getResponseProperty(\"Password\");\n    this.disable = this.getResponseProperty(\"Disabled\") || false;\n    this.hideEmail = this.getResponseProperty(\"HideEmail\") || false;\n\n    const text = this.getResponseProperty(\"Text\");\n    if (text != null) {\n      this.text = new SendTextApi(text);\n    }\n\n    const file = this.getResponseProperty(\"File\");\n    if (file != null) {\n      this.file = new SendFileApi(file);\n    }\n  }\n}\n","import { FileUploadType } from \"../../enums/fileUploadType\";\n\nimport { BaseResponse } from \"./baseResponse\";\nimport { SendResponse } from \"./sendResponse\";\n\nexport class SendFileUploadDataResponse extends BaseResponse {\n  fileUploadType: FileUploadType;\n  sendResponse: SendResponse;\n  url: string = null;\n  constructor(response: any) {\n    super(response);\n    this.fileUploadType = this.getResponseProperty(\"FileUploadType\");\n    const sendResponse = this.getResponseProperty(\"SendResponse\");\n    this.sendResponse = sendResponse == null ? null : new SendResponse(sendResponse);\n    this.url = this.getResponseProperty(\"Url\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class SsoPreValidateResponse extends BaseResponse {\n  token: string;\n\n  constructor(response: any) {\n    super(response);\n    this.token = this.getResponseProperty(\"Token\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class FolderResponse extends BaseResponse {\n  id: string;\n  name: string;\n  revisionDate: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\nimport { CipherResponse } from \"./cipherResponse\";\nimport { CollectionDetailsResponse } from \"./collectionResponse\";\nimport { DomainsResponse } from \"./domainsResponse\";\nimport { FolderResponse } from \"./folderResponse\";\nimport { PolicyResponse } from \"./policyResponse\";\nimport { ProfileResponse } from \"./profileResponse\";\nimport { SendResponse } from \"./sendResponse\";\n\nexport class SyncResponse extends BaseResponse {\n  profile?: ProfileResponse;\n  folders: FolderResponse[] = [];\n  collections: CollectionDetailsResponse[] = [];\n  ciphers: CipherResponse[] = [];\n  domains?: DomainsResponse;\n  policies?: PolicyResponse[] = [];\n  sends: SendResponse[] = [];\n\n  constructor(response: any) {\n    super(response);\n\n    const profile = this.getResponseProperty(\"Profile\");\n    if (profile != null) {\n      this.profile = new ProfileResponse(profile);\n    }\n\n    const folders = this.getResponseProperty(\"Folders\");\n    if (folders != null) {\n      this.folders = folders.map((f: any) => new FolderResponse(f));\n    }\n\n    const collections = this.getResponseProperty(\"Collections\");\n    if (collections != null) {\n      this.collections = collections.map((c: any) => new CollectionDetailsResponse(c));\n    }\n\n    const ciphers = this.getResponseProperty(\"Ciphers\");\n    if (ciphers != null) {\n      this.ciphers = ciphers.map((c: any) => new CipherResponse(c));\n    }\n\n    const domains = this.getResponseProperty(\"Domains\");\n    if (domains != null) {\n      this.domains = new DomainsResponse(domains);\n    }\n\n    const policies = this.getResponseProperty(\"Policies\");\n    if (policies != null) {\n      this.policies = policies.map((p: any) => new PolicyResponse(p));\n    }\n\n    const sends = this.getResponseProperty(\"Sends\");\n    if (sends != null) {\n      this.sends = sends.map((s: any) => new SendResponse(s));\n    }\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class TaxInfoResponse extends BaseResponse {\n  taxId: string;\n  taxIdType: string;\n  line1: string;\n  line2: string;\n  city: string;\n  state: string;\n  country: string;\n  postalCode: string;\n\n  constructor(response: any) {\n    super(response);\n    this.taxId = this.getResponseProperty(\"TaxIdNumber\");\n    this.taxIdType = this.getResponseProperty(\"TaxIdType\");\n    this.line1 = this.getResponseProperty(\"Line1\");\n    this.line2 = this.getResponseProperty(\"Line2\");\n    this.city = this.getResponseProperty(\"City\");\n    this.state = this.getResponseProperty(\"State\");\n    this.postalCode = this.getResponseProperty(\"PostalCode\");\n    this.country = this.getResponseProperty(\"Country\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class TaxRateResponse extends BaseResponse {\n  id: string;\n  country: string;\n  state: string;\n  postalCode: string;\n  rate: number;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.country = this.getResponseProperty(\"Country\");\n    this.state = this.getResponseProperty(\"State\");\n    this.postalCode = this.getResponseProperty(\"PostalCode\");\n    this.rate = this.getResponseProperty(\"Rate\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class TwoFactorAuthenticatorResponse extends BaseResponse {\n  enabled: boolean;\n  key: string;\n\n  constructor(response: any) {\n    super(response);\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    this.key = this.getResponseProperty(\"Key\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class TwoFactorDuoResponse extends BaseResponse {\n  enabled: boolean;\n  host: string;\n  secretKey: string;\n  integrationKey: string;\n\n  constructor(response: any) {\n    super(response);\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    this.host = this.getResponseProperty(\"Host\");\n    this.secretKey = this.getResponseProperty(\"SecretKey\");\n    this.integrationKey = this.getResponseProperty(\"IntegrationKey\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class TwoFactorEmailResponse extends BaseResponse {\n  enabled: boolean;\n  email: string;\n\n  constructor(response: any) {\n    super(response);\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    this.email = this.getResponseProperty(\"Email\");\n  }\n}\n","import { TwoFactorProviderType } from \"../../enums/twoFactorProviderType\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class TwoFactorProviderResponse extends BaseResponse {\n  enabled: boolean;\n  type: TwoFactorProviderType;\n\n  constructor(response: any) {\n    super(response);\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    this.type = this.getResponseProperty(\"Type\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class TwoFactorRecoverResponse extends BaseResponse {\n  code: string;\n\n  constructor(response: any) {\n    super(response);\n    this.code = this.getResponseProperty(\"Code\");\n  }\n}\n","import { Utils } from \"../../misc/utils\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class TwoFactorWebAuthnResponse extends BaseResponse {\n  enabled: boolean;\n  keys: KeyResponse[];\n\n  constructor(response: any) {\n    super(response);\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    const keys = this.getResponseProperty(\"Keys\");\n    this.keys = keys == null ? null : keys.map((k: any) => new KeyResponse(k));\n  }\n}\n\nexport class KeyResponse extends BaseResponse {\n  name: string;\n  id: number;\n  migrated: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.name = this.getResponseProperty(\"Name\");\n    this.id = this.getResponseProperty(\"Id\");\n    this.migrated = this.getResponseProperty(\"Migrated\");\n  }\n}\n\nexport class ChallengeResponse extends BaseResponse implements PublicKeyCredentialCreationOptions {\n  attestation?: AttestationConveyancePreference;\n  authenticatorSelection?: AuthenticatorSelectionCriteria;\n  challenge: BufferSource;\n  excludeCredentials?: PublicKeyCredentialDescriptor[];\n  extensions?: AuthenticationExtensionsClientInputs;\n  pubKeyCredParams: PublicKeyCredentialParameters[];\n  rp: PublicKeyCredentialRpEntity;\n  timeout?: number;\n  user: PublicKeyCredentialUserEntity;\n\n  constructor(response: any) {\n    super(response);\n    this.attestation = this.getResponseProperty(\"attestation\");\n    this.authenticatorSelection = this.getResponseProperty(\"authenticatorSelection\");\n    this.challenge = Utils.fromUrlB64ToArray(this.getResponseProperty(\"challenge\"));\n    this.excludeCredentials = this.getResponseProperty(\"excludeCredentials\").map((c: any) => {\n      c.id = Utils.fromUrlB64ToArray(c.id).buffer;\n      return c;\n    });\n    this.extensions = this.getResponseProperty(\"extensions\");\n    this.pubKeyCredParams = this.getResponseProperty(\"pubKeyCredParams\");\n    this.rp = this.getResponseProperty(\"rp\");\n    this.timeout = this.getResponseProperty(\"timeout\");\n\n    const user = this.getResponseProperty(\"user\");\n    user.id = Utils.fromUrlB64ToArray(user.id);\n\n    this.user = user;\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class TwoFactorYubiKeyResponse extends BaseResponse {\n  enabled: boolean;\n  key1: string;\n  key2: string;\n  key3: string;\n  key4: string;\n  key5: string;\n  nfc: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    this.key1 = this.getResponseProperty(\"Key1\");\n    this.key2 = this.getResponseProperty(\"Key2\");\n    this.key3 = this.getResponseProperty(\"Key3\");\n    this.key4 = this.getResponseProperty(\"Key4\");\n    this.key5 = this.getResponseProperty(\"Key5\");\n    this.nfc = this.getResponseProperty(\"Nfc\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class UserKeyResponse extends BaseResponse {\n  userId: string;\n  publicKey: string;\n\n  constructor(response: any) {\n    super(response);\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.publicKey = this.getResponseProperty(\"PublicKey\");\n  }\n}\n","export enum HtmlStorageLocation {\n  Local = \"local\",\n  Memory = \"memory\",\n  Session = \"session\",\n}\n","import { ApiService as ApiServiceAbstraction } from \"../abstractions/api.service\";\nimport { AppIdService } from \"../abstractions/appId.service\";\nimport { EnvironmentService } from \"../abstractions/environment.service\";\nimport { PlatformUtilsService } from \"../abstractions/platformUtils.service\";\nimport { TokenService } from \"../abstractions/token.service\";\nimport { DeviceType } from \"../enums/deviceType\";\nimport { OrganizationApiKeyType } from \"../enums/organizationApiKeyType\";\nimport { OrganizationConnectionType } from \"../enums/organizationConnectionType\";\nimport { Utils } from \"../misc/utils\";\nimport { SetKeyConnectorKeyRequest } from \"../models/request/account/setKeyConnectorKeyRequest\";\nimport { AttachmentRequest } from \"../models/request/attachmentRequest\";\nimport { BitPayInvoiceRequest } from \"../models/request/bitPayInvoiceRequest\";\nimport { CipherBulkDeleteRequest } from \"../models/request/cipherBulkDeleteRequest\";\nimport { CipherBulkMoveRequest } from \"../models/request/cipherBulkMoveRequest\";\nimport { CipherBulkShareRequest } from \"../models/request/cipherBulkShareRequest\";\nimport { CipherCollectionsRequest } from \"../models/request/cipherCollectionsRequest\";\nimport { CipherCreateRequest } from \"../models/request/cipherCreateRequest\";\nimport { CipherRequest } from \"../models/request/cipherRequest\";\nimport { CipherShareRequest } from \"../models/request/cipherShareRequest\";\nimport { CollectionRequest } from \"../models/request/collectionRequest\";\nimport { DeleteRecoverRequest } from \"../models/request/deleteRecoverRequest\";\nimport { DeviceRequest } from \"../models/request/deviceRequest\";\nimport { DeviceVerificationRequest } from \"../models/request/deviceVerificationRequest\";\nimport { EmailRequest } from \"../models/request/emailRequest\";\nimport { EmailTokenRequest } from \"../models/request/emailTokenRequest\";\nimport { EmergencyAccessAcceptRequest } from \"../models/request/emergencyAccessAcceptRequest\";\nimport { EmergencyAccessConfirmRequest } from \"../models/request/emergencyAccessConfirmRequest\";\nimport { EmergencyAccessInviteRequest } from \"../models/request/emergencyAccessInviteRequest\";\nimport { EmergencyAccessPasswordRequest } from \"../models/request/emergencyAccessPasswordRequest\";\nimport { EmergencyAccessUpdateRequest } from \"../models/request/emergencyAccessUpdateRequest\";\nimport { EventRequest } from \"../models/request/eventRequest\";\nimport { GroupRequest } from \"../models/request/groupRequest\";\nimport { IapCheckRequest } from \"../models/request/iapCheckRequest\";\nimport { ApiTokenRequest } from \"../models/request/identityToken/apiTokenRequest\";\nimport { PasswordTokenRequest } from \"../models/request/identityToken/passwordTokenRequest\";\nimport { SsoTokenRequest } from \"../models/request/identityToken/ssoTokenRequest\";\nimport { TokenRequestTwoFactor } from \"../models/request/identityToken/tokenRequestTwoFactor\";\nimport { ImportCiphersRequest } from \"../models/request/importCiphersRequest\";\nimport { ImportDirectoryRequest } from \"../models/request/importDirectoryRequest\";\nimport { ImportOrganizationCiphersRequest } from \"../models/request/importOrganizationCiphersRequest\";\nimport { KdfRequest } from \"../models/request/kdfRequest\";\nimport { KeyConnectorUserKeyRequest } from \"../models/request/keyConnectorUserKeyRequest\";\nimport { KeysRequest } from \"../models/request/keysRequest\";\nimport { OrganizationSponsorshipCreateRequest } from \"../models/request/organization/organizationSponsorshipCreateRequest\";\nimport { OrganizationSponsorshipRedeemRequest } from \"../models/request/organization/organizationSponsorshipRedeemRequest\";\nimport { OrganizationSsoRequest } from \"../models/request/organization/organizationSsoRequest\";\nimport { OrganizationApiKeyRequest } from \"../models/request/organizationApiKeyRequest\";\nimport { OrganizationConnectionRequest } from \"../models/request/organizationConnectionRequest\";\nimport { OrganizationCreateRequest } from \"../models/request/organizationCreateRequest\";\nimport { OrganizationImportRequest } from \"../models/request/organizationImportRequest\";\nimport { OrganizationKeysRequest } from \"../models/request/organizationKeysRequest\";\nimport { OrganizationSubscriptionUpdateRequest } from \"../models/request/organizationSubscriptionUpdateRequest\";\nimport { OrganizationTaxInfoUpdateRequest } from \"../models/request/organizationTaxInfoUpdateRequest\";\nimport { OrganizationUpdateRequest } from \"../models/request/organizationUpdateRequest\";\nimport { OrganizationUpgradeRequest } from \"../models/request/organizationUpgradeRequest\";\nimport { OrganizationUserAcceptRequest } from \"../models/request/organizationUserAcceptRequest\";\nimport { OrganizationUserBulkConfirmRequest } from \"../models/request/organizationUserBulkConfirmRequest\";\nimport { OrganizationUserBulkRequest } from \"../models/request/organizationUserBulkRequest\";\nimport { OrganizationUserConfirmRequest } from \"../models/request/organizationUserConfirmRequest\";\nimport { OrganizationUserInviteRequest } from \"../models/request/organizationUserInviteRequest\";\nimport { OrganizationUserResetPasswordEnrollmentRequest } from \"../models/request/organizationUserResetPasswordEnrollmentRequest\";\nimport { OrganizationUserResetPasswordRequest } from \"../models/request/organizationUserResetPasswordRequest\";\nimport { OrganizationUserUpdateGroupsRequest } from \"../models/request/organizationUserUpdateGroupsRequest\";\nimport { OrganizationUserUpdateRequest } from \"../models/request/organizationUserUpdateRequest\";\nimport { PasswordHintRequest } from \"../models/request/passwordHintRequest\";\nimport { PasswordRequest } from \"../models/request/passwordRequest\";\nimport { PaymentRequest } from \"../models/request/paymentRequest\";\nimport { PreloginRequest } from \"../models/request/preloginRequest\";\nimport { ProviderAddOrganizationRequest } from \"../models/request/provider/providerAddOrganizationRequest\";\nimport { ProviderOrganizationCreateRequest } from \"../models/request/provider/providerOrganizationCreateRequest\";\nimport { ProviderSetupRequest } from \"../models/request/provider/providerSetupRequest\";\nimport { ProviderUpdateRequest } from \"../models/request/provider/providerUpdateRequest\";\nimport { ProviderUserAcceptRequest } from \"../models/request/provider/providerUserAcceptRequest\";\nimport { ProviderUserBulkConfirmRequest } from \"../models/request/provider/providerUserBulkConfirmRequest\";\nimport { ProviderUserBulkRequest } from \"../models/request/provider/providerUserBulkRequest\";\nimport { ProviderUserConfirmRequest } from \"../models/request/provider/providerUserConfirmRequest\";\nimport { ProviderUserInviteRequest } from \"../models/request/provider/providerUserInviteRequest\";\nimport { ProviderUserUpdateRequest } from \"../models/request/provider/providerUserUpdateRequest\";\nimport { RegisterRequest } from \"../models/request/registerRequest\";\nimport { SeatRequest } from \"../models/request/seatRequest\";\nimport { SecretVerificationRequest } from \"../models/request/secretVerificationRequest\";\nimport { SelectionReadOnlyRequest } from \"../models/request/selectionReadOnlyRequest\";\nimport { SendAccessRequest } from \"../models/request/sendAccessRequest\";\nimport { SendRequest } from \"../models/request/sendRequest\";\nimport { SetPasswordRequest } from \"../models/request/setPasswordRequest\";\nimport { StorageRequest } from \"../models/request/storageRequest\";\nimport { TaxInfoUpdateRequest } from \"../models/request/taxInfoUpdateRequest\";\nimport { TwoFactorEmailRequest } from \"../models/request/twoFactorEmailRequest\";\nimport { TwoFactorProviderRequest } from \"../models/request/twoFactorProviderRequest\";\nimport { TwoFactorRecoveryRequest } from \"../models/request/twoFactorRecoveryRequest\";\nimport { UpdateDomainsRequest } from \"../models/request/updateDomainsRequest\";\nimport { UpdateKeyRequest } from \"../models/request/updateKeyRequest\";\nimport { UpdateProfileRequest } from \"../models/request/updateProfileRequest\";\nimport { UpdateTempPasswordRequest } from \"../models/request/updateTempPasswordRequest\";\nimport { UpdateTwoFactorAuthenticatorRequest } from \"../models/request/updateTwoFactorAuthenticatorRequest\";\nimport { UpdateTwoFactorDuoRequest } from \"../models/request/updateTwoFactorDuoRequest\";\nimport { UpdateTwoFactorEmailRequest } from \"../models/request/updateTwoFactorEmailRequest\";\nimport { UpdateTwoFactorWebAuthnDeleteRequest } from \"../models/request/updateTwoFactorWebAuthnDeleteRequest\";\nimport { UpdateTwoFactorWebAuthnRequest } from \"../models/request/updateTwoFactorWebAuthnRequest\";\nimport { UpdateTwoFactorYubioOtpRequest } from \"../models/request/updateTwoFactorYubioOtpRequest\";\nimport { VerifyBankRequest } from \"../models/request/verifyBankRequest\";\nimport { VerifyDeleteRecoverRequest } from \"../models/request/verifyDeleteRecoverRequest\";\nimport { VerifyEmailRequest } from \"../models/request/verifyEmailRequest\";\nimport { ApiKeyResponse } from \"../models/response/apiKeyResponse\";\nimport { AttachmentResponse } from \"../models/response/attachmentResponse\";\nimport { AttachmentUploadDataResponse } from \"../models/response/attachmentUploadDataResponse\";\nimport { BillingHistoryResponse } from \"../models/response/billingHistoryResponse\";\nimport { BillingPaymentResponse } from \"../models/response/billingPaymentResponse\";\nimport { BillingResponse } from \"../models/response/billingResponse\";\nimport { BreachAccountResponse } from \"../models/response/breachAccountResponse\";\nimport { CipherResponse } from \"../models/response/cipherResponse\";\nimport {\n  CollectionGroupDetailsResponse,\n  CollectionResponse,\n} from \"../models/response/collectionResponse\";\nimport { DeviceVerificationResponse } from \"../models/response/deviceVerificationResponse\";\nimport { DomainsResponse } from \"../models/response/domainsResponse\";\nimport {\n  EmergencyAccessGranteeDetailsResponse,\n  EmergencyAccessGrantorDetailsResponse,\n  EmergencyAccessTakeoverResponse,\n  EmergencyAccessViewResponse,\n} from \"../models/response/emergencyAccessResponse\";\nimport { ErrorResponse } from \"../models/response/errorResponse\";\nimport { EventResponse } from \"../models/response/eventResponse\";\nimport { GroupDetailsResponse, GroupResponse } from \"../models/response/groupResponse\";\nimport { IdentityCaptchaResponse } from \"../models/response/identityCaptchaResponse\";\nimport { IdentityTokenResponse } from \"../models/response/identityTokenResponse\";\nimport { IdentityTwoFactorResponse } from \"../models/response/identityTwoFactorResponse\";\nimport { KeyConnectorUserKeyResponse } from \"../models/response/keyConnectorUserKeyResponse\";\nimport { ListResponse } from \"../models/response/listResponse\";\nimport { OrganizationSsoResponse } from \"../models/response/organization/organizationSsoResponse\";\nimport { OrganizationApiKeyInformationResponse } from \"../models/response/organizationApiKeyInformationResponse\";\nimport { OrganizationAutoEnrollStatusResponse } from \"../models/response/organizationAutoEnrollStatusResponse\";\nimport {\n  OrganizationConnectionConfigApis,\n  OrganizationConnectionResponse,\n} from \"../models/response/organizationConnectionResponse\";\nimport { OrganizationExportResponse } from \"../models/response/organizationExportResponse\";\nimport { OrganizationKeysResponse } from \"../models/response/organizationKeysResponse\";\nimport { OrganizationResponse } from \"../models/response/organizationResponse\";\nimport { OrganizationSponsorshipSyncStatusResponse } from \"../models/response/organizationSponsorshipSyncStatusResponse\";\nimport { OrganizationSubscriptionResponse } from \"../models/response/organizationSubscriptionResponse\";\nimport { OrganizationUserBulkPublicKeyResponse } from \"../models/response/organizationUserBulkPublicKeyResponse\";\nimport { OrganizationUserBulkResponse } from \"../models/response/organizationUserBulkResponse\";\nimport {\n  OrganizationUserDetailsResponse,\n  OrganizationUserResetPasswordDetailsReponse,\n  OrganizationUserUserDetailsResponse,\n} from \"../models/response/organizationUserResponse\";\nimport { PaymentResponse } from \"../models/response/paymentResponse\";\nimport { PlanResponse } from \"../models/response/planResponse\";\nimport { PolicyResponse } from \"../models/response/policyResponse\";\nimport { PreloginResponse } from \"../models/response/preloginResponse\";\nimport { ProfileResponse } from \"../models/response/profileResponse\";\nimport {\n  ProviderOrganizationOrganizationDetailsResponse,\n  ProviderOrganizationResponse,\n} from \"../models/response/provider/providerOrganizationResponse\";\nimport { ProviderResponse } from \"../models/response/provider/providerResponse\";\nimport { ProviderUserBulkPublicKeyResponse } from \"../models/response/provider/providerUserBulkPublicKeyResponse\";\nimport { ProviderUserBulkResponse } from \"../models/response/provider/providerUserBulkResponse\";\nimport {\n  ProviderUserResponse,\n  ProviderUserUserDetailsResponse,\n} from \"../models/response/provider/providerUserResponse\";\nimport { SelectionReadOnlyResponse } from \"../models/response/selectionReadOnlyResponse\";\nimport { SendAccessResponse } from \"../models/response/sendAccessResponse\";\nimport { SendFileDownloadDataResponse } from \"../models/response/sendFileDownloadDataResponse\";\nimport { SendFileUploadDataResponse } from \"../models/response/sendFileUploadDataResponse\";\nimport { SendResponse } from \"../models/response/sendResponse\";\nimport { SsoPreValidateResponse } from \"../models/response/ssoPreValidateResponse\";\nimport { SubscriptionResponse } from \"../models/response/subscriptionResponse\";\nimport { SyncResponse } from \"../models/response/syncResponse\";\nimport { TaxInfoResponse } from \"../models/response/taxInfoResponse\";\nimport { TaxRateResponse } from \"../models/response/taxRateResponse\";\nimport { TwoFactorAuthenticatorResponse } from \"../models/response/twoFactorAuthenticatorResponse\";\nimport { TwoFactorDuoResponse } from \"../models/response/twoFactorDuoResponse\";\nimport { TwoFactorEmailResponse } from \"../models/response/twoFactorEmailResponse\";\nimport { TwoFactorProviderResponse } from \"../models/response/twoFactorProviderResponse\";\nimport { TwoFactorRecoverResponse } from \"../models/response/twoFactorRescoverResponse\";\nimport {\n  TwoFactorWebAuthnResponse,\n  ChallengeResponse,\n} from \"../models/response/twoFactorWebAuthnResponse\";\nimport { TwoFactorYubiKeyResponse } from \"../models/response/twoFactorYubiKeyResponse\";\nimport { UserKeyResponse } from \"../models/response/userKeyResponse\";\nimport { SendAccessView } from \"../models/view/sendAccessView\";\n\nexport class ApiService implements ApiServiceAbstraction {\n  private device: DeviceType;\n  private deviceType: string;\n  private isWebClient = false;\n  private isDesktopClient = false;\n\n  constructor(\n    private tokenService: TokenService,\n    private platformUtilsService: PlatformUtilsService,\n    private environmentService: EnvironmentService,\n    private appIdService: AppIdService,\n    private logoutCallback: (expired: boolean) => Promise<void>,\n    private customUserAgent: string = null\n  ) {\n    this.device = platformUtilsService.getDevice();\n    this.deviceType = this.device.toString();\n    this.isWebClient =\n      this.device === DeviceType.IEBrowser ||\n      this.device === DeviceType.ChromeBrowser ||\n      this.device === DeviceType.EdgeBrowser ||\n      this.device === DeviceType.FirefoxBrowser ||\n      this.device === DeviceType.OperaBrowser ||\n      this.device === DeviceType.SafariBrowser ||\n      this.device === DeviceType.UnknownBrowser ||\n      this.device === DeviceType.VivaldiBrowser;\n    this.isDesktopClient =\n      this.device === DeviceType.WindowsDesktop ||\n      this.device === DeviceType.MacOsDesktop ||\n      this.device === DeviceType.LinuxDesktop;\n  }\n\n  // Auth APIs\n\n  async postIdentityToken(\n    request: ApiTokenRequest | PasswordTokenRequest | SsoTokenRequest\n  ): Promise<IdentityTokenResponse | IdentityTwoFactorResponse | IdentityCaptchaResponse> {\n    const headers = new Headers({\n      \"Content-Type\": \"application/x-www-form-urlencoded; charset=utf-8\",\n      Accept: \"application/json\",\n      \"Device-Type\": this.deviceType,\n    });\n    if (this.customUserAgent != null) {\n      headers.set(\"User-Agent\", this.customUserAgent);\n    }\n    request.alterIdentityTokenHeaders(headers);\n\n    const identityToken =\n      request instanceof ApiTokenRequest\n        ? request.toIdentityToken()\n        : request.toIdentityToken(this.platformUtilsService.getClientType());\n\n    const response = await this.fetch(\n      new Request(this.environmentService.getIdentityUrl() + \"/connect/token\", {\n        body: this.qsStringify(identityToken),\n        credentials: this.getCredentials(),\n        cache: \"no-store\",\n        headers: headers,\n        method: \"POST\",\n      })\n    );\n\n    let responseJson: any = null;\n    if (this.isJsonResponse(response)) {\n      responseJson = await response.json();\n    }\n\n    if (responseJson != null) {\n      if (response.status === 200) {\n        return new IdentityTokenResponse(responseJson);\n      } else if (\n        response.status === 400 &&\n        responseJson.TwoFactorProviders2 &&\n        Object.keys(responseJson.TwoFactorProviders2).length\n      ) {\n        await this.tokenService.clearTwoFactorToken();\n        return new IdentityTwoFactorResponse(responseJson);\n      } else if (\n        response.status === 400 &&\n        responseJson.HCaptcha_SiteKey &&\n        Object.keys(responseJson.HCaptcha_SiteKey).length\n      ) {\n        return new IdentityCaptchaResponse(responseJson);\n      }\n    }\n\n    return Promise.reject(new ErrorResponse(responseJson, response.status, true));\n  }\n\n  async refreshIdentityToken(): Promise<any> {\n    try {\n      await this.doAuthRefresh();\n    } catch (e) {\n      return Promise.reject(null);\n    }\n  }\n\n  // Account APIs\n\n  async getProfile(): Promise<ProfileResponse> {\n    const r = await this.send(\"GET\", \"/accounts/profile\", null, true, true);\n    return new ProfileResponse(r);\n  }\n\n  async getUserSubscription(): Promise<SubscriptionResponse> {\n    const r = await this.send(\"GET\", \"/accounts/subscription\", null, true, true);\n    return new SubscriptionResponse(r);\n  }\n\n  async getTaxInfo(): Promise<TaxInfoResponse> {\n    const r = await this.send(\"GET\", \"/accounts/tax\", null, true, true);\n    return new TaxInfoResponse(r);\n  }\n\n  async putProfile(request: UpdateProfileRequest): Promise<ProfileResponse> {\n    const r = await this.send(\"PUT\", \"/accounts/profile\", request, true, true);\n    return new ProfileResponse(r);\n  }\n\n  putTaxInfo(request: TaxInfoUpdateRequest): Promise<any> {\n    return this.send(\"PUT\", \"/accounts/tax\", request, true, false);\n  }\n\n  async postPrelogin(request: PreloginRequest): Promise<PreloginResponse> {\n    const r = await this.send(\n      \"POST\",\n      \"/accounts/prelogin\",\n      request,\n      false,\n      true,\n      this.platformUtilsService.isDev()\n        ? this.environmentService.getIdentityUrl()\n        : this.environmentService.getApiUrl()\n    );\n    return new PreloginResponse(r);\n  }\n\n  postEmailToken(request: EmailTokenRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/email-token\", request, true, false);\n  }\n\n  postEmail(request: EmailRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/email\", request, true, false);\n  }\n\n  postPassword(request: PasswordRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/password\", request, true, false);\n  }\n\n  setPassword(request: SetPasswordRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/set-password\", request, true, false);\n  }\n\n  postSetKeyConnectorKey(request: SetKeyConnectorKeyRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/set-key-connector-key\", request, true, false);\n  }\n\n  postSecurityStamp(request: SecretVerificationRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/security-stamp\", request, true, false);\n  }\n\n  async getAccountRevisionDate(): Promise<number> {\n    const r = await this.send(\"GET\", \"/accounts/revision-date\", null, true, true);\n    return r as number;\n  }\n\n  postPasswordHint(request: PasswordHintRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/password-hint\", request, false, false);\n  }\n\n  postRegister(request: RegisterRequest): Promise<any> {\n    return this.send(\n      \"POST\",\n      \"/accounts/register\",\n      request,\n      false,\n      false,\n      this.platformUtilsService.isDev()\n        ? this.environmentService.getIdentityUrl()\n        : this.environmentService.getApiUrl()\n    );\n  }\n\n  async postPremium(data: FormData): Promise<PaymentResponse> {\n    const r = await this.send(\"POST\", \"/accounts/premium\", data, true, true);\n    return new PaymentResponse(r);\n  }\n\n  async postIapCheck(request: IapCheckRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/iap-check\", request, true, false);\n  }\n\n  postReinstatePremium(): Promise<any> {\n    return this.send(\"POST\", \"/accounts/reinstate-premium\", null, true, false);\n  }\n\n  postCancelPremium(): Promise<any> {\n    return this.send(\"POST\", \"/accounts/cancel-premium\", null, true, false);\n  }\n\n  async postAccountStorage(request: StorageRequest): Promise<PaymentResponse> {\n    const r = await this.send(\"POST\", \"/accounts/storage\", request, true, true);\n    return new PaymentResponse(r);\n  }\n\n  postAccountPayment(request: PaymentRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/payment\", request, true, false);\n  }\n\n  postAccountLicense(data: FormData): Promise<any> {\n    return this.send(\"POST\", \"/accounts/license\", data, true, false);\n  }\n\n  postAccountKeys(request: KeysRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/keys\", request, true, false);\n  }\n\n  postAccountKey(request: UpdateKeyRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/key\", request, true, false);\n  }\n\n  postAccountVerifyEmail(): Promise<any> {\n    return this.send(\"POST\", \"/accounts/verify-email\", null, true, false);\n  }\n\n  postAccountVerifyEmailToken(request: VerifyEmailRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/verify-email-token\", request, false, false);\n  }\n\n  postAccountVerifyPassword(request: SecretVerificationRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/verify-password\", request, true, false);\n  }\n\n  postAccountRecoverDelete(request: DeleteRecoverRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/delete-recover\", request, false, false);\n  }\n\n  postAccountRecoverDeleteToken(request: VerifyDeleteRecoverRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/delete-recover-token\", request, false, false);\n  }\n\n  postAccountKdf(request: KdfRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/kdf\", request, true, false);\n  }\n\n  async deleteSsoUser(organizationId: string): Promise<any> {\n    return this.send(\"DELETE\", \"/accounts/sso/\" + organizationId, null, true, false);\n  }\n\n  async getSsoUserIdentifier(): Promise<string> {\n    return this.send(\"GET\", \"/accounts/sso/user-identifier\", null, true, true);\n  }\n\n  async postUserApiKey(id: string, request: SecretVerificationRequest): Promise<ApiKeyResponse> {\n    const r = await this.send(\"POST\", \"/accounts/api-key\", request, true, true);\n    return new ApiKeyResponse(r);\n  }\n\n  async postUserRotateApiKey(\n    id: string,\n    request: SecretVerificationRequest\n  ): Promise<ApiKeyResponse> {\n    const r = await this.send(\"POST\", \"/accounts/rotate-api-key\", request, true, true);\n    return new ApiKeyResponse(r);\n  }\n\n  putUpdateTempPassword(request: UpdateTempPasswordRequest): Promise<any> {\n    return this.send(\"PUT\", \"/accounts/update-temp-password\", request, true, false);\n  }\n\n  postConvertToKeyConnector(): Promise<void> {\n    return this.send(\"POST\", \"/accounts/convert-to-key-connector\", null, true, false);\n  }\n\n  // Account Billing APIs\n\n  async getUserBillingHistory(): Promise<BillingHistoryResponse> {\n    const r = await this.send(\"GET\", \"/accounts/billing/history\", null, true, true);\n    return new BillingHistoryResponse(r);\n  }\n\n  async getUserBillingPayment(): Promise<BillingPaymentResponse> {\n    const r = await this.send(\"GET\", \"/accounts/billing/payment-method\", null, true, true);\n    return new BillingPaymentResponse(r);\n  }\n\n  // Send APIs\n\n  async getSend(id: string): Promise<SendResponse> {\n    const r = await this.send(\"GET\", \"/sends/\" + id, null, true, true);\n    return new SendResponse(r);\n  }\n\n  async postSendAccess(\n    id: string,\n    request: SendAccessRequest,\n    apiUrl?: string\n  ): Promise<SendAccessResponse> {\n    const addSendIdHeader = (headers: Headers) => {\n      headers.set(\"Send-Id\", id);\n    };\n    const r = await this.send(\n      \"POST\",\n      \"/sends/access/\" + id,\n      request,\n      false,\n      true,\n      apiUrl,\n      addSendIdHeader\n    );\n    return new SendAccessResponse(r);\n  }\n\n  async getSendFileDownloadData(\n    send: SendAccessView,\n    request: SendAccessRequest,\n    apiUrl?: string\n  ): Promise<SendFileDownloadDataResponse> {\n    const addSendIdHeader = (headers: Headers) => {\n      headers.set(\"Send-Id\", send.id);\n    };\n    const r = await this.send(\n      \"POST\",\n      \"/sends/\" + send.id + \"/access/file/\" + send.file.id,\n      request,\n      false,\n      true,\n      apiUrl,\n      addSendIdHeader\n    );\n    return new SendFileDownloadDataResponse(r);\n  }\n\n  async getSends(): Promise<ListResponse<SendResponse>> {\n    const r = await this.send(\"GET\", \"/sends\", null, true, true);\n    return new ListResponse(r, SendResponse);\n  }\n\n  async postSend(request: SendRequest): Promise<SendResponse> {\n    const r = await this.send(\"POST\", \"/sends\", request, true, true);\n    return new SendResponse(r);\n  }\n\n  async postFileTypeSend(request: SendRequest): Promise<SendFileUploadDataResponse> {\n    const r = await this.send(\"POST\", \"/sends/file/v2\", request, true, true);\n    return new SendFileUploadDataResponse(r);\n  }\n\n  async renewSendFileUploadUrl(\n    sendId: string,\n    fileId: string\n  ): Promise<SendFileUploadDataResponse> {\n    const r = await this.send(\"GET\", \"/sends/\" + sendId + \"/file/\" + fileId, null, true, true);\n    return new SendFileUploadDataResponse(r);\n  }\n\n  postSendFile(sendId: string, fileId: string, data: FormData): Promise<any> {\n    return this.send(\"POST\", \"/sends/\" + sendId + \"/file/\" + fileId, data, true, false);\n  }\n\n  /**\n   * @deprecated Mar 25 2021: This method has been deprecated in favor of direct uploads.\n   * This method still exists for backward compatibility with old server versions.\n   */\n  async postSendFileLegacy(data: FormData): Promise<SendResponse> {\n    const r = await this.send(\"POST\", \"/sends/file\", data, true, true);\n    return new SendResponse(r);\n  }\n\n  async putSend(id: string, request: SendRequest): Promise<SendResponse> {\n    const r = await this.send(\"PUT\", \"/sends/\" + id, request, true, true);\n    return new SendResponse(r);\n  }\n\n  async putSendRemovePassword(id: string): Promise<SendResponse> {\n    const r = await this.send(\"PUT\", \"/sends/\" + id + \"/remove-password\", null, true, true);\n    return new SendResponse(r);\n  }\n\n  deleteSend(id: string): Promise<any> {\n    return this.send(\"DELETE\", \"/sends/\" + id, null, true, false);\n  }\n\n  // Cipher APIs\n\n  async getCipher(id: string): Promise<CipherResponse> {\n    const r = await this.send(\"GET\", \"/ciphers/\" + id, null, true, true);\n    return new CipherResponse(r);\n  }\n\n  async getFullCipherDetails(id: string): Promise<CipherResponse> {\n    const r = await this.send(\"GET\", \"/ciphers/\" + id + \"/details\", null, true, true);\n    return new CipherResponse(r);\n  }\n\n  async getCipherAdmin(id: string): Promise<CipherResponse> {\n    const r = await this.send(\"GET\", \"/ciphers/\" + id + \"/admin\", null, true, true);\n    return new CipherResponse(r);\n  }\n\n  async getCiphersOrganization(organizationId: string): Promise<ListResponse<CipherResponse>> {\n    const r = await this.send(\n      \"GET\",\n      \"/ciphers/organization-details?organizationId=\" + organizationId,\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, CipherResponse);\n  }\n\n  async postCipher(request: CipherRequest): Promise<CipherResponse> {\n    const r = await this.send(\"POST\", \"/ciphers\", request, true, true);\n    return new CipherResponse(r);\n  }\n\n  async postCipherCreate(request: CipherCreateRequest): Promise<CipherResponse> {\n    const r = await this.send(\"POST\", \"/ciphers/create\", request, true, true);\n    return new CipherResponse(r);\n  }\n\n  async postCipherAdmin(request: CipherCreateRequest): Promise<CipherResponse> {\n    const r = await this.send(\"POST\", \"/ciphers/admin\", request, true, true);\n    return new CipherResponse(r);\n  }\n\n  async putCipher(id: string, request: CipherRequest): Promise<CipherResponse> {\n    const r = await this.send(\"PUT\", \"/ciphers/\" + id, request, true, true);\n    return new CipherResponse(r);\n  }\n\n  async putCipherAdmin(id: string, request: CipherRequest): Promise<CipherResponse> {\n    const r = await this.send(\"PUT\", \"/ciphers/\" + id + \"/admin\", request, true, true);\n    return new CipherResponse(r);\n  }\n\n  deleteCipher(id: string): Promise<any> {\n    return this.send(\"DELETE\", \"/ciphers/\" + id, null, true, false);\n  }\n\n  deleteCipherAdmin(id: string): Promise<any> {\n    return this.send(\"DELETE\", \"/ciphers/\" + id + \"/admin\", null, true, false);\n  }\n\n  deleteManyCiphers(request: CipherBulkDeleteRequest): Promise<any> {\n    return this.send(\"DELETE\", \"/ciphers\", request, true, false);\n  }\n\n  deleteManyCiphersAdmin(request: CipherBulkDeleteRequest): Promise<any> {\n    return this.send(\"DELETE\", \"/ciphers/admin\", request, true, false);\n  }\n\n  putMoveCiphers(request: CipherBulkMoveRequest): Promise<any> {\n    return this.send(\"PUT\", \"/ciphers/move\", request, true, false);\n  }\n\n  async putShareCipher(id: string, request: CipherShareRequest): Promise<CipherResponse> {\n    const r = await this.send(\"PUT\", \"/ciphers/\" + id + \"/share\", request, true, true);\n    return new CipherResponse(r);\n  }\n\n  putShareCiphers(request: CipherBulkShareRequest): Promise<any> {\n    return this.send(\"PUT\", \"/ciphers/share\", request, true, false);\n  }\n\n  putCipherCollections(id: string, request: CipherCollectionsRequest): Promise<any> {\n    return this.send(\"PUT\", \"/ciphers/\" + id + \"/collections\", request, true, false);\n  }\n\n  putCipherCollectionsAdmin(id: string, request: CipherCollectionsRequest): Promise<any> {\n    return this.send(\"PUT\", \"/ciphers/\" + id + \"/collections-admin\", request, true, false);\n  }\n\n  postPurgeCiphers(\n    request: SecretVerificationRequest,\n    organizationId: string = null\n  ): Promise<any> {\n    let path = \"/ciphers/purge\";\n    if (organizationId != null) {\n      path += \"?organizationId=\" + organizationId;\n    }\n    return this.send(\"POST\", path, request, true, false);\n  }\n\n  postImportCiphers(request: ImportCiphersRequest): Promise<any> {\n    return this.send(\"POST\", \"/ciphers/import\", request, true, false);\n  }\n\n  postImportOrganizationCiphers(\n    organizationId: string,\n    request: ImportOrganizationCiphersRequest\n  ): Promise<any> {\n    return this.send(\n      \"POST\",\n      \"/ciphers/import-organization?organizationId=\" + organizationId,\n      request,\n      true,\n      false\n    );\n  }\n\n  putDeleteCipher(id: string): Promise<any> {\n    return this.send(\"PUT\", \"/ciphers/\" + id + \"/delete\", null, true, false);\n  }\n\n  putDeleteCipherAdmin(id: string): Promise<any> {\n    return this.send(\"PUT\", \"/ciphers/\" + id + \"/delete-admin\", null, true, false);\n  }\n\n  putDeleteManyCiphers(request: CipherBulkDeleteRequest): Promise<any> {\n    return this.send(\"PUT\", \"/ciphers/delete\", request, true, false);\n  }\n\n  putDeleteManyCiphersAdmin(request: CipherBulkDeleteRequest): Promise<any> {\n    return this.send(\"PUT\", \"/ciphers/delete-admin\", request, true, false);\n  }\n\n  async putRestoreCipher(id: string): Promise<CipherResponse> {\n    const r = await this.send(\"PUT\", \"/ciphers/\" + id + \"/restore\", null, true, true);\n    return new CipherResponse(r);\n  }\n\n  async putRestoreCipherAdmin(id: string): Promise<CipherResponse> {\n    const r = await this.send(\"PUT\", \"/ciphers/\" + id + \"/restore-admin\", null, true, true);\n    return new CipherResponse(r);\n  }\n\n  async putRestoreManyCiphers(\n    request: CipherBulkDeleteRequest\n  ): Promise<ListResponse<CipherResponse>> {\n    const r = await this.send(\"PUT\", \"/ciphers/restore\", request, true, true);\n    return new ListResponse<CipherResponse>(r, CipherResponse);\n  }\n\n  // Attachments APIs\n\n  async getAttachmentData(\n    cipherId: string,\n    attachmentId: string,\n    emergencyAccessId?: string\n  ): Promise<AttachmentResponse> {\n    const path =\n      (emergencyAccessId != null ? \"/emergency-access/\" + emergencyAccessId + \"/\" : \"/ciphers/\") +\n      cipherId +\n      \"/attachment/\" +\n      attachmentId;\n    const r = await this.send(\"GET\", path, null, true, true);\n    return new AttachmentResponse(r);\n  }\n\n  async postCipherAttachment(\n    id: string,\n    request: AttachmentRequest\n  ): Promise<AttachmentUploadDataResponse> {\n    const r = await this.send(\"POST\", \"/ciphers/\" + id + \"/attachment/v2\", request, true, true);\n    return new AttachmentUploadDataResponse(r);\n  }\n\n  /**\n   * @deprecated Mar 25 2021: This method has been deprecated in favor of direct uploads.\n   * This method still exists for backward compatibility with old server versions.\n   */\n  async postCipherAttachmentLegacy(id: string, data: FormData): Promise<CipherResponse> {\n    const r = await this.send(\"POST\", \"/ciphers/\" + id + \"/attachment\", data, true, true);\n    return new CipherResponse(r);\n  }\n\n  /**\n   * @deprecated Mar 25 2021: This method has been deprecated in favor of direct uploads.\n   * This method still exists for backward compatibility with old server versions.\n   */\n  async postCipherAttachmentAdminLegacy(id: string, data: FormData): Promise<CipherResponse> {\n    const r = await this.send(\"POST\", \"/ciphers/\" + id + \"/attachment-admin\", data, true, true);\n    return new CipherResponse(r);\n  }\n\n  deleteCipherAttachment(id: string, attachmentId: string): Promise<any> {\n    return this.send(\"DELETE\", \"/ciphers/\" + id + \"/attachment/\" + attachmentId, null, true, false);\n  }\n\n  deleteCipherAttachmentAdmin(id: string, attachmentId: string): Promise<any> {\n    return this.send(\n      \"DELETE\",\n      \"/ciphers/\" + id + \"/attachment/\" + attachmentId + \"/admin\",\n      null,\n      true,\n      false\n    );\n  }\n\n  postShareCipherAttachment(\n    id: string,\n    attachmentId: string,\n    data: FormData,\n    organizationId: string\n  ): Promise<any> {\n    return this.send(\n      \"POST\",\n      \"/ciphers/\" + id + \"/attachment/\" + attachmentId + \"/share?organizationId=\" + organizationId,\n      data,\n      true,\n      false\n    );\n  }\n\n  async renewAttachmentUploadUrl(\n    id: string,\n    attachmentId: string\n  ): Promise<AttachmentUploadDataResponse> {\n    const r = await this.send(\n      \"GET\",\n      \"/ciphers/\" + id + \"/attachment/\" + attachmentId + \"/renew\",\n      null,\n      true,\n      true\n    );\n    return new AttachmentUploadDataResponse(r);\n  }\n\n  postAttachmentFile(id: string, attachmentId: string, data: FormData): Promise<any> {\n    return this.send(\"POST\", \"/ciphers/\" + id + \"/attachment/\" + attachmentId, data, true, false);\n  }\n\n  // Collections APIs\n\n  async getCollectionDetails(\n    organizationId: string,\n    id: string\n  ): Promise<CollectionGroupDetailsResponse> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/collections/\" + id + \"/details\",\n      null,\n      true,\n      true\n    );\n    return new CollectionGroupDetailsResponse(r);\n  }\n\n  async getUserCollections(): Promise<ListResponse<CollectionResponse>> {\n    const r = await this.send(\"GET\", \"/collections\", null, true, true);\n    return new ListResponse(r, CollectionResponse);\n  }\n\n  async getCollections(organizationId: string): Promise<ListResponse<CollectionResponse>> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/collections\",\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, CollectionResponse);\n  }\n\n  async getCollectionUsers(\n    organizationId: string,\n    id: string\n  ): Promise<SelectionReadOnlyResponse[]> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/collections/\" + id + \"/users\",\n      null,\n      true,\n      true\n    );\n    return r.map((dr: any) => new SelectionReadOnlyResponse(dr));\n  }\n\n  async postCollection(\n    organizationId: string,\n    request: CollectionRequest\n  ): Promise<CollectionResponse> {\n    const r = await this.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/collections\",\n      request,\n      true,\n      true\n    );\n    return new CollectionResponse(r);\n  }\n\n  async putCollection(\n    organizationId: string,\n    id: string,\n    request: CollectionRequest\n  ): Promise<CollectionResponse> {\n    const r = await this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/collections/\" + id,\n      request,\n      true,\n      true\n    );\n    return new CollectionResponse(r);\n  }\n\n  async putCollectionUsers(\n    organizationId: string,\n    id: string,\n    request: SelectionReadOnlyRequest[]\n  ): Promise<any> {\n    await this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/collections/\" + id + \"/users\",\n      request,\n      true,\n      false\n    );\n  }\n\n  deleteCollection(organizationId: string, id: string): Promise<any> {\n    return this.send(\n      \"DELETE\",\n      \"/organizations/\" + organizationId + \"/collections/\" + id,\n      null,\n      true,\n      false\n    );\n  }\n\n  deleteCollectionUser(\n    organizationId: string,\n    id: string,\n    organizationUserId: string\n  ): Promise<any> {\n    return this.send(\n      \"DELETE\",\n      \"/organizations/\" + organizationId + \"/collections/\" + id + \"/user/\" + organizationUserId,\n      null,\n      true,\n      false\n    );\n  }\n\n  // Groups APIs\n\n  async getGroupDetails(organizationId: string, id: string): Promise<GroupDetailsResponse> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/groups/\" + id + \"/details\",\n      null,\n      true,\n      true\n    );\n    return new GroupDetailsResponse(r);\n  }\n\n  async getGroups(organizationId: string): Promise<ListResponse<GroupResponse>> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/groups\",\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, GroupResponse);\n  }\n\n  async getGroupUsers(organizationId: string, id: string): Promise<string[]> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/groups/\" + id + \"/users\",\n      null,\n      true,\n      true\n    );\n    return r;\n  }\n\n  async postGroup(organizationId: string, request: GroupRequest): Promise<GroupResponse> {\n    const r = await this.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/groups\",\n      request,\n      true,\n      true\n    );\n    return new GroupResponse(r);\n  }\n\n  async putGroup(\n    organizationId: string,\n    id: string,\n    request: GroupRequest\n  ): Promise<GroupResponse> {\n    const r = await this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/groups/\" + id,\n      request,\n      true,\n      true\n    );\n    return new GroupResponse(r);\n  }\n\n  async putGroupUsers(organizationId: string, id: string, request: string[]): Promise<any> {\n    await this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/groups/\" + id + \"/users\",\n      request,\n      true,\n      false\n    );\n  }\n\n  deleteGroup(organizationId: string, id: string): Promise<any> {\n    return this.send(\n      \"DELETE\",\n      \"/organizations/\" + organizationId + \"/groups/\" + id,\n      null,\n      true,\n      false\n    );\n  }\n\n  deleteGroupUser(organizationId: string, id: string, organizationUserId: string): Promise<any> {\n    return this.send(\n      \"DELETE\",\n      \"/organizations/\" + organizationId + \"/groups/\" + id + \"/user/\" + organizationUserId,\n      null,\n      true,\n      false\n    );\n  }\n\n  // Organization User APIs\n\n  async getOrganizationUser(\n    organizationId: string,\n    id: string\n  ): Promise<OrganizationUserDetailsResponse> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/users/\" + id,\n      null,\n      true,\n      true\n    );\n    return new OrganizationUserDetailsResponse(r);\n  }\n\n  async getOrganizationUserGroups(organizationId: string, id: string): Promise<string[]> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/users/\" + id + \"/groups\",\n      null,\n      true,\n      true\n    );\n    return r;\n  }\n\n  async getOrganizationUsers(\n    organizationId: string\n  ): Promise<ListResponse<OrganizationUserUserDetailsResponse>> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/users\",\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, OrganizationUserUserDetailsResponse);\n  }\n\n  async getOrganizationUserResetPasswordDetails(\n    organizationId: string,\n    id: string\n  ): Promise<OrganizationUserResetPasswordDetailsReponse> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/users/\" + id + \"/reset-password-details\",\n      null,\n      true,\n      true\n    );\n    return new OrganizationUserResetPasswordDetailsReponse(r);\n  }\n\n  async getOrganizationAutoEnrollStatus(\n    identifier: string\n  ): Promise<OrganizationAutoEnrollStatusResponse> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + identifier + \"/auto-enroll-status\",\n      null,\n      true,\n      true\n    );\n    return new OrganizationAutoEnrollStatusResponse(r);\n  }\n\n  postOrganizationUserInvite(\n    organizationId: string,\n    request: OrganizationUserInviteRequest\n  ): Promise<any> {\n    return this.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/users/invite\",\n      request,\n      true,\n      false\n    );\n  }\n\n  postOrganizationUserReinvite(organizationId: string, id: string): Promise<any> {\n    return this.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/users/\" + id + \"/reinvite\",\n      null,\n      true,\n      false\n    );\n  }\n\n  async postManyOrganizationUserReinvite(\n    organizationId: string,\n    request: OrganizationUserBulkRequest\n  ): Promise<ListResponse<OrganizationUserBulkResponse>> {\n    const r = await this.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/users/reinvite\",\n      request,\n      true,\n      true\n    );\n    return new ListResponse(r, OrganizationUserBulkResponse);\n  }\n\n  postOrganizationUserAccept(\n    organizationId: string,\n    id: string,\n    request: OrganizationUserAcceptRequest\n  ): Promise<any> {\n    return this.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/users/\" + id + \"/accept\",\n      request,\n      true,\n      false\n    );\n  }\n\n  postOrganizationUserConfirm(\n    organizationId: string,\n    id: string,\n    request: OrganizationUserConfirmRequest\n  ): Promise<any> {\n    return this.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/users/\" + id + \"/confirm\",\n      request,\n      true,\n      false\n    );\n  }\n\n  async postOrganizationUsersPublicKey(\n    organizationId: string,\n    request: OrganizationUserBulkRequest\n  ): Promise<ListResponse<OrganizationUserBulkPublicKeyResponse>> {\n    const r = await this.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/users/public-keys\",\n      request,\n      true,\n      true\n    );\n    return new ListResponse(r, OrganizationUserBulkPublicKeyResponse);\n  }\n\n  async postOrganizationUserBulkConfirm(\n    organizationId: string,\n    request: OrganizationUserBulkConfirmRequest\n  ): Promise<ListResponse<OrganizationUserBulkResponse>> {\n    const r = await this.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/users/confirm\",\n      request,\n      true,\n      true\n    );\n    return new ListResponse(r, OrganizationUserBulkResponse);\n  }\n\n  putOrganizationUser(\n    organizationId: string,\n    id: string,\n    request: OrganizationUserUpdateRequest\n  ): Promise<any> {\n    return this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/users/\" + id,\n      request,\n      true,\n      false\n    );\n  }\n\n  putOrganizationUserGroups(\n    organizationId: string,\n    id: string,\n    request: OrganizationUserUpdateGroupsRequest\n  ): Promise<any> {\n    return this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/users/\" + id + \"/groups\",\n      request,\n      true,\n      false\n    );\n  }\n\n  putOrganizationUserResetPasswordEnrollment(\n    organizationId: string,\n    userId: string,\n    request: OrganizationUserResetPasswordEnrollmentRequest\n  ): Promise<any> {\n    return this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/users/\" + userId + \"/reset-password-enrollment\",\n      request,\n      true,\n      false\n    );\n  }\n\n  putOrganizationUserResetPassword(\n    organizationId: string,\n    id: string,\n    request: OrganizationUserResetPasswordRequest\n  ): Promise<any> {\n    return this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/users/\" + id + \"/reset-password\",\n      request,\n      true,\n      false\n    );\n  }\n\n  deleteOrganizationUser(organizationId: string, id: string): Promise<any> {\n    return this.send(\n      \"DELETE\",\n      \"/organizations/\" + organizationId + \"/users/\" + id,\n      null,\n      true,\n      false\n    );\n  }\n\n  async deleteManyOrganizationUsers(\n    organizationId: string,\n    request: OrganizationUserBulkRequest\n  ): Promise<ListResponse<OrganizationUserBulkResponse>> {\n    const r = await this.send(\n      \"DELETE\",\n      \"/organizations/\" + organizationId + \"/users\",\n      request,\n      true,\n      true\n    );\n    return new ListResponse(r, OrganizationUserBulkResponse);\n  }\n\n  revokeOrganizationUser(organizationId: string, id: string): Promise<any> {\n    return this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/users/\" + id + \"/revoke\",\n      null,\n      true,\n      false\n    );\n  }\n\n  async revokeManyOrganizationUsers(\n    organizationId: string,\n    request: OrganizationUserBulkRequest\n  ): Promise<ListResponse<OrganizationUserBulkResponse>> {\n    const r = await this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/users/revoke\",\n      request,\n      true,\n      true\n    );\n    return new ListResponse(r, OrganizationUserBulkResponse);\n  }\n\n  restoreOrganizationUser(organizationId: string, id: string): Promise<any> {\n    return this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/users/\" + id + \"/restore\",\n      null,\n      true,\n      false\n    );\n  }\n\n  async restoreManyOrganizationUsers(\n    organizationId: string,\n    request: OrganizationUserBulkRequest\n  ): Promise<ListResponse<OrganizationUserBulkResponse>> {\n    const r = await this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/users/restore\",\n      request,\n      true,\n      true\n    );\n    return new ListResponse(r, OrganizationUserBulkResponse);\n  }\n\n  // Plan APIs\n\n  async getPlans(): Promise<ListResponse<PlanResponse>> {\n    const r = await this.send(\"GET\", \"/plans/\", null, false, true);\n    return new ListResponse(r, PlanResponse);\n  }\n\n  async postImportDirectory(organizationId: string, request: ImportDirectoryRequest): Promise<any> {\n    return this.send(\"POST\", \"/organizations/\" + organizationId + \"/import\", request, true, false);\n  }\n\n  async postPublicImportDirectory(request: OrganizationImportRequest): Promise<any> {\n    return this.send(\"POST\", \"/public/organization/import\", request, true, false);\n  }\n\n  async getTaxRates(): Promise<ListResponse<TaxRateResponse>> {\n    const r = await this.send(\"GET\", \"/plans/sales-tax-rates/\", null, true, true);\n    return new ListResponse(r, TaxRateResponse);\n  }\n\n  // Settings APIs\n\n  async getSettingsDomains(): Promise<DomainsResponse> {\n    const r = await this.send(\"GET\", \"/settings/domains\", null, true, true);\n    return new DomainsResponse(r);\n  }\n\n  async putSettingsDomains(request: UpdateDomainsRequest): Promise<DomainsResponse> {\n    const r = await this.send(\"PUT\", \"/settings/domains\", request, true, true);\n    return new DomainsResponse(r);\n  }\n\n  // Sync APIs\n\n  async getSync(): Promise<SyncResponse> {\n    const path = this.isDesktopClient || this.isWebClient ? \"/sync?excludeDomains=true\" : \"/sync\";\n    const r = await this.send(\"GET\", path, null, true, true);\n    return new SyncResponse(r);\n  }\n\n  // Two-factor APIs\n\n  async getTwoFactorProviders(): Promise<ListResponse<TwoFactorProviderResponse>> {\n    const r = await this.send(\"GET\", \"/two-factor\", null, true, true);\n    return new ListResponse(r, TwoFactorProviderResponse);\n  }\n\n  async getTwoFactorOrganizationProviders(\n    organizationId: string\n  ): Promise<ListResponse<TwoFactorProviderResponse>> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/two-factor\",\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, TwoFactorProviderResponse);\n  }\n\n  async getTwoFactorAuthenticator(\n    request: SecretVerificationRequest\n  ): Promise<TwoFactorAuthenticatorResponse> {\n    const r = await this.send(\"POST\", \"/two-factor/get-authenticator\", request, true, true);\n    return new TwoFactorAuthenticatorResponse(r);\n  }\n\n  async getTwoFactorEmail(request: SecretVerificationRequest): Promise<TwoFactorEmailResponse> {\n    const r = await this.send(\"POST\", \"/two-factor/get-email\", request, true, true);\n    return new TwoFactorEmailResponse(r);\n  }\n\n  async getTwoFactorDuo(request: SecretVerificationRequest): Promise<TwoFactorDuoResponse> {\n    const r = await this.send(\"POST\", \"/two-factor/get-duo\", request, true, true);\n    return new TwoFactorDuoResponse(r);\n  }\n\n  async getTwoFactorOrganizationDuo(\n    organizationId: string,\n    request: SecretVerificationRequest\n  ): Promise<TwoFactorDuoResponse> {\n    const r = await this.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/two-factor/get-duo\",\n      request,\n      true,\n      true\n    );\n    return new TwoFactorDuoResponse(r);\n  }\n\n  async getTwoFactorYubiKey(request: SecretVerificationRequest): Promise<TwoFactorYubiKeyResponse> {\n    const r = await this.send(\"POST\", \"/two-factor/get-yubikey\", request, true, true);\n    return new TwoFactorYubiKeyResponse(r);\n  }\n\n  async getTwoFactorWebAuthn(\n    request: SecretVerificationRequest\n  ): Promise<TwoFactorWebAuthnResponse> {\n    const r = await this.send(\"POST\", \"/two-factor/get-webauthn\", request, true, true);\n    return new TwoFactorWebAuthnResponse(r);\n  }\n\n  async getTwoFactorWebAuthnChallenge(\n    request: SecretVerificationRequest\n  ): Promise<ChallengeResponse> {\n    const r = await this.send(\"POST\", \"/two-factor/get-webauthn-challenge\", request, true, true);\n    return new ChallengeResponse(r);\n  }\n\n  async getTwoFactorRecover(request: SecretVerificationRequest): Promise<TwoFactorRecoverResponse> {\n    const r = await this.send(\"POST\", \"/two-factor/get-recover\", request, true, true);\n    return new TwoFactorRecoverResponse(r);\n  }\n\n  async putTwoFactorAuthenticator(\n    request: UpdateTwoFactorAuthenticatorRequest\n  ): Promise<TwoFactorAuthenticatorResponse> {\n    const r = await this.send(\"PUT\", \"/two-factor/authenticator\", request, true, true);\n    return new TwoFactorAuthenticatorResponse(r);\n  }\n\n  async putTwoFactorEmail(request: UpdateTwoFactorEmailRequest): Promise<TwoFactorEmailResponse> {\n    const r = await this.send(\"PUT\", \"/two-factor/email\", request, true, true);\n    return new TwoFactorEmailResponse(r);\n  }\n\n  async putTwoFactorDuo(request: UpdateTwoFactorDuoRequest): Promise<TwoFactorDuoResponse> {\n    const r = await this.send(\"PUT\", \"/two-factor/duo\", request, true, true);\n    return new TwoFactorDuoResponse(r);\n  }\n\n  async putTwoFactorOrganizationDuo(\n    organizationId: string,\n    request: UpdateTwoFactorDuoRequest\n  ): Promise<TwoFactorDuoResponse> {\n    const r = await this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/two-factor/duo\",\n      request,\n      true,\n      true\n    );\n    return new TwoFactorDuoResponse(r);\n  }\n\n  async putTwoFactorYubiKey(\n    request: UpdateTwoFactorYubioOtpRequest\n  ): Promise<TwoFactorYubiKeyResponse> {\n    const r = await this.send(\"PUT\", \"/two-factor/yubikey\", request, true, true);\n    return new TwoFactorYubiKeyResponse(r);\n  }\n\n  async putTwoFactorWebAuthn(\n    request: UpdateTwoFactorWebAuthnRequest\n  ): Promise<TwoFactorWebAuthnResponse> {\n    const response = request.deviceResponse.response as AuthenticatorAttestationResponse;\n    const data: any = Object.assign({}, request);\n\n    data.deviceResponse = {\n      id: request.deviceResponse.id,\n      rawId: btoa(request.deviceResponse.id),\n      type: request.deviceResponse.type,\n      extensions: request.deviceResponse.getClientExtensionResults(),\n      response: {\n        AttestationObject: Utils.fromBufferToB64(response.attestationObject),\n        clientDataJson: Utils.fromBufferToB64(response.clientDataJSON),\n      },\n    };\n\n    const r = await this.send(\"PUT\", \"/two-factor/webauthn\", data, true, true);\n    return new TwoFactorWebAuthnResponse(r);\n  }\n\n  async deleteTwoFactorWebAuthn(\n    request: UpdateTwoFactorWebAuthnDeleteRequest\n  ): Promise<TwoFactorWebAuthnResponse> {\n    const r = await this.send(\"DELETE\", \"/two-factor/webauthn\", request, true, true);\n    return new TwoFactorWebAuthnResponse(r);\n  }\n\n  async putTwoFactorDisable(request: TwoFactorProviderRequest): Promise<TwoFactorProviderResponse> {\n    const r = await this.send(\"PUT\", \"/two-factor/disable\", request, true, true);\n    return new TwoFactorProviderResponse(r);\n  }\n\n  async putTwoFactorOrganizationDisable(\n    organizationId: string,\n    request: TwoFactorProviderRequest\n  ): Promise<TwoFactorProviderResponse> {\n    const r = await this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/two-factor/disable\",\n      request,\n      true,\n      true\n    );\n    return new TwoFactorProviderResponse(r);\n  }\n\n  postTwoFactorRecover(request: TwoFactorRecoveryRequest): Promise<any> {\n    return this.send(\"POST\", \"/two-factor/recover\", request, false, false);\n  }\n\n  postTwoFactorEmailSetup(request: TwoFactorEmailRequest): Promise<any> {\n    return this.send(\"POST\", \"/two-factor/send-email\", request, true, false);\n  }\n\n  postTwoFactorEmail(request: TwoFactorEmailRequest): Promise<any> {\n    return this.send(\"POST\", \"/two-factor/send-email-login\", request, false, false);\n  }\n\n  async getDeviceVerificationSettings(): Promise<DeviceVerificationResponse> {\n    const r = await this.send(\n      \"GET\",\n      \"/two-factor/get-device-verification-settings\",\n      null,\n      true,\n      true\n    );\n    return new DeviceVerificationResponse(r);\n  }\n\n  async putDeviceVerificationSettings(\n    request: DeviceVerificationRequest\n  ): Promise<DeviceVerificationResponse> {\n    const r = await this.send(\n      \"PUT\",\n      \"/two-factor/device-verification-settings\",\n      request,\n      true,\n      true\n    );\n    return new DeviceVerificationResponse(r);\n  }\n\n  // Emergency Access APIs\n\n  async getEmergencyAccessTrusted(): Promise<ListResponse<EmergencyAccessGranteeDetailsResponse>> {\n    const r = await this.send(\"GET\", \"/emergency-access/trusted\", null, true, true);\n    return new ListResponse(r, EmergencyAccessGranteeDetailsResponse);\n  }\n\n  async getEmergencyAccessGranted(): Promise<ListResponse<EmergencyAccessGrantorDetailsResponse>> {\n    const r = await this.send(\"GET\", \"/emergency-access/granted\", null, true, true);\n    return new ListResponse(r, EmergencyAccessGrantorDetailsResponse);\n  }\n\n  async getEmergencyAccess(id: string): Promise<EmergencyAccessGranteeDetailsResponse> {\n    const r = await this.send(\"GET\", \"/emergency-access/\" + id, null, true, true);\n    return new EmergencyAccessGranteeDetailsResponse(r);\n  }\n\n  async getEmergencyGrantorPolicies(id: string): Promise<ListResponse<PolicyResponse>> {\n    const r = await this.send(\"GET\", \"/emergency-access/\" + id + \"/policies\", null, true, true);\n    return new ListResponse(r, PolicyResponse);\n  }\n\n  putEmergencyAccess(id: string, request: EmergencyAccessUpdateRequest): Promise<any> {\n    return this.send(\"PUT\", \"/emergency-access/\" + id, request, true, false);\n  }\n\n  deleteEmergencyAccess(id: string): Promise<any> {\n    return this.send(\"DELETE\", \"/emergency-access/\" + id, null, true, false);\n  }\n\n  postEmergencyAccessInvite(request: EmergencyAccessInviteRequest): Promise<any> {\n    return this.send(\"POST\", \"/emergency-access/invite\", request, true, false);\n  }\n\n  postEmergencyAccessReinvite(id: string): Promise<any> {\n    return this.send(\"POST\", \"/emergency-access/\" + id + \"/reinvite\", null, true, false);\n  }\n\n  postEmergencyAccessAccept(id: string, request: EmergencyAccessAcceptRequest): Promise<any> {\n    return this.send(\"POST\", \"/emergency-access/\" + id + \"/accept\", request, true, false);\n  }\n\n  postEmergencyAccessConfirm(id: string, request: EmergencyAccessConfirmRequest): Promise<any> {\n    return this.send(\"POST\", \"/emergency-access/\" + id + \"/confirm\", request, true, false);\n  }\n\n  postEmergencyAccessInitiate(id: string): Promise<any> {\n    return this.send(\"POST\", \"/emergency-access/\" + id + \"/initiate\", null, true, false);\n  }\n\n  postEmergencyAccessApprove(id: string): Promise<any> {\n    return this.send(\"POST\", \"/emergency-access/\" + id + \"/approve\", null, true, false);\n  }\n\n  postEmergencyAccessReject(id: string): Promise<any> {\n    return this.send(\"POST\", \"/emergency-access/\" + id + \"/reject\", null, true, false);\n  }\n\n  async postEmergencyAccessTakeover(id: string): Promise<EmergencyAccessTakeoverResponse> {\n    const r = await this.send(\"POST\", \"/emergency-access/\" + id + \"/takeover\", null, true, true);\n    return new EmergencyAccessTakeoverResponse(r);\n  }\n\n  async postEmergencyAccessPassword(\n    id: string,\n    request: EmergencyAccessPasswordRequest\n  ): Promise<any> {\n    await this.send(\"POST\", \"/emergency-access/\" + id + \"/password\", request, true, true);\n  }\n\n  async postEmergencyAccessView(id: string): Promise<EmergencyAccessViewResponse> {\n    const r = await this.send(\"POST\", \"/emergency-access/\" + id + \"/view\", null, true, true);\n    return new EmergencyAccessViewResponse(r);\n  }\n\n  // Organization APIs\n\n  async getOrganization(id: string): Promise<OrganizationResponse> {\n    const r = await this.send(\"GET\", \"/organizations/\" + id, null, true, true);\n    return new OrganizationResponse(r);\n  }\n\n  async getOrganizationBilling(id: string): Promise<BillingResponse> {\n    const r = await this.send(\"GET\", \"/organizations/\" + id + \"/billing\", null, true, true);\n    return new BillingResponse(r);\n  }\n\n  async getOrganizationSubscription(id: string): Promise<OrganizationSubscriptionResponse> {\n    const r = await this.send(\"GET\", \"/organizations/\" + id + \"/subscription\", null, true, true);\n    return new OrganizationSubscriptionResponse(r);\n  }\n\n  async getCloudCommunicationsEnabled(): Promise<boolean> {\n    const r = await this.send(\"GET\", \"/organizations/connections/enabled\", null, true, true);\n    return r as boolean;\n  }\n\n  async getOrganizationConnection<TConfig extends OrganizationConnectionConfigApis>(\n    id: string,\n    type: OrganizationConnectionType,\n    configType: { new (response: any): TConfig }\n  ): Promise<OrganizationConnectionResponse<TConfig>> {\n    const r = await this.send(\"GET\", `/organizations/connections/${id}/${type}`, null, true, true);\n    return new OrganizationConnectionResponse(r, configType);\n  }\n\n  async createOrganizationConnection<TConfig extends OrganizationConnectionConfigApis>(\n    request: OrganizationConnectionRequest,\n    configType: { new (response: any): TConfig }\n  ): Promise<OrganizationConnectionResponse<TConfig>> {\n    const r = await this.send(\"POST\", \"/organizations/connections/\", request, true, true);\n    return new OrganizationConnectionResponse(r, configType);\n  }\n\n  async updateOrganizationConnection<TConfig extends OrganizationConnectionConfigApis>(\n    request: OrganizationConnectionRequest,\n    configType: { new (response: any): TConfig },\n    organizationConnectionId?: string\n  ): Promise<OrganizationConnectionResponse<TConfig>> {\n    const r = await this.send(\n      \"PUT\",\n      \"/organizations/connections/\" + organizationConnectionId,\n      request,\n      true,\n      true\n    );\n    return new OrganizationConnectionResponse(r, configType);\n  }\n\n  async deleteOrganizationConnection(id: string): Promise<void> {\n    return this.send(\"DELETE\", \"/organizations/connections/\" + id, null, true, false);\n  }\n\n  async getOrganizationLicense(id: string, installationId: string): Promise<any> {\n    return this.send(\n      \"GET\",\n      \"/organizations/\" + id + \"/license?installationId=\" + installationId,\n      null,\n      true,\n      true\n    );\n  }\n\n  async getOrganizationTaxInfo(id: string): Promise<TaxInfoResponse> {\n    const r = await this.send(\"GET\", \"/organizations/\" + id + \"/tax\", null, true, true);\n    return new TaxInfoResponse(r);\n  }\n\n  async getOrganizationSso(id: string): Promise<OrganizationSsoResponse> {\n    const r = await this.send(\"GET\", \"/organizations/\" + id + \"/sso\", null, true, true);\n    return new OrganizationSsoResponse(r);\n  }\n\n  async postOrganization(request: OrganizationCreateRequest): Promise<OrganizationResponse> {\n    const r = await this.send(\"POST\", \"/organizations\", request, true, true);\n    return new OrganizationResponse(r);\n  }\n\n  async putOrganization(\n    id: string,\n    request: OrganizationUpdateRequest\n  ): Promise<OrganizationResponse> {\n    const r = await this.send(\"PUT\", \"/organizations/\" + id, request, true, true);\n    return new OrganizationResponse(r);\n  }\n\n  async putOrganizationTaxInfo(\n    id: string,\n    request: OrganizationTaxInfoUpdateRequest\n  ): Promise<any> {\n    return this.send(\"PUT\", \"/organizations/\" + id + \"/tax\", request, true, false);\n  }\n\n  postLeaveOrganization(id: string): Promise<any> {\n    return this.send(\"POST\", \"/organizations/\" + id + \"/leave\", null, true, false);\n  }\n\n  async postOrganizationLicense(data: FormData): Promise<OrganizationResponse> {\n    const r = await this.send(\"POST\", \"/organizations/license\", data, true, true);\n    return new OrganizationResponse(r);\n  }\n\n  async postOrganizationLicenseUpdate(id: string, data: FormData): Promise<any> {\n    return this.send(\"POST\", \"/organizations/\" + id + \"/license\", data, true, false);\n  }\n\n  async postOrganizationApiKey(\n    id: string,\n    request: OrganizationApiKeyRequest\n  ): Promise<ApiKeyResponse> {\n    const r = await this.send(\"POST\", \"/organizations/\" + id + \"/api-key\", request, true, true);\n    return new ApiKeyResponse(r);\n  }\n\n  async getOrganizationApiKeyInformation(\n    id: string,\n    type: OrganizationApiKeyType = null\n  ): Promise<ListResponse<OrganizationApiKeyInformationResponse>> {\n    const uri =\n      type === null\n        ? \"/organizations/\" + id + \"/api-key-information\"\n        : \"/organizations/\" + id + \"/api-key-information/\" + type;\n    const r = await this.send(\"GET\", uri, null, true, true);\n    return new ListResponse(r, OrganizationApiKeyInformationResponse);\n  }\n\n  async postOrganizationRotateApiKey(\n    id: string,\n    request: OrganizationApiKeyRequest\n  ): Promise<ApiKeyResponse> {\n    const r = await this.send(\n      \"POST\",\n      \"/organizations/\" + id + \"/rotate-api-key\",\n      request,\n      true,\n      true\n    );\n    return new ApiKeyResponse(r);\n  }\n\n  async postOrganizationSso(\n    id: string,\n    request: OrganizationSsoRequest\n  ): Promise<OrganizationSsoResponse> {\n    const r = await this.send(\"POST\", \"/organizations/\" + id + \"/sso\", request, true, true);\n    return new OrganizationSsoResponse(r);\n  }\n\n  async postOrganizationUpgrade(\n    id: string,\n    request: OrganizationUpgradeRequest\n  ): Promise<PaymentResponse> {\n    const r = await this.send(\"POST\", \"/organizations/\" + id + \"/upgrade\", request, true, true);\n    return new PaymentResponse(r);\n  }\n\n  async postOrganizationUpdateSubscription(\n    id: string,\n    request: OrganizationSubscriptionUpdateRequest\n  ): Promise<void> {\n    return this.send(\"POST\", \"/organizations/\" + id + \"/subscription\", request, true, false);\n  }\n\n  async postOrganizationSeat(id: string, request: SeatRequest): Promise<PaymentResponse> {\n    const r = await this.send(\"POST\", \"/organizations/\" + id + \"/seat\", request, true, true);\n    return new PaymentResponse(r);\n  }\n\n  async postOrganizationStorage(id: string, request: StorageRequest): Promise<PaymentResponse> {\n    const r = await this.send(\"POST\", \"/organizations/\" + id + \"/storage\", request, true, true);\n    return new PaymentResponse(r);\n  }\n\n  postOrganizationPayment(id: string, request: PaymentRequest): Promise<any> {\n    return this.send(\"POST\", \"/organizations/\" + id + \"/payment\", request, true, false);\n  }\n\n  postOrganizationVerifyBank(id: string, request: VerifyBankRequest): Promise<any> {\n    return this.send(\"POST\", \"/organizations/\" + id + \"/verify-bank\", request, true, false);\n  }\n\n  postOrganizationCancel(id: string): Promise<any> {\n    return this.send(\"POST\", \"/organizations/\" + id + \"/cancel\", null, true, false);\n  }\n\n  postOrganizationReinstate(id: string): Promise<any> {\n    return this.send(\"POST\", \"/organizations/\" + id + \"/reinstate\", null, true, false);\n  }\n\n  deleteOrganization(id: string, request: SecretVerificationRequest): Promise<any> {\n    return this.send(\"DELETE\", \"/organizations/\" + id, request, true, false);\n  }\n\n  async getOrganizationKeys(id: string): Promise<OrganizationKeysResponse> {\n    const r = await this.send(\"GET\", \"/organizations/\" + id + \"/keys\", null, true, true);\n    return new OrganizationKeysResponse(r);\n  }\n\n  async postOrganizationKeys(\n    id: string,\n    request: OrganizationKeysRequest\n  ): Promise<OrganizationKeysResponse> {\n    const r = await this.send(\"POST\", \"/organizations/\" + id + \"/keys\", request, true, true);\n    return new OrganizationKeysResponse(r);\n  }\n\n  // Provider APIs\n\n  async postProviderSetup(id: string, request: ProviderSetupRequest) {\n    const r = await this.send(\"POST\", \"/providers/\" + id + \"/setup\", request, true, true);\n    return new ProviderResponse(r);\n  }\n\n  async getProvider(id: string) {\n    const r = await this.send(\"GET\", \"/providers/\" + id, null, true, true);\n    return new ProviderResponse(r);\n  }\n\n  async putProvider(id: string, request: ProviderUpdateRequest) {\n    const r = await this.send(\"PUT\", \"/providers/\" + id, request, true, true);\n    return new ProviderResponse(r);\n  }\n\n  // Provider User APIs\n\n  async getProviderUsers(\n    providerId: string\n  ): Promise<ListResponse<ProviderUserUserDetailsResponse>> {\n    const r = await this.send(\"GET\", \"/providers/\" + providerId + \"/users\", null, true, true);\n    return new ListResponse(r, ProviderUserUserDetailsResponse);\n  }\n\n  async getProviderUser(providerId: string, id: string): Promise<ProviderUserResponse> {\n    const r = await this.send(\"GET\", \"/providers/\" + providerId + \"/users/\" + id, null, true, true);\n    return new ProviderUserResponse(r);\n  }\n\n  postProviderUserInvite(providerId: string, request: ProviderUserInviteRequest): Promise<any> {\n    return this.send(\"POST\", \"/providers/\" + providerId + \"/users/invite\", request, true, false);\n  }\n\n  postProviderUserReinvite(providerId: string, id: string): Promise<any> {\n    return this.send(\n      \"POST\",\n      \"/providers/\" + providerId + \"/users/\" + id + \"/reinvite\",\n      null,\n      true,\n      false\n    );\n  }\n\n  async postManyProviderUserReinvite(\n    providerId: string,\n    request: ProviderUserBulkRequest\n  ): Promise<ListResponse<ProviderUserBulkResponse>> {\n    const r = await this.send(\n      \"POST\",\n      \"/providers/\" + providerId + \"/users/reinvite\",\n      request,\n      true,\n      true\n    );\n    return new ListResponse(r, ProviderUserBulkResponse);\n  }\n\n  async postProviderUserBulkConfirm(\n    providerId: string,\n    request: ProviderUserBulkConfirmRequest\n  ): Promise<ListResponse<ProviderUserBulkResponse>> {\n    const r = await this.send(\n      \"POST\",\n      \"/providers/\" + providerId + \"/users/confirm\",\n      request,\n      true,\n      true\n    );\n    return new ListResponse(r, ProviderUserBulkResponse);\n  }\n\n  async deleteManyProviderUsers(\n    providerId: string,\n    request: ProviderUserBulkRequest\n  ): Promise<ListResponse<ProviderUserBulkResponse>> {\n    const r = await this.send(\"DELETE\", \"/providers/\" + providerId + \"/users\", request, true, true);\n    return new ListResponse(r, ProviderUserBulkResponse);\n  }\n\n  postProviderUserAccept(\n    providerId: string,\n    id: string,\n    request: ProviderUserAcceptRequest\n  ): Promise<any> {\n    return this.send(\n      \"POST\",\n      \"/providers/\" + providerId + \"/users/\" + id + \"/accept\",\n      request,\n      true,\n      false\n    );\n  }\n\n  postProviderUserConfirm(\n    providerId: string,\n    id: string,\n    request: ProviderUserConfirmRequest\n  ): Promise<any> {\n    return this.send(\n      \"POST\",\n      \"/providers/\" + providerId + \"/users/\" + id + \"/confirm\",\n      request,\n      true,\n      false\n    );\n  }\n\n  async postProviderUsersPublicKey(\n    providerId: string,\n    request: ProviderUserBulkRequest\n  ): Promise<ListResponse<ProviderUserBulkPublicKeyResponse>> {\n    const r = await this.send(\n      \"POST\",\n      \"/providers/\" + providerId + \"/users/public-keys\",\n      request,\n      true,\n      true\n    );\n    return new ListResponse(r, ProviderUserBulkPublicKeyResponse);\n  }\n\n  putProviderUser(\n    providerId: string,\n    id: string,\n    request: ProviderUserUpdateRequest\n  ): Promise<any> {\n    return this.send(\"PUT\", \"/providers/\" + providerId + \"/users/\" + id, request, true, false);\n  }\n\n  deleteProviderUser(providerId: string, id: string): Promise<any> {\n    return this.send(\"DELETE\", \"/providers/\" + providerId + \"/users/\" + id, null, true, false);\n  }\n\n  // Provider Organization APIs\n\n  async getProviderClients(\n    providerId: string\n  ): Promise<ListResponse<ProviderOrganizationOrganizationDetailsResponse>> {\n    const r = await this.send(\n      \"GET\",\n      \"/providers/\" + providerId + \"/organizations\",\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, ProviderOrganizationOrganizationDetailsResponse);\n  }\n\n  postProviderAddOrganization(\n    providerId: string,\n    request: ProviderAddOrganizationRequest\n  ): Promise<any> {\n    return this.send(\n      \"POST\",\n      \"/providers/\" + providerId + \"/organizations/add\",\n      request,\n      true,\n      false\n    );\n  }\n\n  async postProviderCreateOrganization(\n    providerId: string,\n    request: ProviderOrganizationCreateRequest\n  ): Promise<ProviderOrganizationResponse> {\n    const r = await this.send(\n      \"POST\",\n      \"/providers/\" + providerId + \"/organizations\",\n      request,\n      true,\n      true\n    );\n    return new ProviderOrganizationResponse(r);\n  }\n\n  deleteProviderOrganization(providerId: string, id: string): Promise<any> {\n    return this.send(\n      \"DELETE\",\n      \"/providers/\" + providerId + \"/organizations/\" + id,\n      null,\n      true,\n      false\n    );\n  }\n\n  // Event APIs\n\n  async getEvents(start: string, end: string, token: string): Promise<ListResponse<EventResponse>> {\n    const r = await this.send(\n      \"GET\",\n      this.addEventParameters(\"/events\", start, end, token),\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, EventResponse);\n  }\n\n  async getEventsCipher(\n    id: string,\n    start: string,\n    end: string,\n    token: string\n  ): Promise<ListResponse<EventResponse>> {\n    const r = await this.send(\n      \"GET\",\n      this.addEventParameters(\"/ciphers/\" + id + \"/events\", start, end, token),\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, EventResponse);\n  }\n\n  async getEventsOrganization(\n    id: string,\n    start: string,\n    end: string,\n    token: string\n  ): Promise<ListResponse<EventResponse>> {\n    const r = await this.send(\n      \"GET\",\n      this.addEventParameters(\"/organizations/\" + id + \"/events\", start, end, token),\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, EventResponse);\n  }\n\n  async getEventsOrganizationUser(\n    organizationId: string,\n    id: string,\n    start: string,\n    end: string,\n    token: string\n  ): Promise<ListResponse<EventResponse>> {\n    const r = await this.send(\n      \"GET\",\n      this.addEventParameters(\n        \"/organizations/\" + organizationId + \"/users/\" + id + \"/events\",\n        start,\n        end,\n        token\n      ),\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, EventResponse);\n  }\n\n  async getEventsProvider(\n    id: string,\n    start: string,\n    end: string,\n    token: string\n  ): Promise<ListResponse<EventResponse>> {\n    const r = await this.send(\n      \"GET\",\n      this.addEventParameters(\"/providers/\" + id + \"/events\", start, end, token),\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, EventResponse);\n  }\n\n  async getEventsProviderUser(\n    providerId: string,\n    id: string,\n    start: string,\n    end: string,\n    token: string\n  ): Promise<ListResponse<EventResponse>> {\n    const r = await this.send(\n      \"GET\",\n      this.addEventParameters(\n        \"/providers/\" + providerId + \"/users/\" + id + \"/events\",\n        start,\n        end,\n        token\n      ),\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, EventResponse);\n  }\n\n  async postEventsCollect(request: EventRequest[]): Promise<any> {\n    const authHeader = await this.getActiveBearerToken();\n    const headers = new Headers({\n      \"Device-Type\": this.deviceType,\n      Authorization: \"Bearer \" + authHeader,\n      \"Content-Type\": \"application/json; charset=utf-8\",\n    });\n    if (this.customUserAgent != null) {\n      headers.set(\"User-Agent\", this.customUserAgent);\n    }\n    const response = await this.fetch(\n      new Request(this.environmentService.getEventsUrl() + \"/collect\", {\n        cache: \"no-store\",\n        credentials: this.getCredentials(),\n        method: \"POST\",\n        body: JSON.stringify(request),\n        headers: headers,\n      })\n    );\n    if (response.status !== 200) {\n      return Promise.reject(\"Event post failed.\");\n    }\n  }\n\n  // User APIs\n\n  async getUserPublicKey(id: string): Promise<UserKeyResponse> {\n    const r = await this.send(\"GET\", \"/users/\" + id + \"/public-key\", null, true, true);\n    return new UserKeyResponse(r);\n  }\n\n  // HIBP APIs\n\n  async getHibpBreach(username: string): Promise<BreachAccountResponse[]> {\n    const r = await this.send(\"GET\", \"/hibp/breach?username=\" + username, null, true, true);\n    return r.map((a: any) => new BreachAccountResponse(a));\n  }\n\n  // Misc\n\n  async postBitPayInvoice(request: BitPayInvoiceRequest): Promise<string> {\n    const r = await this.send(\"POST\", \"/bitpay-invoice\", request, true, true);\n    return r as string;\n  }\n\n  async postSetupPayment(): Promise<string> {\n    const r = await this.send(\"POST\", \"/setup-payment\", null, true, true);\n    return r as string;\n  }\n\n  // Key Connector\n\n  async getUserKeyFromKeyConnector(keyConnectorUrl: string): Promise<KeyConnectorUserKeyResponse> {\n    const authHeader = await this.getActiveBearerToken();\n\n    const response = await this.fetch(\n      new Request(keyConnectorUrl + \"/user-keys\", {\n        cache: \"no-store\",\n        method: \"GET\",\n        headers: new Headers({\n          Accept: \"application/json\",\n          Authorization: \"Bearer \" + authHeader,\n        }),\n      })\n    );\n\n    if (response.status !== 200) {\n      const error = await this.handleError(response, false, true);\n      return Promise.reject(error);\n    }\n\n    return new KeyConnectorUserKeyResponse(await response.json());\n  }\n\n  async postUserKeyToKeyConnector(\n    keyConnectorUrl: string,\n    request: KeyConnectorUserKeyRequest\n  ): Promise<void> {\n    const authHeader = await this.getActiveBearerToken();\n\n    const response = await this.fetch(\n      new Request(keyConnectorUrl + \"/user-keys\", {\n        cache: \"no-store\",\n        method: \"POST\",\n        headers: new Headers({\n          Accept: \"application/json\",\n          Authorization: \"Bearer \" + authHeader,\n          \"Content-Type\": \"application/json; charset=utf-8\",\n        }),\n        body: JSON.stringify(request),\n      })\n    );\n\n    if (response.status !== 200) {\n      const error = await this.handleError(response, false, true);\n      return Promise.reject(error);\n    }\n  }\n\n  async getKeyConnectorAlive(keyConnectorUrl: string) {\n    const response = await this.fetch(\n      new Request(keyConnectorUrl + \"/alive\", {\n        cache: \"no-store\",\n        method: \"GET\",\n        headers: new Headers({\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json; charset=utf-8\",\n        }),\n      })\n    );\n\n    if (response.status !== 200) {\n      const error = await this.handleError(response, false, true);\n      return Promise.reject(error);\n    }\n  }\n\n  async getOrganizationExport(organizationId: string): Promise<OrganizationExportResponse> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/export\",\n      null,\n      true,\n      true\n    );\n    return new OrganizationExportResponse(r);\n  }\n\n  // Helpers\n\n  async getActiveBearerToken(): Promise<string> {\n    let accessToken = await this.tokenService.getToken();\n    if (await this.tokenService.tokenNeedsRefresh()) {\n      await this.doAuthRefresh();\n      accessToken = await this.tokenService.getToken();\n    }\n    return accessToken;\n  }\n\n  async fetch(request: Request): Promise<Response> {\n    if (request.method === \"GET\") {\n      request.headers.set(\"Cache-Control\", \"no-store\");\n      request.headers.set(\"Pragma\", \"no-cache\");\n    }\n    request.headers.set(\"Bitwarden-Client-Name\", this.platformUtilsService.getClientType());\n    request.headers.set(\n      \"Bitwarden-Client-Version\",\n      await this.platformUtilsService.getApplicationVersion()\n    );\n    return this.nativeFetch(request);\n  }\n\n  nativeFetch(request: Request): Promise<Response> {\n    return fetch(request);\n  }\n\n  async preValidateSso(identifier: string): Promise<SsoPreValidateResponse> {\n    if (identifier == null || identifier === \"\") {\n      throw new Error(\"Organization Identifier was not provided.\");\n    }\n    const headers = new Headers({\n      Accept: \"application/json\",\n      \"Device-Type\": this.deviceType,\n    });\n    if (this.customUserAgent != null) {\n      headers.set(\"User-Agent\", this.customUserAgent);\n    }\n\n    const path = `/account/prevalidate?domainHint=${encodeURIComponent(identifier)}`;\n    const response = await this.fetch(\n      new Request(this.environmentService.getIdentityUrl() + path, {\n        cache: \"no-store\",\n        credentials: this.getCredentials(),\n        headers: headers,\n        method: \"GET\",\n      })\n    );\n\n    if (response.status === 200) {\n      const body = await response.json();\n      return new SsoPreValidateResponse(body);\n    } else {\n      const error = await this.handleError(response, false, true);\n      return Promise.reject(error);\n    }\n  }\n\n  async postCreateSponsorship(\n    sponsoredOrgId: string,\n    request: OrganizationSponsorshipCreateRequest\n  ): Promise<void> {\n    return await this.send(\n      \"POST\",\n      \"/organization/sponsorship/\" +\n        (this.platformUtilsService.isSelfHost() ? \"self-hosted/\" : \"\") +\n        sponsoredOrgId +\n        \"/families-for-enterprise\",\n      request,\n      true,\n      false\n    );\n  }\n\n  async getSponsorshipSyncStatus(\n    sponsoredOrgId: string\n  ): Promise<OrganizationSponsorshipSyncStatusResponse> {\n    const response = await this.send(\n      \"GET\",\n      \"/organization/sponsorship/\" + sponsoredOrgId + \"/sync-status\",\n      null,\n      true,\n      true\n    );\n    return new OrganizationSponsorshipSyncStatusResponse(response);\n  }\n\n  async deleteRevokeSponsorship(sponsoringOrganizationId: string): Promise<void> {\n    return await this.send(\n      \"DELETE\",\n      \"/organization/sponsorship/\" +\n        (this.platformUtilsService.isSelfHost() ? \"self-hosted/\" : \"\") +\n        sponsoringOrganizationId,\n      null,\n      true,\n      false\n    );\n  }\n\n  async deleteRemoveSponsorship(sponsoringOrgId: string): Promise<void> {\n    return await this.send(\n      \"DELETE\",\n      \"/organization/sponsorship/sponsored/\" + sponsoringOrgId,\n      null,\n      true,\n      false\n    );\n  }\n\n  async postPreValidateSponsorshipToken(sponsorshipToken: string): Promise<boolean> {\n    const r = await this.send(\n      \"POST\",\n      \"/organization/sponsorship/validate-token?sponsorshipToken=\" +\n        encodeURIComponent(sponsorshipToken),\n      null,\n      true,\n      true\n    );\n    return r as boolean;\n  }\n\n  async postRedeemSponsorship(\n    sponsorshipToken: string,\n    request: OrganizationSponsorshipRedeemRequest\n  ): Promise<void> {\n    return await this.send(\n      \"POST\",\n      \"/organization/sponsorship/redeem?sponsorshipToken=\" + encodeURIComponent(sponsorshipToken),\n      request,\n      true,\n      false\n    );\n  }\n\n  async postResendSponsorshipOffer(sponsoringOrgId: string): Promise<void> {\n    return await this.send(\n      \"POST\",\n      \"/organization/sponsorship/\" + sponsoringOrgId + \"/families-for-enterprise/resend\",\n      null,\n      true,\n      false\n    );\n  }\n\n  protected async doAuthRefresh(): Promise<void> {\n    const refreshToken = await this.tokenService.getRefreshToken();\n    if (refreshToken != null && refreshToken !== \"\") {\n      return this.doRefreshToken();\n    }\n\n    const clientId = await this.tokenService.getClientId();\n    const clientSecret = await this.tokenService.getClientSecret();\n    if (!Utils.isNullOrWhitespace(clientId) && !Utils.isNullOrWhitespace(clientSecret)) {\n      return this.doApiTokenRefresh();\n    }\n\n    throw new Error(\"Cannot refresh token, no refresh token or api keys are stored\");\n  }\n\n  protected async doRefreshToken(): Promise<void> {\n    const refreshToken = await this.tokenService.getRefreshToken();\n    if (refreshToken == null || refreshToken === \"\") {\n      throw new Error();\n    }\n    const headers = new Headers({\n      \"Content-Type\": \"application/x-www-form-urlencoded; charset=utf-8\",\n      Accept: \"application/json\",\n      \"Device-Type\": this.deviceType,\n    });\n    if (this.customUserAgent != null) {\n      headers.set(\"User-Agent\", this.customUserAgent);\n    }\n\n    const decodedToken = await this.tokenService.decodeToken();\n    const response = await this.fetch(\n      new Request(this.environmentService.getIdentityUrl() + \"/connect/token\", {\n        body: this.qsStringify({\n          grant_type: \"refresh_token\",\n          client_id: decodedToken.client_id,\n          refresh_token: refreshToken,\n        }),\n        cache: \"no-store\",\n        credentials: this.getCredentials(),\n        headers: headers,\n        method: \"POST\",\n      })\n    );\n\n    if (response.status === 200) {\n      const responseJson = await response.json();\n      const tokenResponse = new IdentityTokenResponse(responseJson);\n      await this.tokenService.setTokens(\n        tokenResponse.accessToken,\n        tokenResponse.refreshToken,\n        null\n      );\n    } else {\n      const error = await this.handleError(response, true, true);\n      return Promise.reject(error);\n    }\n  }\n\n  protected async doApiTokenRefresh(): Promise<void> {\n    const clientId = await this.tokenService.getClientId();\n    const clientSecret = await this.tokenService.getClientSecret();\n\n    const appId = await this.appIdService.getAppId();\n    const deviceRequest = new DeviceRequest(appId, this.platformUtilsService);\n\n    const tokenRequest = new ApiTokenRequest(\n      clientId,\n      clientSecret,\n      new TokenRequestTwoFactor(),\n      deviceRequest\n    );\n\n    const response = await this.postIdentityToken(tokenRequest);\n    if (!(response instanceof IdentityTokenResponse)) {\n      throw new Error(\"Invalid response received when refreshing api token\");\n    }\n\n    await this.tokenService.setToken(response.accessToken);\n  }\n\n  async send(\n    method: \"GET\" | \"POST\" | \"PUT\" | \"DELETE\",\n    path: string,\n    body: any,\n    authed: boolean,\n    hasResponse: boolean,\n    apiUrl?: string,\n    alterHeaders?: (headers: Headers) => void\n  ): Promise<any> {\n    apiUrl = Utils.isNullOrWhitespace(apiUrl) ? this.environmentService.getApiUrl() : apiUrl;\n\n    const requestUrl = apiUrl + path;\n    // Prevent directory traversal from malicious paths\n    if (new URL(requestUrl).href !== requestUrl) {\n      return Promise.reject(\"Invalid request url path.\");\n    }\n\n    const headers = new Headers({\n      \"Device-Type\": this.deviceType,\n    });\n    if (this.customUserAgent != null) {\n      headers.set(\"User-Agent\", this.customUserAgent);\n    }\n\n    const requestInit: RequestInit = {\n      cache: \"no-store\",\n      credentials: this.getCredentials(),\n      method: method,\n    };\n\n    if (authed) {\n      const authHeader = await this.getActiveBearerToken();\n      headers.set(\"Authorization\", \"Bearer \" + authHeader);\n    }\n    if (body != null) {\n      if (typeof body === \"string\") {\n        requestInit.body = body;\n        headers.set(\"Content-Type\", \"application/x-www-form-urlencoded; charset=utf-8\");\n      } else if (typeof body === \"object\") {\n        if (body instanceof FormData) {\n          requestInit.body = body;\n        } else {\n          headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n          requestInit.body = JSON.stringify(body);\n        }\n      }\n    }\n    if (hasResponse) {\n      headers.set(\"Accept\", \"application/json\");\n    }\n    if (alterHeaders != null) {\n      alterHeaders(headers);\n    }\n\n    requestInit.headers = headers;\n    const response = await this.fetch(new Request(requestUrl, requestInit));\n\n    if (hasResponse && response.status === 200) {\n      const responseJson = await response.json();\n      return responseJson;\n    } else if (response.status !== 200) {\n      const error = await this.handleError(response, false, authed);\n      return Promise.reject(error);\n    }\n  }\n\n  private async handleError(\n    response: Response,\n    tokenError: boolean,\n    authed: boolean\n  ): Promise<ErrorResponse> {\n    if (\n      authed &&\n      ((tokenError && response.status === 400) ||\n        response.status === 401 ||\n        response.status === 403)\n    ) {\n      await this.logoutCallback(true);\n      return null;\n    }\n\n    let responseJson: any = null;\n    if (this.isJsonResponse(response)) {\n      responseJson = await response.json();\n    } else if (this.isTextResponse(response)) {\n      responseJson = { Message: await response.text() };\n    }\n\n    return new ErrorResponse(responseJson, response.status, tokenError);\n  }\n\n  private qsStringify(params: any): string {\n    return Object.keys(params)\n      .map((key) => {\n        return encodeURIComponent(key) + \"=\" + encodeURIComponent(params[key]);\n      })\n      .join(\"&\");\n  }\n\n  private getCredentials(): RequestCredentials {\n    if (!this.isWebClient || this.environmentService.hasBaseUrl()) {\n      return \"include\";\n    }\n    return undefined;\n  }\n\n  private addEventParameters(base: string, start: string, end: string, token: string) {\n    if (start != null) {\n      base += \"?start=\" + start;\n    }\n    if (end != null) {\n      base += base.indexOf(\"?\") > -1 ? \"&\" : \"?\";\n      base += \"end=\" + end;\n    }\n    if (token != null) {\n      base += base.indexOf(\"?\") > -1 ? \"&\" : \"?\";\n      base += \"continuationToken=\" + token;\n    }\n    return base;\n  }\n\n  private isJsonResponse(response: Response): boolean {\n    const typeHeader = response.headers.get(\"content-type\");\n    return typeHeader != null && typeHeader.indexOf(\"application/json\") > -1;\n  }\n\n  private isTextResponse(response: Response): boolean {\n    const typeHeader = response.headers.get(\"content-type\");\n    return typeHeader != null && typeHeader.indexOf(\"text\") > -1;\n  }\n}\n","import { AppIdService as AppIdServiceAbstraction } from \"../abstractions/appId.service\";\nimport { AbstractStorageService } from \"../abstractions/storage.service\";\nimport { HtmlStorageLocation } from \"../enums/htmlStorageLocation\";\nimport { Utils } from \"../misc/utils\";\n\nexport class AppIdService implements AppIdServiceAbstraction {\n  constructor(private storageService: AbstractStorageService) {}\n\n  getAppId(): Promise<string> {\n    return this.makeAndGetAppId(\"appId\");\n  }\n\n  getAnonymousAppId(): Promise<string> {\n    return this.makeAndGetAppId(\"anonymousAppId\");\n  }\n\n  private async makeAndGetAppId(key: string) {\n    const existingId = await this.storageService.get<string>(key, {\n      htmlStorageLocation: HtmlStorageLocation.Local,\n    });\n    if (existingId != null) {\n      return existingId;\n    }\n\n    const guid = Utils.newGuid();\n    await this.storageService.save(key, guid, {\n      htmlStorageLocation: HtmlStorageLocation.Local,\n    });\n    return guid;\n  }\n}\n","import { ApiService } from \"../abstractions/api.service\";\nimport { AuditService as AuditServiceAbstraction } from \"../abstractions/audit.service\";\nimport { CryptoFunctionService } from \"../abstractions/cryptoFunction.service\";\nimport { throttle } from \"../misc/throttle\";\nimport { Utils } from \"../misc/utils\";\nimport { BreachAccountResponse } from \"../models/response/breachAccountResponse\";\nimport { ErrorResponse } from \"../models/response/errorResponse\";\n\nconst PwnedPasswordsApi = \"https://api.pwnedpasswords.com/range/\";\n\nexport class AuditService implements AuditServiceAbstraction {\n  constructor(\n    private cryptoFunctionService: CryptoFunctionService,\n    private apiService: ApiService\n  ) {}\n\n  @throttle(100, () => \"passwordLeaked\")\n  async passwordLeaked(password: string): Promise<number> {\n    const hashBytes = await this.cryptoFunctionService.hash(password, \"sha1\");\n    const hash = Utils.fromBufferToHex(hashBytes).toUpperCase();\n    const hashStart = hash.substr(0, 5);\n    const hashEnding = hash.substr(5);\n\n    const response = await this.apiService.nativeFetch(new Request(PwnedPasswordsApi + hashStart));\n    const leakedHashes = await response.text();\n    const match = leakedHashes.split(/\\r?\\n/).find((v) => {\n      return v.split(\":\")[0] === hashEnding;\n    });\n\n    return match != null ? parseInt(match.split(\":\")[1], 10) : 0;\n  }\n\n  async breachedAccounts(username: string): Promise<BreachAccountResponse[]> {\n    try {\n      return await this.apiService.getHibpBreach(username);\n    } catch (e) {\n      const error = e as ErrorResponse;\n      if (error.statusCode === 404) {\n        return [];\n      }\n      throw new Error();\n    }\n  }\n}\n","/**\n * Use as a Decorator on async functions, it will limit how many times the function can be\n * in-flight at a time.\n *\n * Calls beyond the limit will be queued, and run when one of the active calls finishes\n */\nexport function throttle(limit: number, throttleKey: (args: any[]) => string) {\n  return <T>(\n    target: any,\n    propertyKey: string | symbol,\n    descriptor: TypedPropertyDescriptor<(...args: any[]) => Promise<T>>\n  ) => {\n    const originalMethod: () => Promise<T> = descriptor.value;\n    const allThrottles = new Map<any, Map<string, (() => void)[]>>();\n\n    const getThrottles = (obj: any) => {\n      let throttles = allThrottles.get(obj);\n      if (throttles != null) {\n        return throttles;\n      }\n      throttles = new Map<string, (() => void)[]>();\n      allThrottles.set(obj, throttles);\n      return throttles;\n    };\n\n    return {\n      value: function (...args: any[]) {\n        const throttles = getThrottles(this);\n        const argsThrottleKey = throttleKey(args);\n        let queue = throttles.get(argsThrottleKey);\n        if (queue == null) {\n          queue = [];\n          throttles.set(argsThrottleKey, queue);\n        }\n\n        return new Promise<T>((resolve, reject) => {\n          const exec = () => {\n            const onFinally = () => {\n              queue.splice(queue.indexOf(exec), 1);\n              if (queue.length >= limit) {\n                queue[limit - 1]();\n              } else if (queue.length === 0) {\n                throttles.delete(argsThrottleKey);\n                if (throttles.size === 0) {\n                  allThrottles.delete(this);\n                }\n              }\n            };\n            originalMethod\n              .apply(this, args)\n              .then((val: any) => {\n                onFinally();\n                return val;\n              })\n              .catch((err: any) => {\n                onFinally();\n                throw err;\n              })\n              .then(resolve, reject);\n          };\n          queue.push(exec);\n          if (queue.length <= limit) {\n            exec();\n          }\n        });\n      },\n    };\n  };\n}\n","export enum AuthenticationType {\n  Password = 0,\n  Sso = 1,\n  Api = 2,\n}\n","export enum KeySuffixOptions {\n  Auto = \"auto\",\n  Biometric = \"biometric\",\n}\n","export enum TwoFactorProviderType {\n  Authenticator = 0,\n  Email = 1,\n  Duo = 2,\n  Yubikey = 3,\n  U2f = 4,\n  Remember = 5,\n  OrganizationDuo = 6,\n  WebAuthn = 7,\n}\n","import { AuthenticationStatus } from \"../../enums/authenticationStatus\";\nimport { KdfType } from \"../../enums/kdfType\";\nimport { UriMatchType } from \"../../enums/uriMatchType\";\nimport { CipherData } from \"../data/cipherData\";\nimport { CollectionData } from \"../data/collectionData\";\nimport { EncryptedOrganizationKeyData } from \"../data/encryptedOrganizationKeyData\";\nimport { EventData } from \"../data/eventData\";\nimport { FolderData } from \"../data/folderData\";\nimport { OrganizationData } from \"../data/organizationData\";\nimport { PolicyData } from \"../data/policyData\";\nimport { ProviderData } from \"../data/providerData\";\nimport { SendData } from \"../data/sendData\";\nimport { CipherView } from \"../view/cipherView\";\nimport { CollectionView } from \"../view/collectionView\";\nimport { SendView } from \"../view/sendView\";\n\nimport { EncString } from \"./encString\";\nimport { EnvironmentUrls } from \"./environmentUrls\";\nimport { GeneratedPasswordHistory } from \"./generatedPasswordHistory\";\nimport { Policy } from \"./policy\";\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport class EncryptionPair<TEncrypted, TDecrypted> {\n  encrypted?: TEncrypted;\n  decrypted?: TDecrypted;\n  decryptedSerialized?: string;\n}\n\nexport class DataEncryptionPair<TEncrypted, TDecrypted> {\n  encrypted?: { [id: string]: TEncrypted };\n  decrypted?: TDecrypted[];\n}\n\n// This is a temporary structure to handle migrated `DataEncryptionPair` to\n//  avoid needing a data migration at this stage. It should be replaced with\n//  proper data migrations when `DataEncryptionPair` is deprecated.\nexport class TemporaryDataEncryption<TEncrypted> {\n  encrypted?: { [id: string]: TEncrypted };\n}\n\nexport class AccountData {\n  ciphers?: DataEncryptionPair<CipherData, CipherView> = new DataEncryptionPair<\n    CipherData,\n    CipherView\n  >();\n  folders? = new TemporaryDataEncryption<FolderData>();\n  localData?: any;\n  sends?: DataEncryptionPair<SendData, SendView> = new DataEncryptionPair<SendData, SendView>();\n  collections?: DataEncryptionPair<CollectionData, CollectionView> = new DataEncryptionPair<\n    CollectionData,\n    CollectionView\n  >();\n  policies?: DataEncryptionPair<PolicyData, Policy> = new DataEncryptionPair<PolicyData, Policy>();\n  passwordGenerationHistory?: EncryptionPair<\n    GeneratedPasswordHistory[],\n    GeneratedPasswordHistory[]\n  > = new EncryptionPair<GeneratedPasswordHistory[], GeneratedPasswordHistory[]>();\n  addEditCipherInfo?: any;\n  eventCollection?: EventData[];\n  organizations?: { [id: string]: OrganizationData };\n  providers?: { [id: string]: ProviderData };\n}\n\nexport class AccountKeys {\n  cryptoMasterKey?: SymmetricCryptoKey;\n  cryptoMasterKeyAuto?: string;\n  cryptoMasterKeyB64?: string;\n  cryptoMasterKeyBiometric?: string;\n  cryptoSymmetricKey?: EncryptionPair<string, SymmetricCryptoKey> = new EncryptionPair<\n    string,\n    SymmetricCryptoKey\n  >();\n  organizationKeys?: EncryptionPair<\n    { [orgId: string]: EncryptedOrganizationKeyData },\n    Map<string, SymmetricCryptoKey>\n  > = new EncryptionPair<\n    { [orgId: string]: EncryptedOrganizationKeyData },\n    Map<string, SymmetricCryptoKey>\n  >();\n  providerKeys?: EncryptionPair<any, Map<string, SymmetricCryptoKey>> = new EncryptionPair<\n    any,\n    Map<string, SymmetricCryptoKey>\n  >();\n  privateKey?: EncryptionPair<string, ArrayBuffer> = new EncryptionPair<string, ArrayBuffer>();\n  publicKey?: ArrayBuffer;\n  publicKeySerialized?: string;\n  apiKeyClientSecret?: string;\n}\n\nexport class AccountProfile {\n  apiKeyClientId?: string;\n  authenticationStatus?: AuthenticationStatus;\n  convertAccountToKeyConnector?: boolean;\n  email?: string;\n  emailVerified?: boolean;\n  entityId?: string;\n  entityType?: string;\n  everBeenUnlocked?: boolean;\n  forcePasswordReset?: boolean;\n  hasPremiumPersonally?: boolean;\n  hasPremiumFromOrganization?: boolean;\n  lastSync?: string;\n  userId?: string;\n  usesKeyConnector?: boolean;\n  keyHash?: string;\n  kdfIterations?: number;\n  kdfType?: KdfType;\n}\n\nexport class AccountSettings {\n  autoConfirmFingerPrints?: boolean;\n  autoFillOnPageLoadDefault?: boolean;\n  biometricUnlock?: boolean;\n  clearClipboard?: number;\n  collapsedGroupings?: string[];\n  defaultUriMatch?: UriMatchType;\n  disableAddLoginNotification?: boolean;\n  disableAutoBiometricsPrompt?: boolean;\n  disableAutoTotpCopy?: boolean;\n  disableBadgeCounter?: boolean;\n  disableChangedPasswordNotification?: boolean;\n  disableContextMenuItem?: boolean;\n  disableGa?: boolean;\n  dontShowCardsCurrentTab?: boolean;\n  dontShowIdentitiesCurrentTab?: boolean;\n  enableAlwaysOnTop?: boolean;\n  enableAutoFillOnPageLoad?: boolean;\n  enableBiometric?: boolean;\n  enableFullWidth?: boolean;\n  enableGravitars?: boolean;\n  environmentUrls: EnvironmentUrls = new EnvironmentUrls();\n  equivalentDomains?: any;\n  minimizeOnCopyToClipboard?: boolean;\n  neverDomains?: { [id: string]: any };\n  passwordGenerationOptions?: any;\n  usernameGenerationOptions?: any;\n  generatorOptions?: any;\n  pinProtected?: EncryptionPair<string, EncString> = new EncryptionPair<string, EncString>();\n  protectedPin?: string;\n  settings?: any; // TODO: Merge whatever is going on here into the AccountSettings model properly\n  vaultTimeout?: number;\n  vaultTimeoutAction?: string = \"lock\";\n}\n\nexport class AccountTokens {\n  accessToken?: string;\n  decodedToken?: any;\n  refreshToken?: string;\n  securityStamp?: string;\n}\n\nexport class Account {\n  data?: AccountData = new AccountData();\n  keys?: AccountKeys = new AccountKeys();\n  profile?: AccountProfile = new AccountProfile();\n  settings?: AccountSettings = new AccountSettings();\n  tokens?: AccountTokens = new AccountTokens();\n\n  constructor(init: Partial<Account>) {\n    Object.assign(this, {\n      data: {\n        ...new AccountData(),\n        ...init?.data,\n      },\n      keys: {\n        ...new AccountKeys(),\n        ...init?.keys,\n      },\n      profile: {\n        ...new AccountProfile(),\n        ...init?.profile,\n      },\n      settings: {\n        ...new AccountSettings(),\n        ...init?.settings,\n      },\n      tokens: {\n        ...new AccountTokens(),\n        ...init?.tokens,\n      },\n    });\n  }\n}\n","import { TwoFactorProviderType } from \"../../enums/twoFactorProviderType\";\nimport { Utils } from \"../../misc/utils\";\n\nexport class AuthResult {\n  captchaSiteKey = \"\";\n  resetMasterPassword = false;\n  forcePasswordReset = false;\n  twoFactorProviders: Map<TwoFactorProviderType, { [key: string]: string }> = null;\n\n  get requiresCaptcha() {\n    return !Utils.isNullOrWhitespace(this.captchaSiteKey);\n  }\n\n  get requiresTwoFactor() {\n    return this.twoFactorProviders != null;\n  }\n}\n","export class KeysRequest {\n  publicKey: string;\n  encryptedPrivateKey: string;\n\n  constructor(publicKey: string, encryptedPrivateKey: string) {\n    this.publicKey = publicKey;\n    this.encryptedPrivateKey = encryptedPrivateKey;\n  }\n}\n","import { ApiService } from \"../../abstractions/api.service\";\nimport { AppIdService } from \"../../abstractions/appId.service\";\nimport { CryptoService } from \"../../abstractions/crypto.service\";\nimport { LogService } from \"../../abstractions/log.service\";\nimport { MessagingService } from \"../../abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"../../abstractions/platformUtils.service\";\nimport { StateService } from \"../../abstractions/state.service\";\nimport { TokenService } from \"../../abstractions/token.service\";\nimport { TwoFactorService } from \"../../abstractions/twoFactor.service\";\nimport { TwoFactorProviderType } from \"../../enums/twoFactorProviderType\";\nimport { Account, AccountProfile, AccountTokens } from \"../../models/domain/account\";\nimport { AuthResult } from \"../../models/domain/authResult\";\nimport {\n  ApiLogInCredentials,\n  PasswordLogInCredentials,\n  SsoLogInCredentials,\n} from \"../../models/domain/logInCredentials\";\nimport { DeviceRequest } from \"../../models/request/deviceRequest\";\nimport { ApiTokenRequest } from \"../../models/request/identityToken/apiTokenRequest\";\nimport { PasswordTokenRequest } from \"../../models/request/identityToken/passwordTokenRequest\";\nimport { SsoTokenRequest } from \"../../models/request/identityToken/ssoTokenRequest\";\nimport { TokenRequestTwoFactor } from \"../../models/request/identityToken/tokenRequestTwoFactor\";\nimport { KeysRequest } from \"../../models/request/keysRequest\";\nimport { IdentityCaptchaResponse } from \"../../models/response/identityCaptchaResponse\";\nimport { IdentityTokenResponse } from \"../../models/response/identityTokenResponse\";\nimport { IdentityTwoFactorResponse } from \"../../models/response/identityTwoFactorResponse\";\n\nexport abstract class LogInStrategy {\n  protected abstract tokenRequest: ApiTokenRequest | PasswordTokenRequest | SsoTokenRequest;\n  protected captchaBypassToken: string = null;\n\n  constructor(\n    protected cryptoService: CryptoService,\n    protected apiService: ApiService,\n    protected tokenService: TokenService,\n    protected appIdService: AppIdService,\n    protected platformUtilsService: PlatformUtilsService,\n    protected messagingService: MessagingService,\n    protected logService: LogService,\n    protected stateService: StateService,\n    protected twoFactorService: TwoFactorService\n  ) {}\n\n  abstract logIn(\n    credentials: ApiLogInCredentials | PasswordLogInCredentials | SsoLogInCredentials\n  ): Promise<AuthResult>;\n\n  async logInTwoFactor(\n    twoFactor: TokenRequestTwoFactor,\n    captchaResponse: string = null\n  ): Promise<AuthResult> {\n    this.tokenRequest.setTwoFactor(twoFactor);\n    return this.startLogIn();\n  }\n\n  protected async startLogIn(): Promise<AuthResult> {\n    this.twoFactorService.clearSelectedProvider();\n\n    const response = await this.apiService.postIdentityToken(this.tokenRequest);\n\n    if (response instanceof IdentityTwoFactorResponse) {\n      return this.processTwoFactorResponse(response);\n    } else if (response instanceof IdentityCaptchaResponse) {\n      return this.processCaptchaResponse(response);\n    } else if (response instanceof IdentityTokenResponse) {\n      return this.processTokenResponse(response);\n    }\n\n    throw new Error(\"Invalid response object.\");\n  }\n\n  protected onSuccessfulLogin(response: IdentityTokenResponse): Promise<void> {\n    // Implemented in subclass if required\n    return null;\n  }\n\n  protected async buildDeviceRequest() {\n    const appId = await this.appIdService.getAppId();\n    return new DeviceRequest(appId, this.platformUtilsService);\n  }\n\n  protected async buildTwoFactor(userProvidedTwoFactor?: TokenRequestTwoFactor) {\n    if (userProvidedTwoFactor != null) {\n      return userProvidedTwoFactor;\n    }\n\n    const storedTwoFactorToken = await this.tokenService.getTwoFactorToken();\n    if (storedTwoFactorToken != null) {\n      return new TokenRequestTwoFactor(TwoFactorProviderType.Remember, storedTwoFactorToken, false);\n    }\n\n    return new TokenRequestTwoFactor();\n  }\n\n  protected async saveAccountInformation(tokenResponse: IdentityTokenResponse) {\n    const accountInformation = await this.tokenService.decodeToken(tokenResponse.accessToken);\n    await this.stateService.addAccount(\n      new Account({\n        profile: {\n          ...new AccountProfile(),\n          ...{\n            userId: accountInformation.sub,\n            email: accountInformation.email,\n            hasPremiumPersonally: accountInformation.premium,\n            kdfIterations: tokenResponse.kdfIterations,\n            kdfType: tokenResponse.kdf,\n          },\n        },\n        tokens: {\n          ...new AccountTokens(),\n          ...{\n            accessToken: tokenResponse.accessToken,\n            refreshToken: tokenResponse.refreshToken,\n          },\n        },\n      })\n    );\n  }\n\n  protected async processTokenResponse(response: IdentityTokenResponse): Promise<AuthResult> {\n    const result = new AuthResult();\n    result.resetMasterPassword = response.resetMasterPassword;\n    result.forcePasswordReset = response.forcePasswordReset;\n\n    await this.saveAccountInformation(response);\n\n    if (response.twoFactorToken != null) {\n      await this.tokenService.setTwoFactorToken(response);\n    }\n\n    const newSsoUser = response.key == null;\n    if (!newSsoUser) {\n      await this.cryptoService.setEncKey(response.key);\n      await this.cryptoService.setEncPrivateKey(\n        response.privateKey ?? (await this.createKeyPairForOldAccount())\n      );\n    }\n\n    await this.onSuccessfulLogin(response);\n\n    this.messagingService.send(\"loggedIn\");\n\n    return result;\n  }\n\n  private async processTwoFactorResponse(response: IdentityTwoFactorResponse): Promise<AuthResult> {\n    const result = new AuthResult();\n    result.twoFactorProviders = response.twoFactorProviders2;\n    this.twoFactorService.setProviders(response);\n    this.captchaBypassToken = response.captchaToken ?? null;\n    return result;\n  }\n\n  private async processCaptchaResponse(response: IdentityCaptchaResponse): Promise<AuthResult> {\n    const result = new AuthResult();\n    result.captchaSiteKey = response.siteKey;\n    return result;\n  }\n\n  private async createKeyPairForOldAccount() {\n    try {\n      const [publicKey, privateKey] = await this.cryptoService.makeKeyPair();\n      await this.apiService.postAccountKeys(new KeysRequest(publicKey, privateKey.encryptedString));\n      return privateKey.encryptedString;\n    } catch (e) {\n      this.logService.error(e);\n    }\n  }\n}\n","export enum HashPurpose {\n  ServerAuthorization = 1,\n  LocalAuthorization = 2,\n}\n","import { ApiService } from \"../../abstractions/api.service\";\nimport { AppIdService } from \"../../abstractions/appId.service\";\nimport { CryptoService } from \"../../abstractions/crypto.service\";\nimport { EnvironmentService } from \"../../abstractions/environment.service\";\nimport { KeyConnectorService } from \"../../abstractions/keyConnector.service\";\nimport { LogService } from \"../../abstractions/log.service\";\nimport { MessagingService } from \"../../abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"../../abstractions/platformUtils.service\";\nimport { StateService } from \"../../abstractions/state.service\";\nimport { TokenService } from \"../../abstractions/token.service\";\nimport { TwoFactorService } from \"../../abstractions/twoFactor.service\";\nimport { ApiLogInCredentials } from \"../../models/domain/logInCredentials\";\nimport { ApiTokenRequest } from \"../../models/request/identityToken/apiTokenRequest\";\nimport { IdentityTokenResponse } from \"../../models/response/identityTokenResponse\";\n\nimport { LogInStrategy } from \"./logIn.strategy\";\n\nexport class ApiLogInStrategy extends LogInStrategy {\n  tokenRequest: ApiTokenRequest;\n\n  constructor(\n    cryptoService: CryptoService,\n    apiService: ApiService,\n    tokenService: TokenService,\n    appIdService: AppIdService,\n    platformUtilsService: PlatformUtilsService,\n    messagingService: MessagingService,\n    logService: LogService,\n    stateService: StateService,\n    twoFactorService: TwoFactorService,\n    private environmentService: EnvironmentService,\n    private keyConnectorService: KeyConnectorService\n  ) {\n    super(\n      cryptoService,\n      apiService,\n      tokenService,\n      appIdService,\n      platformUtilsService,\n      messagingService,\n      logService,\n      stateService,\n      twoFactorService\n    );\n  }\n\n  async onSuccessfulLogin(tokenResponse: IdentityTokenResponse) {\n    if (tokenResponse.apiUseKeyConnector) {\n      const keyConnectorUrl = this.environmentService.getKeyConnectorUrl();\n      await this.keyConnectorService.getAndSetKey(keyConnectorUrl);\n    }\n  }\n\n  async logIn(credentials: ApiLogInCredentials) {\n    this.tokenRequest = new ApiTokenRequest(\n      credentials.clientId,\n      credentials.clientSecret,\n      await this.buildTwoFactor(),\n      await this.buildDeviceRequest()\n    );\n\n    return this.startLogIn();\n  }\n\n  protected async saveAccountInformation(tokenResponse: IdentityTokenResponse) {\n    await super.saveAccountInformation(tokenResponse);\n    await this.stateService.setApiKeyClientId(this.tokenRequest.clientId);\n    await this.stateService.setApiKeyClientSecret(this.tokenRequest.clientSecret);\n  }\n}\n","import { ClientType } from \"../../../enums/clientType\";\nimport { Utils } from \"../../../misc/utils\";\nimport { CaptchaProtectedRequest } from \"../captchaProtectedRequest\";\nimport { DeviceRequest } from \"../deviceRequest\";\n\nimport { TokenRequest } from \"./tokenRequest\";\nimport { TokenRequestTwoFactor } from \"./tokenRequestTwoFactor\";\n\nexport class PasswordTokenRequest extends TokenRequest implements CaptchaProtectedRequest {\n  constructor(\n    public email: string,\n    public masterPasswordHash: string,\n    public captchaResponse: string,\n    protected twoFactor: TokenRequestTwoFactor,\n    device?: DeviceRequest\n  ) {\n    super(twoFactor, device);\n  }\n\n  toIdentityToken(clientId: ClientType) {\n    const obj = super.toIdentityToken(clientId);\n\n    obj.grant_type = \"password\";\n    obj.username = this.email;\n    obj.password = this.masterPasswordHash;\n\n    if (this.captchaResponse != null) {\n      obj.captchaResponse = this.captchaResponse;\n    }\n\n    return obj;\n  }\n\n  alterIdentityTokenHeaders(headers: Headers) {\n    headers.set(\"Auth-Email\", Utils.fromUtf8ToUrlB64(this.email));\n  }\n}\n","import { ApiService } from \"../../abstractions/api.service\";\nimport { AppIdService } from \"../../abstractions/appId.service\";\nimport { AuthService } from \"../../abstractions/auth.service\";\nimport { CryptoService } from \"../../abstractions/crypto.service\";\nimport { LogService } from \"../../abstractions/log.service\";\nimport { MessagingService } from \"../../abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"../../abstractions/platformUtils.service\";\nimport { StateService } from \"../../abstractions/state.service\";\nimport { TokenService } from \"../../abstractions/token.service\";\nimport { TwoFactorService } from \"../../abstractions/twoFactor.service\";\nimport { HashPurpose } from \"../../enums/hashPurpose\";\nimport { AuthResult } from \"../../models/domain/authResult\";\nimport { PasswordLogInCredentials } from \"../../models/domain/logInCredentials\";\nimport { SymmetricCryptoKey } from \"../../models/domain/symmetricCryptoKey\";\nimport { PasswordTokenRequest } from \"../../models/request/identityToken/passwordTokenRequest\";\nimport { TokenRequestTwoFactor } from \"../../models/request/identityToken/tokenRequestTwoFactor\";\n\nimport { LogInStrategy } from \"./logIn.strategy\";\n\nexport class PasswordLogInStrategy extends LogInStrategy {\n  get email() {\n    return this.tokenRequest.email;\n  }\n\n  get masterPasswordHash() {\n    return this.tokenRequest.masterPasswordHash;\n  }\n\n  tokenRequest: PasswordTokenRequest;\n\n  private localHashedPassword: string;\n  private key: SymmetricCryptoKey;\n\n  constructor(\n    cryptoService: CryptoService,\n    apiService: ApiService,\n    tokenService: TokenService,\n    appIdService: AppIdService,\n    platformUtilsService: PlatformUtilsService,\n    messagingService: MessagingService,\n    logService: LogService,\n    stateService: StateService,\n    twoFactorService: TwoFactorService,\n    private authService: AuthService\n  ) {\n    super(\n      cryptoService,\n      apiService,\n      tokenService,\n      appIdService,\n      platformUtilsService,\n      messagingService,\n      logService,\n      stateService,\n      twoFactorService\n    );\n  }\n\n  async onSuccessfulLogin() {\n    await this.cryptoService.setKey(this.key);\n    await this.cryptoService.setKeyHash(this.localHashedPassword);\n  }\n\n  async logInTwoFactor(\n    twoFactor: TokenRequestTwoFactor,\n    captchaResponse: string\n  ): Promise<AuthResult> {\n    this.tokenRequest.captchaResponse = captchaResponse ?? this.captchaBypassToken;\n    return super.logInTwoFactor(twoFactor);\n  }\n\n  async logIn(credentials: PasswordLogInCredentials) {\n    const { email, masterPassword, captchaToken, twoFactor } = credentials;\n\n    this.key = await this.authService.makePreloginKey(masterPassword, email);\n\n    // Hash the password early (before authentication) so we don't persist it in memory in plaintext\n    this.localHashedPassword = await this.cryptoService.hashPassword(\n      masterPassword,\n      this.key,\n      HashPurpose.LocalAuthorization\n    );\n    const hashedPassword = await this.cryptoService.hashPassword(masterPassword, this.key);\n\n    this.tokenRequest = new PasswordTokenRequest(\n      email,\n      hashedPassword,\n      captchaToken,\n      await this.buildTwoFactor(twoFactor),\n      await this.buildDeviceRequest()\n    );\n\n    return this.startLogIn();\n  }\n}\n","import { DeviceRequest } from \"../deviceRequest\";\n\nimport { TokenRequest } from \"./tokenRequest\";\nimport { TokenRequestTwoFactor } from \"./tokenRequestTwoFactor\";\n\nexport class SsoTokenRequest extends TokenRequest {\n  constructor(\n    public code: string,\n    public codeVerifier: string,\n    public redirectUri: string,\n    protected twoFactor: TokenRequestTwoFactor,\n    device?: DeviceRequest\n  ) {\n    super(twoFactor, device);\n  }\n\n  toIdentityToken(clientId: string) {\n    const obj = super.toIdentityToken(clientId);\n\n    obj.grant_type = \"authorization_code\";\n    obj.code = this.code;\n    obj.code_verifier = this.codeVerifier;\n    obj.redirect_uri = this.redirectUri;\n\n    return obj;\n  }\n}\n","import { ApiService } from \"../../abstractions/api.service\";\nimport { AppIdService } from \"../../abstractions/appId.service\";\nimport { CryptoService } from \"../../abstractions/crypto.service\";\nimport { KeyConnectorService } from \"../../abstractions/keyConnector.service\";\nimport { LogService } from \"../../abstractions/log.service\";\nimport { MessagingService } from \"../../abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"../../abstractions/platformUtils.service\";\nimport { StateService } from \"../../abstractions/state.service\";\nimport { TokenService } from \"../../abstractions/token.service\";\nimport { TwoFactorService } from \"../../abstractions/twoFactor.service\";\nimport { SsoLogInCredentials } from \"../../models/domain/logInCredentials\";\nimport { SsoTokenRequest } from \"../../models/request/identityToken/ssoTokenRequest\";\nimport { IdentityTokenResponse } from \"../../models/response/identityTokenResponse\";\n\nimport { LogInStrategy } from \"./logIn.strategy\";\n\nexport class SsoLogInStrategy extends LogInStrategy {\n  tokenRequest: SsoTokenRequest;\n  orgId: string;\n\n  constructor(\n    cryptoService: CryptoService,\n    apiService: ApiService,\n    tokenService: TokenService,\n    appIdService: AppIdService,\n    platformUtilsService: PlatformUtilsService,\n    messagingService: MessagingService,\n    logService: LogService,\n    stateService: StateService,\n    twoFactorService: TwoFactorService,\n    private keyConnectorService: KeyConnectorService\n  ) {\n    super(\n      cryptoService,\n      apiService,\n      tokenService,\n      appIdService,\n      platformUtilsService,\n      messagingService,\n      logService,\n      stateService,\n      twoFactorService\n    );\n  }\n\n  async onSuccessfulLogin(tokenResponse: IdentityTokenResponse) {\n    const newSsoUser = tokenResponse.key == null;\n\n    if (tokenResponse.keyConnectorUrl != null) {\n      if (!newSsoUser) {\n        await this.keyConnectorService.getAndSetKey(tokenResponse.keyConnectorUrl);\n      } else {\n        await this.keyConnectorService.convertNewSsoUserToKeyConnector(tokenResponse, this.orgId);\n      }\n    }\n  }\n\n  async logIn(credentials: SsoLogInCredentials) {\n    this.orgId = credentials.orgId;\n    this.tokenRequest = new SsoTokenRequest(\n      credentials.code,\n      credentials.codeVerifier,\n      credentials.redirectUrl,\n      await this.buildTwoFactor(credentials.twoFactor),\n      await this.buildDeviceRequest()\n    );\n\n    return this.startLogIn();\n  }\n}\n","export class PreloginRequest {\n  email: string;\n\n  constructor(email: string) {\n    this.email = email;\n  }\n}\n","import { ApiService } from \"../abstractions/api.service\";\nimport { AppIdService } from \"../abstractions/appId.service\";\nimport { AuthService as AuthServiceAbstraction } from \"../abstractions/auth.service\";\nimport { CryptoService } from \"../abstractions/crypto.service\";\nimport { EnvironmentService } from \"../abstractions/environment.service\";\nimport { I18nService } from \"../abstractions/i18n.service\";\nimport { KeyConnectorService } from \"../abstractions/keyConnector.service\";\nimport { LogService } from \"../abstractions/log.service\";\nimport { MessagingService } from \"../abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"../abstractions/platformUtils.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { TokenService } from \"../abstractions/token.service\";\nimport { TwoFactorService } from \"../abstractions/twoFactor.service\";\nimport { AuthenticationStatus } from \"../enums/authenticationStatus\";\nimport { AuthenticationType } from \"../enums/authenticationType\";\nimport { KdfType } from \"../enums/kdfType\";\nimport { KeySuffixOptions } from \"../enums/keySuffixOptions\";\nimport { ApiLogInStrategy } from \"../misc/logInStrategies/apiLogin.strategy\";\nimport { PasswordLogInStrategy } from \"../misc/logInStrategies/passwordLogin.strategy\";\nimport { SsoLogInStrategy } from \"../misc/logInStrategies/ssoLogin.strategy\";\nimport { AuthResult } from \"../models/domain/authResult\";\nimport {\n  ApiLogInCredentials,\n  PasswordLogInCredentials,\n  SsoLogInCredentials,\n} from \"../models/domain/logInCredentials\";\nimport { SymmetricCryptoKey } from \"../models/domain/symmetricCryptoKey\";\nimport { TokenRequestTwoFactor } from \"../models/request/identityToken/tokenRequestTwoFactor\";\nimport { PreloginRequest } from \"../models/request/preloginRequest\";\nimport { ErrorResponse } from \"../models/response/errorResponse\";\n\nconst sessionTimeoutLength = 2 * 60 * 1000; // 2 minutes\n\nexport class AuthService implements AuthServiceAbstraction {\n  get email(): string {\n    return this.logInStrategy instanceof PasswordLogInStrategy ? this.logInStrategy.email : null;\n  }\n\n  get masterPasswordHash(): string {\n    return this.logInStrategy instanceof PasswordLogInStrategy\n      ? this.logInStrategy.masterPasswordHash\n      : null;\n  }\n\n  private logInStrategy: ApiLogInStrategy | PasswordLogInStrategy | SsoLogInStrategy;\n  private sessionTimeout: any;\n\n  constructor(\n    protected cryptoService: CryptoService,\n    protected apiService: ApiService,\n    protected tokenService: TokenService,\n    protected appIdService: AppIdService,\n    protected platformUtilsService: PlatformUtilsService,\n    protected messagingService: MessagingService,\n    protected logService: LogService,\n    protected keyConnectorService: KeyConnectorService,\n    protected environmentService: EnvironmentService,\n    protected stateService: StateService,\n    protected twoFactorService: TwoFactorService,\n    protected i18nService: I18nService\n  ) {}\n\n  async logIn(\n    credentials: ApiLogInCredentials | PasswordLogInCredentials | SsoLogInCredentials\n  ): Promise<AuthResult> {\n    this.clearState();\n\n    let strategy: ApiLogInStrategy | PasswordLogInStrategy | SsoLogInStrategy;\n\n    if (credentials.type === AuthenticationType.Password) {\n      strategy = new PasswordLogInStrategy(\n        this.cryptoService,\n        this.apiService,\n        this.tokenService,\n        this.appIdService,\n        this.platformUtilsService,\n        this.messagingService,\n        this.logService,\n        this.stateService,\n        this.twoFactorService,\n        this\n      );\n    } else if (credentials.type === AuthenticationType.Sso) {\n      strategy = new SsoLogInStrategy(\n        this.cryptoService,\n        this.apiService,\n        this.tokenService,\n        this.appIdService,\n        this.platformUtilsService,\n        this.messagingService,\n        this.logService,\n        this.stateService,\n        this.twoFactorService,\n        this.keyConnectorService\n      );\n    } else if (credentials.type === AuthenticationType.Api) {\n      strategy = new ApiLogInStrategy(\n        this.cryptoService,\n        this.apiService,\n        this.tokenService,\n        this.appIdService,\n        this.platformUtilsService,\n        this.messagingService,\n        this.logService,\n        this.stateService,\n        this.twoFactorService,\n        this.environmentService,\n        this.keyConnectorService\n      );\n    }\n\n    const result = await strategy.logIn(credentials as any);\n\n    if (result?.requiresTwoFactor) {\n      this.saveState(strategy);\n    }\n    return result;\n  }\n\n  async logInTwoFactor(\n    twoFactor: TokenRequestTwoFactor,\n    captchaResponse: string\n  ): Promise<AuthResult> {\n    if (this.logInStrategy == null) {\n      throw new Error(this.i18nService.t(\"sessionTimeout\"));\n    }\n\n    try {\n      const result = await this.logInStrategy.logInTwoFactor(twoFactor, captchaResponse);\n\n      // Only clear state if 2FA token has been accepted, otherwise we need to be able to try again\n      if (!result.requiresTwoFactor && !result.requiresCaptcha) {\n        this.clearState();\n      }\n      return result;\n    } catch (e) {\n      // API exceptions are okay, but if there are any unhandled client-side errors then clear state to be safe\n      if (!(e instanceof ErrorResponse)) {\n        this.clearState();\n      }\n      throw e;\n    }\n  }\n\n  logOut(callback: () => void) {\n    callback();\n    this.messagingService.send(\"loggedOut\");\n  }\n\n  authingWithApiKey(): boolean {\n    return this.logInStrategy instanceof ApiLogInStrategy;\n  }\n\n  authingWithSso(): boolean {\n    return this.logInStrategy instanceof SsoLogInStrategy;\n  }\n\n  authingWithPassword(): boolean {\n    return this.logInStrategy instanceof PasswordLogInStrategy;\n  }\n\n  async getAuthStatus(userId?: string): Promise<AuthenticationStatus> {\n    const isAuthenticated = await this.stateService.getIsAuthenticated({ userId: userId });\n    if (!isAuthenticated) {\n      return AuthenticationStatus.LoggedOut;\n    }\n\n    // Keys aren't stored for a device that is locked or logged out\n    // Make sure we're logged in before checking this, otherwise we could mix up those states\n    const neverLock =\n      (await this.cryptoService.hasKeyStored(KeySuffixOptions.Auto, userId)) &&\n      !(await this.stateService.getEverBeenUnlocked({ userId: userId }));\n    if (neverLock) {\n      // TODO: This also _sets_ the key so when we check memory in the next line it finds a key.\n      // We should refactor here.\n      await this.cryptoService.getKey(KeySuffixOptions.Auto, userId);\n    }\n\n    const hasKeyInMemory = await this.cryptoService.hasKeyInMemory(userId);\n    if (!hasKeyInMemory) {\n      return AuthenticationStatus.Locked;\n    }\n\n    return AuthenticationStatus.Unlocked;\n  }\n\n  async makePreloginKey(masterPassword: string, email: string): Promise<SymmetricCryptoKey> {\n    email = email.trim().toLowerCase();\n    let kdf: KdfType = null;\n    let kdfIterations: number = null;\n    try {\n      const preloginResponse = await this.apiService.postPrelogin(new PreloginRequest(email));\n      if (preloginResponse != null) {\n        kdf = preloginResponse.kdf;\n        kdfIterations = preloginResponse.kdfIterations;\n      }\n    } catch (e) {\n      if (e == null || e.statusCode !== 404) {\n        throw e;\n      }\n    }\n    return this.cryptoService.makeKey(masterPassword, email, kdf, kdfIterations);\n  }\n\n  private saveState(strategy: ApiLogInStrategy | PasswordLogInStrategy | SsoLogInStrategy) {\n    this.logInStrategy = strategy;\n    this.startSessionTimeout();\n  }\n\n  private clearState() {\n    this.logInStrategy = null;\n    this.clearSessionTimeout();\n  }\n\n  private startSessionTimeout() {\n    this.clearSessionTimeout();\n    this.sessionTimeout = setTimeout(() => this.clearState(), sessionTimeoutLength);\n  }\n\n  private clearSessionTimeout() {\n    if (this.sessionTimeout != null) {\n      clearTimeout(this.sessionTimeout);\n    }\n  }\n}\n","export enum FieldType {\n  Text = 0,\n  Hidden = 1,\n  Boolean = 2,\n  Linked = 3,\n}\n","export enum UriMatchType {\n  Domain = 0,\n  Host = 1,\n  StartsWith = 2,\n  Exact = 3,\n  RegularExpression = 4,\n  Never = 5,\n}\n","export enum EncryptionType {\n  AesCbc256_B64 = 0,\n  AesCbc128_HmacSha256_B64 = 1,\n  AesCbc256_HmacSha256_B64 = 2,\n  Rsa2048_OaepSha256_B64 = 3,\n  Rsa2048_OaepSha1_B64 = 4,\n  Rsa2048_OaepSha256_HmacSha256_B64 = 5,\n  Rsa2048_OaepSha1_HmacSha256_B64 = 6,\n}\n","/**\n * Use as a Decorator on async functions, it will prevent multiple 'active' calls as the same time\n *\n * If a promise was returned from a previous call to this function, that hasn't yet resolved it will\n * be returned, instead of calling the original function again\n *\n * Results are not cached, once the promise has returned, the next call will result in a fresh call\n *\n * Read more at https://github.com/bitwarden/jslib/pull/7\n */\nexport function sequentialize(cacheKey: (args: any[]) => string) {\n  return (target: any, propertyKey: string | symbol, descriptor: PropertyDescriptor) => {\n    const originalMethod: () => Promise<any> = descriptor.value;\n    const caches = new Map<any, Map<string, Promise<any>>>();\n\n    const getCache = (obj: any) => {\n      let cache = caches.get(obj);\n      if (cache != null) {\n        return cache;\n      }\n      cache = new Map<string, Promise<any>>();\n      caches.set(obj, cache);\n      return cache;\n    };\n\n    return {\n      value: function (...args: any[]) {\n        const cache = getCache(this);\n        const argsCacheKey = cacheKey(args);\n        let response = cache.get(argsCacheKey);\n        if (response != null) {\n          return response;\n        }\n\n        const onFinally = () => {\n          cache.delete(argsCacheKey);\n          if (cache.size === 0) {\n            caches.delete(this);\n          }\n        };\n        response = originalMethod\n          .apply(this, args)\n          .then((val: any) => {\n            onFinally();\n            return val;\n          })\n          .catch((err: any) => {\n            onFinally();\n            throw err;\n          });\n\n        cache.set(argsCacheKey, response);\n        return response;\n      },\n    };\n  };\n}\n","import { AttachmentResponse } from \"../response/attachmentResponse\";\n\nexport class AttachmentData {\n  id: string;\n  url: string;\n  fileName: string;\n  key: string;\n  size: string;\n  sizeName: string;\n\n  constructor(response?: AttachmentResponse) {\n    if (response == null) {\n      return;\n    }\n    this.id = response.id;\n    this.url = response.url;\n    this.fileName = response.fileName;\n    this.key = response.key;\n    this.size = response.size;\n    this.sizeName = response.sizeName;\n  }\n}\n","import { CardApi } from \"../api/cardApi\";\n\nexport class CardData {\n  cardholderName: string;\n  brand: string;\n  number: string;\n  expMonth: string;\n  expYear: string;\n  code: string;\n\n  constructor(data?: CardApi) {\n    if (data == null) {\n      return;\n    }\n\n    this.cardholderName = data.cardholderName;\n    this.brand = data.brand;\n    this.number = data.number;\n    this.expMonth = data.expMonth;\n    this.expYear = data.expYear;\n    this.code = data.code;\n  }\n}\n","import { FieldType } from \"../../enums/fieldType\";\nimport { LinkedIdType } from \"../../enums/linkedIdType\";\nimport { FieldApi } from \"../api/fieldApi\";\n\nexport class FieldData {\n  type: FieldType;\n  name: string;\n  value: string;\n  linkedId: LinkedIdType;\n\n  constructor(response?: FieldApi) {\n    if (response == null) {\n      return;\n    }\n    this.type = response.type;\n    this.name = response.name;\n    this.value = response.value;\n    this.linkedId = response.linkedId;\n  }\n}\n","import { IdentityApi } from \"../api/identityApi\";\n\nexport class IdentityData {\n  title: string;\n  firstName: string;\n  middleName: string;\n  lastName: string;\n  address1: string;\n  address2: string;\n  address3: string;\n  city: string;\n  state: string;\n  postalCode: string;\n  country: string;\n  company: string;\n  email: string;\n  phone: string;\n  ssn: string;\n  username: string;\n  passportNumber: string;\n  licenseNumber: string;\n\n  constructor(data?: IdentityApi) {\n    if (data == null) {\n      return;\n    }\n\n    this.title = data.title;\n    this.firstName = data.firstName;\n    this.middleName = data.middleName;\n    this.lastName = data.lastName;\n    this.address1 = data.address1;\n    this.address2 = data.address2;\n    this.address3 = data.address3;\n    this.city = data.city;\n    this.state = data.state;\n    this.postalCode = data.postalCode;\n    this.country = data.country;\n    this.company = data.company;\n    this.email = data.email;\n    this.phone = data.phone;\n    this.ssn = data.ssn;\n    this.username = data.username;\n    this.passportNumber = data.passportNumber;\n    this.licenseNumber = data.licenseNumber;\n  }\n}\n","import { UriMatchType } from \"../../enums/uriMatchType\";\nimport { LoginUriApi } from \"../api/loginUriApi\";\n\nexport class LoginUriData {\n  uri: string;\n  match: UriMatchType = null;\n\n  constructor(data?: LoginUriApi) {\n    if (data == null) {\n      return;\n    }\n    this.uri = data.uri;\n    this.match = data.match;\n  }\n}\n","import { LoginApi } from \"../api/loginApi\";\n\nimport { LoginUriData } from \"./loginUriData\";\n\nexport class LoginData {\n  uris: LoginUriData[];\n  username: string;\n  password: string;\n  passwordRevisionDate: string;\n  totp: string;\n  autofillOnPageLoad: boolean;\n\n  constructor(data?: LoginApi) {\n    if (data == null) {\n      return;\n    }\n\n    this.username = data.username;\n    this.password = data.password;\n    this.passwordRevisionDate = data.passwordRevisionDate;\n    this.totp = data.totp;\n    this.autofillOnPageLoad = data.autofillOnPageLoad;\n\n    if (data.uris) {\n      this.uris = data.uris.map((u) => new LoginUriData(u));\n    }\n  }\n}\n","import { PasswordHistoryResponse } from \"../response/passwordHistoryResponse\";\n\nexport class PasswordHistoryData {\n  password: string;\n  lastUsedDate: string;\n\n  constructor(response?: PasswordHistoryResponse) {\n    if (response == null) {\n      return;\n    }\n\n    this.password = response.password;\n    this.lastUsedDate = response.lastUsedDate;\n  }\n}\n","import { SecureNoteType } from \"../../enums/secureNoteType\";\nimport { SecureNoteApi } from \"../api/secureNoteApi\";\n\nexport class SecureNoteData {\n  type: SecureNoteType;\n\n  constructor(data?: SecureNoteApi) {\n    if (data == null) {\n      return;\n    }\n\n    this.type = data.type;\n  }\n}\n","import { CipherRepromptType } from \"../../enums/cipherRepromptType\";\nimport { CipherType } from \"../../enums/cipherType\";\nimport { CipherResponse } from \"../response/cipherResponse\";\n\nimport { AttachmentData } from \"./attachmentData\";\nimport { CardData } from \"./cardData\";\nimport { FieldData } from \"./fieldData\";\nimport { IdentityData } from \"./identityData\";\nimport { LoginData } from \"./loginData\";\nimport { PasswordHistoryData } from \"./passwordHistoryData\";\nimport { SecureNoteData } from \"./secureNoteData\";\n\nexport class CipherData {\n  id: string;\n  organizationId: string;\n  folderId: string;\n  edit: boolean;\n  viewPassword: boolean;\n  organizationUseTotp: boolean;\n  favorite: boolean;\n  revisionDate: string;\n  type: CipherType;\n  name: string;\n  notes: string;\n  login?: LoginData;\n  secureNote?: SecureNoteData;\n  card?: CardData;\n  identity?: IdentityData;\n  fields?: FieldData[];\n  attachments?: AttachmentData[];\n  passwordHistory?: PasswordHistoryData[];\n  collectionIds?: string[];\n  deletedDate: string;\n  reprompt: CipherRepromptType;\n\n  constructor(response?: CipherResponse, collectionIds?: string[]) {\n    if (response == null) {\n      return;\n    }\n\n    this.id = response.id;\n    this.organizationId = response.organizationId;\n    this.folderId = response.folderId;\n    this.edit = response.edit;\n    this.viewPassword = response.viewPassword;\n    this.organizationUseTotp = response.organizationUseTotp;\n    this.favorite = response.favorite;\n    this.revisionDate = response.revisionDate;\n    this.type = response.type;\n    this.name = response.name;\n    this.notes = response.notes;\n    this.collectionIds = collectionIds != null ? collectionIds : response.collectionIds;\n    this.deletedDate = response.deletedDate;\n    this.reprompt = response.reprompt;\n\n    switch (this.type) {\n      case CipherType.Login:\n        this.login = new LoginData(response.login);\n        break;\n      case CipherType.SecureNote:\n        this.secureNote = new SecureNoteData(response.secureNote);\n        break;\n      case CipherType.Card:\n        this.card = new CardData(response.card);\n        break;\n      case CipherType.Identity:\n        this.identity = new IdentityData(response.identity);\n        break;\n      default:\n        break;\n    }\n\n    if (response.fields != null) {\n      this.fields = response.fields.map((f) => new FieldData(f));\n    }\n    if (response.attachments != null) {\n      this.attachments = response.attachments.map((a) => new AttachmentData(a));\n    }\n    if (response.passwordHistory != null) {\n      this.passwordHistory = response.passwordHistory.map((ph) => new PasswordHistoryData(ph));\n    }\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { Utils } from \"@bitwarden/common/misc/utils\";\n\nimport { EncryptionType } from \"../../enums/encryptionType\";\n\nexport class SymmetricCryptoKey {\n  key: ArrayBuffer;\n  encKey?: ArrayBuffer;\n  macKey?: ArrayBuffer;\n  encType: EncryptionType;\n\n  keyB64: string;\n  encKeyB64: string;\n  macKeyB64: string;\n\n  meta: any;\n\n  constructor(key: ArrayBuffer, encType?: EncryptionType) {\n    if (key == null) {\n      throw new Error(\"Must provide key\");\n    }\n\n    if (encType == null) {\n      if (key.byteLength === 32) {\n        encType = EncryptionType.AesCbc256_B64;\n      } else if (key.byteLength === 64) {\n        encType = EncryptionType.AesCbc256_HmacSha256_B64;\n      } else {\n        throw new Error(\"Unable to determine encType.\");\n      }\n    }\n\n    this.key = key;\n    this.encType = encType;\n\n    if (encType === EncryptionType.AesCbc256_B64 && key.byteLength === 32) {\n      this.encKey = key;\n      this.macKey = null;\n    } else if (encType === EncryptionType.AesCbc128_HmacSha256_B64 && key.byteLength === 32) {\n      this.encKey = key.slice(0, 16);\n      this.macKey = key.slice(16, 32);\n    } else if (encType === EncryptionType.AesCbc256_HmacSha256_B64 && key.byteLength === 64) {\n      this.encKey = key.slice(0, 32);\n      this.macKey = key.slice(32, 64);\n    } else {\n      throw new Error(\"Unsupported encType/key length.\");\n    }\n\n    if (this.key != null) {\n      this.keyB64 = Utils.fromBufferToB64(this.key);\n    }\n    if (this.encKey != null) {\n      this.encKeyB64 = Utils.fromBufferToB64(this.encKey);\n    }\n    if (this.macKey != null) {\n      this.macKeyB64 = Utils.fromBufferToB64(this.macKey);\n    }\n  }\n\n  toJSON() {\n    // The whole object is constructed from the initial key, so just store the B64 key\n    return { keyB64: this.keyB64 };\n  }\n\n  static fromJSON(obj: Jsonify<SymmetricCryptoKey>): SymmetricCryptoKey {\n    if (obj == null) {\n      return null;\n    }\n\n    const arrayBuffer = Utils.fromB64ToArray(obj.keyB64).buffer;\n    return new SymmetricCryptoKey(arrayBuffer);\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { Attachment } from \"../domain/attachment\";\nimport { SymmetricCryptoKey } from \"../domain/symmetricCryptoKey\";\n\nimport { View } from \"./view\";\n\nexport class AttachmentView implements View {\n  id: string = null;\n  url: string = null;\n  size: string = null;\n  sizeName: string = null;\n  fileName: string = null;\n  key: SymmetricCryptoKey = null;\n\n  constructor(a?: Attachment) {\n    if (!a) {\n      return;\n    }\n\n    this.id = a.id;\n    this.url = a.url;\n    this.size = a.size;\n    this.sizeName = a.sizeName;\n  }\n\n  get fileSize(): number {\n    try {\n      if (this.size != null) {\n        return parseInt(this.size, null);\n      }\n    } catch {\n      // Invalid file size.\n    }\n    return 0;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<AttachmentView>>): AttachmentView {\n    const key = obj.key == null ? null : SymmetricCryptoKey.fromJSON(obj.key);\n    return Object.assign(new AttachmentView(), obj, { key: key });\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { IEncrypted } from \"@bitwarden/common/interfaces/IEncrypted\";\n\nimport { CryptoService } from \"../../abstractions/crypto.service\";\nimport { EncryptionType } from \"../../enums/encryptionType\";\nimport { Utils } from \"../../misc/utils\";\n\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport class EncString implements IEncrypted {\n  encryptedString?: string;\n  encryptionType?: EncryptionType;\n  decryptedValue?: string;\n  data?: string;\n  iv?: string;\n  mac?: string;\n\n  constructor(\n    encryptedStringOrType: string | EncryptionType,\n    data?: string,\n    iv?: string,\n    mac?: string\n  ) {\n    if (data != null) {\n      this.initFromData(encryptedStringOrType as EncryptionType, data, iv, mac);\n    } else {\n      this.initFromEncryptedString(encryptedStringOrType as string);\n    }\n  }\n\n  async decrypt(orgId: string, key: SymmetricCryptoKey = null): Promise<string> {\n    if (this.decryptedValue != null) {\n      return this.decryptedValue;\n    }\n\n    let cryptoService: CryptoService;\n    const containerService = Utils.global.bitwardenContainerService;\n    if (containerService) {\n      cryptoService = containerService.getCryptoService();\n    } else {\n      throw new Error(\"global bitwardenContainerService not initialized.\");\n    }\n\n    try {\n      if (key == null) {\n        key = await cryptoService.getOrgKey(orgId);\n      }\n      this.decryptedValue = await cryptoService.decryptToUtf8(this, key);\n    } catch (e) {\n      this.decryptedValue = \"[error: cannot decrypt]\";\n    }\n    return this.decryptedValue;\n  }\n\n  get ivBytes(): ArrayBuffer {\n    return this.iv == null ? null : Utils.fromB64ToArray(this.iv).buffer;\n  }\n\n  get macBytes(): ArrayBuffer {\n    return this.mac == null ? null : Utils.fromB64ToArray(this.mac).buffer;\n  }\n\n  get dataBytes(): ArrayBuffer {\n    return this.data == null ? null : Utils.fromB64ToArray(this.data).buffer;\n  }\n\n  toJSON() {\n    return this.encryptedString;\n  }\n\n  static fromJSON(obj: Jsonify<EncString>): EncString {\n    return new EncString(obj);\n  }\n\n  private initFromData(encType: EncryptionType, data: string, iv: string, mac: string) {\n    if (iv != null) {\n      this.encryptedString = encType + \".\" + iv + \"|\" + data;\n    } else {\n      this.encryptedString = encType + \".\" + data;\n    }\n\n    // mac\n    if (mac != null) {\n      this.encryptedString += \"|\" + mac;\n    }\n\n    this.encryptionType = encType;\n    this.data = data;\n    this.iv = iv;\n    this.mac = mac;\n  }\n\n  private initFromEncryptedString(encryptedString: string) {\n    this.encryptedString = encryptedString as string;\n    if (!this.encryptedString) {\n      return;\n    }\n\n    const { encType, encPieces } = this.parseEncryptedString(this.encryptedString);\n    this.encryptionType = encType;\n\n    switch (encType) {\n      case EncryptionType.AesCbc128_HmacSha256_B64:\n      case EncryptionType.AesCbc256_HmacSha256_B64:\n        if (encPieces.length !== 3) {\n          return;\n        }\n\n        this.iv = encPieces[0];\n        this.data = encPieces[1];\n        this.mac = encPieces[2];\n        break;\n      case EncryptionType.AesCbc256_B64:\n        if (encPieces.length !== 2) {\n          return;\n        }\n\n        this.iv = encPieces[0];\n        this.data = encPieces[1];\n        break;\n      case EncryptionType.Rsa2048_OaepSha256_B64:\n      case EncryptionType.Rsa2048_OaepSha1_B64:\n        if (encPieces.length !== 1) {\n          return;\n        }\n\n        this.data = encPieces[0];\n        break;\n      default:\n        return;\n    }\n  }\n\n  private parseEncryptedString(encryptedString: string): {\n    encType: EncryptionType;\n    encPieces: string[];\n  } {\n    const headerPieces = encryptedString.split(\".\");\n    let encType: EncryptionType;\n    let encPieces: string[] = null;\n\n    if (headerPieces.length === 2) {\n      try {\n        encType = parseInt(headerPieces[0], null);\n        encPieces = headerPieces[1].split(\"|\");\n      } catch (e) {\n        return;\n      }\n    } else {\n      encPieces = encryptedString.split(\"|\");\n      encType =\n        encPieces.length === 3\n          ? EncryptionType.AesCbc128_HmacSha256_B64\n          : EncryptionType.AesCbc256_B64;\n    }\n\n    return {\n      encType,\n      encPieces,\n    };\n  }\n}\n","import { View } from \"../view/view\";\n\nimport { EncString } from \"./encString\";\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport default class Domain {\n  protected buildDomainModel<D extends Domain>(\n    domain: D,\n    dataObj: any,\n    map: any,\n    notEncList: any[] = []\n  ) {\n    for (const prop in map) {\n      // eslint-disable-next-line\n      if (!map.hasOwnProperty(prop)) {\n        continue;\n      }\n\n      const objProp = dataObj[map[prop] || prop];\n      if (notEncList.indexOf(prop) > -1) {\n        (domain as any)[prop] = objProp ? objProp : null;\n      } else {\n        (domain as any)[prop] = objProp ? new EncString(objProp) : null;\n      }\n    }\n  }\n  protected buildDataModel<D extends Domain>(\n    domain: D,\n    dataObj: any,\n    map: any,\n    notEncStringList: any[] = []\n  ) {\n    for (const prop in map) {\n      // eslint-disable-next-line\n      if (!map.hasOwnProperty(prop)) {\n        continue;\n      }\n\n      const objProp = (domain as any)[map[prop] || prop];\n      if (notEncStringList.indexOf(prop) > -1) {\n        (dataObj as any)[prop] = objProp != null ? objProp : null;\n      } else {\n        (dataObj as any)[prop] = objProp != null ? (objProp as EncString).encryptedString : null;\n      }\n    }\n  }\n\n  protected async decryptObj<T extends View>(\n    viewModel: T,\n    map: any,\n    orgId: string,\n    key: SymmetricCryptoKey = null\n  ): Promise<T> {\n    const promises = [];\n    const self: any = this;\n\n    for (const prop in map) {\n      // eslint-disable-next-line\n      if (!map.hasOwnProperty(prop)) {\n        continue;\n      }\n\n      (function (theProp) {\n        const p = Promise.resolve()\n          .then(() => {\n            const mapProp = map[theProp] || theProp;\n            if (self[mapProp]) {\n              return self[mapProp].decrypt(orgId, key);\n            }\n            return null;\n          })\n          .then((val: any) => {\n            (viewModel as any)[theProp] = val;\n          });\n        promises.push(p);\n      })(prop);\n    }\n\n    await Promise.all(promises);\n    return viewModel;\n  }\n}\n","export type LinkedIdType = LoginLinkedId | CardLinkedId | IdentityLinkedId;\n\n// LoginView\nexport enum LoginLinkedId {\n  Username = 100,\n  Password = 101,\n}\n\n// CardView\nexport enum CardLinkedId {\n  CardholderName = 300,\n  ExpMonth = 301,\n  ExpYear = 302,\n  Code = 303,\n  Brand = 304,\n  Number = 305,\n}\n\n// IdentityView\nexport enum IdentityLinkedId {\n  Title = 400,\n  MiddleName = 401,\n  Address1 = 402,\n  Address2 = 403,\n  Address3 = 404,\n  City = 405,\n  State = 406,\n  PostalCode = 407,\n  Country = 408,\n  Company = 409,\n  Email = 410,\n  Phone = 411,\n  Ssn = 412,\n  Username = 413,\n  PassportNumber = 414,\n  LicenseNumber = 415,\n  FirstName = 416,\n  LastName = 417,\n  FullName = 418,\n}\n","import { CryptoService } from \"../../abstractions/crypto.service\";\nimport { Utils } from \"../../misc/utils\";\nimport { AttachmentData } from \"../data/attachmentData\";\nimport { AttachmentView } from \"../view/attachmentView\";\n\nimport Domain from \"./domainBase\";\nimport { EncString } from \"./encString\";\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport class Attachment extends Domain {\n  id: string;\n  url: string;\n  size: string;\n  sizeName: string; // Readable size, ex: \"4.2 KB\" or \"1.43 GB\"\n  key: EncString;\n  fileName: EncString;\n\n  constructor(obj?: AttachmentData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.size = obj.size;\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        id: null,\n        url: null,\n        sizeName: null,\n        fileName: null,\n        key: null,\n      },\n      [\"id\", \"url\", \"sizeName\"]\n    );\n  }\n\n  async decrypt(orgId: string, encKey?: SymmetricCryptoKey): Promise<AttachmentView> {\n    const view = await this.decryptObj(\n      new AttachmentView(this),\n      {\n        fileName: null,\n      },\n      orgId,\n      encKey\n    );\n\n    if (this.key != null) {\n      let cryptoService: CryptoService;\n      const containerService = Utils.global.bitwardenContainerService;\n      if (containerService) {\n        cryptoService = containerService.getCryptoService();\n      } else {\n        throw new Error(\"global bitwardenContainerService not initialized.\");\n      }\n\n      try {\n        const orgKey = await cryptoService.getOrgKey(orgId);\n        const decValue = await cryptoService.decryptToBytes(this.key, orgKey ?? encKey);\n        view.key = new SymmetricCryptoKey(decValue);\n      } catch (e) {\n        // TODO: error?\n      }\n    }\n\n    return view;\n  }\n\n  toAttachmentData(): AttachmentData {\n    const a = new AttachmentData();\n    a.size = this.size;\n    this.buildDataModel(\n      this,\n      a,\n      {\n        id: null,\n        url: null,\n        sizeName: null,\n        fileName: null,\n        key: null,\n      },\n      [\"id\", \"url\", \"sizeName\"]\n    );\n    return a;\n  }\n}\n","import { LinkedIdType } from \"../enums/linkedIdType\";\nimport { ItemView } from \"../models/view/itemView\";\n\nexport class LinkedMetadata {\n  constructor(readonly propertyKey: string, private readonly _i18nKey?: string) {}\n\n  get i18nKey() {\n    return this._i18nKey ?? this.propertyKey;\n  }\n}\n\n/**\n * A decorator used to set metadata used by Linked custom fields. Apply it to a class property or getter to make it\n *    available as a Linked custom field option.\n * @param id - A unique value that is saved in the Field model. It is used to look up the decorated class property.\n * @param i18nKey - The i18n key used to describe the decorated class property in the UI. If it is null, then the name\n *    of the class property will be used as the i18n key.\n */\nexport function linkedFieldOption(id: LinkedIdType, i18nKey?: string) {\n  return (prototype: ItemView, propertyKey: string) => {\n    if (prototype.linkedFieldOptions == null) {\n      prototype.linkedFieldOptions = new Map<LinkedIdType, LinkedMetadata>();\n    }\n\n    prototype.linkedFieldOptions.set(id, new LinkedMetadata(propertyKey, i18nKey));\n  };\n}\n","import { LinkedMetadata } from \"../../misc/linkedFieldOption.decorator\";\n\nimport { View } from \"./view\";\n\nexport abstract class ItemView implements View {\n  linkedFieldOptions: Map<number, LinkedMetadata>;\n  abstract get subTitle(): string;\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { CardLinkedId as LinkedId } from \"../../enums/linkedIdType\";\nimport { linkedFieldOption } from \"../../misc/linkedFieldOption.decorator\";\n\nimport { ItemView } from \"./itemView\";\n\nexport class CardView extends ItemView {\n  @linkedFieldOption(LinkedId.CardholderName)\n  cardholderName: string = null;\n  @linkedFieldOption(LinkedId.ExpMonth, \"expirationMonth\")\n  expMonth: string = null;\n  @linkedFieldOption(LinkedId.ExpYear, \"expirationYear\")\n  expYear: string = null;\n  @linkedFieldOption(LinkedId.Code, \"securityCode\")\n  code: string = null;\n\n  private _brand: string = null;\n  private _number: string = null;\n  private _subTitle: string = null;\n\n  get maskedCode(): string {\n    return this.code != null ? \"•\".repeat(this.code.length) : null;\n  }\n\n  get maskedNumber(): string {\n    return this.number != null ? \"•\".repeat(this.number.length) : null;\n  }\n\n  @linkedFieldOption(LinkedId.Brand)\n  get brand(): string {\n    return this._brand;\n  }\n  set brand(value: string) {\n    this._brand = value;\n    this._subTitle = null;\n  }\n\n  @linkedFieldOption(LinkedId.Number)\n  get number(): string {\n    return this._number;\n  }\n  set number(value: string) {\n    this._number = value;\n    this._subTitle = null;\n  }\n\n  get subTitle(): string {\n    if (this._subTitle == null) {\n      this._subTitle = this.brand;\n      if (this.number != null && this.number.length >= 4) {\n        if (this._subTitle != null && this._subTitle !== \"\") {\n          this._subTitle += \", \";\n        } else {\n          this._subTitle = \"\";\n        }\n\n        // Show last 5 on amex, last 4 for all others\n        const count =\n          this.number.length >= 5 && this.number.match(new RegExp(\"^3[47]\")) != null ? 5 : 4;\n        this._subTitle += \"*\" + this.number.substr(this.number.length - count);\n      }\n    }\n    return this._subTitle;\n  }\n\n  get expiration(): string {\n    if (!this.expMonth && !this.expYear) {\n      return null;\n    }\n\n    let exp = this.expMonth != null ? (\"0\" + this.expMonth).slice(-2) : \"__\";\n    exp += \" / \" + (this.expYear != null ? this.formatYear(this.expYear) : \"____\");\n    return exp;\n  }\n\n  private formatYear(year: string): string {\n    return year.length === 2 ? \"20\" + year : year;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<CardView>>): CardView {\n    return Object.assign(new CardView(), obj);\n  }\n}\n","import { CardData } from \"../data/cardData\";\nimport { CardView } from \"../view/cardView\";\n\nimport Domain from \"./domainBase\";\nimport { EncString } from \"./encString\";\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport class Card extends Domain {\n  cardholderName: EncString;\n  brand: EncString;\n  number: EncString;\n  expMonth: EncString;\n  expYear: EncString;\n  code: EncString;\n\n  constructor(obj?: CardData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        cardholderName: null,\n        brand: null,\n        number: null,\n        expMonth: null,\n        expYear: null,\n        code: null,\n      },\n      []\n    );\n  }\n\n  decrypt(orgId: string, encKey?: SymmetricCryptoKey): Promise<CardView> {\n    return this.decryptObj(\n      new CardView(),\n      {\n        cardholderName: null,\n        brand: null,\n        number: null,\n        expMonth: null,\n        expYear: null,\n        code: null,\n      },\n      orgId,\n      encKey\n    );\n  }\n\n  toCardData(): CardData {\n    const c = new CardData();\n    this.buildDataModel(this, c, {\n      cardholderName: null,\n      brand: null,\n      number: null,\n      expMonth: null,\n      expYear: null,\n      code: null,\n    });\n    return c;\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { FieldType } from \"../../enums/fieldType\";\nimport { LinkedIdType } from \"../../enums/linkedIdType\";\nimport { Field } from \"../domain/field\";\n\nimport { View } from \"./view\";\n\nexport class FieldView implements View {\n  name: string = null;\n  value: string = null;\n  type: FieldType = null;\n  newField = false; // Marks if the field is new and hasn't been saved\n  showValue = false;\n  showCount = false;\n  linkedId: LinkedIdType = null;\n\n  constructor(f?: Field) {\n    if (!f) {\n      return;\n    }\n\n    this.type = f.type;\n    this.linkedId = f.linkedId;\n  }\n\n  get maskedValue(): string {\n    return this.value != null ? \"••••••••\" : null;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<FieldView>>): FieldView {\n    return Object.assign(new FieldView(), obj);\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { IdentityLinkedId as LinkedId } from \"../../enums/linkedIdType\";\nimport { linkedFieldOption } from \"../../misc/linkedFieldOption.decorator\";\nimport { Utils } from \"../../misc/utils\";\n\nimport { ItemView } from \"./itemView\";\n\nexport class IdentityView extends ItemView {\n  @linkedFieldOption(LinkedId.Title)\n  title: string = null;\n  @linkedFieldOption(LinkedId.MiddleName)\n  middleName: string = null;\n  @linkedFieldOption(LinkedId.Address1)\n  address1: string = null;\n  @linkedFieldOption(LinkedId.Address2)\n  address2: string = null;\n  @linkedFieldOption(LinkedId.Address3)\n  address3: string = null;\n  @linkedFieldOption(LinkedId.City, \"cityTown\")\n  city: string = null;\n  @linkedFieldOption(LinkedId.State, \"stateProvince\")\n  state: string = null;\n  @linkedFieldOption(LinkedId.PostalCode, \"zipPostalCode\")\n  postalCode: string = null;\n  @linkedFieldOption(LinkedId.Country)\n  country: string = null;\n  @linkedFieldOption(LinkedId.Company)\n  company: string = null;\n  @linkedFieldOption(LinkedId.Email)\n  email: string = null;\n  @linkedFieldOption(LinkedId.Phone)\n  phone: string = null;\n  @linkedFieldOption(LinkedId.Ssn)\n  ssn: string = null;\n  @linkedFieldOption(LinkedId.Username)\n  username: string = null;\n  @linkedFieldOption(LinkedId.PassportNumber)\n  passportNumber: string = null;\n  @linkedFieldOption(LinkedId.LicenseNumber)\n  licenseNumber: string = null;\n\n  private _firstName: string = null;\n  private _lastName: string = null;\n  private _subTitle: string = null;\n\n  constructor() {\n    super();\n  }\n\n  @linkedFieldOption(LinkedId.FirstName)\n  get firstName(): string {\n    return this._firstName;\n  }\n  set firstName(value: string) {\n    this._firstName = value;\n    this._subTitle = null;\n  }\n\n  @linkedFieldOption(LinkedId.LastName)\n  get lastName(): string {\n    return this._lastName;\n  }\n  set lastName(value: string) {\n    this._lastName = value;\n    this._subTitle = null;\n  }\n\n  get subTitle(): string {\n    if (this._subTitle == null && (this.firstName != null || this.lastName != null)) {\n      this._subTitle = \"\";\n      if (this.firstName != null) {\n        this._subTitle = this.firstName;\n      }\n      if (this.lastName != null) {\n        if (this._subTitle !== \"\") {\n          this._subTitle += \" \";\n        }\n        this._subTitle += this.lastName;\n      }\n    }\n\n    return this._subTitle;\n  }\n\n  @linkedFieldOption(LinkedId.FullName)\n  get fullName(): string {\n    if (\n      this.title != null ||\n      this.firstName != null ||\n      this.middleName != null ||\n      this.lastName != null\n    ) {\n      let name = \"\";\n      if (this.title != null) {\n        name += this.title + \" \";\n      }\n      if (this.firstName != null) {\n        name += this.firstName + \" \";\n      }\n      if (this.middleName != null) {\n        name += this.middleName + \" \";\n      }\n      if (this.lastName != null) {\n        name += this.lastName;\n      }\n      return name.trim();\n    }\n\n    return null;\n  }\n\n  get fullAddress(): string {\n    let address = this.address1;\n    if (!Utils.isNullOrWhitespace(this.address2)) {\n      if (!Utils.isNullOrWhitespace(address)) {\n        address += \", \";\n      }\n      address += this.address2;\n    }\n    if (!Utils.isNullOrWhitespace(this.address3)) {\n      if (!Utils.isNullOrWhitespace(address)) {\n        address += \", \";\n      }\n      address += this.address3;\n    }\n    return address;\n  }\n\n  get fullAddressPart2(): string {\n    if (this.city == null && this.state == null && this.postalCode == null) {\n      return null;\n    }\n    const city = this.city || \"-\";\n    const state = this.state;\n    const postalCode = this.postalCode || \"-\";\n    let addressPart2 = city;\n    if (!Utils.isNullOrWhitespace(state)) {\n      addressPart2 += \", \" + state;\n    }\n    addressPart2 += \", \" + postalCode;\n    return addressPart2;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<IdentityView>>): IdentityView {\n    return Object.assign(new IdentityView(), obj);\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { UriMatchType } from \"../../enums/uriMatchType\";\nimport { Utils } from \"../../misc/utils\";\nimport { LoginUri } from \"../domain/loginUri\";\n\nimport { View } from \"./view\";\n\nconst CanLaunchWhitelist = [\n  \"https://\",\n  \"http://\",\n  \"ssh://\",\n  \"ftp://\",\n  \"sftp://\",\n  \"irc://\",\n  \"vnc://\",\n  // https://docs.microsoft.com/en-us/windows-server/remote/remote-desktop-services/clients/remote-desktop-uri\n  \"rdp://\", // Legacy RDP URI scheme\n  \"ms-rd:\", // Preferred RDP URI scheme\n  \"chrome://\",\n  \"iosapp://\",\n  \"androidapp://\",\n];\n\nexport class LoginUriView implements View {\n  match: UriMatchType = null;\n\n  private _uri: string = null;\n  private _domain: string = null;\n  private _hostname: string = null;\n  private _host: string = null;\n  private _canLaunch: boolean = null;\n\n  constructor(u?: LoginUri) {\n    if (!u) {\n      return;\n    }\n\n    this.match = u.match;\n  }\n\n  get uri(): string {\n    return this._uri;\n  }\n  set uri(value: string) {\n    this._uri = value;\n    this._domain = null;\n    this._canLaunch = null;\n  }\n\n  get domain(): string {\n    if (this._domain == null && this.uri != null) {\n      this._domain = Utils.getDomain(this.uri);\n      if (this._domain === \"\") {\n        this._domain = null;\n      }\n    }\n\n    return this._domain;\n  }\n\n  get hostname(): string {\n    if (this.match === UriMatchType.RegularExpression) {\n      return null;\n    }\n    if (this._hostname == null && this.uri != null) {\n      this._hostname = Utils.getHostname(this.uri);\n      if (this._hostname === \"\") {\n        this._hostname = null;\n      }\n    }\n\n    return this._hostname;\n  }\n\n  get host(): string {\n    if (this.match === UriMatchType.RegularExpression) {\n      return null;\n    }\n    if (this._host == null && this.uri != null) {\n      this._host = Utils.getHost(this.uri);\n      if (this._host === \"\") {\n        this._host = null;\n      }\n    }\n\n    return this._host;\n  }\n\n  get hostnameOrUri(): string {\n    return this.hostname != null ? this.hostname : this.uri;\n  }\n\n  get hostOrUri(): string {\n    return this.host != null ? this.host : this.uri;\n  }\n\n  get isWebsite(): boolean {\n    return (\n      this.uri != null &&\n      (this.uri.indexOf(\"http://\") === 0 ||\n        this.uri.indexOf(\"https://\") === 0 ||\n        (this.uri.indexOf(\"://\") < 0 && Utils.tldEndingRegex.test(this.uri)))\n    );\n  }\n\n  get canLaunch(): boolean {\n    if (this._canLaunch != null) {\n      return this._canLaunch;\n    }\n    if (this.uri != null && this.match !== UriMatchType.RegularExpression) {\n      const uri = this.launchUri;\n      for (let i = 0; i < CanLaunchWhitelist.length; i++) {\n        if (uri.indexOf(CanLaunchWhitelist[i]) === 0) {\n          this._canLaunch = true;\n          return this._canLaunch;\n        }\n      }\n    }\n    this._canLaunch = false;\n    return this._canLaunch;\n  }\n\n  get launchUri(): string {\n    return this.uri.indexOf(\"://\") < 0 && Utils.tldEndingRegex.test(this.uri)\n      ? \"http://\" + this.uri\n      : this.uri;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<LoginUriView>>): LoginUriView {\n    return Object.assign(new LoginUriView(), obj);\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { LoginLinkedId as LinkedId } from \"../../enums/linkedIdType\";\nimport { linkedFieldOption } from \"../../misc/linkedFieldOption.decorator\";\nimport { Utils } from \"../../misc/utils\";\nimport { Login } from \"../domain/login\";\n\nimport { ItemView } from \"./itemView\";\nimport { LoginUriView } from \"./loginUriView\";\n\nexport class LoginView extends ItemView {\n  @linkedFieldOption(LinkedId.Username)\n  username: string = null;\n  @linkedFieldOption(LinkedId.Password)\n  password: string = null;\n\n  passwordRevisionDate?: Date = null;\n  totp: string = null;\n  uris: LoginUriView[] = null;\n  autofillOnPageLoad: boolean = null;\n\n  constructor(l?: Login) {\n    super();\n    if (!l) {\n      return;\n    }\n\n    this.passwordRevisionDate = l.passwordRevisionDate;\n    this.autofillOnPageLoad = l.autofillOnPageLoad;\n  }\n\n  get uri(): string {\n    return this.hasUris ? this.uris[0].uri : null;\n  }\n\n  get maskedPassword(): string {\n    return this.password != null ? \"••••••••\" : null;\n  }\n\n  get subTitle(): string {\n    return this.username;\n  }\n\n  get canLaunch(): boolean {\n    return this.hasUris && this.uris.some((u) => u.canLaunch);\n  }\n\n  get hasTotp(): boolean {\n    return !Utils.isNullOrWhitespace(this.totp);\n  }\n\n  get launchUri(): string {\n    if (this.hasUris) {\n      const uri = this.uris.find((u) => u.canLaunch);\n      if (uri != null) {\n        return uri.launchUri;\n      }\n    }\n    return null;\n  }\n\n  get hasUris(): boolean {\n    return this.uris != null && this.uris.length > 0;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<LoginView>>): LoginView {\n    const passwordRevisionDate =\n      obj.passwordRevisionDate == null ? null : new Date(obj.passwordRevisionDate);\n    const uris = obj.uris?.map((uri: any) => LoginUriView.fromJSON(uri));\n\n    return Object.assign(new LoginView(), obj, {\n      passwordRevisionDate: passwordRevisionDate,\n      uris: uris,\n    });\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { Password } from \"../domain/password\";\n\nimport { View } from \"./view\";\n\nexport class PasswordHistoryView implements View {\n  password: string = null;\n  lastUsedDate: Date = null;\n\n  constructor(ph?: Password) {\n    if (!ph) {\n      return;\n    }\n\n    this.lastUsedDate = ph.lastUsedDate;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<PasswordHistoryView>>): PasswordHistoryView {\n    const lastUsedDate = obj.lastUsedDate == null ? null : new Date(obj.lastUsedDate);\n\n    return Object.assign(new PasswordHistoryView(), obj, {\n      lastUsedDate: lastUsedDate,\n    });\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { SecureNoteType } from \"../../enums/secureNoteType\";\nimport { SecureNote } from \"../domain/secureNote\";\n\nimport { ItemView } from \"./itemView\";\n\nexport class SecureNoteView extends ItemView {\n  type: SecureNoteType = null;\n\n  constructor(n?: SecureNote) {\n    super();\n    if (!n) {\n      return;\n    }\n\n    this.type = n.type;\n  }\n\n  get subTitle(): string {\n    return null;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<SecureNoteView>>): SecureNoteView {\n    return Object.assign(new SecureNoteView(), obj);\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { CipherRepromptType } from \"../../enums/cipherRepromptType\";\nimport { CipherType } from \"../../enums/cipherType\";\nimport { LinkedIdType } from \"../../enums/linkedIdType\";\nimport { Cipher } from \"../domain/cipher\";\n\nimport { AttachmentView } from \"./attachmentView\";\nimport { CardView } from \"./cardView\";\nimport { FieldView } from \"./fieldView\";\nimport { IdentityView } from \"./identityView\";\nimport { LoginView } from \"./loginView\";\nimport { PasswordHistoryView } from \"./passwordHistoryView\";\nimport { SecureNoteView } from \"./secureNoteView\";\nimport { View } from \"./view\";\n\nexport class CipherView implements View {\n  id: string = null;\n  organizationId: string = null;\n  folderId: string = null;\n  name: string = null;\n  notes: string = null;\n  type: CipherType = null;\n  favorite = false;\n  organizationUseTotp = false;\n  edit = false;\n  viewPassword = true;\n  localData: any;\n  login = new LoginView();\n  identity = new IdentityView();\n  card = new CardView();\n  secureNote = new SecureNoteView();\n  attachments: AttachmentView[] = null;\n  fields: FieldView[] = null;\n  passwordHistory: PasswordHistoryView[] = null;\n  collectionIds: string[] = null;\n  revisionDate: Date = null;\n  deletedDate: Date = null;\n  reprompt: CipherRepromptType = CipherRepromptType.None;\n\n  constructor(c?: Cipher) {\n    if (!c) {\n      return;\n    }\n\n    this.id = c.id;\n    this.organizationId = c.organizationId;\n    this.folderId = c.folderId;\n    this.favorite = c.favorite;\n    this.organizationUseTotp = c.organizationUseTotp;\n    this.edit = c.edit;\n    this.viewPassword = c.viewPassword;\n    this.type = c.type;\n    this.localData = c.localData;\n    this.collectionIds = c.collectionIds;\n    this.revisionDate = c.revisionDate;\n    this.deletedDate = c.deletedDate;\n    // Old locally stored ciphers might have reprompt == null. If so set it to None.\n    this.reprompt = c.reprompt ?? CipherRepromptType.None;\n  }\n\n  private get item() {\n    switch (this.type) {\n      case CipherType.Login:\n        return this.login;\n      case CipherType.SecureNote:\n        return this.secureNote;\n      case CipherType.Card:\n        return this.card;\n      case CipherType.Identity:\n        return this.identity;\n      default:\n        break;\n    }\n\n    return null;\n  }\n\n  get subTitle(): string {\n    return this.item.subTitle;\n  }\n\n  get hasPasswordHistory(): boolean {\n    return this.passwordHistory && this.passwordHistory.length > 0;\n  }\n\n  get hasAttachments(): boolean {\n    return this.attachments && this.attachments.length > 0;\n  }\n\n  get hasOldAttachments(): boolean {\n    if (this.hasAttachments) {\n      for (let i = 0; i < this.attachments.length; i++) {\n        if (this.attachments[i].key == null) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  get hasFields(): boolean {\n    return this.fields && this.fields.length > 0;\n  }\n\n  get passwordRevisionDisplayDate(): Date {\n    if (this.type !== CipherType.Login || this.login == null) {\n      return null;\n    } else if (this.login.password == null || this.login.password === \"\") {\n      return null;\n    }\n    return this.login.passwordRevisionDate;\n  }\n\n  get isDeleted(): boolean {\n    return this.deletedDate != null;\n  }\n\n  get linkedFieldOptions() {\n    return this.item.linkedFieldOptions;\n  }\n\n  linkedFieldValue(id: LinkedIdType) {\n    const linkedFieldOption = this.linkedFieldOptions?.get(id);\n    if (linkedFieldOption == null) {\n      return null;\n    }\n\n    const item = this.item;\n    return this.item[linkedFieldOption.propertyKey as keyof typeof item];\n  }\n\n  linkedFieldI18nKey(id: LinkedIdType): string {\n    return this.linkedFieldOptions.get(id)?.i18nKey;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<CipherView>>): CipherView {\n    const view = new CipherView();\n    const revisionDate = obj.revisionDate == null ? null : new Date(obj.revisionDate);\n    const deletedDate = obj.deletedDate == null ? null : new Date(obj.deletedDate);\n    const attachments = obj.attachments?.map((a: any) => AttachmentView.fromJSON(a));\n    const fields = obj.fields?.map((f: any) => FieldView.fromJSON(f));\n    const passwordHistory = obj.passwordHistory?.map((ph: any) => PasswordHistoryView.fromJSON(ph));\n\n    Object.assign(view, obj, {\n      revisionDate: revisionDate,\n      deletedDate: deletedDate,\n      attachments: attachments,\n      fields: fields,\n      passwordHistory: passwordHistory,\n    });\n\n    switch (obj.type) {\n      case CipherType.Card:\n        view.card = CardView.fromJSON(obj.card);\n        break;\n      case CipherType.Identity:\n        view.identity = IdentityView.fromJSON(obj.identity);\n        break;\n      case CipherType.Login:\n        view.login = LoginView.fromJSON(obj.login);\n        break;\n      case CipherType.SecureNote:\n        view.secureNote = SecureNoteView.fromJSON(obj.secureNote);\n        break;\n      default:\n        break;\n    }\n\n    return view;\n  }\n}\n","import { FieldType } from \"../../enums/fieldType\";\nimport { LinkedIdType } from \"../../enums/linkedIdType\";\nimport { FieldData } from \"../data/fieldData\";\nimport { FieldView } from \"../view/fieldView\";\n\nimport Domain from \"./domainBase\";\nimport { EncString } from \"./encString\";\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport class Field extends Domain {\n  name: EncString;\n  value: EncString;\n  type: FieldType;\n  linkedId: LinkedIdType;\n\n  constructor(obj?: FieldData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.type = obj.type;\n    this.linkedId = obj.linkedId;\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        name: null,\n        value: null,\n      },\n      []\n    );\n  }\n\n  decrypt(orgId: string, encKey?: SymmetricCryptoKey): Promise<FieldView> {\n    return this.decryptObj(\n      new FieldView(this),\n      {\n        name: null,\n        value: null,\n      },\n      orgId,\n      encKey\n    );\n  }\n\n  toFieldData(): FieldData {\n    const f = new FieldData();\n    this.buildDataModel(\n      this,\n      f,\n      {\n        name: null,\n        value: null,\n        type: null,\n        linkedId: null,\n      },\n      [\"type\", \"linkedId\"]\n    );\n    return f;\n  }\n}\n","import { IdentityData } from \"../data/identityData\";\nimport { IdentityView } from \"../view/identityView\";\n\nimport Domain from \"./domainBase\";\nimport { EncString } from \"./encString\";\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport class Identity extends Domain {\n  title: EncString;\n  firstName: EncString;\n  middleName: EncString;\n  lastName: EncString;\n  address1: EncString;\n  address2: EncString;\n  address3: EncString;\n  city: EncString;\n  state: EncString;\n  postalCode: EncString;\n  country: EncString;\n  company: EncString;\n  email: EncString;\n  phone: EncString;\n  ssn: EncString;\n  username: EncString;\n  passportNumber: EncString;\n  licenseNumber: EncString;\n\n  constructor(obj?: IdentityData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        title: null,\n        firstName: null,\n        middleName: null,\n        lastName: null,\n        address1: null,\n        address2: null,\n        address3: null,\n        city: null,\n        state: null,\n        postalCode: null,\n        country: null,\n        company: null,\n        email: null,\n        phone: null,\n        ssn: null,\n        username: null,\n        passportNumber: null,\n        licenseNumber: null,\n      },\n      []\n    );\n  }\n\n  decrypt(orgId: string, encKey?: SymmetricCryptoKey): Promise<IdentityView> {\n    return this.decryptObj(\n      new IdentityView(),\n      {\n        title: null,\n        firstName: null,\n        middleName: null,\n        lastName: null,\n        address1: null,\n        address2: null,\n        address3: null,\n        city: null,\n        state: null,\n        postalCode: null,\n        country: null,\n        company: null,\n        email: null,\n        phone: null,\n        ssn: null,\n        username: null,\n        passportNumber: null,\n        licenseNumber: null,\n      },\n      orgId,\n      encKey\n    );\n  }\n\n  toIdentityData(): IdentityData {\n    const i = new IdentityData();\n    this.buildDataModel(this, i, {\n      title: null,\n      firstName: null,\n      middleName: null,\n      lastName: null,\n      address1: null,\n      address2: null,\n      address3: null,\n      city: null,\n      state: null,\n      postalCode: null,\n      country: null,\n      company: null,\n      email: null,\n      phone: null,\n      ssn: null,\n      username: null,\n      passportNumber: null,\n      licenseNumber: null,\n    });\n    return i;\n  }\n}\n","import { UriMatchType } from \"../../enums/uriMatchType\";\nimport { LoginUriData } from \"../data/loginUriData\";\nimport { LoginUriView } from \"../view/loginUriView\";\n\nimport Domain from \"./domainBase\";\nimport { EncString } from \"./encString\";\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport class LoginUri extends Domain {\n  uri: EncString;\n  match: UriMatchType;\n\n  constructor(obj?: LoginUriData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.match = obj.match;\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        uri: null,\n      },\n      []\n    );\n  }\n\n  decrypt(orgId: string, encKey?: SymmetricCryptoKey): Promise<LoginUriView> {\n    return this.decryptObj(\n      new LoginUriView(this),\n      {\n        uri: null,\n      },\n      orgId,\n      encKey\n    );\n  }\n\n  toLoginUriData(): LoginUriData {\n    const u = new LoginUriData();\n    this.buildDataModel(\n      this,\n      u,\n      {\n        uri: null,\n        match: null,\n      },\n      [\"match\"]\n    );\n    return u;\n  }\n}\n","import { LoginData } from \"../data/loginData\";\nimport { LoginView } from \"../view/loginView\";\n\nimport Domain from \"./domainBase\";\nimport { EncString } from \"./encString\";\nimport { LoginUri } from \"./loginUri\";\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport class Login extends Domain {\n  uris: LoginUri[];\n  username: EncString;\n  password: EncString;\n  passwordRevisionDate?: Date;\n  totp: EncString;\n  autofillOnPageLoad: boolean;\n\n  constructor(obj?: LoginData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.passwordRevisionDate =\n      obj.passwordRevisionDate != null ? new Date(obj.passwordRevisionDate) : null;\n    this.autofillOnPageLoad = obj.autofillOnPageLoad;\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        username: null,\n        password: null,\n        totp: null,\n      },\n      []\n    );\n\n    if (obj.uris) {\n      this.uris = [];\n      obj.uris.forEach((u) => {\n        this.uris.push(new LoginUri(u));\n      });\n    }\n  }\n\n  async decrypt(orgId: string, encKey?: SymmetricCryptoKey): Promise<LoginView> {\n    const view = await this.decryptObj(\n      new LoginView(this),\n      {\n        username: null,\n        password: null,\n        totp: null,\n      },\n      orgId,\n      encKey\n    );\n\n    if (this.uris != null) {\n      view.uris = [];\n      for (let i = 0; i < this.uris.length; i++) {\n        const uri = await this.uris[i].decrypt(orgId, encKey);\n        view.uris.push(uri);\n      }\n    }\n\n    return view;\n  }\n\n  toLoginData(): LoginData {\n    const l = new LoginData();\n    l.passwordRevisionDate =\n      this.passwordRevisionDate != null ? this.passwordRevisionDate.toISOString() : null;\n    l.autofillOnPageLoad = this.autofillOnPageLoad;\n    this.buildDataModel(this, l, {\n      username: null,\n      password: null,\n      totp: null,\n    });\n\n    if (this.uris != null && this.uris.length > 0) {\n      l.uris = [];\n      this.uris.forEach((u) => {\n        l.uris.push(u.toLoginUriData());\n      });\n    }\n\n    return l;\n  }\n}\n","import { PasswordHistoryData } from \"../data/passwordHistoryData\";\nimport { PasswordHistoryView } from \"../view/passwordHistoryView\";\n\nimport Domain from \"./domainBase\";\nimport { EncString } from \"./encString\";\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport class Password extends Domain {\n  password: EncString;\n  lastUsedDate: Date;\n\n  constructor(obj?: PasswordHistoryData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.buildDomainModel(this, obj, {\n      password: null,\n    });\n    this.lastUsedDate = new Date(obj.lastUsedDate);\n  }\n\n  decrypt(orgId: string, encKey?: SymmetricCryptoKey): Promise<PasswordHistoryView> {\n    return this.decryptObj(\n      new PasswordHistoryView(this),\n      {\n        password: null,\n      },\n      orgId,\n      encKey\n    );\n  }\n\n  toPasswordHistoryData(): PasswordHistoryData {\n    const ph = new PasswordHistoryData();\n    ph.lastUsedDate = this.lastUsedDate.toISOString();\n    this.buildDataModel(this, ph, {\n      password: null,\n    });\n    return ph;\n  }\n}\n","import { SecureNoteType } from \"../../enums/secureNoteType\";\nimport { SecureNoteData } from \"../data/secureNoteData\";\nimport { SecureNoteView } from \"../view/secureNoteView\";\n\nimport Domain from \"./domainBase\";\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport class SecureNote extends Domain {\n  type: SecureNoteType;\n\n  constructor(obj?: SecureNoteData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.type = obj.type;\n  }\n\n  decrypt(orgId: string, encKey?: SymmetricCryptoKey): Promise<SecureNoteView> {\n    return Promise.resolve(new SecureNoteView(this));\n  }\n\n  toSecureNoteData(): SecureNoteData {\n    const n = new SecureNoteData();\n    n.type = this.type;\n    return n;\n  }\n}\n","import { CipherRepromptType } from \"../../enums/cipherRepromptType\";\nimport { CipherType } from \"../../enums/cipherType\";\nimport { CipherData } from \"../data/cipherData\";\nimport { CipherView } from \"../view/cipherView\";\n\nimport { Attachment } from \"./attachment\";\nimport { Card } from \"./card\";\nimport Domain from \"./domainBase\";\nimport { EncString } from \"./encString\";\nimport { Field } from \"./field\";\nimport { Identity } from \"./identity\";\nimport { Login } from \"./login\";\nimport { Password } from \"./password\";\nimport { SecureNote } from \"./secureNote\";\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport class Cipher extends Domain {\n  id: string;\n  organizationId: string;\n  folderId: string;\n  name: EncString;\n  notes: EncString;\n  type: CipherType;\n  favorite: boolean;\n  organizationUseTotp: boolean;\n  edit: boolean;\n  viewPassword: boolean;\n  revisionDate: Date;\n  localData: any;\n  login: Login;\n  identity: Identity;\n  card: Card;\n  secureNote: SecureNote;\n  attachments: Attachment[];\n  fields: Field[];\n  passwordHistory: Password[];\n  collectionIds: string[];\n  deletedDate: Date;\n  reprompt: CipherRepromptType;\n\n  constructor(obj?: CipherData, localData: any = null) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        id: null,\n        organizationId: null,\n        folderId: null,\n        name: null,\n        notes: null,\n      },\n      [\"id\", \"organizationId\", \"folderId\"]\n    );\n\n    this.type = obj.type;\n    this.favorite = obj.favorite;\n    this.organizationUseTotp = obj.organizationUseTotp;\n    this.edit = obj.edit;\n    if (obj.viewPassword != null) {\n      this.viewPassword = obj.viewPassword;\n    } else {\n      this.viewPassword = true; // Default for already synced Ciphers without viewPassword\n    }\n    this.revisionDate = obj.revisionDate != null ? new Date(obj.revisionDate) : null;\n    this.collectionIds = obj.collectionIds;\n    this.localData = localData;\n    this.deletedDate = obj.deletedDate != null ? new Date(obj.deletedDate) : null;\n    this.reprompt = obj.reprompt;\n\n    switch (this.type) {\n      case CipherType.Login:\n        this.login = new Login(obj.login);\n        break;\n      case CipherType.SecureNote:\n        this.secureNote = new SecureNote(obj.secureNote);\n        break;\n      case CipherType.Card:\n        this.card = new Card(obj.card);\n        break;\n      case CipherType.Identity:\n        this.identity = new Identity(obj.identity);\n        break;\n      default:\n        break;\n    }\n\n    if (obj.attachments != null) {\n      this.attachments = obj.attachments.map((a) => new Attachment(a));\n    } else {\n      this.attachments = null;\n    }\n\n    if (obj.fields != null) {\n      this.fields = obj.fields.map((f) => new Field(f));\n    } else {\n      this.fields = null;\n    }\n\n    if (obj.passwordHistory != null) {\n      this.passwordHistory = obj.passwordHistory.map((ph) => new Password(ph));\n    } else {\n      this.passwordHistory = null;\n    }\n  }\n\n  async decrypt(encKey?: SymmetricCryptoKey): Promise<CipherView> {\n    const model = new CipherView(this);\n\n    await this.decryptObj(\n      model,\n      {\n        name: null,\n        notes: null,\n      },\n      this.organizationId,\n      encKey\n    );\n\n    switch (this.type) {\n      case CipherType.Login:\n        model.login = await this.login.decrypt(this.organizationId, encKey);\n        break;\n      case CipherType.SecureNote:\n        model.secureNote = await this.secureNote.decrypt(this.organizationId, encKey);\n        break;\n      case CipherType.Card:\n        model.card = await this.card.decrypt(this.organizationId, encKey);\n        break;\n      case CipherType.Identity:\n        model.identity = await this.identity.decrypt(this.organizationId, encKey);\n        break;\n      default:\n        break;\n    }\n\n    const orgId = this.organizationId;\n\n    if (this.attachments != null && this.attachments.length > 0) {\n      const attachments: any[] = [];\n      await this.attachments.reduce((promise, attachment) => {\n        return promise\n          .then(() => {\n            return attachment.decrypt(orgId, encKey);\n          })\n          .then((decAttachment) => {\n            attachments.push(decAttachment);\n          });\n      }, Promise.resolve());\n      model.attachments = attachments;\n    }\n\n    if (this.fields != null && this.fields.length > 0) {\n      const fields: any[] = [];\n      await this.fields.reduce((promise, field) => {\n        return promise\n          .then(() => {\n            return field.decrypt(orgId, encKey);\n          })\n          .then((decField) => {\n            fields.push(decField);\n          });\n      }, Promise.resolve());\n      model.fields = fields;\n    }\n\n    if (this.passwordHistory != null && this.passwordHistory.length > 0) {\n      const passwordHistory: any[] = [];\n      await this.passwordHistory.reduce((promise, ph) => {\n        return promise\n          .then(() => {\n            return ph.decrypt(orgId, encKey);\n          })\n          .then((decPh) => {\n            passwordHistory.push(decPh);\n          });\n      }, Promise.resolve());\n      model.passwordHistory = passwordHistory;\n    }\n\n    return model;\n  }\n\n  toCipherData(): CipherData {\n    const c = new CipherData();\n    c.id = this.id;\n    c.organizationId = this.organizationId;\n    c.folderId = this.folderId;\n    c.edit = this.edit;\n    c.viewPassword = this.viewPassword;\n    c.organizationUseTotp = this.organizationUseTotp;\n    c.favorite = this.favorite;\n    c.revisionDate = this.revisionDate != null ? this.revisionDate.toISOString() : null;\n    c.type = this.type;\n    c.collectionIds = this.collectionIds;\n    c.deletedDate = this.deletedDate != null ? this.deletedDate.toISOString() : null;\n    c.reprompt = this.reprompt;\n\n    this.buildDataModel(this, c, {\n      name: null,\n      notes: null,\n    });\n\n    switch (c.type) {\n      case CipherType.Login:\n        c.login = this.login.toLoginData();\n        break;\n      case CipherType.SecureNote:\n        c.secureNote = this.secureNote.toSecureNoteData();\n        break;\n      case CipherType.Card:\n        c.card = this.card.toCardData();\n        break;\n      case CipherType.Identity:\n        c.identity = this.identity.toIdentityData();\n        break;\n      default:\n        break;\n    }\n\n    if (this.fields != null) {\n      c.fields = this.fields.map((f) => f.toFieldData());\n    }\n    if (this.attachments != null) {\n      c.attachments = this.attachments.map((a) => a.toAttachmentData());\n    }\n    if (this.passwordHistory != null) {\n      c.passwordHistory = this.passwordHistory.map((ph) => ph.toPasswordHistoryData());\n    }\n    return c;\n  }\n}\n","import { EncryptionType } from \"@bitwarden/common/enums/encryptionType\";\nimport { IEncrypted } from \"@bitwarden/common/interfaces/IEncrypted\";\nimport { Utils } from \"@bitwarden/common/misc/utils\";\n\nconst ENC_TYPE_LENGTH = 1;\nconst IV_LENGTH = 16;\nconst MAC_LENGTH = 32;\nconst MIN_DATA_LENGTH = 1;\n\nexport class EncArrayBuffer implements IEncrypted {\n  readonly encryptionType: EncryptionType = null;\n  readonly dataBytes: ArrayBuffer = null;\n  readonly ivBytes: ArrayBuffer = null;\n  readonly macBytes: ArrayBuffer = null;\n\n  constructor(readonly buffer: ArrayBuffer) {\n    const encBytes = new Uint8Array(buffer);\n    const encType = encBytes[0];\n\n    switch (encType) {\n      case EncryptionType.AesCbc128_HmacSha256_B64:\n      case EncryptionType.AesCbc256_HmacSha256_B64: {\n        const minimumLength = ENC_TYPE_LENGTH + IV_LENGTH + MAC_LENGTH + MIN_DATA_LENGTH;\n        if (encBytes.length < minimumLength) {\n          this.throwDecryptionError();\n        }\n\n        this.ivBytes = encBytes.slice(ENC_TYPE_LENGTH, ENC_TYPE_LENGTH + IV_LENGTH).buffer;\n        this.macBytes = encBytes.slice(\n          ENC_TYPE_LENGTH + IV_LENGTH,\n          ENC_TYPE_LENGTH + IV_LENGTH + MAC_LENGTH\n        ).buffer;\n        this.dataBytes = encBytes.slice(ENC_TYPE_LENGTH + IV_LENGTH + MAC_LENGTH).buffer;\n        break;\n      }\n      case EncryptionType.AesCbc256_B64: {\n        const minimumLength = ENC_TYPE_LENGTH + IV_LENGTH + MIN_DATA_LENGTH;\n        if (encBytes.length < minimumLength) {\n          this.throwDecryptionError();\n        }\n\n        this.ivBytes = encBytes.slice(ENC_TYPE_LENGTH, ENC_TYPE_LENGTH + IV_LENGTH).buffer;\n        this.dataBytes = encBytes.slice(ENC_TYPE_LENGTH + IV_LENGTH).buffer;\n        break;\n      }\n      default:\n        this.throwDecryptionError();\n    }\n\n    this.encryptionType = encType;\n  }\n\n  private throwDecryptionError() {\n    throw new Error(\n      \"Error parsing encrypted ArrayBuffer: data is corrupted or has an invalid format.\"\n    );\n  }\n\n  static async fromResponse(response: {\n    arrayBuffer: () => Promise<ArrayBuffer>;\n  }): Promise<EncArrayBuffer> {\n    const buffer = await response.arrayBuffer();\n    if (buffer == null) {\n      throw new Error(\"Cannot create EncArrayBuffer from Response - Response is empty\");\n    }\n    return new EncArrayBuffer(buffer);\n  }\n\n  static fromB64(b64: string) {\n    const buffer = Utils.fromB64ToArray(b64).buffer;\n    return new EncArrayBuffer(buffer);\n  }\n}\n","import { CipherView } from \"../view/cipherView\";\n\nconst CacheTTL = 3000;\n\nexport class SortedCiphersCache {\n  private readonly sortedCiphersByUrl: Map<string, Ciphers> = new Map<string, Ciphers>();\n  private readonly timeouts: Map<string, any> = new Map<string, any>();\n\n  constructor(private readonly comparator: (a: CipherView, b: CipherView) => number) {}\n\n  isCached(url: string) {\n    return this.sortedCiphersByUrl.has(url);\n  }\n\n  addCiphers(url: string, ciphers: CipherView[]) {\n    ciphers.sort(this.comparator);\n    this.sortedCiphersByUrl.set(url, new Ciphers(ciphers));\n    this.resetTimer(url);\n  }\n\n  getLastUsed(url: string) {\n    this.resetTimer(url);\n    return this.isCached(url) ? this.sortedCiphersByUrl.get(url).getLastUsed() : null;\n  }\n\n  getLastLaunched(url: string) {\n    return this.isCached(url) ? this.sortedCiphersByUrl.get(url).getLastLaunched() : null;\n  }\n\n  getNext(url: string) {\n    this.resetTimer(url);\n    return this.isCached(url) ? this.sortedCiphersByUrl.get(url).getNext() : null;\n  }\n\n  updateLastUsedIndex(url: string) {\n    if (this.isCached(url)) {\n      this.sortedCiphersByUrl.get(url).updateLastUsedIndex();\n    }\n  }\n\n  clear() {\n    this.sortedCiphersByUrl.clear();\n    this.timeouts.clear();\n  }\n\n  private resetTimer(url: string) {\n    clearTimeout(this.timeouts.get(url));\n    this.timeouts.set(\n      url,\n      setTimeout(() => {\n        this.sortedCiphersByUrl.delete(url);\n        this.timeouts.delete(url);\n      }, CacheTTL)\n    );\n  }\n}\n\nclass Ciphers {\n  lastUsedIndex = -1;\n\n  constructor(private readonly ciphers: CipherView[]) {}\n\n  getLastUsed() {\n    this.lastUsedIndex = Math.max(this.lastUsedIndex, 0);\n    return this.ciphers[this.lastUsedIndex];\n  }\n\n  getLastLaunched() {\n    const usedCiphers = this.ciphers.filter((cipher) => cipher.localData?.lastLaunched);\n    const sortedCiphers = usedCiphers.sort(\n      (x, y) => y.localData.lastLaunched.valueOf() - x.localData.lastLaunched.valueOf()\n    );\n    return sortedCiphers[0];\n  }\n\n  getNextIndex() {\n    return (this.lastUsedIndex + 1) % this.ciphers.length;\n  }\n\n  getNext() {\n    return this.ciphers[this.getNextIndex()];\n  }\n\n  updateLastUsedIndex() {\n    this.lastUsedIndex = this.getNextIndex();\n  }\n}\n","export class CipherBulkDeleteRequest {\n  ids: string[];\n  organizationId: string;\n\n  constructor(ids: string[], organizationId?: string) {\n    this.ids = ids == null ? [] : ids;\n    this.organizationId = organizationId;\n  }\n}\n","export class CipherBulkMoveRequest {\n  ids: string[];\n  folderId: string;\n\n  constructor(ids: string[], folderId: string) {\n    this.ids = ids == null ? [] : ids;\n    this.folderId = folderId;\n  }\n}\n","export class CipherBulkRestoreRequest {\n  ids: string[];\n\n  constructor(ids: string[]) {\n    this.ids = ids == null ? [] : ids;\n  }\n}\n","export class AttachmentRequest {\n  fileName: string;\n  key: string;\n  fileSize: number;\n  adminRequest: boolean;\n}\n","import { CipherRepromptType } from \"../../enums/cipherRepromptType\";\nimport { CipherType } from \"../../enums/cipherType\";\nimport { CardApi } from \"../api/cardApi\";\nimport { FieldApi } from \"../api/fieldApi\";\nimport { IdentityApi } from \"../api/identityApi\";\nimport { LoginApi } from \"../api/loginApi\";\nimport { LoginUriApi } from \"../api/loginUriApi\";\nimport { SecureNoteApi } from \"../api/secureNoteApi\";\nimport { Cipher } from \"../domain/cipher\";\n\nimport { AttachmentRequest } from \"./attachmentRequest\";\nimport { PasswordHistoryRequest } from \"./passwordHistoryRequest\";\n\nexport class CipherRequest {\n  type: CipherType;\n  folderId: string;\n  organizationId: string;\n  name: string;\n  notes: string;\n  favorite: boolean;\n  login: LoginApi;\n  secureNote: SecureNoteApi;\n  card: CardApi;\n  identity: IdentityApi;\n  fields: FieldApi[];\n  passwordHistory: PasswordHistoryRequest[];\n  // Deprecated, remove at some point and rename attachments2 to attachments\n  attachments: { [id: string]: string };\n  attachments2: { [id: string]: AttachmentRequest };\n  lastKnownRevisionDate: Date;\n  reprompt: CipherRepromptType;\n\n  constructor(cipher: Cipher) {\n    this.type = cipher.type;\n    this.folderId = cipher.folderId;\n    this.organizationId = cipher.organizationId;\n    this.name = cipher.name ? cipher.name.encryptedString : null;\n    this.notes = cipher.notes ? cipher.notes.encryptedString : null;\n    this.favorite = cipher.favorite;\n    this.lastKnownRevisionDate = cipher.revisionDate;\n    this.reprompt = cipher.reprompt;\n\n    switch (this.type) {\n      case CipherType.Login:\n        this.login = new LoginApi();\n        this.login.uris = null;\n        this.login.username = cipher.login.username ? cipher.login.username.encryptedString : null;\n        this.login.password = cipher.login.password ? cipher.login.password.encryptedString : null;\n        this.login.passwordRevisionDate =\n          cipher.login.passwordRevisionDate != null\n            ? cipher.login.passwordRevisionDate.toISOString()\n            : null;\n        this.login.totp = cipher.login.totp ? cipher.login.totp.encryptedString : null;\n        this.login.autofillOnPageLoad = cipher.login.autofillOnPageLoad;\n\n        if (cipher.login.uris != null) {\n          this.login.uris = cipher.login.uris.map((u) => {\n            const uri = new LoginUriApi();\n            uri.uri = u.uri != null ? u.uri.encryptedString : null;\n            uri.match = u.match != null ? u.match : null;\n            return uri;\n          });\n        }\n        break;\n      case CipherType.SecureNote:\n        this.secureNote = new SecureNoteApi();\n        this.secureNote.type = cipher.secureNote.type;\n        break;\n      case CipherType.Card:\n        this.card = new CardApi();\n        this.card.cardholderName =\n          cipher.card.cardholderName != null ? cipher.card.cardholderName.encryptedString : null;\n        this.card.brand = cipher.card.brand != null ? cipher.card.brand.encryptedString : null;\n        this.card.number = cipher.card.number != null ? cipher.card.number.encryptedString : null;\n        this.card.expMonth =\n          cipher.card.expMonth != null ? cipher.card.expMonth.encryptedString : null;\n        this.card.expYear =\n          cipher.card.expYear != null ? cipher.card.expYear.encryptedString : null;\n        this.card.code = cipher.card.code != null ? cipher.card.code.encryptedString : null;\n        break;\n      case CipherType.Identity:\n        this.identity = new IdentityApi();\n        this.identity.title =\n          cipher.identity.title != null ? cipher.identity.title.encryptedString : null;\n        this.identity.firstName =\n          cipher.identity.firstName != null ? cipher.identity.firstName.encryptedString : null;\n        this.identity.middleName =\n          cipher.identity.middleName != null ? cipher.identity.middleName.encryptedString : null;\n        this.identity.lastName =\n          cipher.identity.lastName != null ? cipher.identity.lastName.encryptedString : null;\n        this.identity.address1 =\n          cipher.identity.address1 != null ? cipher.identity.address1.encryptedString : null;\n        this.identity.address2 =\n          cipher.identity.address2 != null ? cipher.identity.address2.encryptedString : null;\n        this.identity.address3 =\n          cipher.identity.address3 != null ? cipher.identity.address3.encryptedString : null;\n        this.identity.city =\n          cipher.identity.city != null ? cipher.identity.city.encryptedString : null;\n        this.identity.state =\n          cipher.identity.state != null ? cipher.identity.state.encryptedString : null;\n        this.identity.postalCode =\n          cipher.identity.postalCode != null ? cipher.identity.postalCode.encryptedString : null;\n        this.identity.country =\n          cipher.identity.country != null ? cipher.identity.country.encryptedString : null;\n        this.identity.company =\n          cipher.identity.company != null ? cipher.identity.company.encryptedString : null;\n        this.identity.email =\n          cipher.identity.email != null ? cipher.identity.email.encryptedString : null;\n        this.identity.phone =\n          cipher.identity.phone != null ? cipher.identity.phone.encryptedString : null;\n        this.identity.ssn =\n          cipher.identity.ssn != null ? cipher.identity.ssn.encryptedString : null;\n        this.identity.username =\n          cipher.identity.username != null ? cipher.identity.username.encryptedString : null;\n        this.identity.passportNumber =\n          cipher.identity.passportNumber != null\n            ? cipher.identity.passportNumber.encryptedString\n            : null;\n        this.identity.licenseNumber =\n          cipher.identity.licenseNumber != null\n            ? cipher.identity.licenseNumber.encryptedString\n            : null;\n        break;\n      default:\n        break;\n    }\n\n    if (cipher.fields != null) {\n      this.fields = cipher.fields.map((f) => {\n        const field = new FieldApi();\n        field.type = f.type;\n        field.name = f.name ? f.name.encryptedString : null;\n        field.value = f.value ? f.value.encryptedString : null;\n        field.linkedId = f.linkedId;\n        return field;\n      });\n    }\n\n    if (cipher.passwordHistory != null) {\n      this.passwordHistory = [];\n      cipher.passwordHistory.forEach((ph) => {\n        this.passwordHistory.push({\n          lastUsedDate: ph.lastUsedDate,\n          password: ph.password ? ph.password.encryptedString : null,\n        });\n      });\n    }\n\n    if (cipher.attachments != null) {\n      this.attachments = {};\n      this.attachments2 = {};\n      cipher.attachments.forEach((attachment) => {\n        const fileName = attachment.fileName ? attachment.fileName.encryptedString : null;\n        this.attachments[attachment.id] = fileName;\n        const attachmentRequest = new AttachmentRequest();\n        attachmentRequest.fileName = fileName;\n        if (attachment.key != null) {\n          attachmentRequest.key = attachment.key.encryptedString;\n        }\n        this.attachments2[attachment.id] = attachmentRequest;\n      });\n    }\n  }\n}\n","import { Cipher } from \"../domain/cipher\";\n\nimport { CipherRequest } from \"./cipherRequest\";\n\nexport class CipherWithIdRequest extends CipherRequest {\n  id: string;\n\n  constructor(cipher: Cipher) {\n    super(cipher);\n    this.id = cipher.id;\n  }\n}\n","import { Cipher } from \"../domain/cipher\";\n\nimport { CipherWithIdRequest } from \"./cipherWithIdRequest\";\n\nexport class CipherBulkShareRequest {\n  ciphers: CipherWithIdRequest[];\n  collectionIds: string[];\n\n  constructor(ciphers: Cipher[], collectionIds: string[]) {\n    if (ciphers != null) {\n      this.ciphers = [];\n      ciphers.forEach((c) => {\n        this.ciphers.push(new CipherWithIdRequest(c));\n      });\n    }\n    this.collectionIds = collectionIds;\n  }\n}\n","export class CipherCollectionsRequest {\n  collectionIds: string[];\n\n  constructor(collectionIds: string[]) {\n    this.collectionIds = collectionIds == null ? [] : collectionIds;\n  }\n}\n","import { Cipher } from \"../domain/cipher\";\n\nimport { CipherRequest } from \"./cipherRequest\";\n\nexport class CipherCreateRequest {\n  cipher: CipherRequest;\n  collectionIds: string[];\n\n  constructor(cipher: Cipher) {\n    this.cipher = new CipherRequest(cipher);\n    this.collectionIds = cipher.collectionIds;\n  }\n}\n","import { Cipher } from \"../domain/cipher\";\n\nimport { CipherRequest } from \"./cipherRequest\";\n\nexport class CipherShareRequest {\n  cipher: CipherRequest;\n  collectionIds: string[];\n\n  constructor(cipher: Cipher) {\n    this.cipher = new CipherRequest(cipher);\n    this.collectionIds = cipher.collectionIds;\n  }\n}\n","import { ApiService } from \"../abstractions/api.service\";\nimport { CipherService as CipherServiceAbstraction } from \"../abstractions/cipher.service\";\nimport { CryptoService } from \"../abstractions/crypto.service\";\nimport { FileUploadService } from \"../abstractions/fileUpload.service\";\nimport { I18nService } from \"../abstractions/i18n.service\";\nimport { LogService } from \"../abstractions/log.service\";\nimport { SearchService } from \"../abstractions/search.service\";\nimport { SettingsService } from \"../abstractions/settings.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { CipherType } from \"../enums/cipherType\";\nimport { FieldType } from \"../enums/fieldType\";\nimport { UriMatchType } from \"../enums/uriMatchType\";\nimport { sequentialize } from \"../misc/sequentialize\";\nimport { Utils } from \"../misc/utils\";\nimport { CipherData } from \"../models/data/cipherData\";\nimport { Attachment } from \"../models/domain/attachment\";\nimport { Card } from \"../models/domain/card\";\nimport { Cipher } from \"../models/domain/cipher\";\nimport Domain from \"../models/domain/domainBase\";\nimport { EncArrayBuffer } from \"../models/domain/encArrayBuffer\";\nimport { EncString } from \"../models/domain/encString\";\nimport { Field } from \"../models/domain/field\";\nimport { Identity } from \"../models/domain/identity\";\nimport { Login } from \"../models/domain/login\";\nimport { LoginUri } from \"../models/domain/loginUri\";\nimport { Password } from \"../models/domain/password\";\nimport { SecureNote } from \"../models/domain/secureNote\";\nimport { SortedCiphersCache } from \"../models/domain/sortedCiphersCache\";\nimport { SymmetricCryptoKey } from \"../models/domain/symmetricCryptoKey\";\nimport { AttachmentRequest } from \"../models/request/attachmentRequest\";\nimport { CipherBulkDeleteRequest } from \"../models/request/cipherBulkDeleteRequest\";\nimport { CipherBulkMoveRequest } from \"../models/request/cipherBulkMoveRequest\";\nimport { CipherBulkRestoreRequest } from \"../models/request/cipherBulkRestoreRequest\";\nimport { CipherBulkShareRequest } from \"../models/request/cipherBulkShareRequest\";\nimport { CipherCollectionsRequest } from \"../models/request/cipherCollectionsRequest\";\nimport { CipherCreateRequest } from \"../models/request/cipherCreateRequest\";\nimport { CipherRequest } from \"../models/request/cipherRequest\";\nimport { CipherShareRequest } from \"../models/request/cipherShareRequest\";\nimport { CipherResponse } from \"../models/response/cipherResponse\";\nimport { ErrorResponse } from \"../models/response/errorResponse\";\nimport { AttachmentView } from \"../models/view/attachmentView\";\nimport { CipherView } from \"../models/view/cipherView\";\nimport { FieldView } from \"../models/view/fieldView\";\nimport { PasswordHistoryView } from \"../models/view/passwordHistoryView\";\nimport { View } from \"../models/view/view\";\n\nconst DomainMatchBlacklist = new Map<string, Set<string>>([\n  [\"google.com\", new Set([\"script.google.com\"])],\n]);\n\nexport class CipherService implements CipherServiceAbstraction {\n  private sortedCiphersCache: SortedCiphersCache = new SortedCiphersCache(\n    this.sortCiphersByLastUsed\n  );\n\n  constructor(\n    private cryptoService: CryptoService,\n    private settingsService: SettingsService,\n    private apiService: ApiService,\n    private fileUploadService: FileUploadService,\n    private i18nService: I18nService,\n    private searchService: () => SearchService,\n    private logService: LogService,\n    private stateService: StateService\n  ) {}\n\n  async getDecryptedCipherCache(): Promise<CipherView[]> {\n    const decryptedCiphers = await this.stateService.getDecryptedCiphers();\n    return decryptedCiphers;\n  }\n\n  async setDecryptedCipherCache(value: CipherView[]) {\n    await this.stateService.setDecryptedCiphers(value);\n    if (this.searchService != null) {\n      if (value == null) {\n        this.searchService().clearIndex();\n      } else {\n        this.searchService().indexCiphers();\n      }\n    }\n  }\n\n  async clearCache(userId?: string): Promise<void> {\n    await this.clearDecryptedCiphersState(userId);\n  }\n\n  async encrypt(\n    model: CipherView,\n    key?: SymmetricCryptoKey,\n    originalCipher: Cipher = null\n  ): Promise<Cipher> {\n    // Adjust password history\n    if (model.id != null) {\n      if (originalCipher == null) {\n        originalCipher = await this.get(model.id);\n      }\n      if (originalCipher != null) {\n        const existingCipher = await originalCipher.decrypt();\n        model.passwordHistory = existingCipher.passwordHistory || [];\n        if (model.type === CipherType.Login && existingCipher.type === CipherType.Login) {\n          if (\n            existingCipher.login.password != null &&\n            existingCipher.login.password !== \"\" &&\n            existingCipher.login.password !== model.login.password\n          ) {\n            const ph = new PasswordHistoryView();\n            ph.password = existingCipher.login.password;\n            ph.lastUsedDate = model.login.passwordRevisionDate = new Date();\n            model.passwordHistory.splice(0, 0, ph);\n          } else {\n            model.login.passwordRevisionDate = existingCipher.login.passwordRevisionDate;\n          }\n        }\n        if (existingCipher.hasFields) {\n          const existingHiddenFields = existingCipher.fields.filter(\n            (f) =>\n              f.type === FieldType.Hidden &&\n              f.name != null &&\n              f.name !== \"\" &&\n              f.value != null &&\n              f.value !== \"\"\n          );\n          const hiddenFields =\n            model.fields == null\n              ? []\n              : model.fields.filter(\n                  (f) => f.type === FieldType.Hidden && f.name != null && f.name !== \"\"\n                );\n          existingHiddenFields.forEach((ef) => {\n            const matchedField = hiddenFields.find((f) => f.name === ef.name);\n            if (matchedField == null || matchedField.value !== ef.value) {\n              const ph = new PasswordHistoryView();\n              ph.password = ef.name + \": \" + ef.value;\n              ph.lastUsedDate = new Date();\n              model.passwordHistory.splice(0, 0, ph);\n            }\n          });\n        }\n      }\n      if (model.passwordHistory != null && model.passwordHistory.length === 0) {\n        model.passwordHistory = null;\n      } else if (model.passwordHistory != null && model.passwordHistory.length > 5) {\n        // only save last 5 history\n        model.passwordHistory = model.passwordHistory.slice(0, 5);\n      }\n    }\n\n    const cipher = new Cipher();\n    cipher.id = model.id;\n    cipher.folderId = model.folderId;\n    cipher.favorite = model.favorite;\n    cipher.organizationId = model.organizationId;\n    cipher.type = model.type;\n    cipher.collectionIds = model.collectionIds;\n    cipher.revisionDate = model.revisionDate;\n    cipher.reprompt = model.reprompt;\n\n    if (key == null && cipher.organizationId != null) {\n      key = await this.cryptoService.getOrgKey(cipher.organizationId);\n      if (key == null) {\n        throw new Error(\"Cannot encrypt cipher for organization. No key.\");\n      }\n    }\n    await Promise.all([\n      this.encryptObjProperty(\n        model,\n        cipher,\n        {\n          name: null,\n          notes: null,\n        },\n        key\n      ),\n      this.encryptCipherData(cipher, model, key),\n      this.encryptFields(model.fields, key).then((fields) => {\n        cipher.fields = fields;\n      }),\n      this.encryptPasswordHistories(model.passwordHistory, key).then((ph) => {\n        cipher.passwordHistory = ph;\n      }),\n      this.encryptAttachments(model.attachments, key).then((attachments) => {\n        cipher.attachments = attachments;\n      }),\n    ]);\n\n    return cipher;\n  }\n\n  async encryptAttachments(\n    attachmentsModel: AttachmentView[],\n    key: SymmetricCryptoKey\n  ): Promise<Attachment[]> {\n    if (attachmentsModel == null || attachmentsModel.length === 0) {\n      return null;\n    }\n\n    const promises: Promise<any>[] = [];\n    const encAttachments: Attachment[] = [];\n    attachmentsModel.forEach(async (model) => {\n      const attachment = new Attachment();\n      attachment.id = model.id;\n      attachment.size = model.size;\n      attachment.sizeName = model.sizeName;\n      attachment.url = model.url;\n      const promise = this.encryptObjProperty(\n        model,\n        attachment,\n        {\n          fileName: null,\n        },\n        key\n      ).then(async () => {\n        if (model.key != null) {\n          attachment.key = await this.cryptoService.encrypt(model.key.key, key);\n        }\n        encAttachments.push(attachment);\n      });\n      promises.push(promise);\n    });\n\n    await Promise.all(promises);\n    return encAttachments;\n  }\n\n  async encryptFields(fieldsModel: FieldView[], key: SymmetricCryptoKey): Promise<Field[]> {\n    if (!fieldsModel || !fieldsModel.length) {\n      return null;\n    }\n\n    const self = this;\n    const encFields: Field[] = [];\n    await fieldsModel.reduce(async (promise, field) => {\n      await promise;\n      const encField = await self.encryptField(field, key);\n      encFields.push(encField);\n    }, Promise.resolve());\n\n    return encFields;\n  }\n\n  async encryptField(fieldModel: FieldView, key: SymmetricCryptoKey): Promise<Field> {\n    const field = new Field();\n    field.type = fieldModel.type;\n    field.linkedId = fieldModel.linkedId;\n    // normalize boolean type field values\n    if (fieldModel.type === FieldType.Boolean && fieldModel.value !== \"true\") {\n      fieldModel.value = \"false\";\n    }\n\n    await this.encryptObjProperty(\n      fieldModel,\n      field,\n      {\n        name: null,\n        value: null,\n      },\n      key\n    );\n\n    return field;\n  }\n\n  async encryptPasswordHistories(\n    phModels: PasswordHistoryView[],\n    key: SymmetricCryptoKey\n  ): Promise<Password[]> {\n    if (!phModels || !phModels.length) {\n      return null;\n    }\n\n    const self = this;\n    const encPhs: Password[] = [];\n    await phModels.reduce(async (promise, ph) => {\n      await promise;\n      const encPh = await self.encryptPasswordHistory(ph, key);\n      encPhs.push(encPh);\n    }, Promise.resolve());\n\n    return encPhs;\n  }\n\n  async encryptPasswordHistory(\n    phModel: PasswordHistoryView,\n    key: SymmetricCryptoKey\n  ): Promise<Password> {\n    const ph = new Password();\n    ph.lastUsedDate = phModel.lastUsedDate;\n\n    await this.encryptObjProperty(\n      phModel,\n      ph,\n      {\n        password: null,\n      },\n      key\n    );\n\n    return ph;\n  }\n\n  async get(id: string): Promise<Cipher> {\n    const ciphers = await this.stateService.getEncryptedCiphers();\n    // eslint-disable-next-line\n    if (ciphers == null || !ciphers.hasOwnProperty(id)) {\n      return null;\n    }\n\n    const localData = await this.stateService.getLocalData();\n    return new Cipher(ciphers[id], localData ? localData[id] : null);\n  }\n\n  async getAll(): Promise<Cipher[]> {\n    const localData = await this.stateService.getLocalData();\n    const ciphers = await this.stateService.getEncryptedCiphers();\n    const response: Cipher[] = [];\n    for (const id in ciphers) {\n      // eslint-disable-next-line\n      if (ciphers.hasOwnProperty(id)) {\n        response.push(new Cipher(ciphers[id], localData ? localData[id] : null));\n      }\n    }\n    return response;\n  }\n\n  @sequentialize(() => \"getAllDecrypted\")\n  async getAllDecrypted(): Promise<CipherView[]> {\n    const userId = await this.stateService.getUserId();\n    if ((await this.getDecryptedCipherCache()) != null) {\n      if (\n        this.searchService != null &&\n        (this.searchService().indexedEntityId ?? userId) !== userId\n      ) {\n        await this.searchService().indexCiphers(userId, await this.getDecryptedCipherCache());\n      }\n      return await this.getDecryptedCipherCache();\n    }\n\n    const decCiphers: CipherView[] = [];\n    const hasKey = await this.cryptoService.hasKey();\n    if (!hasKey) {\n      throw new Error(\"No key.\");\n    }\n\n    const promises: Promise<number>[] = [];\n    const ciphers = await this.getAll();\n    ciphers.forEach(async (cipher) => {\n      promises.push(cipher.decrypt().then((c) => decCiphers.push(c)));\n    });\n\n    await Promise.all(promises);\n    decCiphers.sort(this.getLocaleSortingFunction());\n    await this.setDecryptedCipherCache(decCiphers);\n    return decCiphers;\n  }\n\n  async getAllDecryptedForGrouping(groupingId: string, folder = true): Promise<CipherView[]> {\n    const ciphers = await this.getAllDecrypted();\n\n    return ciphers.filter((cipher) => {\n      if (cipher.isDeleted) {\n        return false;\n      }\n      if (folder && cipher.folderId === groupingId) {\n        return true;\n      } else if (\n        !folder &&\n        cipher.collectionIds != null &&\n        cipher.collectionIds.indexOf(groupingId) > -1\n      ) {\n        return true;\n      }\n\n      return false;\n    });\n  }\n\n  async getAllDecryptedForUrl(\n    url: string,\n    includeOtherTypes?: CipherType[],\n    defaultMatch: UriMatchType = null\n  ): Promise<CipherView[]> {\n    if (url == null && includeOtherTypes == null) {\n      return Promise.resolve([]);\n    }\n\n    const domain = Utils.getDomain(url);\n    const eqDomainsPromise =\n      domain == null\n        ? Promise.resolve([])\n        : this.settingsService.getEquivalentDomains().then((eqDomains: any[][]) => {\n            let matches: any[] = [];\n            eqDomains.forEach((eqDomain) => {\n              if (eqDomain.length && eqDomain.indexOf(domain) >= 0) {\n                matches = matches.concat(eqDomain);\n              }\n            });\n\n            if (!matches.length) {\n              matches.push(domain);\n            }\n\n            return matches;\n          });\n\n    const result = await Promise.all([eqDomainsPromise, this.getAllDecrypted()]);\n    const matchingDomains = result[0];\n    const ciphers = result[1];\n\n    if (defaultMatch == null) {\n      defaultMatch = await this.stateService.getDefaultUriMatch();\n      if (defaultMatch == null) {\n        defaultMatch = UriMatchType.Domain;\n      }\n    }\n\n    return ciphers.filter((cipher) => {\n      if (cipher.deletedDate != null) {\n        return false;\n      }\n      if (includeOtherTypes != null && includeOtherTypes.indexOf(cipher.type) > -1) {\n        return true;\n      }\n\n      if (url != null && cipher.type === CipherType.Login && cipher.login.uris != null) {\n        for (let i = 0; i < cipher.login.uris.length; i++) {\n          const u = cipher.login.uris[i];\n          if (u.uri == null) {\n            continue;\n          }\n\n          const match = u.match == null ? defaultMatch : u.match;\n          switch (match) {\n            case UriMatchType.Domain:\n              if (domain != null && u.domain != null && matchingDomains.indexOf(u.domain) > -1) {\n                if (DomainMatchBlacklist.has(u.domain)) {\n                  const domainUrlHost = Utils.getHost(url);\n                  if (!DomainMatchBlacklist.get(u.domain).has(domainUrlHost)) {\n                    return true;\n                  }\n                } else {\n                  return true;\n                }\n              }\n              break;\n            case UriMatchType.Host: {\n              const urlHost = Utils.getHost(url);\n              if (urlHost != null && urlHost === Utils.getHost(u.uri)) {\n                return true;\n              }\n              break;\n            }\n            case UriMatchType.Exact:\n              if (url === u.uri) {\n                return true;\n              }\n              break;\n            case UriMatchType.StartsWith:\n              if (url.startsWith(u.uri)) {\n                return true;\n              }\n              break;\n            case UriMatchType.RegularExpression:\n              try {\n                const regex = new RegExp(u.uri, \"i\");\n                if (regex.test(url)) {\n                  return true;\n                }\n              } catch (e) {\n                this.logService.error(e);\n              }\n              break;\n            case UriMatchType.Never:\n            default:\n              break;\n          }\n        }\n      }\n\n      return false;\n    });\n  }\n\n  async getAllFromApiForOrganization(organizationId: string): Promise<CipherView[]> {\n    const ciphers = await this.apiService.getCiphersOrganization(organizationId);\n    if (ciphers != null && ciphers.data != null && ciphers.data.length) {\n      const decCiphers: CipherView[] = [];\n      const promises: any[] = [];\n      ciphers.data.forEach((r) => {\n        const data = new CipherData(r);\n        const cipher = new Cipher(data);\n        promises.push(cipher.decrypt().then((c) => decCiphers.push(c)));\n      });\n      await Promise.all(promises);\n      decCiphers.sort(this.getLocaleSortingFunction());\n      return decCiphers;\n    } else {\n      return [];\n    }\n  }\n\n  async getLastUsedForUrl(url: string, autofillOnPageLoad = false): Promise<CipherView> {\n    return this.getCipherForUrl(url, true, false, autofillOnPageLoad);\n  }\n\n  async getLastLaunchedForUrl(url: string, autofillOnPageLoad = false): Promise<CipherView> {\n    return this.getCipherForUrl(url, false, true, autofillOnPageLoad);\n  }\n\n  async getNextCipherForUrl(url: string): Promise<CipherView> {\n    return this.getCipherForUrl(url, false, false, false);\n  }\n\n  updateLastUsedIndexForUrl(url: string) {\n    this.sortedCiphersCache.updateLastUsedIndex(url);\n  }\n\n  async updateLastUsedDate(id: string): Promise<void> {\n    let ciphersLocalData = await this.stateService.getLocalData();\n    if (!ciphersLocalData) {\n      ciphersLocalData = {};\n    }\n\n    if (ciphersLocalData[id]) {\n      ciphersLocalData[id].lastUsedDate = new Date().getTime();\n    } else {\n      ciphersLocalData[id] = {\n        lastUsedDate: new Date().getTime(),\n      };\n    }\n\n    await this.stateService.setLocalData(ciphersLocalData);\n\n    const decryptedCipherCache = await this.stateService.getDecryptedCiphers();\n    if (!decryptedCipherCache) {\n      return;\n    }\n\n    for (let i = 0; i < decryptedCipherCache.length; i++) {\n      const cached = decryptedCipherCache[i];\n      if (cached.id === id) {\n        cached.localData = ciphersLocalData[id];\n        break;\n      }\n    }\n    await this.stateService.setDecryptedCiphers(decryptedCipherCache);\n  }\n\n  async updateLastLaunchedDate(id: string): Promise<void> {\n    let ciphersLocalData = await this.stateService.getLocalData();\n    if (!ciphersLocalData) {\n      ciphersLocalData = {};\n    }\n\n    if (ciphersLocalData[id]) {\n      ciphersLocalData[id].lastLaunched = new Date().getTime();\n    } else {\n      ciphersLocalData[id] = {\n        lastUsedDate: new Date().getTime(),\n      };\n    }\n\n    await this.stateService.setLocalData(ciphersLocalData);\n\n    const decryptedCipherCache = await this.stateService.getDecryptedCiphers();\n    if (!decryptedCipherCache) {\n      return;\n    }\n\n    for (let i = 0; i < decryptedCipherCache.length; i++) {\n      const cached = decryptedCipherCache[i];\n      if (cached.id === id) {\n        cached.localData = ciphersLocalData[id];\n        break;\n      }\n    }\n    await this.stateService.setDecryptedCiphers(decryptedCipherCache);\n  }\n\n  async saveNeverDomain(domain: string): Promise<void> {\n    if (domain == null) {\n      return;\n    }\n\n    let domains = await this.stateService.getNeverDomains();\n    if (!domains) {\n      domains = {};\n    }\n    domains[domain] = null;\n    await this.stateService.setNeverDomains(domains);\n  }\n\n  async saveWithServer(cipher: Cipher): Promise<any> {\n    let response: CipherResponse;\n    if (cipher.id == null) {\n      if (cipher.collectionIds != null) {\n        const request = new CipherCreateRequest(cipher);\n        response = await this.apiService.postCipherCreate(request);\n      } else {\n        const request = new CipherRequest(cipher);\n        response = await this.apiService.postCipher(request);\n      }\n      cipher.id = response.id;\n    } else {\n      const request = new CipherRequest(cipher);\n      response = await this.apiService.putCipher(cipher.id, request);\n    }\n\n    const data = new CipherData(response, cipher.collectionIds);\n    await this.upsert(data);\n  }\n\n  async shareWithServer(\n    cipher: CipherView,\n    organizationId: string,\n    collectionIds: string[]\n  ): Promise<any> {\n    const attachmentPromises: Promise<any>[] = [];\n    if (cipher.attachments != null) {\n      cipher.attachments.forEach((attachment) => {\n        if (attachment.key == null) {\n          attachmentPromises.push(\n            this.shareAttachmentWithServer(attachment, cipher.id, organizationId)\n          );\n        }\n      });\n    }\n    await Promise.all(attachmentPromises);\n\n    cipher.organizationId = organizationId;\n    cipher.collectionIds = collectionIds;\n    const encCipher = await this.encrypt(cipher);\n    const request = new CipherShareRequest(encCipher);\n    const response = await this.apiService.putShareCipher(cipher.id, request);\n    const data = new CipherData(response, collectionIds);\n    await this.upsert(data);\n  }\n\n  async shareManyWithServer(\n    ciphers: CipherView[],\n    organizationId: string,\n    collectionIds: string[]\n  ): Promise<any> {\n    const promises: Promise<any>[] = [];\n    const encCiphers: Cipher[] = [];\n    for (const cipher of ciphers) {\n      cipher.organizationId = organizationId;\n      cipher.collectionIds = collectionIds;\n      promises.push(\n        this.encrypt(cipher).then((c) => {\n          encCiphers.push(c);\n        })\n      );\n    }\n    await Promise.all(promises);\n    const request = new CipherBulkShareRequest(encCiphers, collectionIds);\n    try {\n      await this.apiService.putShareCiphers(request);\n    } catch (e) {\n      for (const cipher of ciphers) {\n        cipher.organizationId = null;\n        cipher.collectionIds = null;\n      }\n      throw e;\n    }\n    await this.upsert(encCiphers.map((c) => c.toCipherData()));\n  }\n\n  saveAttachmentWithServer(cipher: Cipher, unencryptedFile: any, admin = false): Promise<Cipher> {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsArrayBuffer(unencryptedFile);\n      reader.onload = async (evt: any) => {\n        try {\n          const cData = await this.saveAttachmentRawWithServer(\n            cipher,\n            unencryptedFile.name,\n            evt.target.result,\n            admin\n          );\n          resolve(cData);\n        } catch (e) {\n          reject(e);\n        }\n      };\n      reader.onerror = () => {\n        reject(\"Error reading file.\");\n      };\n    });\n  }\n\n  async saveAttachmentRawWithServer(\n    cipher: Cipher,\n    filename: string,\n    data: ArrayBuffer,\n    admin = false\n  ): Promise<Cipher> {\n    const key = await this.cryptoService.getOrgKey(cipher.organizationId);\n    const encFileName = await this.cryptoService.encrypt(filename, key);\n\n    const dataEncKey = await this.cryptoService.makeEncKey(key);\n    const encData = await this.cryptoService.encryptToBytes(data, dataEncKey[0]);\n\n    const request: AttachmentRequest = {\n      key: dataEncKey[1].encryptedString,\n      fileName: encFileName.encryptedString,\n      fileSize: encData.buffer.byteLength,\n      adminRequest: admin,\n    };\n\n    let response: CipherResponse;\n    try {\n      const uploadDataResponse = await this.apiService.postCipherAttachment(cipher.id, request);\n      response = admin ? uploadDataResponse.cipherMiniResponse : uploadDataResponse.cipherResponse;\n      await this.fileUploadService.uploadCipherAttachment(\n        admin,\n        uploadDataResponse,\n        encFileName,\n        encData\n      );\n    } catch (e) {\n      if (\n        (e instanceof ErrorResponse && (e as ErrorResponse).statusCode === 404) ||\n        (e as ErrorResponse).statusCode === 405\n      ) {\n        response = await this.legacyServerAttachmentFileUpload(\n          admin,\n          cipher.id,\n          encFileName,\n          encData,\n          dataEncKey[1]\n        );\n      } else if (e instanceof ErrorResponse) {\n        throw new Error((e as ErrorResponse).getSingleMessage());\n      } else {\n        throw e;\n      }\n    }\n\n    const cData = new CipherData(response, cipher.collectionIds);\n    if (!admin) {\n      await this.upsert(cData);\n    }\n    return new Cipher(cData);\n  }\n\n  /**\n   * @deprecated Mar 25 2021: This method has been deprecated in favor of direct uploads.\n   * This method still exists for backward compatibility with old server versions.\n   */\n  async legacyServerAttachmentFileUpload(\n    admin: boolean,\n    cipherId: string,\n    encFileName: EncString,\n    encData: EncArrayBuffer,\n    key: EncString\n  ) {\n    const fd = new FormData();\n    try {\n      const blob = new Blob([encData.buffer], { type: \"application/octet-stream\" });\n      fd.append(\"key\", key.encryptedString);\n      fd.append(\"data\", blob, encFileName.encryptedString);\n    } catch (e) {\n      if (Utils.isNode && !Utils.isBrowser) {\n        fd.append(\"key\", key.encryptedString);\n        fd.append(\n          \"data\",\n          Buffer.from(encData.buffer) as any,\n          {\n            filepath: encFileName.encryptedString,\n            contentType: \"application/octet-stream\",\n          } as any\n        );\n      } else {\n        throw e;\n      }\n    }\n\n    let response: CipherResponse;\n    try {\n      if (admin) {\n        response = await this.apiService.postCipherAttachmentAdminLegacy(cipherId, fd);\n      } else {\n        response = await this.apiService.postCipherAttachmentLegacy(cipherId, fd);\n      }\n    } catch (e) {\n      throw new Error((e as ErrorResponse).getSingleMessage());\n    }\n\n    return response;\n  }\n\n  async saveCollectionsWithServer(cipher: Cipher): Promise<any> {\n    const request = new CipherCollectionsRequest(cipher.collectionIds);\n    await this.apiService.putCipherCollections(cipher.id, request);\n    const data = cipher.toCipherData();\n    await this.upsert(data);\n  }\n\n  async upsert(cipher: CipherData | CipherData[]): Promise<any> {\n    let ciphers = await this.stateService.getEncryptedCiphers();\n    if (ciphers == null) {\n      ciphers = {};\n    }\n\n    if (cipher instanceof CipherData) {\n      const c = cipher as CipherData;\n      ciphers[c.id] = c;\n    } else {\n      (cipher as CipherData[]).forEach((c) => {\n        ciphers[c.id] = c;\n      });\n    }\n\n    await this.replace(ciphers);\n  }\n\n  async replace(ciphers: { [id: string]: CipherData }): Promise<any> {\n    await this.clearDecryptedCiphersState();\n    await this.stateService.setEncryptedCiphers(ciphers);\n  }\n\n  async clear(userId?: string): Promise<any> {\n    await this.clearEncryptedCiphersState(userId);\n    await this.clearCache(userId);\n  }\n\n  async moveManyWithServer(ids: string[], folderId: string): Promise<any> {\n    await this.apiService.putMoveCiphers(new CipherBulkMoveRequest(ids, folderId));\n\n    let ciphers = await this.stateService.getEncryptedCiphers();\n    if (ciphers == null) {\n      ciphers = {};\n    }\n\n    ids.forEach((id) => {\n      // eslint-disable-next-line\n      if (ciphers.hasOwnProperty(id)) {\n        ciphers[id].folderId = folderId;\n      }\n    });\n\n    await this.clearCache();\n    await this.stateService.setEncryptedCiphers(ciphers);\n  }\n\n  async delete(id: string | string[]): Promise<any> {\n    const ciphers = await this.stateService.getEncryptedCiphers();\n    if (ciphers == null) {\n      return;\n    }\n\n    if (typeof id === \"string\") {\n      if (ciphers[id] == null) {\n        return;\n      }\n      delete ciphers[id];\n    } else {\n      (id as string[]).forEach((i) => {\n        delete ciphers[i];\n      });\n    }\n\n    await this.clearCache();\n    await this.stateService.setEncryptedCiphers(ciphers);\n  }\n\n  async deleteWithServer(id: string): Promise<any> {\n    await this.apiService.deleteCipher(id);\n    await this.delete(id);\n  }\n\n  async deleteManyWithServer(ids: string[]): Promise<any> {\n    await this.apiService.deleteManyCiphers(new CipherBulkDeleteRequest(ids));\n    await this.delete(ids);\n  }\n\n  async deleteAttachment(id: string, attachmentId: string): Promise<void> {\n    const ciphers = await this.stateService.getEncryptedCiphers();\n\n    // eslint-disable-next-line\n    if (ciphers == null || !ciphers.hasOwnProperty(id) || ciphers[id].attachments == null) {\n      return;\n    }\n\n    for (let i = 0; i < ciphers[id].attachments.length; i++) {\n      if (ciphers[id].attachments[i].id === attachmentId) {\n        ciphers[id].attachments.splice(i, 1);\n      }\n    }\n\n    await this.clearCache();\n    await this.stateService.setEncryptedCiphers(ciphers);\n  }\n\n  async deleteAttachmentWithServer(id: string, attachmentId: string): Promise<void> {\n    try {\n      await this.apiService.deleteCipherAttachment(id, attachmentId);\n    } catch (e) {\n      return Promise.reject((e as ErrorResponse).getSingleMessage());\n    }\n    await this.deleteAttachment(id, attachmentId);\n  }\n\n  sortCiphersByLastUsed(a: CipherView, b: CipherView): number {\n    const aLastUsed =\n      a.localData && a.localData.lastUsedDate ? (a.localData.lastUsedDate as number) : null;\n    const bLastUsed =\n      b.localData && b.localData.lastUsedDate ? (b.localData.lastUsedDate as number) : null;\n\n    const bothNotNull = aLastUsed != null && bLastUsed != null;\n    if (bothNotNull && aLastUsed < bLastUsed) {\n      return 1;\n    }\n    if (aLastUsed != null && bLastUsed == null) {\n      return -1;\n    }\n\n    if (bothNotNull && aLastUsed > bLastUsed) {\n      return -1;\n    }\n    if (bLastUsed != null && aLastUsed == null) {\n      return 1;\n    }\n\n    return 0;\n  }\n\n  sortCiphersByLastUsedThenName(a: CipherView, b: CipherView): number {\n    const result = this.sortCiphersByLastUsed(a, b);\n    if (result !== 0) {\n      return result;\n    }\n\n    return this.getLocaleSortingFunction()(a, b);\n  }\n\n  getLocaleSortingFunction(): (a: CipherView, b: CipherView) => number {\n    return (a, b) => {\n      let aName = a.name;\n      let bName = b.name;\n\n      if (aName == null && bName != null) {\n        return -1;\n      }\n      if (aName != null && bName == null) {\n        return 1;\n      }\n      if (aName == null && bName == null) {\n        return 0;\n      }\n\n      const result = this.i18nService.collator\n        ? this.i18nService.collator.compare(aName, bName)\n        : aName.localeCompare(bName);\n\n      if (result !== 0 || a.type !== CipherType.Login || b.type !== CipherType.Login) {\n        return result;\n      }\n\n      if (a.login.username != null) {\n        aName += a.login.username;\n      }\n\n      if (b.login.username != null) {\n        bName += b.login.username;\n      }\n\n      return this.i18nService.collator\n        ? this.i18nService.collator.compare(aName, bName)\n        : aName.localeCompare(bName);\n    };\n  }\n\n  async softDelete(id: string | string[]): Promise<any> {\n    const ciphers = await this.stateService.getEncryptedCiphers();\n    if (ciphers == null) {\n      return;\n    }\n\n    const setDeletedDate = (cipherId: string) => {\n      if (ciphers[cipherId] == null) {\n        return;\n      }\n      ciphers[cipherId].deletedDate = new Date().toISOString();\n    };\n\n    if (typeof id === \"string\") {\n      setDeletedDate(id);\n    } else {\n      (id as string[]).forEach(setDeletedDate);\n    }\n\n    await this.clearCache();\n    await this.stateService.setEncryptedCiphers(ciphers);\n  }\n\n  async softDeleteWithServer(id: string): Promise<any> {\n    await this.apiService.putDeleteCipher(id);\n    await this.softDelete(id);\n  }\n\n  async softDeleteManyWithServer(ids: string[]): Promise<any> {\n    await this.apiService.putDeleteManyCiphers(new CipherBulkDeleteRequest(ids));\n    await this.softDelete(ids);\n  }\n\n  async restore(\n    cipher: { id: string; revisionDate: string } | { id: string; revisionDate: string }[]\n  ) {\n    const ciphers = await this.stateService.getEncryptedCiphers();\n    if (ciphers == null) {\n      return;\n    }\n\n    const clearDeletedDate = (c: { id: string; revisionDate: string }) => {\n      if (ciphers[c.id] == null) {\n        return;\n      }\n      ciphers[c.id].deletedDate = null;\n      ciphers[c.id].revisionDate = c.revisionDate;\n    };\n\n    if (cipher.constructor.name === Array.name) {\n      (cipher as { id: string; revisionDate: string }[]).forEach(clearDeletedDate);\n    } else {\n      clearDeletedDate(cipher as { id: string; revisionDate: string });\n    }\n\n    await this.clearCache();\n    await this.stateService.setEncryptedCiphers(ciphers);\n  }\n\n  async restoreWithServer(id: string): Promise<any> {\n    const response = await this.apiService.putRestoreCipher(id);\n    await this.restore({ id: id, revisionDate: response.revisionDate });\n  }\n\n  async restoreManyWithServer(ids: string[]): Promise<any> {\n    const response = await this.apiService.putRestoreManyCiphers(new CipherBulkRestoreRequest(ids));\n    const restores: { id: string; revisionDate: string }[] = [];\n    for (const cipher of response.data) {\n      restores.push({ id: cipher.id, revisionDate: cipher.revisionDate });\n    }\n    await this.restore(restores);\n  }\n\n  // Helpers\n\n  private async shareAttachmentWithServer(\n    attachmentView: AttachmentView,\n    cipherId: string,\n    organizationId: string\n  ): Promise<any> {\n    const attachmentResponse = await this.apiService.nativeFetch(\n      new Request(attachmentView.url, { cache: \"no-store\" })\n    );\n    if (attachmentResponse.status !== 200) {\n      throw Error(\"Failed to download attachment: \" + attachmentResponse.status.toString());\n    }\n\n    const encBuf = await EncArrayBuffer.fromResponse(attachmentResponse);\n    const decBuf = await this.cryptoService.decryptFromBytes(encBuf, null);\n    const key = await this.cryptoService.getOrgKey(organizationId);\n    const encFileName = await this.cryptoService.encrypt(attachmentView.fileName, key);\n\n    const dataEncKey = await this.cryptoService.makeEncKey(key);\n    const encData = await this.cryptoService.encryptToBytes(decBuf, dataEncKey[0]);\n\n    const fd = new FormData();\n    try {\n      const blob = new Blob([encData.buffer], { type: \"application/octet-stream\" });\n      fd.append(\"key\", dataEncKey[1].encryptedString);\n      fd.append(\"data\", blob, encFileName.encryptedString);\n    } catch (e) {\n      if (Utils.isNode && !Utils.isBrowser) {\n        fd.append(\"key\", dataEncKey[1].encryptedString);\n        fd.append(\n          \"data\",\n          Buffer.from(encData.buffer) as any,\n          {\n            filepath: encFileName.encryptedString,\n            contentType: \"application/octet-stream\",\n          } as any\n        );\n      } else {\n        throw e;\n      }\n    }\n\n    try {\n      await this.apiService.postShareCipherAttachment(\n        cipherId,\n        attachmentView.id,\n        fd,\n        organizationId\n      );\n    } catch (e) {\n      throw new Error((e as ErrorResponse).getSingleMessage());\n    }\n  }\n\n  private async encryptObjProperty<V extends View, D extends Domain>(\n    model: V,\n    obj: D,\n    map: any,\n    key: SymmetricCryptoKey\n  ): Promise<void> {\n    const promises = [];\n    const self = this;\n\n    for (const prop in map) {\n      // eslint-disable-next-line\n      if (!map.hasOwnProperty(prop)) {\n        continue;\n      }\n\n      (function (theProp, theObj) {\n        const p = Promise.resolve()\n          .then(() => {\n            const modelProp = (model as any)[map[theProp] || theProp];\n            if (modelProp && modelProp !== \"\") {\n              return self.cryptoService.encrypt(modelProp, key);\n            }\n            return null;\n          })\n          .then((val: EncString) => {\n            (theObj as any)[theProp] = val;\n          });\n        promises.push(p);\n      })(prop, obj);\n    }\n\n    await Promise.all(promises);\n  }\n\n  private async encryptCipherData(cipher: Cipher, model: CipherView, key: SymmetricCryptoKey) {\n    switch (cipher.type) {\n      case CipherType.Login:\n        cipher.login = new Login();\n        cipher.login.passwordRevisionDate = model.login.passwordRevisionDate;\n        cipher.login.autofillOnPageLoad = model.login.autofillOnPageLoad;\n        await this.encryptObjProperty(\n          model.login,\n          cipher.login,\n          {\n            username: null,\n            password: null,\n            totp: null,\n          },\n          key\n        );\n\n        if (model.login.uris != null) {\n          cipher.login.uris = [];\n          for (let i = 0; i < model.login.uris.length; i++) {\n            const loginUri = new LoginUri();\n            loginUri.match = model.login.uris[i].match;\n            await this.encryptObjProperty(\n              model.login.uris[i],\n              loginUri,\n              {\n                uri: null,\n              },\n              key\n            );\n            cipher.login.uris.push(loginUri);\n          }\n        }\n        return;\n      case CipherType.SecureNote:\n        cipher.secureNote = new SecureNote();\n        cipher.secureNote.type = model.secureNote.type;\n        return;\n      case CipherType.Card:\n        cipher.card = new Card();\n        await this.encryptObjProperty(\n          model.card,\n          cipher.card,\n          {\n            cardholderName: null,\n            brand: null,\n            number: null,\n            expMonth: null,\n            expYear: null,\n            code: null,\n          },\n          key\n        );\n        return;\n      case CipherType.Identity:\n        cipher.identity = new Identity();\n        await this.encryptObjProperty(\n          model.identity,\n          cipher.identity,\n          {\n            title: null,\n            firstName: null,\n            middleName: null,\n            lastName: null,\n            address1: null,\n            address2: null,\n            address3: null,\n            city: null,\n            state: null,\n            postalCode: null,\n            country: null,\n            company: null,\n            email: null,\n            phone: null,\n            ssn: null,\n            username: null,\n            passportNumber: null,\n            licenseNumber: null,\n          },\n          key\n        );\n        return;\n      default:\n        throw new Error(\"Unknown cipher type.\");\n    }\n  }\n\n  private async getCipherForUrl(\n    url: string,\n    lastUsed: boolean,\n    lastLaunched: boolean,\n    autofillOnPageLoad: boolean\n  ): Promise<CipherView> {\n    const cacheKey = autofillOnPageLoad ? \"autofillOnPageLoad-\" + url : url;\n\n    if (!this.sortedCiphersCache.isCached(cacheKey)) {\n      let ciphers = await this.getAllDecryptedForUrl(url);\n      if (!ciphers) {\n        return null;\n      }\n\n      if (autofillOnPageLoad) {\n        const autofillOnPageLoadDefault = await this.stateService.getAutoFillOnPageLoadDefault();\n        ciphers = ciphers.filter(\n          (cipher) =>\n            cipher.login.autofillOnPageLoad ||\n            (cipher.login.autofillOnPageLoad == null && autofillOnPageLoadDefault !== false)\n        );\n        if (ciphers.length === 0) {\n          return null;\n        }\n      }\n\n      this.sortedCiphersCache.addCiphers(cacheKey, ciphers);\n    }\n\n    if (lastLaunched) {\n      return this.sortedCiphersCache.getLastLaunched(cacheKey);\n    } else if (lastUsed) {\n      return this.sortedCiphersCache.getLastUsed(cacheKey);\n    } else {\n      return this.sortedCiphersCache.getNext(cacheKey);\n    }\n  }\n\n  private async clearEncryptedCiphersState(userId?: string) {\n    await this.stateService.setEncryptedCiphers(null, { userId: userId });\n  }\n\n  private async clearDecryptedCiphersState(userId?: string) {\n    await this.stateService.setDecryptedCiphers(null, { userId: userId });\n    this.clearSortedCiphers();\n  }\n\n  private clearSortedCiphers() {\n    this.sortedCiphersCache.clear();\n  }\n}\n","export class TreeNode<T extends ITreeNodeObject> {\n  parent: T;\n  node: T;\n  children: TreeNode<T>[] = [];\n\n  constructor(node: T, name: string, parent: T) {\n    this.parent = parent;\n    this.node = node;\n    this.node.name = name;\n  }\n}\n\nexport interface ITreeNodeObject {\n  id: string;\n  name: string;\n}\n","import { ITreeNodeObject, TreeNode } from \"../models/domain/treeNode\";\n\nexport class ServiceUtils {\n  static nestedTraverse(\n    nodeTree: TreeNode<ITreeNodeObject>[],\n    partIndex: number,\n    parts: string[],\n    obj: ITreeNodeObject,\n    parent: ITreeNodeObject,\n    delimiter: string\n  ) {\n    if (parts.length <= partIndex) {\n      return;\n    }\n\n    const end = partIndex === parts.length - 1;\n    const partName = parts[partIndex];\n\n    for (let i = 0; i < nodeTree.length; i++) {\n      if (nodeTree[i].node.name !== parts[partIndex]) {\n        continue;\n      }\n      if (end && nodeTree[i].node.id !== obj.id) {\n        // Another node with the same name.\n        nodeTree.push(new TreeNode(obj, partName, parent));\n        return;\n      }\n      ServiceUtils.nestedTraverse(\n        nodeTree[i].children,\n        partIndex + 1,\n        parts,\n        obj,\n        nodeTree[i].node,\n        delimiter\n      );\n      return;\n    }\n\n    if (nodeTree.filter((n) => n.node.name === partName).length === 0) {\n      if (end) {\n        nodeTree.push(new TreeNode(obj, partName, parent));\n        return;\n      }\n      const newPartName = parts[partIndex] + delimiter + parts[partIndex + 1];\n      ServiceUtils.nestedTraverse(\n        nodeTree,\n        0,\n        [newPartName, ...parts.slice(partIndex + 2)],\n        obj,\n        parent,\n        delimiter\n      );\n    }\n  }\n\n  static getTreeNodeObject(\n    nodeTree: TreeNode<ITreeNodeObject>[],\n    id: string\n  ): TreeNode<ITreeNodeObject> {\n    for (let i = 0; i < nodeTree.length; i++) {\n      if (nodeTree[i].node.id === id) {\n        return nodeTree[i];\n      } else if (nodeTree[i].children != null) {\n        const node = ServiceUtils.getTreeNodeObject(nodeTree[i].children, id);\n        if (node !== null) {\n          return node;\n        }\n      }\n    }\n    return null;\n  }\n}\n","import { CollectionDetailsResponse } from \"../response/collectionResponse\";\n\nexport class CollectionData {\n  id: string;\n  organizationId: string;\n  name: string;\n  externalId: string;\n  readOnly: boolean;\n\n  constructor(response: CollectionDetailsResponse) {\n    this.id = response.id;\n    this.organizationId = response.organizationId;\n    this.name = response.name;\n    this.externalId = response.externalId;\n    this.readOnly = response.readOnly;\n  }\n}\n","import { Collection } from \"../domain/collection\";\nimport { ITreeNodeObject } from \"../domain/treeNode\";\nimport { CollectionGroupDetailsResponse } from \"../response/collectionResponse\";\n\nimport { View } from \"./view\";\n\nexport class CollectionView implements View, ITreeNodeObject {\n  id: string = null;\n  organizationId: string = null;\n  name: string = null;\n  externalId: string = null;\n  readOnly: boolean = null;\n  hidePasswords: boolean = null;\n\n  constructor(c?: Collection | CollectionGroupDetailsResponse) {\n    if (!c) {\n      return;\n    }\n\n    this.id = c.id;\n    this.organizationId = c.organizationId;\n    this.externalId = c.externalId;\n    if (c instanceof Collection) {\n      this.readOnly = c.readOnly;\n      this.hidePasswords = c.hidePasswords;\n    }\n  }\n}\n","import { CollectionData } from \"../data/collectionData\";\nimport { CollectionView } from \"../view/collectionView\";\n\nimport Domain from \"./domainBase\";\nimport { EncString } from \"./encString\";\n\nexport class Collection extends Domain {\n  id: string;\n  organizationId: string;\n  name: EncString;\n  externalId: string;\n  readOnly: boolean;\n  hidePasswords: boolean;\n\n  constructor(obj?: CollectionData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        id: null,\n        organizationId: null,\n        name: null,\n        externalId: null,\n        readOnly: null,\n        hidePasswords: null,\n      },\n      [\"id\", \"organizationId\", \"externalId\", \"readOnly\", \"hidePasswords\"]\n    );\n  }\n\n  decrypt(): Promise<CollectionView> {\n    return this.decryptObj(\n      new CollectionView(this),\n      {\n        name: null,\n      },\n      this.organizationId\n    );\n  }\n}\n","import { CollectionService as CollectionServiceAbstraction } from \"../abstractions/collection.service\";\nimport { CryptoService } from \"../abstractions/crypto.service\";\nimport { I18nService } from \"../abstractions/i18n.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { ServiceUtils } from \"../misc/serviceUtils\";\nimport { Utils } from \"../misc/utils\";\nimport { CollectionData } from \"../models/data/collectionData\";\nimport { Collection } from \"../models/domain/collection\";\nimport { TreeNode } from \"../models/domain/treeNode\";\nimport { CollectionView } from \"../models/view/collectionView\";\n\nconst NestingDelimiter = \"/\";\n\nexport class CollectionService implements CollectionServiceAbstraction {\n  constructor(\n    private cryptoService: CryptoService,\n    private i18nService: I18nService,\n    private stateService: StateService\n  ) {}\n\n  async clearCache(userId?: string): Promise<void> {\n    await this.stateService.setDecryptedCollections(null, { userId: userId });\n  }\n\n  async encrypt(model: CollectionView): Promise<Collection> {\n    if (model.organizationId == null) {\n      throw new Error(\"Collection has no organization id.\");\n    }\n    const key = await this.cryptoService.getOrgKey(model.organizationId);\n    if (key == null) {\n      throw new Error(\"No key for this collection's organization.\");\n    }\n    const collection = new Collection();\n    collection.id = model.id;\n    collection.organizationId = model.organizationId;\n    collection.readOnly = model.readOnly;\n    collection.name = await this.cryptoService.encrypt(model.name, key);\n    return collection;\n  }\n\n  async decryptMany(collections: Collection[]): Promise<CollectionView[]> {\n    if (collections == null) {\n      return [];\n    }\n    const decCollections: CollectionView[] = [];\n    const promises: Promise<any>[] = [];\n    collections.forEach((collection) => {\n      promises.push(collection.decrypt().then((c) => decCollections.push(c)));\n    });\n    await Promise.all(promises);\n    return decCollections.sort(Utils.getSortFunction(this.i18nService, \"name\"));\n  }\n\n  async get(id: string): Promise<Collection> {\n    const collections = await this.stateService.getEncryptedCollections();\n    // eslint-disable-next-line\n    if (collections == null || !collections.hasOwnProperty(id)) {\n      return null;\n    }\n\n    return new Collection(collections[id]);\n  }\n\n  async getAll(): Promise<Collection[]> {\n    const collections = await this.stateService.getEncryptedCollections();\n    const response: Collection[] = [];\n    for (const id in collections) {\n      // eslint-disable-next-line\n      if (collections.hasOwnProperty(id)) {\n        response.push(new Collection(collections[id]));\n      }\n    }\n    return response;\n  }\n\n  async getAllDecrypted(): Promise<CollectionView[]> {\n    let decryptedCollections = await this.stateService.getDecryptedCollections();\n    if (decryptedCollections != null) {\n      return decryptedCollections;\n    }\n\n    const hasKey = await this.cryptoService.hasKey();\n    if (!hasKey) {\n      throw new Error(\"No key.\");\n    }\n\n    const collections = await this.getAll();\n    decryptedCollections = await this.decryptMany(collections);\n\n    await this.stateService.setDecryptedCollections(decryptedCollections);\n    return decryptedCollections;\n  }\n\n  async getAllNested(collections: CollectionView[] = null): Promise<TreeNode<CollectionView>[]> {\n    if (collections == null) {\n      collections = await this.getAllDecrypted();\n    }\n    const nodes: TreeNode<CollectionView>[] = [];\n    collections.forEach((c) => {\n      const collectionCopy = new CollectionView();\n      collectionCopy.id = c.id;\n      collectionCopy.organizationId = c.organizationId;\n      const parts = c.name != null ? c.name.replace(/^\\/+|\\/+$/g, \"\").split(NestingDelimiter) : [];\n      ServiceUtils.nestedTraverse(nodes, 0, parts, collectionCopy, null, NestingDelimiter);\n    });\n    return nodes;\n  }\n\n  async getNested(id: string): Promise<TreeNode<CollectionView>> {\n    const collections = await this.getAllNested();\n    return ServiceUtils.getTreeNodeObject(collections, id) as TreeNode<CollectionView>;\n  }\n\n  async upsert(collection: CollectionData | CollectionData[]): Promise<any> {\n    let collections = await this.stateService.getEncryptedCollections();\n    if (collections == null) {\n      collections = {};\n    }\n\n    if (collection instanceof CollectionData) {\n      const c = collection as CollectionData;\n      collections[c.id] = c;\n    } else {\n      (collection as CollectionData[]).forEach((c) => {\n        collections[c.id] = c;\n      });\n    }\n\n    await this.replace(collections);\n  }\n\n  async replace(collections: { [id: string]: CollectionData }): Promise<any> {\n    await this.clearCache();\n    await this.stateService.setEncryptedCollections(collections);\n  }\n\n  async clear(userId?: string): Promise<any> {\n    await this.clearCache(userId);\n    await this.stateService.setEncryptedCollections(null, { userId: userId });\n  }\n\n  async delete(id: string | string[]): Promise<any> {\n    const collections = await this.stateService.getEncryptedCollections();\n    if (collections == null) {\n      return;\n    }\n\n    if (typeof id === \"string\") {\n      delete collections[id];\n    } else {\n      (id as string[]).forEach((i) => {\n        delete collections[i];\n      });\n    }\n\n    await this.replace(collections);\n  }\n}\n","import { CryptoService } from \"../abstractions/crypto.service\";\n\nexport class ContainerService {\n  constructor(private cryptoService: CryptoService) {}\n\n  attachToGlobal(global: any) {\n    if (!global.bitwardenContainerService) {\n      global.bitwardenContainerService = this;\n    }\n  }\n\n  getCryptoService(): CryptoService {\n    return this.cryptoService;\n  }\n}\n","import { EventType } from \"../../enums/eventType\";\n\nexport class EventData {\n  type: EventType;\n  cipherId: string;\n  date: string;\n  organizationId: string;\n}\n","import { EventType } from \"../../enums/eventType\";\n\nexport class EventRequest {\n  type: EventType;\n  cipherId: string;\n  date: string;\n  organizationId: string;\n}\n","import { ApiService } from \"../abstractions/api.service\";\nimport { CipherService } from \"../abstractions/cipher.service\";\nimport { EventService as EventServiceAbstraction } from \"../abstractions/event.service\";\nimport { LogService } from \"../abstractions/log.service\";\nimport { OrganizationService } from \"../abstractions/organization.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { EventType } from \"../enums/eventType\";\nimport { EventData } from \"../models/data/eventData\";\nimport { EventRequest } from \"../models/request/eventRequest\";\n\nexport class EventService implements EventServiceAbstraction {\n  private inited = false;\n\n  constructor(\n    private apiService: ApiService,\n    private cipherService: CipherService,\n    private stateService: StateService,\n    private logService: LogService,\n    private organizationService: OrganizationService\n  ) {}\n\n  init(checkOnInterval: boolean) {\n    if (this.inited) {\n      return;\n    }\n\n    this.inited = true;\n    if (checkOnInterval) {\n      this.uploadEvents();\n      setInterval(() => this.uploadEvents(), 60 * 1000); // check every 60 seconds\n    }\n  }\n\n  async collect(\n    eventType: EventType,\n    cipherId: string = null,\n    uploadImmediately = false,\n    organizationId: string = null\n  ): Promise<any> {\n    const authed = await this.stateService.getIsAuthenticated();\n    if (!authed) {\n      return;\n    }\n    const organizations = await this.organizationService.getAll();\n    if (organizations == null) {\n      return;\n    }\n    const orgIds = new Set<string>(organizations.filter((o) => o.useEvents).map((o) => o.id));\n    if (orgIds.size === 0) {\n      return;\n    }\n    if (cipherId != null) {\n      const cipher = await this.cipherService.get(cipherId);\n      if (cipher == null || cipher.organizationId == null || !orgIds.has(cipher.organizationId)) {\n        return;\n      }\n    }\n    if (organizationId != null) {\n      if (!orgIds.has(organizationId)) {\n        return;\n      }\n    }\n    let eventCollection = await this.stateService.getEventCollection();\n    if (eventCollection == null) {\n      eventCollection = [];\n    }\n    const event = new EventData();\n    event.type = eventType;\n    event.cipherId = cipherId;\n    event.date = new Date().toISOString();\n    event.organizationId = organizationId;\n    eventCollection.push(event);\n    await this.stateService.setEventCollection(eventCollection);\n    if (uploadImmediately) {\n      await this.uploadEvents();\n    }\n  }\n\n  async uploadEvents(userId?: string): Promise<any> {\n    const authed = await this.stateService.getIsAuthenticated({ userId: userId });\n    if (!authed) {\n      return;\n    }\n    const eventCollection = await this.stateService.getEventCollection({ userId: userId });\n    if (eventCollection == null || eventCollection.length === 0) {\n      return;\n    }\n    const request = eventCollection.map((e) => {\n      const req = new EventRequest();\n      req.type = e.type;\n      req.cipherId = e.cipherId;\n      req.date = e.date;\n      req.organizationId = e.organizationId;\n      return req;\n    });\n    try {\n      await this.apiService.postEventsCollect(request);\n      this.clearEvents(userId);\n    } catch (e) {\n      this.logService.error(e);\n    }\n  }\n\n  async clearEvents(userId?: string): Promise<any> {\n    await this.stateService.setEventCollection(null, { userId: userId });\n  }\n}\n","export enum KdfType {\n  PBKDF2_SHA256 = 0,\n}\n\nexport const DEFAULT_KDF_TYPE = KdfType.PBKDF2_SHA256;\nexport const DEFAULT_KDF_ITERATIONS = 100000;\nexport const SEND_KDF_ITERATIONS = 100000;\n","import { Card as CardDomain } from \"../domain/card\";\nimport { EncString } from \"../domain/encString\";\nimport { CardView } from \"../view/cardView\";\n\nexport class CardExport {\n  static template(): CardExport {\n    const req = new CardExport();\n    req.cardholderName = \"John Doe\";\n    req.brand = \"visa\";\n    req.number = \"4242424242424242\";\n    req.expMonth = \"04\";\n    req.expYear = \"2023\";\n    req.code = \"123\";\n    return req;\n  }\n\n  static toView(req: CardExport, view = new CardView()) {\n    view.cardholderName = req.cardholderName;\n    view.brand = req.brand;\n    view.number = req.number;\n    view.expMonth = req.expMonth;\n    view.expYear = req.expYear;\n    view.code = req.code;\n    return view;\n  }\n\n  static toDomain(req: CardExport, domain = new CardDomain()) {\n    domain.cardholderName = req.cardholderName != null ? new EncString(req.cardholderName) : null;\n    domain.brand = req.brand != null ? new EncString(req.brand) : null;\n    domain.number = req.number != null ? new EncString(req.number) : null;\n    domain.expMonth = req.expMonth != null ? new EncString(req.expMonth) : null;\n    domain.expYear = req.expYear != null ? new EncString(req.expYear) : null;\n    domain.code = req.code != null ? new EncString(req.code) : null;\n    return domain;\n  }\n\n  cardholderName: string;\n  brand: string;\n  number: string;\n  expMonth: string;\n  expYear: string;\n  code: string;\n\n  constructor(o?: CardView | CardDomain) {\n    if (o == null) {\n      return;\n    }\n\n    if (o instanceof CardView) {\n      this.cardholderName = o.cardholderName;\n      this.brand = o.brand;\n      this.number = o.number;\n      this.expMonth = o.expMonth;\n      this.expYear = o.expYear;\n      this.code = o.code;\n    } else {\n      this.cardholderName = o.cardholderName?.encryptedString;\n      this.brand = o.brand?.encryptedString;\n      this.number = o.number?.encryptedString;\n      this.expMonth = o.expMonth?.encryptedString;\n      this.expYear = o.expYear?.encryptedString;\n      this.code = o.code?.encryptedString;\n    }\n  }\n}\n","import { FieldType } from \"../../enums/fieldType\";\nimport { LinkedIdType } from \"../../enums/linkedIdType\";\nimport { EncString } from \"../domain/encString\";\nimport { Field as FieldDomain } from \"../domain/field\";\nimport { FieldView } from \"../view/fieldView\";\n\nexport class FieldExport {\n  static template(): FieldExport {\n    const req = new FieldExport();\n    req.name = \"Field name\";\n    req.value = \"Some value\";\n    req.type = FieldType.Text;\n    return req;\n  }\n\n  static toView(req: FieldExport, view = new FieldView()) {\n    view.type = req.type;\n    view.value = req.value;\n    view.name = req.name;\n    view.linkedId = req.linkedId;\n    return view;\n  }\n\n  static toDomain(req: FieldExport, domain = new FieldDomain()) {\n    domain.type = req.type;\n    domain.value = req.value != null ? new EncString(req.value) : null;\n    domain.name = req.name != null ? new EncString(req.name) : null;\n    domain.linkedId = req.linkedId;\n    return domain;\n  }\n\n  name: string;\n  value: string;\n  type: FieldType;\n  linkedId: LinkedIdType;\n\n  constructor(o?: FieldView | FieldDomain) {\n    if (o == null) {\n      return;\n    }\n\n    if (o instanceof FieldView) {\n      this.name = o.name;\n      this.value = o.value;\n    } else {\n      this.name = o.name?.encryptedString;\n      this.value = o.value?.encryptedString;\n    }\n    this.type = o.type;\n    this.linkedId = o.linkedId;\n  }\n}\n","import { EncString } from \"../domain/encString\";\nimport { Identity as IdentityDomain } from \"../domain/identity\";\nimport { IdentityView } from \"../view/identityView\";\n\nexport class IdentityExport {\n  static template(): IdentityExport {\n    const req = new IdentityExport();\n    req.title = \"Mr\";\n    req.firstName = \"John\";\n    req.middleName = \"William\";\n    req.lastName = \"Doe\";\n    req.address1 = \"123 Any St\";\n    req.address2 = \"Apt #123\";\n    req.address3 = null;\n    req.city = \"New York\";\n    req.state = \"NY\";\n    req.postalCode = \"10001\";\n    req.country = \"US\";\n    req.company = \"Acme Inc.\";\n    req.email = \"john@company.com\";\n    req.phone = \"5555551234\";\n    req.ssn = \"000-123-4567\";\n    req.username = \"jdoe\";\n    req.passportNumber = \"US-123456789\";\n    req.licenseNumber = \"D123-12-123-12333\";\n    return req;\n  }\n\n  static toView(req: IdentityExport, view = new IdentityView()) {\n    view.title = req.title;\n    view.firstName = req.firstName;\n    view.middleName = req.middleName;\n    view.lastName = req.lastName;\n    view.address1 = req.address1;\n    view.address2 = req.address2;\n    view.address3 = req.address3;\n    view.city = req.city;\n    view.state = req.state;\n    view.postalCode = req.postalCode;\n    view.country = req.country;\n    view.company = req.company;\n    view.email = req.email;\n    view.phone = req.phone;\n    view.ssn = req.ssn;\n    view.username = req.username;\n    view.passportNumber = req.passportNumber;\n    view.licenseNumber = req.licenseNumber;\n    return view;\n  }\n\n  static toDomain(req: IdentityExport, domain = new IdentityDomain()) {\n    domain.title = req.title != null ? new EncString(req.title) : null;\n    domain.firstName = req.firstName != null ? new EncString(req.firstName) : null;\n    domain.middleName = req.middleName != null ? new EncString(req.middleName) : null;\n    domain.lastName = req.lastName != null ? new EncString(req.lastName) : null;\n    domain.address1 = req.address1 != null ? new EncString(req.address1) : null;\n    domain.address2 = req.address2 != null ? new EncString(req.address2) : null;\n    domain.address3 = req.address3 != null ? new EncString(req.address3) : null;\n    domain.city = req.city != null ? new EncString(req.city) : null;\n    domain.state = req.state != null ? new EncString(req.state) : null;\n    domain.postalCode = req.postalCode != null ? new EncString(req.postalCode) : null;\n    domain.country = req.country != null ? new EncString(req.country) : null;\n    domain.company = req.company != null ? new EncString(req.company) : null;\n    domain.email = req.email != null ? new EncString(req.email) : null;\n    domain.phone = req.phone != null ? new EncString(req.phone) : null;\n    domain.ssn = req.ssn != null ? new EncString(req.ssn) : null;\n    domain.username = req.username != null ? new EncString(req.username) : null;\n    domain.passportNumber = req.passportNumber != null ? new EncString(req.passportNumber) : null;\n    domain.licenseNumber = req.licenseNumber != null ? new EncString(req.licenseNumber) : null;\n    return domain;\n  }\n\n  title: string;\n  firstName: string;\n  middleName: string;\n  lastName: string;\n  address1: string;\n  address2: string;\n  address3: string;\n  city: string;\n  state: string;\n  postalCode: string;\n  country: string;\n  company: string;\n  email: string;\n  phone: string;\n  ssn: string;\n  username: string;\n  passportNumber: string;\n  licenseNumber: string;\n\n  constructor(o?: IdentityView | IdentityDomain) {\n    if (o == null) {\n      return;\n    }\n\n    if (o instanceof IdentityView) {\n      this.title = o.title;\n      this.firstName = o.firstName;\n      this.middleName = o.middleName;\n      this.lastName = o.lastName;\n      this.address1 = o.address1;\n      this.address2 = o.address2;\n      this.address3 = o.address3;\n      this.city = o.city;\n      this.state = o.state;\n      this.postalCode = o.postalCode;\n      this.country = o.country;\n      this.company = o.company;\n      this.email = o.email;\n      this.phone = o.phone;\n      this.ssn = o.ssn;\n      this.username = o.username;\n      this.passportNumber = o.passportNumber;\n      this.licenseNumber = o.licenseNumber;\n    } else {\n      this.title = o.title?.encryptedString;\n      this.firstName = o.firstName?.encryptedString;\n      this.middleName = o.middleName?.encryptedString;\n      this.lastName = o.lastName?.encryptedString;\n      this.address1 = o.address1?.encryptedString;\n      this.address2 = o.address2?.encryptedString;\n      this.address3 = o.address3?.encryptedString;\n      this.city = o.city?.encryptedString;\n      this.state = o.state?.encryptedString;\n      this.postalCode = o.postalCode?.encryptedString;\n      this.country = o.country?.encryptedString;\n      this.company = o.company?.encryptedString;\n      this.email = o.email?.encryptedString;\n      this.phone = o.phone?.encryptedString;\n      this.ssn = o.ssn?.encryptedString;\n      this.username = o.username?.encryptedString;\n      this.passportNumber = o.passportNumber?.encryptedString;\n      this.licenseNumber = o.licenseNumber?.encryptedString;\n    }\n  }\n}\n","import { UriMatchType } from \"../../enums/uriMatchType\";\nimport { EncString } from \"../domain/encString\";\nimport { LoginUri as LoginUriDomain } from \"../domain/loginUri\";\nimport { LoginUriView } from \"../view/loginUriView\";\n\nexport class LoginUriExport {\n  static template(): LoginUriExport {\n    const req = new LoginUriExport();\n    req.uri = \"https://google.com\";\n    req.match = null;\n    return req;\n  }\n\n  static toView(req: LoginUriExport, view = new LoginUriView()) {\n    view.uri = req.uri;\n    view.match = req.match;\n    return view;\n  }\n\n  static toDomain(req: LoginUriExport, domain = new LoginUriDomain()) {\n    domain.uri = req.uri != null ? new EncString(req.uri) : null;\n    domain.match = req.match;\n    return domain;\n  }\n\n  uri: string;\n  match: UriMatchType = null;\n\n  constructor(o?: LoginUriView | LoginUriDomain) {\n    if (o == null) {\n      return;\n    }\n\n    if (o instanceof LoginUriView) {\n      this.uri = o.uri;\n    } else {\n      this.uri = o.uri?.encryptedString;\n    }\n    this.match = o.match;\n  }\n}\n","import { EncString } from \"../domain/encString\";\nimport { Login as LoginDomain } from \"../domain/login\";\nimport { LoginView } from \"../view/loginView\";\n\nimport { LoginUriExport } from \"./loginUriExport\";\n\nexport class LoginExport {\n  static template(): LoginExport {\n    const req = new LoginExport();\n    req.uris = [];\n    req.username = \"jdoe\";\n    req.password = \"myp@ssword123\";\n    req.totp = \"JBSWY3DPEHPK3PXP\";\n    return req;\n  }\n\n  static toView(req: LoginExport, view = new LoginView()) {\n    if (req.uris != null) {\n      view.uris = req.uris.map((u) => LoginUriExport.toView(u));\n    }\n    view.username = req.username;\n    view.password = req.password;\n    view.totp = req.totp;\n    return view;\n  }\n\n  static toDomain(req: LoginExport, domain = new LoginDomain()) {\n    if (req.uris != null) {\n      domain.uris = req.uris.map((u) => LoginUriExport.toDomain(u));\n    }\n    domain.username = req.username != null ? new EncString(req.username) : null;\n    domain.password = req.password != null ? new EncString(req.password) : null;\n    domain.totp = req.totp != null ? new EncString(req.totp) : null;\n    return domain;\n  }\n\n  uris: LoginUriExport[];\n  username: string;\n  password: string;\n  totp: string;\n\n  constructor(o?: LoginView | LoginDomain) {\n    if (o == null) {\n      return;\n    }\n\n    if (o.uris != null) {\n      if (o instanceof LoginView) {\n        this.uris = o.uris.map((u) => new LoginUriExport(u));\n      } else {\n        this.uris = o.uris.map((u) => new LoginUriExport(u));\n      }\n    }\n\n    if (o instanceof LoginView) {\n      this.username = o.username;\n      this.password = o.password;\n      this.totp = o.totp;\n    } else {\n      this.username = o.username?.encryptedString;\n      this.password = o.password?.encryptedString;\n      this.totp = o.totp?.encryptedString;\n    }\n  }\n}\n","export enum SecureNoteType {\n  Generic = 0,\n}\n","export enum EventType {\n  User_LoggedIn = 1000,\n  User_ChangedPassword = 1001,\n  User_Updated2fa = 1002,\n  User_Disabled2fa = 1003,\n  User_Recovered2fa = 1004,\n  User_FailedLogIn = 1005,\n  User_FailedLogIn2fa = 1006,\n  User_ClientExportedVault = 1007,\n  User_UpdatedTempPassword = 1008,\n  User_MigratedKeyToKeyConnector = 1009,\n\n  Cipher_Created = 1100,\n  Cipher_Updated = 1101,\n  Cipher_Deleted = 1102,\n  Cipher_AttachmentCreated = 1103,\n  Cipher_AttachmentDeleted = 1104,\n  Cipher_Shared = 1105,\n  Cipher_UpdatedCollections = 1106,\n  Cipher_ClientViewed = 1107,\n  Cipher_ClientToggledPasswordVisible = 1108,\n  Cipher_ClientToggledHiddenFieldVisible = 1109,\n  Cipher_ClientToggledCardCodeVisible = 1110,\n  Cipher_ClientCopiedPassword = 1111,\n  Cipher_ClientCopiedHiddenField = 1112,\n  Cipher_ClientCopiedCardCode = 1113,\n  Cipher_ClientAutofilled = 1114,\n  Cipher_SoftDeleted = 1115,\n  Cipher_Restored = 1116,\n  Cipher_ClientToggledCardNumberVisible = 1117,\n\n  Collection_Created = 1300,\n  Collection_Updated = 1301,\n  Collection_Deleted = 1302,\n\n  Group_Created = 1400,\n  Group_Updated = 1401,\n  Group_Deleted = 1402,\n\n  OrganizationUser_Invited = 1500,\n  OrganizationUser_Confirmed = 1501,\n  OrganizationUser_Updated = 1502,\n  OrganizationUser_Removed = 1503,\n  OrganizationUser_UpdatedGroups = 1504,\n  OrganizationUser_UnlinkedSso = 1505,\n  OrganizationUser_ResetPassword_Enroll = 1506,\n  OrganizationUser_ResetPassword_Withdraw = 1507,\n  OrganizationUser_AdminResetPassword = 1508,\n  OrganizationUser_ResetSsoLink = 1509,\n  OrganizationUser_FirstSsoLogin = 1510,\n  OrganizationUser_Revoked = 1511,\n  OrganizationUser_Restored = 1512,\n\n  Organization_Updated = 1600,\n  Organization_PurgedVault = 1601,\n  Organization_ClientExportedVault = 1602,\n  Organization_VaultAccessed = 1603,\n  Organization_EnabledSso = 1604,\n  Organization_DisabledSso = 1605,\n  Organization_EnabledKeyConnector = 1606,\n  Organization_DisabledKeyConnector = 1607,\n  Organization_SponsorshipsSynced = 1608,\n\n  Policy_Updated = 1700,\n\n  ProviderUser_Invited = 1800,\n  ProviderUser_Confirmed = 1801,\n  ProviderUser_Updated = 1802,\n  ProviderUser_Removed = 1803,\n\n  ProviderOrganization_Created = 1900,\n  ProviderOrganization_Added = 1901,\n  ProviderOrganization_Removed = 1902,\n  ProviderOrganization_VaultAccessed = 1903,\n}\n","import { SecureNoteType } from \"../../enums/secureNoteType\";\nimport { SecureNote as SecureNoteDomain } from \"../domain/secureNote\";\nimport { SecureNoteView } from \"../view/secureNoteView\";\n\nexport class SecureNoteExport {\n  static template(): SecureNoteExport {\n    const req = new SecureNoteExport();\n    req.type = SecureNoteType.Generic;\n    return req;\n  }\n\n  static toView(req: SecureNoteExport, view = new SecureNoteView()) {\n    view.type = req.type;\n    return view;\n  }\n\n  static toDomain(req: SecureNoteExport, view = new SecureNoteDomain()) {\n    view.type = req.type;\n    return view;\n  }\n\n  type: SecureNoteType;\n\n  constructor(o?: SecureNoteView | SecureNoteDomain) {\n    if (o == null) {\n      return;\n    }\n\n    this.type = o.type;\n  }\n}\n","import { CipherRepromptType } from \"../../enums/cipherRepromptType\";\nimport { CipherType } from \"../../enums/cipherType\";\nimport { Cipher as CipherDomain } from \"../domain/cipher\";\nimport { EncString } from \"../domain/encString\";\nimport { CipherView } from \"../view/cipherView\";\n\nimport { CardExport } from \"./cardExport\";\nimport { FieldExport } from \"./fieldExport\";\nimport { IdentityExport } from \"./identityExport\";\nimport { LoginExport } from \"./loginExport\";\nimport { SecureNoteExport } from \"./secureNoteExport\";\n\nexport class CipherExport {\n  static template(): CipherExport {\n    const req = new CipherExport();\n    req.organizationId = null;\n    req.collectionIds = null;\n    req.folderId = null;\n    req.type = CipherType.Login;\n    req.name = \"Item name\";\n    req.notes = \"Some notes about this item.\";\n    req.favorite = false;\n    req.fields = [];\n    req.login = null;\n    req.secureNote = null;\n    req.card = null;\n    req.identity = null;\n    req.reprompt = CipherRepromptType.None;\n    return req;\n  }\n\n  static toView(req: CipherExport, view = new CipherView()) {\n    view.type = req.type;\n    view.folderId = req.folderId;\n    if (view.organizationId == null) {\n      view.organizationId = req.organizationId;\n    }\n    if (view.collectionIds || req.collectionIds) {\n      const set = new Set((view.collectionIds ?? []).concat(req.collectionIds ?? []));\n      view.collectionIds = Array.from(set.values());\n    }\n    view.name = req.name;\n    view.notes = req.notes;\n    view.favorite = req.favorite;\n    view.reprompt = req.reprompt ?? CipherRepromptType.None;\n\n    if (req.fields != null) {\n      view.fields = req.fields.map((f) => FieldExport.toView(f));\n    }\n\n    switch (req.type) {\n      case CipherType.Login:\n        view.login = LoginExport.toView(req.login);\n        break;\n      case CipherType.SecureNote:\n        view.secureNote = SecureNoteExport.toView(req.secureNote);\n        break;\n      case CipherType.Card:\n        view.card = CardExport.toView(req.card);\n        break;\n      case CipherType.Identity:\n        view.identity = IdentityExport.toView(req.identity);\n        break;\n    }\n\n    return view;\n  }\n\n  static toDomain(req: CipherExport, domain = new CipherDomain()) {\n    domain.type = req.type;\n    domain.folderId = req.folderId;\n    if (domain.organizationId == null) {\n      domain.organizationId = req.organizationId;\n    }\n    domain.name = req.name != null ? new EncString(req.name) : null;\n    domain.notes = req.notes != null ? new EncString(req.notes) : null;\n    domain.favorite = req.favorite;\n    domain.reprompt = req.reprompt ?? CipherRepromptType.None;\n\n    if (req.fields != null) {\n      domain.fields = req.fields.map((f) => FieldExport.toDomain(f));\n    }\n\n    switch (req.type) {\n      case CipherType.Login:\n        domain.login = LoginExport.toDomain(req.login);\n        break;\n      case CipherType.SecureNote:\n        domain.secureNote = SecureNoteExport.toDomain(req.secureNote);\n        break;\n      case CipherType.Card:\n        domain.card = CardExport.toDomain(req.card);\n        break;\n      case CipherType.Identity:\n        domain.identity = IdentityExport.toDomain(req.identity);\n        break;\n    }\n\n    return domain;\n  }\n\n  type: CipherType;\n  folderId: string;\n  organizationId: string;\n  collectionIds: string[];\n  name: string;\n  notes: string;\n  favorite: boolean;\n  fields: FieldExport[];\n  login: LoginExport;\n  secureNote: SecureNoteExport;\n  card: CardExport;\n  identity: IdentityExport;\n  reprompt: CipherRepromptType;\n\n  // Use build method instead of ctor so that we can control order of JSON stringify for pretty print\n  build(o: CipherView | CipherDomain) {\n    this.organizationId = o.organizationId;\n    this.folderId = o.folderId;\n    this.type = o.type;\n    this.reprompt = o.reprompt;\n\n    if (o instanceof CipherView) {\n      this.name = o.name;\n      this.notes = o.notes;\n    } else {\n      this.name = o.name?.encryptedString;\n      this.notes = o.notes?.encryptedString;\n    }\n\n    this.favorite = o.favorite;\n\n    if (o.fields != null) {\n      if (o instanceof CipherView) {\n        this.fields = o.fields.map((f) => new FieldExport(f));\n      } else {\n        this.fields = o.fields.map((f) => new FieldExport(f));\n      }\n    }\n\n    switch (o.type) {\n      case CipherType.Login:\n        this.login = new LoginExport(o.login);\n        break;\n      case CipherType.SecureNote:\n        this.secureNote = new SecureNoteExport(o.secureNote);\n        break;\n      case CipherType.Card:\n        this.card = new CardExport(o.card);\n        break;\n      case CipherType.Identity:\n        this.identity = new IdentityExport(o.identity);\n        break;\n    }\n  }\n}\n","import { Cipher as CipherDomain } from \"../domain/cipher\";\nimport { CipherView } from \"../view/cipherView\";\n\nimport { CipherExport } from \"./cipherExport\";\n\nexport class CipherWithIdExport extends CipherExport {\n  id: string;\n  collectionIds: string[];\n\n  // Use build method instead of ctor so that we can control order of JSON stringify for pretty print\n  build(o: CipherView | CipherDomain) {\n    this.id = o.id;\n    super.build(o);\n    this.collectionIds = o.collectionIds;\n  }\n}\n","import { Collection as CollectionDomain } from \"../domain/collection\";\nimport { EncString } from \"../domain/encString\";\nimport { CollectionView } from \"../view/collectionView\";\n\nexport class CollectionExport {\n  static template(): CollectionExport {\n    const req = new CollectionExport();\n    req.organizationId = \"00000000-0000-0000-0000-000000000000\";\n    req.name = \"Collection name\";\n    req.externalId = null;\n    return req;\n  }\n\n  static toView(req: CollectionExport, view = new CollectionView()) {\n    view.name = req.name;\n    view.externalId = req.externalId;\n    if (view.organizationId == null) {\n      view.organizationId = req.organizationId;\n    }\n    return view;\n  }\n\n  static toDomain(req: CollectionExport, domain = new CollectionDomain()) {\n    domain.name = req.name != null ? new EncString(req.name) : null;\n    domain.externalId = req.externalId;\n    if (domain.organizationId == null) {\n      domain.organizationId = req.organizationId;\n    }\n    return domain;\n  }\n\n  organizationId: string;\n  name: string;\n  externalId: string;\n\n  // Use build method instead of ctor so that we can control order of JSON stringify for pretty print\n  build(o: CollectionView | CollectionDomain) {\n    this.organizationId = o.organizationId;\n    if (o instanceof CollectionView) {\n      this.name = o.name;\n    } else {\n      this.name = o.name?.encryptedString;\n    }\n    this.externalId = o.externalId;\n  }\n}\n","import { Collection as CollectionDomain } from \"../domain/collection\";\nimport { CollectionView } from \"../view/collectionView\";\n\nimport { CollectionExport } from \"./collectionExport\";\n\nexport class CollectionWithIdExport extends CollectionExport {\n  id: string;\n\n  // Use build method instead of ctor so that we can control order of JSON stringify for pretty print\n  build(o: CollectionView | CollectionDomain) {\n    this.id = o.id;\n    super.build(o);\n  }\n}\n","import { EventType } from \"../../enums/eventType\";\nimport { EventView } from \"../view/eventView\";\n\nexport class EventExport {\n  message: string;\n  appIcon: string;\n  appName: string;\n  userId: string;\n  userName: string;\n  userEmail: string;\n  date: string;\n  ip: string;\n  type: string;\n  installationId: string;\n\n  constructor(event: EventView) {\n    this.message = event.humanReadableMessage;\n    this.appIcon = event.appIcon;\n    this.appName = event.appName;\n    this.userId = event.userId;\n    this.userName = event.userName;\n    this.userEmail = event.userEmail;\n    this.date = event.date;\n    this.ip = event.ip;\n    this.type = EventType[event.type];\n    this.installationId = event.installationId;\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { Folder } from \"../domain/folder\";\nimport { ITreeNodeObject } from \"../domain/treeNode\";\n\nimport { View } from \"./view\";\n\nexport class FolderView implements View, ITreeNodeObject {\n  id: string = null;\n  name: string = null;\n  revisionDate: Date = null;\n\n  constructor(f?: Folder) {\n    if (!f) {\n      return;\n    }\n\n    this.id = f.id;\n    this.revisionDate = f.revisionDate;\n  }\n\n  static fromJSON(obj: Jsonify<FolderView>) {\n    const revisionDate = obj.revisionDate == null ? null : new Date(obj.revisionDate);\n    return Object.assign(new FolderView(), obj, { revisionDate });\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { FolderData } from \"../data/folderData\";\nimport { FolderView } from \"../view/folderView\";\n\nimport Domain from \"./domainBase\";\nimport { EncString } from \"./encString\";\n\nexport class Folder extends Domain {\n  id: string;\n  name: EncString;\n  revisionDate: Date;\n\n  constructor(obj?: FolderData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        id: null,\n        name: null,\n      },\n      [\"id\"]\n    );\n\n    this.revisionDate = obj.revisionDate != null ? new Date(obj.revisionDate) : null;\n  }\n\n  decrypt(): Promise<FolderView> {\n    return this.decryptObj(\n      new FolderView(this),\n      {\n        name: null,\n      },\n      null\n    );\n  }\n\n  static fromJSON(obj: Jsonify<Folder>) {\n    const revisionDate = obj.revisionDate == null ? null : new Date(obj.revisionDate);\n    return Object.assign(new Folder(), obj, { name: EncString.fromJSON(obj.name), revisionDate });\n  }\n}\n","import { EncString } from \"../domain/encString\";\nimport { Folder as FolderDomain } from \"../domain/folder\";\nimport { FolderView } from \"../view/folderView\";\n\nexport class FolderExport {\n  static template(): FolderExport {\n    const req = new FolderExport();\n    req.name = \"Folder name\";\n    return req;\n  }\n\n  static toView(req: FolderExport, view = new FolderView()) {\n    view.name = req.name;\n    return view;\n  }\n\n  static toDomain(req: FolderExport, domain = new FolderDomain()) {\n    domain.name = req.name != null ? new EncString(req.name) : null;\n    return domain;\n  }\n\n  name: string;\n\n  // Use build method instead of ctor so that we can control order of JSON stringify for pretty print\n  build(o: FolderView | FolderDomain) {\n    if (o instanceof FolderView) {\n      this.name = o.name;\n    } else {\n      this.name = o.name?.encryptedString;\n    }\n  }\n}\n","import { Folder as FolderDomain } from \"../domain/folder\";\nimport { FolderView } from \"../view/folderView\";\n\nimport { FolderExport } from \"./folderExport\";\n\nexport class FolderWithIdExport extends FolderExport {\n  id: string;\n\n  // Use build method instead of ctor so that we can control order of JSON stringify for pretty print\n  build(o: FolderView | FolderDomain) {\n    this.id = o.id;\n    super.build(o);\n  }\n}\n","export enum FileUploadType {\n  Direct = 0,\n  Azure = 1,\n}\n","import * as papa from \"papaparse\";\nimport { firstValueFrom } from \"rxjs\";\n\nimport { ApiService } from \"../abstractions/api.service\";\nimport { CipherService } from \"../abstractions/cipher.service\";\nimport { CryptoService } from \"../abstractions/crypto.service\";\nimport { CryptoFunctionService } from \"../abstractions/cryptoFunction.service\";\nimport {\n  ExportFormat,\n  ExportService as ExportServiceAbstraction,\n} from \"../abstractions/export.service\";\nimport { FolderService } from \"../abstractions/folder/folder.service.abstraction\";\nimport { CipherType } from \"../enums/cipherType\";\nimport { DEFAULT_KDF_ITERATIONS, KdfType } from \"../enums/kdfType\";\nimport { Utils } from \"../misc/utils\";\nimport { CipherData } from \"../models/data/cipherData\";\nimport { CollectionData } from \"../models/data/collectionData\";\nimport { Cipher } from \"../models/domain/cipher\";\nimport { Collection } from \"../models/domain/collection\";\nimport { Folder } from \"../models/domain/folder\";\nimport { CipherWithIdExport as CipherExport } from \"../models/export/cipherWithIdsExport\";\nimport { CollectionWithIdExport as CollectionExport } from \"../models/export/collectionWithIdExport\";\nimport { EventExport } from \"../models/export/eventExport\";\nimport { FolderWithIdExport as FolderExport } from \"../models/export/folderWithIdExport\";\nimport { CollectionDetailsResponse } from \"../models/response/collectionResponse\";\nimport { CipherView } from \"../models/view/cipherView\";\nimport { CollectionView } from \"../models/view/collectionView\";\nimport { EventView } from \"../models/view/eventView\";\nimport { FolderView } from \"../models/view/folderView\";\n\nexport class ExportService implements ExportServiceAbstraction {\n  constructor(\n    private folderService: FolderService,\n    private cipherService: CipherService,\n    private apiService: ApiService,\n    private cryptoService: CryptoService,\n    private cryptoFunctionService: CryptoFunctionService\n  ) {}\n\n  async getExport(format: ExportFormat = \"csv\", organizationId?: string): Promise<string> {\n    if (organizationId) {\n      return await this.getOrganizationExport(organizationId, format);\n    }\n\n    if (format === \"encrypted_json\") {\n      return this.getEncryptedExport();\n    } else {\n      return this.getDecryptedExport(format);\n    }\n  }\n\n  async getPasswordProtectedExport(password: string, organizationId?: string): Promise<string> {\n    const clearText = organizationId\n      ? await this.getOrganizationExport(organizationId, \"json\")\n      : await this.getExport(\"json\");\n\n    const salt = Utils.fromBufferToB64(await this.cryptoFunctionService.randomBytes(16));\n    const kdfIterations = DEFAULT_KDF_ITERATIONS;\n    const key = await this.cryptoService.makePinKey(\n      password,\n      salt,\n      KdfType.PBKDF2_SHA256,\n      kdfIterations\n    );\n\n    const encKeyValidation = await this.cryptoService.encrypt(Utils.newGuid(), key);\n    const encText = await this.cryptoService.encrypt(clearText, key);\n\n    const jsonDoc: any = {\n      encrypted: true,\n      passwordProtected: true,\n      salt: salt,\n      kdfIterations: kdfIterations,\n      kdfType: KdfType.PBKDF2_SHA256,\n      encKeyValidation_DO_NOT_EDIT: encKeyValidation.encryptedString,\n      data: encText.encryptedString,\n    };\n\n    return JSON.stringify(jsonDoc, null, \"  \");\n  }\n\n  async getOrganizationExport(\n    organizationId: string,\n    format: ExportFormat = \"csv\"\n  ): Promise<string> {\n    if (format === \"encrypted_json\") {\n      return this.getOrganizationEncryptedExport(organizationId);\n    } else {\n      return this.getOrganizationDecryptedExport(organizationId, format);\n    }\n  }\n\n  async getEventExport(events: EventView[]): Promise<string> {\n    return papa.unparse(events.map((e) => new EventExport(e)));\n  }\n\n  getFileName(prefix: string = null, extension = \"csv\"): string {\n    const now = new Date();\n    const dateString =\n      now.getFullYear() +\n      \"\" +\n      this.padNumber(now.getMonth() + 1, 2) +\n      \"\" +\n      this.padNumber(now.getDate(), 2) +\n      this.padNumber(now.getHours(), 2) +\n      \"\" +\n      this.padNumber(now.getMinutes(), 2) +\n      this.padNumber(now.getSeconds(), 2);\n\n    return \"bitwarden\" + (prefix ? \"_\" + prefix : \"\") + \"_export_\" + dateString + \".\" + extension;\n  }\n\n  private async getDecryptedExport(format: \"json\" | \"csv\"): Promise<string> {\n    let decFolders: FolderView[] = [];\n    let decCiphers: CipherView[] = [];\n    const promises = [];\n\n    promises.push(\n      firstValueFrom(this.folderService.folderViews$).then((folders) => {\n        decFolders = folders;\n      })\n    );\n\n    promises.push(\n      this.cipherService.getAllDecrypted().then((ciphers) => {\n        decCiphers = ciphers.filter((f) => f.deletedDate == null);\n      })\n    );\n\n    await Promise.all(promises);\n\n    if (format === \"csv\") {\n      const foldersMap = new Map<string, FolderView>();\n      decFolders.forEach((f) => {\n        if (f.id != null) {\n          foldersMap.set(f.id, f);\n        }\n      });\n\n      const exportCiphers: any[] = [];\n      decCiphers.forEach((c) => {\n        // only export logins and secure notes\n        if (c.type !== CipherType.Login && c.type !== CipherType.SecureNote) {\n          return;\n        }\n        if (c.organizationId != null) {\n          return;\n        }\n\n        const cipher: any = {};\n        cipher.folder =\n          c.folderId != null && foldersMap.has(c.folderId) ? foldersMap.get(c.folderId).name : null;\n        cipher.favorite = c.favorite ? 1 : null;\n        this.buildCommonCipher(cipher, c);\n        exportCiphers.push(cipher);\n      });\n\n      return papa.unparse(exportCiphers);\n    } else {\n      const jsonDoc: any = {\n        encrypted: false,\n        folders: [],\n        items: [],\n      };\n\n      decFolders.forEach((f) => {\n        if (f.id == null) {\n          return;\n        }\n        const folder = new FolderExport();\n        folder.build(f);\n        jsonDoc.folders.push(folder);\n      });\n\n      decCiphers.forEach((c) => {\n        if (c.organizationId != null) {\n          return;\n        }\n        const cipher = new CipherExport();\n        cipher.build(c);\n        cipher.collectionIds = null;\n        jsonDoc.items.push(cipher);\n      });\n\n      return JSON.stringify(jsonDoc, null, \"  \");\n    }\n  }\n\n  private async getEncryptedExport(): Promise<string> {\n    let folders: Folder[] = [];\n    let ciphers: Cipher[] = [];\n    const promises = [];\n\n    promises.push(\n      firstValueFrom(this.folderService.folders$).then((f) => {\n        folders = f;\n      })\n    );\n\n    promises.push(\n      this.cipherService.getAll().then((c) => {\n        ciphers = c.filter((f) => f.deletedDate == null);\n      })\n    );\n\n    await Promise.all(promises);\n\n    const encKeyValidation = await this.cryptoService.encrypt(Utils.newGuid());\n\n    const jsonDoc: any = {\n      encrypted: true,\n      encKeyValidation_DO_NOT_EDIT: encKeyValidation.encryptedString,\n      folders: [],\n      items: [],\n    };\n\n    folders.forEach((f) => {\n      if (f.id == null) {\n        return;\n      }\n      const folder = new FolderExport();\n      folder.build(f);\n      jsonDoc.folders.push(folder);\n    });\n\n    ciphers.forEach((c) => {\n      if (c.organizationId != null) {\n        return;\n      }\n      const cipher = new CipherExport();\n      cipher.build(c);\n      cipher.collectionIds = null;\n      jsonDoc.items.push(cipher);\n    });\n\n    return JSON.stringify(jsonDoc, null, \"  \");\n  }\n\n  private async getOrganizationDecryptedExport(\n    organizationId: string,\n    format: \"json\" | \"csv\"\n  ): Promise<string> {\n    const decCollections: CollectionView[] = [];\n    const decCiphers: CipherView[] = [];\n    const promises = [];\n\n    promises.push(\n      this.apiService.getOrganizationExport(organizationId).then((exportData) => {\n        const exportPromises: any = [];\n        if (exportData != null) {\n          if (\n            exportData.collections != null &&\n            exportData.collections.data != null &&\n            exportData.collections.data.length > 0\n          ) {\n            exportData.collections.data.forEach((c) => {\n              const collection = new Collection(new CollectionData(c as CollectionDetailsResponse));\n              exportPromises.push(\n                collection.decrypt().then((decCol) => {\n                  decCollections.push(decCol);\n                })\n              );\n            });\n          }\n          if (\n            exportData.ciphers != null &&\n            exportData.ciphers.data != null &&\n            exportData.ciphers.data.length > 0\n          ) {\n            exportData.ciphers.data\n              .filter((c) => c.deletedDate === null)\n              .forEach((c) => {\n                const cipher = new Cipher(new CipherData(c));\n                exportPromises.push(\n                  cipher.decrypt().then((decCipher) => {\n                    decCiphers.push(decCipher);\n                  })\n                );\n              });\n          }\n        }\n        return Promise.all(exportPromises);\n      })\n    );\n\n    await Promise.all(promises);\n\n    if (format === \"csv\") {\n      const collectionsMap = new Map<string, CollectionView>();\n      decCollections.forEach((c) => {\n        collectionsMap.set(c.id, c);\n      });\n\n      const exportCiphers: any[] = [];\n      decCiphers.forEach((c) => {\n        // only export logins and secure notes\n        if (c.type !== CipherType.Login && c.type !== CipherType.SecureNote) {\n          return;\n        }\n\n        const cipher: any = {};\n        cipher.collections = [];\n        if (c.collectionIds != null) {\n          cipher.collections = c.collectionIds\n            .filter((id) => collectionsMap.has(id))\n            .map((id) => collectionsMap.get(id).name);\n        }\n        this.buildCommonCipher(cipher, c);\n        exportCiphers.push(cipher);\n      });\n\n      return papa.unparse(exportCiphers);\n    } else {\n      const jsonDoc: any = {\n        encrypted: false,\n        collections: [],\n        items: [],\n      };\n\n      decCollections.forEach((c) => {\n        const collection = new CollectionExport();\n        collection.build(c);\n        jsonDoc.collections.push(collection);\n      });\n\n      decCiphers.forEach((c) => {\n        const cipher = new CipherExport();\n        cipher.build(c);\n        jsonDoc.items.push(cipher);\n      });\n      return JSON.stringify(jsonDoc, null, \"  \");\n    }\n  }\n\n  private async getOrganizationEncryptedExport(organizationId: string): Promise<string> {\n    const collections: Collection[] = [];\n    const ciphers: Cipher[] = [];\n    const promises = [];\n\n    promises.push(\n      this.apiService.getCollections(organizationId).then((c) => {\n        const collectionPromises: any = [];\n        if (c != null && c.data != null && c.data.length > 0) {\n          c.data.forEach((r) => {\n            const collection = new Collection(new CollectionData(r as CollectionDetailsResponse));\n            collections.push(collection);\n          });\n        }\n        return Promise.all(collectionPromises);\n      })\n    );\n\n    promises.push(\n      this.apiService.getCiphersOrganization(organizationId).then((c) => {\n        const cipherPromises: any = [];\n        if (c != null && c.data != null && c.data.length > 0) {\n          c.data\n            .filter((item) => item.deletedDate === null)\n            .forEach((item) => {\n              const cipher = new Cipher(new CipherData(item));\n              ciphers.push(cipher);\n            });\n        }\n        return Promise.all(cipherPromises);\n      })\n    );\n\n    await Promise.all(promises);\n\n    const orgKey = await this.cryptoService.getOrgKey(organizationId);\n    const encKeyValidation = await this.cryptoService.encrypt(Utils.newGuid(), orgKey);\n\n    const jsonDoc: any = {\n      encrypted: true,\n      encKeyValidation_DO_NOT_EDIT: encKeyValidation.encryptedString,\n      collections: [],\n      items: [],\n    };\n\n    collections.forEach((c) => {\n      const collection = new CollectionExport();\n      collection.build(c);\n      jsonDoc.collections.push(collection);\n    });\n\n    ciphers.forEach((c) => {\n      const cipher = new CipherExport();\n      cipher.build(c);\n      jsonDoc.items.push(cipher);\n    });\n    return JSON.stringify(jsonDoc, null, \"  \");\n  }\n\n  private padNumber(num: number, width: number, padCharacter = \"0\"): string {\n    const numString = num.toString();\n    return numString.length >= width\n      ? numString\n      : new Array(width - numString.length + 1).join(padCharacter) + numString;\n  }\n\n  private buildCommonCipher(cipher: any, c: CipherView) {\n    cipher.type = null;\n    cipher.name = c.name;\n    cipher.notes = c.notes;\n    cipher.fields = null;\n    cipher.reprompt = c.reprompt;\n    // Login props\n    cipher.login_uri = null;\n    cipher.login_username = null;\n    cipher.login_password = null;\n    cipher.login_totp = null;\n\n    if (c.fields) {\n      c.fields.forEach((f: any) => {\n        if (!cipher.fields) {\n          cipher.fields = \"\";\n        } else {\n          cipher.fields += \"\\n\";\n        }\n\n        cipher.fields += (f.name || \"\") + \": \" + f.value;\n      });\n    }\n\n    switch (c.type) {\n      case CipherType.Login:\n        cipher.type = \"login\";\n        cipher.login_username = c.login.username;\n        cipher.login_password = c.login.password;\n        cipher.login_totp = c.login.totp;\n\n        if (c.login.uris) {\n          cipher.login_uri = [];\n          c.login.uris.forEach((u) => {\n            cipher.login_uri.push(u.uri);\n          });\n        }\n        break;\n      case CipherType.SecureNote:\n        cipher.type = \"note\";\n        break;\n      default:\n        return;\n    }\n\n    return cipher;\n  }\n}\n","import { LogService } from \"../abstractions/log.service\";\nimport { Utils } from \"../misc/utils\";\nimport { EncArrayBuffer } from \"../models/domain/encArrayBuffer\";\n\nconst MAX_SINGLE_BLOB_UPLOAD_SIZE = 256 * 1024 * 1024; // 256 MiB\nconst MAX_BLOCKS_PER_BLOB = 50000;\n\nexport class AzureFileUploadService {\n  constructor(private logService: LogService) {}\n\n  async upload(url: string, data: EncArrayBuffer, renewalCallback: () => Promise<string>) {\n    if (data.buffer.byteLength <= MAX_SINGLE_BLOB_UPLOAD_SIZE) {\n      return await this.azureUploadBlob(url, data);\n    } else {\n      return await this.azureUploadBlocks(url, data, renewalCallback);\n    }\n  }\n  private async azureUploadBlob(url: string, data: EncArrayBuffer) {\n    const urlObject = Utils.getUrl(url);\n    const headers = new Headers({\n      \"x-ms-date\": new Date().toUTCString(),\n      \"x-ms-version\": urlObject.searchParams.get(\"sv\"),\n      \"Content-Length\": data.buffer.byteLength.toString(),\n      \"x-ms-blob-type\": \"BlockBlob\",\n    });\n\n    const request = new Request(url, {\n      body: data.buffer,\n      cache: \"no-store\",\n      method: \"PUT\",\n      headers: headers,\n    });\n\n    const blobResponse = await fetch(request);\n\n    if (blobResponse.status !== 201) {\n      throw new Error(`Failed to create Azure blob: ${blobResponse.status}`);\n    }\n  }\n  private async azureUploadBlocks(\n    url: string,\n    data: EncArrayBuffer,\n    renewalCallback: () => Promise<string>\n  ) {\n    const baseUrl = Utils.getUrl(url);\n    const blockSize = this.getMaxBlockSize(baseUrl.searchParams.get(\"sv\"));\n    let blockIndex = 0;\n    const numBlocks = Math.ceil(data.buffer.byteLength / blockSize);\n    const blocksStaged: string[] = [];\n\n    if (numBlocks > MAX_BLOCKS_PER_BLOB) {\n      throw new Error(\n        `Cannot upload file, exceeds maximum size of ${blockSize * MAX_BLOCKS_PER_BLOB}`\n      );\n    }\n\n    // eslint-disable-next-line\n    try {\n      while (blockIndex < numBlocks) {\n        url = await this.renewUrlIfNecessary(url, renewalCallback);\n        const blockUrl = Utils.getUrl(url);\n        const blockId = this.encodedBlockId(blockIndex);\n        blockUrl.searchParams.append(\"comp\", \"block\");\n        blockUrl.searchParams.append(\"blockid\", blockId);\n        const start = blockIndex * blockSize;\n        const blockData = data.buffer.slice(start, start + blockSize);\n        const blockHeaders = new Headers({\n          \"x-ms-date\": new Date().toUTCString(),\n          \"x-ms-version\": blockUrl.searchParams.get(\"sv\"),\n          \"Content-Length\": blockData.byteLength.toString(),\n        });\n\n        const blockRequest = new Request(blockUrl.toString(), {\n          body: blockData,\n          cache: \"no-store\",\n          method: \"PUT\",\n          headers: blockHeaders,\n        });\n\n        const blockResponse = await fetch(blockRequest);\n\n        if (blockResponse.status !== 201) {\n          const message = `Unsuccessful block PUT. Received status ${blockResponse.status}`;\n          this.logService.error(message + \"\\n\" + (await blockResponse.json()));\n          throw new Error(message);\n        }\n\n        blocksStaged.push(blockId);\n        blockIndex++;\n      }\n\n      url = await this.renewUrlIfNecessary(url, renewalCallback);\n      const blockListUrl = Utils.getUrl(url);\n      const blockListXml = this.blockListXml(blocksStaged);\n      blockListUrl.searchParams.append(\"comp\", \"blocklist\");\n      const headers = new Headers({\n        \"x-ms-date\": new Date().toUTCString(),\n        \"x-ms-version\": blockListUrl.searchParams.get(\"sv\"),\n        \"Content-Length\": blockListXml.length.toString(),\n      });\n\n      const request = new Request(blockListUrl.toString(), {\n        body: blockListXml,\n        cache: \"no-store\",\n        method: \"PUT\",\n        headers: headers,\n      });\n\n      const response = await fetch(request);\n\n      if (response.status !== 201) {\n        const message = `Unsuccessful block list PUT. Received status ${response.status}`;\n        this.logService.error(message + \"\\n\" + (await response.json()));\n        throw new Error(message);\n      }\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  private async renewUrlIfNecessary(\n    url: string,\n    renewalCallback: () => Promise<string>\n  ): Promise<string> {\n    const urlObject = Utils.getUrl(url);\n    const expiry = new Date(urlObject.searchParams.get(\"se\") ?? \"\");\n\n    if (isNaN(expiry.getTime())) {\n      expiry.setTime(Date.now() + 3600000);\n    }\n\n    if (expiry.getTime() < Date.now() + 1000) {\n      return await renewalCallback();\n    }\n    return url;\n  }\n\n  private encodedBlockId(blockIndex: number) {\n    // Encoded blockId max size is 64, so pre-encoding max size is 48\n    const utfBlockId = (\n      \"000000000000000000000000000000000000000000000000\" + blockIndex.toString()\n    ).slice(-48);\n    return Utils.fromUtf8ToB64(utfBlockId);\n  }\n\n  private blockListXml(blockIdList: string[]) {\n    let xml = '<?xml version=\"1.0\" encoding=\"utf-8\"?><BlockList>';\n    blockIdList.forEach((blockId) => {\n      xml += `<Latest>${blockId}</Latest>`;\n    });\n    xml += \"</BlockList>\";\n    return xml;\n  }\n\n  private getMaxBlockSize(version: string) {\n    if (Version.compare(version, \"2019-12-12\") >= 0) {\n      return 4000 * 1024 * 1024; // 4000 MiB\n    } else if (Version.compare(version, \"2016-05-31\") >= 0) {\n      return 100 * 1024 * 1024; // 100 MiB\n    } else {\n      return 4 * 1024 * 1024; // 4 MiB\n    }\n  }\n}\n\nclass Version {\n  /**\n   * Compares two Azure Versions against each other\n   * @param a Version to compare\n   * @param b Version to compare\n   * @returns a number less than zero if b is newer than a, 0 if equal,\n   * and greater than zero if a is newer than b\n   */\n  static compare(a: Required<Version> | string, b: Required<Version> | string) {\n    if (typeof a === \"string\") {\n      a = new Version(a);\n    }\n\n    if (typeof b === \"string\") {\n      b = new Version(b);\n    }\n\n    return a.year !== b.year\n      ? a.year - b.year\n      : a.month !== b.month\n      ? a.month - b.month\n      : a.day !== b.day\n      ? a.day - b.day\n      : 0;\n  }\n  year = 0;\n  month = 0;\n  day = 0;\n\n  constructor(version: string) {\n    try {\n      const parts = version.split(\"-\").map((v) => Number.parseInt(v, 10));\n      this.year = parts[0];\n      this.month = parts[1];\n      this.day = parts[2];\n    } catch {\n      // Ignore error\n    }\n  }\n  /**\n   * Compares two Azure Versions against each other\n   * @param compareTo Version to compare against\n   * @returns a number less than zero if compareTo is newer, 0 if equal,\n   * and greater than zero if this is greater than compareTo\n   */\n  compare(compareTo: Required<Version> | string) {\n    return Version.compare(this, compareTo);\n  }\n}\n","import { ApiService } from \"../abstractions/api.service\";\nimport { Utils } from \"../misc/utils\";\nimport { EncArrayBuffer } from \"../models/domain/encArrayBuffer\";\n\nexport class BitwardenFileUploadService {\n  constructor(private apiService: ApiService) {}\n\n  async upload(\n    encryptedFileName: string,\n    encryptedFileData: EncArrayBuffer,\n    apiCall: (fd: FormData) => Promise<any>\n  ) {\n    const fd = new FormData();\n    try {\n      const blob = new Blob([encryptedFileData.buffer], { type: \"application/octet-stream\" });\n      fd.append(\"data\", blob, encryptedFileName);\n    } catch (e) {\n      if (Utils.isNode && !Utils.isBrowser) {\n        fd.append(\n          \"data\",\n          Buffer.from(encryptedFileData.buffer) as any,\n          {\n            filepath: encryptedFileName,\n            contentType: \"application/octet-stream\",\n          } as any\n        );\n      } else {\n        throw e;\n      }\n    }\n\n    await apiCall(fd);\n  }\n}\n","import { ApiService } from \"../abstractions/api.service\";\nimport { FileUploadService as FileUploadServiceAbstraction } from \"../abstractions/fileUpload.service\";\nimport { LogService } from \"../abstractions/log.service\";\nimport { FileUploadType } from \"../enums/fileUploadType\";\nimport { EncArrayBuffer } from \"../models/domain/encArrayBuffer\";\nimport { EncString } from \"../models/domain/encString\";\nimport { AttachmentUploadDataResponse } from \"../models/response/attachmentUploadDataResponse\";\nimport { SendFileUploadDataResponse } from \"../models/response/sendFileUploadDataResponse\";\n\nimport { AzureFileUploadService } from \"./azureFileUpload.service\";\nimport { BitwardenFileUploadService } from \"./bitwardenFileUpload.service\";\n\nexport class FileUploadService implements FileUploadServiceAbstraction {\n  private azureFileUploadService: AzureFileUploadService;\n  private bitwardenFileUploadService: BitwardenFileUploadService;\n\n  constructor(private logService: LogService, private apiService: ApiService) {\n    this.azureFileUploadService = new AzureFileUploadService(logService);\n    this.bitwardenFileUploadService = new BitwardenFileUploadService(apiService);\n  }\n\n  async uploadSendFile(\n    uploadData: SendFileUploadDataResponse,\n    fileName: EncString,\n    encryptedFileData: EncArrayBuffer\n  ) {\n    try {\n      switch (uploadData.fileUploadType) {\n        case FileUploadType.Direct:\n          await this.bitwardenFileUploadService.upload(\n            fileName.encryptedString,\n            encryptedFileData,\n            (fd) =>\n              this.apiService.postSendFile(\n                uploadData.sendResponse.id,\n                uploadData.sendResponse.file.id,\n                fd\n              )\n          );\n          break;\n        case FileUploadType.Azure: {\n          const renewalCallback = async () => {\n            const renewalResponse = await this.apiService.renewSendFileUploadUrl(\n              uploadData.sendResponse.id,\n              uploadData.sendResponse.file.id\n            );\n            return renewalResponse.url;\n          };\n          await this.azureFileUploadService.upload(\n            uploadData.url,\n            encryptedFileData,\n            renewalCallback\n          );\n          break;\n        }\n        default:\n          throw new Error(\"Unknown file upload type\");\n      }\n    } catch (e) {\n      await this.apiService.deleteSend(uploadData.sendResponse.id);\n      throw e;\n    }\n  }\n\n  async uploadCipherAttachment(\n    admin: boolean,\n    uploadData: AttachmentUploadDataResponse,\n    encryptedFileName: EncString,\n    encryptedFileData: EncArrayBuffer\n  ) {\n    const response = admin ? uploadData.cipherMiniResponse : uploadData.cipherResponse;\n    try {\n      switch (uploadData.fileUploadType) {\n        case FileUploadType.Direct:\n          await this.bitwardenFileUploadService.upload(\n            encryptedFileName.encryptedString,\n            encryptedFileData,\n            (fd) => this.apiService.postAttachmentFile(response.id, uploadData.attachmentId, fd)\n          );\n          break;\n        case FileUploadType.Azure: {\n          const renewalCallback = async () => {\n            const renewalResponse = await this.apiService.renewAttachmentUploadUrl(\n              response.id,\n              uploadData.attachmentId\n            );\n            return renewalResponse.url;\n          };\n          await this.azureFileUploadService.upload(\n            uploadData.url,\n            encryptedFileData,\n            renewalCallback\n          );\n          break;\n        }\n        default:\n          throw new Error(\"Unknown file upload type.\");\n      }\n    } catch (e) {\n      if (admin) {\n        await this.apiService.deleteCipherAttachmentAdmin(response.id, uploadData.attachmentId);\n      } else {\n        await this.apiService.deleteCipherAttachment(response.id, uploadData.attachmentId);\n      }\n      throw e;\n    }\n  }\n}\n","import { FolderResponse } from \"../response/folderResponse\";\n\nexport class FolderData {\n  id: string;\n  name: string;\n  revisionDate: string;\n\n  constructor(response: FolderResponse) {\n    this.name = response.name;\n    this.id = response.id;\n    this.revisionDate = response.revisionDate;\n  }\n}\n","import { Folder } from \"../domain/folder\";\n\nexport class FolderRequest {\n  name: string;\n\n  constructor(folder: Folder) {\n    this.name = folder.name ? folder.name.encryptedString : null;\n  }\n}\n","export enum OrganizationUserType {\n  Owner = 0,\n  Admin = 1,\n  User = 2,\n  Manager = 3,\n  Custom = 4,\n}\n","import { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { FolderApiServiceAbstraction } from \"@bitwarden/common/abstractions/folder/folder-api.service.abstraction\";\nimport { InternalFolderService } from \"@bitwarden/common/abstractions/folder/folder.service.abstraction\";\nimport { FolderData } from \"@bitwarden/common/models/data/folderData\";\nimport { Folder } from \"@bitwarden/common/models/domain/folder\";\nimport { FolderRequest } from \"@bitwarden/common/models/request/folderRequest\";\nimport { FolderResponse } from \"@bitwarden/common/models/response/folderResponse\";\n\nexport class FolderApiService implements FolderApiServiceAbstraction {\n  constructor(private folderService: InternalFolderService, private apiService: ApiService) {}\n\n  async save(folder: Folder): Promise<any> {\n    const request = new FolderRequest(folder);\n\n    let response: FolderResponse;\n    if (folder.id == null) {\n      response = await this.postFolder(request);\n      folder.id = response.id;\n    } else {\n      response = await this.putFolder(folder.id, request);\n    }\n\n    const data = new FolderData(response);\n    await this.folderService.upsert(data);\n  }\n\n  async delete(id: string): Promise<any> {\n    await this.deleteFolder(id);\n    await this.folderService.delete(id);\n  }\n\n  async get(id: string): Promise<FolderResponse> {\n    const r = await this.apiService.send(\"GET\", \"/folders/\" + id, null, true, true);\n    return new FolderResponse(r);\n  }\n\n  private async postFolder(request: FolderRequest): Promise<FolderResponse> {\n    const r = await this.apiService.send(\"POST\", \"/folders\", request, true, true);\n    return new FolderResponse(r);\n  }\n\n  async putFolder(id: string, request: FolderRequest): Promise<FolderResponse> {\n    const r = await this.apiService.send(\"PUT\", \"/folders/\" + id, request, true, true);\n    return new FolderResponse(r);\n  }\n\n  private deleteFolder(id: string): Promise<any> {\n    return this.apiService.send(\"DELETE\", \"/folders/\" + id, null, true, false);\n  }\n}\n","import { KdfType } from \"../../../enums/kdfType\";\nimport { KeysRequest } from \"../keysRequest\";\n\nexport class SetKeyConnectorKeyRequest {\n  key: string;\n  keys: KeysRequest;\n  kdf: KdfType;\n  kdfIterations: number;\n  orgIdentifier: string;\n\n  constructor(\n    key: string,\n    kdf: KdfType,\n    kdfIterations: number,\n    orgIdentifier: string,\n    keys: KeysRequest\n  ) {\n    this.key = key;\n    this.kdf = kdf;\n    this.kdfIterations = kdfIterations;\n    this.orgIdentifier = orgIdentifier;\n    this.keys = keys;\n  }\n}\n","export class KeyConnectorUserKeyRequest {\n  key: string;\n\n  constructor(key: string) {\n    this.key = key;\n  }\n}\n","import { ApiService } from \"../abstractions/api.service\";\nimport { CryptoService } from \"../abstractions/crypto.service\";\nimport { CryptoFunctionService } from \"../abstractions/cryptoFunction.service\";\nimport { KeyConnectorService as KeyConnectorServiceAbstraction } from \"../abstractions/keyConnector.service\";\nimport { LogService } from \"../abstractions/log.service\";\nimport { OrganizationService } from \"../abstractions/organization.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { TokenService } from \"../abstractions/token.service\";\nimport { OrganizationUserType } from \"../enums/organizationUserType\";\nimport { Utils } from \"../misc/utils\";\nimport { SymmetricCryptoKey } from \"../models/domain/symmetricCryptoKey\";\nimport { SetKeyConnectorKeyRequest } from \"../models/request/account/setKeyConnectorKeyRequest\";\nimport { KeyConnectorUserKeyRequest } from \"../models/request/keyConnectorUserKeyRequest\";\nimport { KeysRequest } from \"../models/request/keysRequest\";\nimport { IdentityTokenResponse } from \"../models/response/identityTokenResponse\";\n\nexport class KeyConnectorService implements KeyConnectorServiceAbstraction {\n  constructor(\n    private stateService: StateService,\n    private cryptoService: CryptoService,\n    private apiService: ApiService,\n    private tokenService: TokenService,\n    private logService: LogService,\n    private organizationService: OrganizationService,\n    private cryptoFunctionService: CryptoFunctionService,\n    private logoutCallback: (expired: boolean, userId?: string) => void\n  ) {}\n\n  setUsesKeyConnector(usesKeyConnector: boolean) {\n    return this.stateService.setUsesKeyConnector(usesKeyConnector);\n  }\n\n  async getUsesKeyConnector(): Promise<boolean> {\n    return await this.stateService.getUsesKeyConnector();\n  }\n\n  async userNeedsMigration() {\n    const loggedInUsingSso = await this.tokenService.getIsExternal();\n    const requiredByOrganization = (await this.getManagingOrganization()) != null;\n    const userIsNotUsingKeyConnector = !(await this.getUsesKeyConnector());\n\n    return loggedInUsingSso && requiredByOrganization && userIsNotUsingKeyConnector;\n  }\n\n  async migrateUser() {\n    const organization = await this.getManagingOrganization();\n    const key = await this.cryptoService.getKey();\n    const keyConnectorRequest = new KeyConnectorUserKeyRequest(key.encKeyB64);\n\n    try {\n      await this.apiService.postUserKeyToKeyConnector(\n        organization.keyConnectorUrl,\n        keyConnectorRequest\n      );\n    } catch (e) {\n      this.handleKeyConnectorError(e);\n    }\n\n    await this.apiService.postConvertToKeyConnector();\n  }\n\n  async getAndSetKey(url: string) {\n    try {\n      const userKeyResponse = await this.apiService.getUserKeyFromKeyConnector(url);\n      const keyArr = Utils.fromB64ToArray(userKeyResponse.key);\n      const k = new SymmetricCryptoKey(keyArr);\n      await this.cryptoService.setKey(k);\n    } catch (e) {\n      this.handleKeyConnectorError(e);\n    }\n  }\n\n  async getManagingOrganization() {\n    const orgs = await this.organizationService.getAll();\n    return orgs.find(\n      (o) =>\n        o.keyConnectorEnabled &&\n        o.type !== OrganizationUserType.Admin &&\n        o.type !== OrganizationUserType.Owner &&\n        !o.isProviderUser\n    );\n  }\n\n  async convertNewSsoUserToKeyConnector(tokenResponse: IdentityTokenResponse, orgId: string) {\n    const { kdf, kdfIterations, keyConnectorUrl } = tokenResponse;\n    const password = await this.cryptoFunctionService.randomBytes(64);\n\n    const k = await this.cryptoService.makeKey(\n      Utils.fromBufferToB64(password),\n      await this.tokenService.getEmail(),\n      kdf,\n      kdfIterations\n    );\n    const keyConnectorRequest = new KeyConnectorUserKeyRequest(k.encKeyB64);\n    await this.cryptoService.setKey(k);\n\n    const encKey = await this.cryptoService.makeEncKey(k);\n    await this.cryptoService.setEncKey(encKey[1].encryptedString);\n\n    const [pubKey, privKey] = await this.cryptoService.makeKeyPair();\n\n    try {\n      await this.apiService.postUserKeyToKeyConnector(keyConnectorUrl, keyConnectorRequest);\n    } catch (e) {\n      this.handleKeyConnectorError(e);\n    }\n\n    const keys = new KeysRequest(pubKey, privKey.encryptedString);\n    const setPasswordRequest = new SetKeyConnectorKeyRequest(\n      encKey[1].encryptedString,\n      kdf,\n      kdfIterations,\n      orgId,\n      keys\n    );\n    await this.apiService.postSetKeyConnectorKey(setPasswordRequest);\n  }\n\n  async setConvertAccountRequired(status: boolean) {\n    await this.stateService.setConvertAccountToKeyConnector(status);\n  }\n\n  async getConvertAccountRequired(): Promise<boolean> {\n    return await this.stateService.getConvertAccountToKeyConnector();\n  }\n\n  async removeConvertAccountRequired() {\n    await this.stateService.setConvertAccountToKeyConnector(null);\n  }\n\n  async clear() {\n    await this.removeConvertAccountRequired();\n  }\n\n  private handleKeyConnectorError(e: any) {\n    this.logService.error(e);\n    if (this.logoutCallback != null) {\n      this.logoutCallback(false);\n    }\n    throw new Error(\"Key Connector error\");\n  }\n}\n","export enum NotificationType {\n  SyncCipherUpdate = 0,\n  SyncCipherCreate = 1,\n  SyncLoginDelete = 2,\n  SyncFolderDelete = 3,\n  SyncCiphers = 4,\n\n  SyncVault = 5,\n  SyncOrgKeys = 6,\n  SyncFolderCreate = 7,\n  SyncFolderUpdate = 8,\n  SyncCipherDelete = 9,\n  SyncSettings = 10,\n\n  LogOut = 11,\n\n  SyncSendCreate = 12,\n  SyncSendUpdate = 13,\n  SyncSendDelete = 14,\n}\n","import { NotificationType } from \"../../enums/notificationType\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class NotificationResponse extends BaseResponse {\n  contextId: string;\n  type: NotificationType;\n  payload: any;\n\n  constructor(response: any) {\n    super(response);\n    this.contextId = this.getResponseProperty(\"ContextId\");\n    this.type = this.getResponseProperty(\"Type\");\n\n    const payload = this.getResponseProperty(\"Payload\");\n    switch (this.type) {\n      case NotificationType.SyncCipherCreate:\n      case NotificationType.SyncCipherDelete:\n      case NotificationType.SyncCipherUpdate:\n      case NotificationType.SyncLoginDelete:\n        this.payload = new SyncCipherNotification(payload);\n        break;\n      case NotificationType.SyncFolderCreate:\n      case NotificationType.SyncFolderDelete:\n      case NotificationType.SyncFolderUpdate:\n        this.payload = new SyncFolderNotification(payload);\n        break;\n      case NotificationType.SyncVault:\n      case NotificationType.SyncCiphers:\n      case NotificationType.SyncOrgKeys:\n      case NotificationType.SyncSettings:\n      case NotificationType.LogOut:\n        this.payload = new UserNotification(payload);\n        break;\n      case NotificationType.SyncSendCreate:\n      case NotificationType.SyncSendUpdate:\n      case NotificationType.SyncSendDelete:\n        this.payload = new SyncSendNotification(payload);\n        break;\n      default:\n        break;\n    }\n  }\n}\n\nexport class SyncCipherNotification extends BaseResponse {\n  id: string;\n  userId: string;\n  organizationId: string;\n  collectionIds: string[];\n  revisionDate: Date;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.collectionIds = this.getResponseProperty(\"CollectionIds\");\n    this.revisionDate = new Date(this.getResponseProperty(\"RevisionDate\"));\n  }\n}\n\nexport class SyncFolderNotification extends BaseResponse {\n  id: string;\n  userId: string;\n  revisionDate: Date;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.revisionDate = new Date(this.getResponseProperty(\"RevisionDate\"));\n  }\n}\n\nexport class UserNotification extends BaseResponse {\n  userId: string;\n  date: Date;\n\n  constructor(response: any) {\n    super(response);\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.date = new Date(this.getResponseProperty(\"Date\"));\n  }\n}\n\nexport class SyncSendNotification extends BaseResponse {\n  id: string;\n  userId: string;\n  revisionDate: Date;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.revisionDate = new Date(this.getResponseProperty(\"RevisionDate\"));\n  }\n}\n","export enum OrganizationUserStatusType {\n  Invited = 0,\n  Accepted = 1,\n  Confirmed = 2,\n  Revoked = -1,\n}\n","import * as signalR from \"@microsoft/signalr\";\nimport * as signalRMsgPack from \"@microsoft/signalr-protocol-msgpack\";\n\nimport { ApiService } from \"../abstractions/api.service\";\nimport { AppIdService } from \"../abstractions/appId.service\";\nimport { AuthService } from \"../abstractions/auth.service\";\nimport { EnvironmentService } from \"../abstractions/environment.service\";\nimport { LogService } from \"../abstractions/log.service\";\nimport { NotificationsService as NotificationsServiceAbstraction } from \"../abstractions/notifications.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { SyncService } from \"../abstractions/sync.service\";\nimport { AuthenticationStatus } from \"../enums/authenticationStatus\";\nimport { NotificationType } from \"../enums/notificationType\";\nimport {\n  NotificationResponse,\n  SyncCipherNotification,\n  SyncFolderNotification,\n  SyncSendNotification,\n} from \"../models/response/notificationResponse\";\n\nexport class NotificationsService implements NotificationsServiceAbstraction {\n  private signalrConnection: signalR.HubConnection;\n  private url: string;\n  private connected = false;\n  private inited = false;\n  private inactive = false;\n  private reconnectTimer: any = null;\n\n  constructor(\n    private syncService: SyncService,\n    private appIdService: AppIdService,\n    private apiService: ApiService,\n    private environmentService: EnvironmentService,\n    private logoutCallback: (expired: boolean) => Promise<void>,\n    private logService: LogService,\n    private stateService: StateService,\n    private authService: AuthService\n  ) {\n    this.environmentService.urls.subscribe(() => {\n      if (!this.inited) {\n        return;\n      }\n\n      this.init();\n    });\n  }\n\n  async init(): Promise<void> {\n    this.inited = false;\n    this.url = this.environmentService.getNotificationsUrl();\n\n    // Set notifications server URL to `https://-` to effectively disable communication\n    // with the notifications server from the client app\n    if (this.url === \"https://-\") {\n      return;\n    }\n\n    if (this.signalrConnection != null) {\n      this.signalrConnection.off(\"ReceiveMessage\");\n      this.signalrConnection.off(\"Heartbeat\");\n      await this.signalrConnection.stop();\n      this.connected = false;\n      this.signalrConnection = null;\n    }\n\n    this.signalrConnection = new signalR.HubConnectionBuilder()\n      .withUrl(this.url + \"/hub\", {\n        accessTokenFactory: () => this.apiService.getActiveBearerToken(),\n        skipNegotiation: true,\n        transport: signalR.HttpTransportType.WebSockets,\n      })\n      .withHubProtocol(new signalRMsgPack.MessagePackHubProtocol() as signalR.IHubProtocol)\n      // .configureLogging(signalR.LogLevel.Trace)\n      .build();\n\n    this.signalrConnection.on(\"ReceiveMessage\", (data: any) =>\n      this.processNotification(new NotificationResponse(data))\n    );\n    // eslint-disable-next-line\n    this.signalrConnection.on(\"Heartbeat\", (data: any) => {\n      /*console.log('Heartbeat!');*/\n    });\n    this.signalrConnection.onclose(() => {\n      this.connected = false;\n      this.reconnect(true);\n    });\n    this.inited = true;\n    if (await this.isAuthedAndUnlocked()) {\n      await this.reconnect(false);\n    }\n  }\n\n  async updateConnection(sync = false): Promise<void> {\n    if (!this.inited) {\n      return;\n    }\n    try {\n      if (await this.isAuthedAndUnlocked()) {\n        await this.reconnect(sync);\n      } else {\n        await this.signalrConnection.stop();\n      }\n    } catch (e) {\n      this.logService.error(e.toString());\n    }\n  }\n\n  async reconnectFromActivity(): Promise<void> {\n    this.inactive = false;\n    if (this.inited && !this.connected) {\n      await this.reconnect(true);\n    }\n  }\n\n  async disconnectFromInactivity(): Promise<void> {\n    this.inactive = true;\n    if (this.inited && this.connected) {\n      await this.signalrConnection.stop();\n    }\n  }\n\n  private async processNotification(notification: NotificationResponse) {\n    const appId = await this.appIdService.getAppId();\n    if (notification == null || notification.contextId === appId) {\n      return;\n    }\n\n    const isAuthenticated = await this.stateService.getIsAuthenticated();\n    const payloadUserId = notification.payload.userId || notification.payload.UserId;\n    const myUserId = await this.stateService.getUserId();\n    if (isAuthenticated && payloadUserId != null && payloadUserId !== myUserId) {\n      return;\n    }\n\n    switch (notification.type) {\n      case NotificationType.SyncCipherCreate:\n      case NotificationType.SyncCipherUpdate:\n        await this.syncService.syncUpsertCipher(\n          notification.payload as SyncCipherNotification,\n          notification.type === NotificationType.SyncCipherUpdate\n        );\n        break;\n      case NotificationType.SyncCipherDelete:\n      case NotificationType.SyncLoginDelete:\n        await this.syncService.syncDeleteCipher(notification.payload as SyncCipherNotification);\n        break;\n      case NotificationType.SyncFolderCreate:\n      case NotificationType.SyncFolderUpdate:\n        await this.syncService.syncUpsertFolder(\n          notification.payload as SyncFolderNotification,\n          notification.type === NotificationType.SyncFolderUpdate\n        );\n        break;\n      case NotificationType.SyncFolderDelete:\n        await this.syncService.syncDeleteFolder(notification.payload as SyncFolderNotification);\n        break;\n      case NotificationType.SyncVault:\n      case NotificationType.SyncCiphers:\n      case NotificationType.SyncSettings:\n        if (isAuthenticated) {\n          await this.syncService.fullSync(false);\n        }\n        break;\n      case NotificationType.SyncOrgKeys:\n        if (isAuthenticated) {\n          await this.syncService.fullSync(true);\n          // Stop so a reconnect can be made\n          await this.signalrConnection.stop();\n        }\n        break;\n      case NotificationType.LogOut:\n        if (isAuthenticated) {\n          this.logoutCallback(true);\n        }\n        break;\n      case NotificationType.SyncSendCreate:\n      case NotificationType.SyncSendUpdate:\n        await this.syncService.syncUpsertSend(\n          notification.payload as SyncSendNotification,\n          notification.type === NotificationType.SyncSendUpdate\n        );\n        break;\n      case NotificationType.SyncSendDelete:\n        await this.syncService.syncDeleteSend(notification.payload as SyncSendNotification);\n        break;\n      default:\n        break;\n    }\n  }\n\n  private async reconnect(sync: boolean) {\n    if (this.reconnectTimer != null) {\n      clearTimeout(this.reconnectTimer);\n      this.reconnectTimer = null;\n    }\n    if (this.connected || !this.inited || this.inactive) {\n      return;\n    }\n    const authedAndUnlocked = await this.isAuthedAndUnlocked();\n    if (!authedAndUnlocked) {\n      return;\n    }\n\n    try {\n      await this.signalrConnection.start();\n      this.connected = true;\n      if (sync) {\n        await this.syncService.fullSync(false);\n      }\n    } catch (e) {\n      this.logService.error(e);\n    }\n\n    if (!this.connected) {\n      this.reconnectTimer = setTimeout(() => this.reconnect(sync), this.random(120000, 300000));\n    }\n  }\n\n  private async isAuthedAndUnlocked() {\n    const authStatus = await this.authService.getAuthStatus();\n    return authStatus >= AuthenticationStatus.Unlocked;\n  }\n\n  private random(min: number, max: number) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n}\n","import { OrganizationUserStatusType } from \"../../enums/organizationUserStatusType\";\nimport { OrganizationUserType } from \"../../enums/organizationUserType\";\nimport { ProductType } from \"../../enums/productType\";\nimport { PermissionsApi } from \"../api/permissionsApi\";\nimport { OrganizationData } from \"../data/organizationData\";\n\nexport class Organization {\n  id: string;\n  name: string;\n  status: OrganizationUserStatusType;\n  type: OrganizationUserType;\n  enabled: boolean;\n  usePolicies: boolean;\n  useGroups: boolean;\n  useDirectory: boolean;\n  useEvents: boolean;\n  useTotp: boolean;\n  use2fa: boolean;\n  useApi: boolean;\n  useSso: boolean;\n  useKeyConnector: boolean;\n  useScim: boolean;\n  useResetPassword: boolean;\n  selfHost: boolean;\n  usersGetPremium: boolean;\n  seats: number;\n  maxCollections: number;\n  maxStorageGb?: number;\n  ssoBound: boolean;\n  identifier: string;\n  permissions: PermissionsApi;\n  resetPasswordEnrolled: boolean;\n  userId: string;\n  hasPublicAndPrivateKeys: boolean;\n  providerId: string;\n  providerName: string;\n  isProviderUser: boolean;\n  familySponsorshipFriendlyName: string;\n  familySponsorshipAvailable: boolean;\n  planProductType: ProductType;\n  keyConnectorEnabled: boolean;\n  keyConnectorUrl: string;\n  familySponsorshipLastSyncDate?: Date;\n  familySponsorshipValidUntil?: Date;\n  familySponsorshipToDelete?: boolean;\n\n  constructor(obj?: OrganizationData) {\n    if (obj == null) {\n      return;\n    }\n\n    this.id = obj.id;\n    this.name = obj.name;\n    this.status = obj.status;\n    this.type = obj.type;\n    this.enabled = obj.enabled;\n    this.usePolicies = obj.usePolicies;\n    this.useGroups = obj.useGroups;\n    this.useDirectory = obj.useDirectory;\n    this.useEvents = obj.useEvents;\n    this.useTotp = obj.useTotp;\n    this.use2fa = obj.use2fa;\n    this.useApi = obj.useApi;\n    this.useSso = obj.useSso;\n    this.useKeyConnector = obj.useKeyConnector;\n    this.useScim = obj.useScim;\n    this.useResetPassword = obj.useResetPassword;\n    this.selfHost = obj.selfHost;\n    this.usersGetPremium = obj.usersGetPremium;\n    this.seats = obj.seats;\n    this.maxCollections = obj.maxCollections;\n    this.maxStorageGb = obj.maxStorageGb;\n    this.ssoBound = obj.ssoBound;\n    this.identifier = obj.identifier;\n    this.permissions = obj.permissions;\n    this.resetPasswordEnrolled = obj.resetPasswordEnrolled;\n    this.userId = obj.userId;\n    this.hasPublicAndPrivateKeys = obj.hasPublicAndPrivateKeys;\n    this.providerId = obj.providerId;\n    this.providerName = obj.providerName;\n    this.isProviderUser = obj.isProviderUser;\n    this.familySponsorshipFriendlyName = obj.familySponsorshipFriendlyName;\n    this.familySponsorshipAvailable = obj.familySponsorshipAvailable;\n    this.planProductType = obj.planProductType;\n    this.keyConnectorEnabled = obj.keyConnectorEnabled;\n    this.keyConnectorUrl = obj.keyConnectorUrl;\n    this.familySponsorshipLastSyncDate = obj.familySponsorshipLastSyncDate;\n    this.familySponsorshipValidUntil = obj.familySponsorshipValidUntil;\n    this.familySponsorshipToDelete = obj.familySponsorshipToDelete;\n  }\n\n  get canAccess() {\n    if (this.type === OrganizationUserType.Owner) {\n      return true;\n    }\n    return this.enabled && this.status === OrganizationUserStatusType.Confirmed;\n  }\n\n  get isManager() {\n    return (\n      this.type === OrganizationUserType.Manager ||\n      this.type === OrganizationUserType.Owner ||\n      this.type === OrganizationUserType.Admin\n    );\n  }\n\n  get isAdmin() {\n    return this.type === OrganizationUserType.Owner || this.type === OrganizationUserType.Admin;\n  }\n\n  get isOwner() {\n    return this.type === OrganizationUserType.Owner || this.isProviderUser;\n  }\n\n  get canAccessEventLogs() {\n    return (this.isAdmin || this.permissions.accessEventLogs) && this.useEvents;\n  }\n\n  get canAccessImportExport() {\n    return this.isAdmin || this.permissions.accessImportExport;\n  }\n\n  get canAccessReports() {\n    return this.isAdmin || this.permissions.accessReports;\n  }\n\n  get canCreateNewCollections() {\n    return (\n      this.isManager ||\n      (this.permissions.createNewCollections ?? this.permissions.manageAllCollections)\n    );\n  }\n\n  get canEditAnyCollection() {\n    return (\n      this.isAdmin || (this.permissions.editAnyCollection ?? this.permissions.manageAllCollections)\n    );\n  }\n\n  get canDeleteAnyCollection() {\n    return (\n      this.isAdmin ||\n      (this.permissions.deleteAnyCollection ?? this.permissions.manageAllCollections)\n    );\n  }\n\n  get canViewAllCollections() {\n    return this.canCreateNewCollections || this.canEditAnyCollection || this.canDeleteAnyCollection;\n  }\n\n  get canEditAssignedCollections() {\n    return (\n      this.isManager ||\n      (this.permissions.editAssignedCollections ?? this.permissions.manageAssignedCollections)\n    );\n  }\n\n  get canDeleteAssignedCollections() {\n    return (\n      this.isManager ||\n      (this.permissions.deleteAssignedCollections ?? this.permissions.manageAssignedCollections)\n    );\n  }\n\n  get canViewAssignedCollections() {\n    return this.canDeleteAssignedCollections || this.canEditAssignedCollections;\n  }\n\n  get canManageGroups() {\n    return (this.isAdmin || this.permissions.manageGroups) && this.useGroups;\n  }\n\n  get canManageSso() {\n    return (this.isAdmin || this.permissions.manageSso) && this.useSso;\n  }\n\n  get canManageScim() {\n    return (this.isAdmin || this.permissions.manageScim) && this.useScim;\n  }\n\n  get canManagePolicies() {\n    return (this.isAdmin || this.permissions.managePolicies) && this.usePolicies;\n  }\n\n  get canManageUsers() {\n    return this.isAdmin || this.permissions.manageUsers;\n  }\n\n  get canManageUsersPassword() {\n    return this.isAdmin || this.permissions.manageResetPassword;\n  }\n\n  get isExemptFromPolicies() {\n    return this.canManagePolicies;\n  }\n\n  get canManageBilling() {\n    return this.isOwner && (this.isProviderUser || !this.hasProvider);\n  }\n\n  get hasProvider() {\n    return this.providerId != null || this.providerName != null;\n  }\n}\n","import { OrganizationService as OrganizationServiceAbstraction } from \"../abstractions/organization.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { OrganizationData } from \"../models/data/organizationData\";\nimport { Organization } from \"../models/domain/organization\";\n\nexport class OrganizationService implements OrganizationServiceAbstraction {\n  constructor(private stateService: StateService) {}\n\n  async get(id: string): Promise<Organization> {\n    const organizations = await this.stateService.getOrganizations();\n    // eslint-disable-next-line\n    if (organizations == null || !organizations.hasOwnProperty(id)) {\n      return null;\n    }\n\n    return new Organization(organizations[id]);\n  }\n\n  async getByIdentifier(identifier: string): Promise<Organization> {\n    const organizations = await this.getAll();\n    if (organizations == null || organizations.length === 0) {\n      return null;\n    }\n\n    return organizations.find((o) => o.identifier === identifier);\n  }\n\n  async getAll(userId?: string): Promise<Organization[]> {\n    const organizations = await this.stateService.getOrganizations({ userId: userId });\n    const response: Organization[] = [];\n    for (const id in organizations) {\n      // eslint-disable-next-line\n      if (organizations.hasOwnProperty(id) && !organizations[id].isProviderUser) {\n        response.push(new Organization(organizations[id]));\n      }\n    }\n    const sortedResponse = response.sort((a, b) => a.name.localeCompare(b.name));\n    return sortedResponse;\n  }\n\n  async save(organizations: { [id: string]: OrganizationData }) {\n    return await this.stateService.setOrganizations(organizations);\n  }\n\n  async canManageSponsorships(): Promise<boolean> {\n    const orgs = await this.getAll();\n    return orgs.some(\n      (o) => o.familySponsorshipAvailable || o.familySponsorshipFriendlyName !== null\n    );\n  }\n\n  async hasOrganizations(userId?: string): Promise<boolean> {\n    const organizations = await this.getAll(userId);\n    return organizations.length > 0;\n  }\n}\n","export enum PolicyType {\n  TwoFactorAuthentication = 0, // Requires users to have 2fa enabled\n  MasterPassword = 1, // Sets minimum requirements for master password complexity\n  PasswordGenerator = 2, // Sets minimum requirements/default type for generated passwords/passphrases\n  SingleOrg = 3, // Allows users to only be apart of one organization\n  RequireSso = 4, // Requires users to authenticate with SSO\n  PersonalOwnership = 5, // Disables personal vault ownership for adding/cloning items\n  DisableSend = 6, // Disables the ability to create and edit Bitwarden Sends\n  SendOptions = 7, // Sets restrictions or defaults for Bitwarden Sends\n  ResetPassword = 8, // Allows orgs to use reset password : also can enable auto-enrollment during invite flow\n  MaximumVaultTimeout = 9, // Sets the maximum allowed vault timeout\n  DisablePersonalVaultExport = 10, // Disable personal vault export\n}\n","// EFF's Long Wordlist from https://www.eff.org/dice\nexport const EEFLongWordList = [\n  \"abacus\",\n  \"abdomen\",\n  \"abdominal\",\n  \"abide\",\n  \"abiding\",\n  \"ability\",\n  \"ablaze\",\n  \"able\",\n  \"abnormal\",\n  \"abrasion\",\n  \"abrasive\",\n  \"abreast\",\n  \"abridge\",\n  \"abroad\",\n  \"abruptly\",\n  \"absence\",\n  \"absentee\",\n  \"absently\",\n  \"absinthe\",\n  \"absolute\",\n  \"absolve\",\n  \"abstain\",\n  \"abstract\",\n  \"absurd\",\n  \"accent\",\n  \"acclaim\",\n  \"acclimate\",\n  \"accompany\",\n  \"account\",\n  \"accuracy\",\n  \"accurate\",\n  \"accustom\",\n  \"acetone\",\n  \"achiness\",\n  \"aching\",\n  \"acid\",\n  \"acorn\",\n  \"acquaint\",\n  \"acquire\",\n  \"acre\",\n  \"acrobat\",\n  \"acronym\",\n  \"acting\",\n  \"action\",\n  \"activate\",\n  \"activator\",\n  \"active\",\n  \"activism\",\n  \"activist\",\n  \"activity\",\n  \"actress\",\n  \"acts\",\n  \"acutely\",\n  \"acuteness\",\n  \"aeration\",\n  \"aerobics\",\n  \"aerosol\",\n  \"aerospace\",\n  \"afar\",\n  \"affair\",\n  \"affected\",\n  \"affecting\",\n  \"affection\",\n  \"affidavit\",\n  \"affiliate\",\n  \"affirm\",\n  \"affix\",\n  \"afflicted\",\n  \"affluent\",\n  \"afford\",\n  \"affront\",\n  \"aflame\",\n  \"afloat\",\n  \"aflutter\",\n  \"afoot\",\n  \"afraid\",\n  \"afterglow\",\n  \"afterlife\",\n  \"aftermath\",\n  \"aftermost\",\n  \"afternoon\",\n  \"aged\",\n  \"ageless\",\n  \"agency\",\n  \"agenda\",\n  \"agent\",\n  \"aggregate\",\n  \"aghast\",\n  \"agile\",\n  \"agility\",\n  \"aging\",\n  \"agnostic\",\n  \"agonize\",\n  \"agonizing\",\n  \"agony\",\n  \"agreeable\",\n  \"agreeably\",\n  \"agreed\",\n  \"agreeing\",\n  \"agreement\",\n  \"aground\",\n  \"ahead\",\n  \"ahoy\",\n  \"aide\",\n  \"aids\",\n  \"aim\",\n  \"ajar\",\n  \"alabaster\",\n  \"alarm\",\n  \"albatross\",\n  \"album\",\n  \"alfalfa\",\n  \"algebra\",\n  \"algorithm\",\n  \"alias\",\n  \"alibi\",\n  \"alienable\",\n  \"alienate\",\n  \"aliens\",\n  \"alike\",\n  \"alive\",\n  \"alkaline\",\n  \"alkalize\",\n  \"almanac\",\n  \"almighty\",\n  \"almost\",\n  \"aloe\",\n  \"aloft\",\n  \"aloha\",\n  \"alone\",\n  \"alongside\",\n  \"aloof\",\n  \"alphabet\",\n  \"alright\",\n  \"although\",\n  \"altitude\",\n  \"alto\",\n  \"aluminum\",\n  \"alumni\",\n  \"always\",\n  \"amaretto\",\n  \"amaze\",\n  \"amazingly\",\n  \"amber\",\n  \"ambiance\",\n  \"ambiguity\",\n  \"ambiguous\",\n  \"ambition\",\n  \"ambitious\",\n  \"ambulance\",\n  \"ambush\",\n  \"amendable\",\n  \"amendment\",\n  \"amends\",\n  \"amenity\",\n  \"amiable\",\n  \"amicably\",\n  \"amid\",\n  \"amigo\",\n  \"amino\",\n  \"amiss\",\n  \"ammonia\",\n  \"ammonium\",\n  \"amnesty\",\n  \"amniotic\",\n  \"among\",\n  \"amount\",\n  \"amperage\",\n  \"ample\",\n  \"amplifier\",\n  \"amplify\",\n  \"amply\",\n  \"amuck\",\n  \"amulet\",\n  \"amusable\",\n  \"amused\",\n  \"amusement\",\n  \"amuser\",\n  \"amusing\",\n  \"anaconda\",\n  \"anaerobic\",\n  \"anagram\",\n  \"anatomist\",\n  \"anatomy\",\n  \"anchor\",\n  \"anchovy\",\n  \"ancient\",\n  \"android\",\n  \"anemia\",\n  \"anemic\",\n  \"aneurism\",\n  \"anew\",\n  \"angelfish\",\n  \"angelic\",\n  \"anger\",\n  \"angled\",\n  \"angler\",\n  \"angles\",\n  \"angling\",\n  \"angrily\",\n  \"angriness\",\n  \"anguished\",\n  \"angular\",\n  \"animal\",\n  \"animate\",\n  \"animating\",\n  \"animation\",\n  \"animator\",\n  \"anime\",\n  \"animosity\",\n  \"ankle\",\n  \"annex\",\n  \"annotate\",\n  \"announcer\",\n  \"annoying\",\n  \"annually\",\n  \"annuity\",\n  \"anointer\",\n  \"another\",\n  \"answering\",\n  \"antacid\",\n  \"antarctic\",\n  \"anteater\",\n  \"antelope\",\n  \"antennae\",\n  \"anthem\",\n  \"anthill\",\n  \"anthology\",\n  \"antibody\",\n  \"antics\",\n  \"antidote\",\n  \"antihero\",\n  \"antiquely\",\n  \"antiques\",\n  \"antiquity\",\n  \"antirust\",\n  \"antitoxic\",\n  \"antitrust\",\n  \"antiviral\",\n  \"antivirus\",\n  \"antler\",\n  \"antonym\",\n  \"antsy\",\n  \"anvil\",\n  \"anybody\",\n  \"anyhow\",\n  \"anymore\",\n  \"anyone\",\n  \"anyplace\",\n  \"anything\",\n  \"anytime\",\n  \"anyway\",\n  \"anywhere\",\n  \"aorta\",\n  \"apache\",\n  \"apostle\",\n  \"appealing\",\n  \"appear\",\n  \"appease\",\n  \"appeasing\",\n  \"appendage\",\n  \"appendix\",\n  \"appetite\",\n  \"appetizer\",\n  \"applaud\",\n  \"applause\",\n  \"apple\",\n  \"appliance\",\n  \"applicant\",\n  \"applied\",\n  \"apply\",\n  \"appointee\",\n  \"appraisal\",\n  \"appraiser\",\n  \"apprehend\",\n  \"approach\",\n  \"approval\",\n  \"approve\",\n  \"apricot\",\n  \"april\",\n  \"apron\",\n  \"aptitude\",\n  \"aptly\",\n  \"aqua\",\n  \"aqueduct\",\n  \"arbitrary\",\n  \"arbitrate\",\n  \"ardently\",\n  \"area\",\n  \"arena\",\n  \"arguable\",\n  \"arguably\",\n  \"argue\",\n  \"arise\",\n  \"armadillo\",\n  \"armband\",\n  \"armchair\",\n  \"armed\",\n  \"armful\",\n  \"armhole\",\n  \"arming\",\n  \"armless\",\n  \"armoire\",\n  \"armored\",\n  \"armory\",\n  \"armrest\",\n  \"army\",\n  \"aroma\",\n  \"arose\",\n  \"around\",\n  \"arousal\",\n  \"arrange\",\n  \"array\",\n  \"arrest\",\n  \"arrival\",\n  \"arrive\",\n  \"arrogance\",\n  \"arrogant\",\n  \"arson\",\n  \"art\",\n  \"ascend\",\n  \"ascension\",\n  \"ascent\",\n  \"ascertain\",\n  \"ashamed\",\n  \"ashen\",\n  \"ashes\",\n  \"ashy\",\n  \"aside\",\n  \"askew\",\n  \"asleep\",\n  \"asparagus\",\n  \"aspect\",\n  \"aspirate\",\n  \"aspire\",\n  \"aspirin\",\n  \"astonish\",\n  \"astound\",\n  \"astride\",\n  \"astrology\",\n  \"astronaut\",\n  \"astronomy\",\n  \"astute\",\n  \"atlantic\",\n  \"atlas\",\n  \"atom\",\n  \"atonable\",\n  \"atop\",\n  \"atrium\",\n  \"atrocious\",\n  \"atrophy\",\n  \"attach\",\n  \"attain\",\n  \"attempt\",\n  \"attendant\",\n  \"attendee\",\n  \"attention\",\n  \"attentive\",\n  \"attest\",\n  \"attic\",\n  \"attire\",\n  \"attitude\",\n  \"attractor\",\n  \"attribute\",\n  \"atypical\",\n  \"auction\",\n  \"audacious\",\n  \"audacity\",\n  \"audible\",\n  \"audibly\",\n  \"audience\",\n  \"audio\",\n  \"audition\",\n  \"augmented\",\n  \"august\",\n  \"authentic\",\n  \"author\",\n  \"autism\",\n  \"autistic\",\n  \"autograph\",\n  \"automaker\",\n  \"automated\",\n  \"automatic\",\n  \"autopilot\",\n  \"available\",\n  \"avalanche\",\n  \"avatar\",\n  \"avenge\",\n  \"avenging\",\n  \"avenue\",\n  \"average\",\n  \"aversion\",\n  \"avert\",\n  \"aviation\",\n  \"aviator\",\n  \"avid\",\n  \"avoid\",\n  \"await\",\n  \"awaken\",\n  \"award\",\n  \"aware\",\n  \"awhile\",\n  \"awkward\",\n  \"awning\",\n  \"awoke\",\n  \"awry\",\n  \"axis\",\n  \"babble\",\n  \"babbling\",\n  \"babied\",\n  \"baboon\",\n  \"backache\",\n  \"backboard\",\n  \"backboned\",\n  \"backdrop\",\n  \"backed\",\n  \"backer\",\n  \"backfield\",\n  \"backfire\",\n  \"backhand\",\n  \"backing\",\n  \"backlands\",\n  \"backlash\",\n  \"backless\",\n  \"backlight\",\n  \"backlit\",\n  \"backlog\",\n  \"backpack\",\n  \"backpedal\",\n  \"backrest\",\n  \"backroom\",\n  \"backshift\",\n  \"backside\",\n  \"backslid\",\n  \"backspace\",\n  \"backspin\",\n  \"backstab\",\n  \"backstage\",\n  \"backtalk\",\n  \"backtrack\",\n  \"backup\",\n  \"backward\",\n  \"backwash\",\n  \"backwater\",\n  \"backyard\",\n  \"bacon\",\n  \"bacteria\",\n  \"bacterium\",\n  \"badass\",\n  \"badge\",\n  \"badland\",\n  \"badly\",\n  \"badness\",\n  \"baffle\",\n  \"baffling\",\n  \"bagel\",\n  \"bagful\",\n  \"baggage\",\n  \"bagged\",\n  \"baggie\",\n  \"bagginess\",\n  \"bagging\",\n  \"baggy\",\n  \"bagpipe\",\n  \"baguette\",\n  \"baked\",\n  \"bakery\",\n  \"bakeshop\",\n  \"baking\",\n  \"balance\",\n  \"balancing\",\n  \"balcony\",\n  \"balmy\",\n  \"balsamic\",\n  \"bamboo\",\n  \"banana\",\n  \"banish\",\n  \"banister\",\n  \"banjo\",\n  \"bankable\",\n  \"bankbook\",\n  \"banked\",\n  \"banker\",\n  \"banking\",\n  \"banknote\",\n  \"bankroll\",\n  \"banner\",\n  \"bannister\",\n  \"banshee\",\n  \"banter\",\n  \"barbecue\",\n  \"barbed\",\n  \"barbell\",\n  \"barber\",\n  \"barcode\",\n  \"barge\",\n  \"bargraph\",\n  \"barista\",\n  \"baritone\",\n  \"barley\",\n  \"barmaid\",\n  \"barman\",\n  \"barn\",\n  \"barometer\",\n  \"barrack\",\n  \"barracuda\",\n  \"barrel\",\n  \"barrette\",\n  \"barricade\",\n  \"barrier\",\n  \"barstool\",\n  \"bartender\",\n  \"barterer\",\n  \"bash\",\n  \"basically\",\n  \"basics\",\n  \"basil\",\n  \"basin\",\n  \"basis\",\n  \"basket\",\n  \"batboy\",\n  \"batch\",\n  \"bath\",\n  \"baton\",\n  \"bats\",\n  \"battalion\",\n  \"battered\",\n  \"battering\",\n  \"battery\",\n  \"batting\",\n  \"battle\",\n  \"bauble\",\n  \"bazooka\",\n  \"blabber\",\n  \"bladder\",\n  \"blade\",\n  \"blah\",\n  \"blame\",\n  \"blaming\",\n  \"blanching\",\n  \"blandness\",\n  \"blank\",\n  \"blaspheme\",\n  \"blasphemy\",\n  \"blast\",\n  \"blatancy\",\n  \"blatantly\",\n  \"blazer\",\n  \"blazing\",\n  \"bleach\",\n  \"bleak\",\n  \"bleep\",\n  \"blemish\",\n  \"blend\",\n  \"bless\",\n  \"blighted\",\n  \"blimp\",\n  \"bling\",\n  \"blinked\",\n  \"blinker\",\n  \"blinking\",\n  \"blinks\",\n  \"blip\",\n  \"blissful\",\n  \"blitz\",\n  \"blizzard\",\n  \"bloated\",\n  \"bloating\",\n  \"blob\",\n  \"blog\",\n  \"bloomers\",\n  \"blooming\",\n  \"blooper\",\n  \"blot\",\n  \"blouse\",\n  \"blubber\",\n  \"bluff\",\n  \"bluish\",\n  \"blunderer\",\n  \"blunt\",\n  \"blurb\",\n  \"blurred\",\n  \"blurry\",\n  \"blurt\",\n  \"blush\",\n  \"blustery\",\n  \"boaster\",\n  \"boastful\",\n  \"boasting\",\n  \"boat\",\n  \"bobbed\",\n  \"bobbing\",\n  \"bobble\",\n  \"bobcat\",\n  \"bobsled\",\n  \"bobtail\",\n  \"bodacious\",\n  \"body\",\n  \"bogged\",\n  \"boggle\",\n  \"bogus\",\n  \"boil\",\n  \"bok\",\n  \"bolster\",\n  \"bolt\",\n  \"bonanza\",\n  \"bonded\",\n  \"bonding\",\n  \"bondless\",\n  \"boned\",\n  \"bonehead\",\n  \"boneless\",\n  \"bonelike\",\n  \"boney\",\n  \"bonfire\",\n  \"bonnet\",\n  \"bonsai\",\n  \"bonus\",\n  \"bony\",\n  \"boogeyman\",\n  \"boogieman\",\n  \"book\",\n  \"boondocks\",\n  \"booted\",\n  \"booth\",\n  \"bootie\",\n  \"booting\",\n  \"bootlace\",\n  \"bootleg\",\n  \"boots\",\n  \"boozy\",\n  \"borax\",\n  \"boring\",\n  \"borough\",\n  \"borrower\",\n  \"borrowing\",\n  \"boss\",\n  \"botanical\",\n  \"botanist\",\n  \"botany\",\n  \"botch\",\n  \"both\",\n  \"bottle\",\n  \"bottling\",\n  \"bottom\",\n  \"bounce\",\n  \"bouncing\",\n  \"bouncy\",\n  \"bounding\",\n  \"boundless\",\n  \"bountiful\",\n  \"bovine\",\n  \"boxcar\",\n  \"boxer\",\n  \"boxing\",\n  \"boxlike\",\n  \"boxy\",\n  \"breach\",\n  \"breath\",\n  \"breeches\",\n  \"breeching\",\n  \"breeder\",\n  \"breeding\",\n  \"breeze\",\n  \"breezy\",\n  \"brethren\",\n  \"brewery\",\n  \"brewing\",\n  \"briar\",\n  \"bribe\",\n  \"brick\",\n  \"bride\",\n  \"bridged\",\n  \"brigade\",\n  \"bright\",\n  \"brilliant\",\n  \"brim\",\n  \"bring\",\n  \"brink\",\n  \"brisket\",\n  \"briskly\",\n  \"briskness\",\n  \"bristle\",\n  \"brittle\",\n  \"broadband\",\n  \"broadcast\",\n  \"broaden\",\n  \"broadly\",\n  \"broadness\",\n  \"broadside\",\n  \"broadways\",\n  \"broiler\",\n  \"broiling\",\n  \"broken\",\n  \"broker\",\n  \"bronchial\",\n  \"bronco\",\n  \"bronze\",\n  \"bronzing\",\n  \"brook\",\n  \"broom\",\n  \"brought\",\n  \"browbeat\",\n  \"brownnose\",\n  \"browse\",\n  \"browsing\",\n  \"bruising\",\n  \"brunch\",\n  \"brunette\",\n  \"brunt\",\n  \"brush\",\n  \"brussels\",\n  \"brute\",\n  \"brutishly\",\n  \"bubble\",\n  \"bubbling\",\n  \"bubbly\",\n  \"buccaneer\",\n  \"bucked\",\n  \"bucket\",\n  \"buckle\",\n  \"buckshot\",\n  \"buckskin\",\n  \"bucktooth\",\n  \"buckwheat\",\n  \"buddhism\",\n  \"buddhist\",\n  \"budding\",\n  \"buddy\",\n  \"budget\",\n  \"buffalo\",\n  \"buffed\",\n  \"buffer\",\n  \"buffing\",\n  \"buffoon\",\n  \"buggy\",\n  \"bulb\",\n  \"bulge\",\n  \"bulginess\",\n  \"bulgur\",\n  \"bulk\",\n  \"bulldog\",\n  \"bulldozer\",\n  \"bullfight\",\n  \"bullfrog\",\n  \"bullhorn\",\n  \"bullion\",\n  \"bullish\",\n  \"bullpen\",\n  \"bullring\",\n  \"bullseye\",\n  \"bullwhip\",\n  \"bully\",\n  \"bunch\",\n  \"bundle\",\n  \"bungee\",\n  \"bunion\",\n  \"bunkbed\",\n  \"bunkhouse\",\n  \"bunkmate\",\n  \"bunny\",\n  \"bunt\",\n  \"busboy\",\n  \"bush\",\n  \"busily\",\n  \"busload\",\n  \"bust\",\n  \"busybody\",\n  \"buzz\",\n  \"cabana\",\n  \"cabbage\",\n  \"cabbie\",\n  \"cabdriver\",\n  \"cable\",\n  \"caboose\",\n  \"cache\",\n  \"cackle\",\n  \"cacti\",\n  \"cactus\",\n  \"caddie\",\n  \"caddy\",\n  \"cadet\",\n  \"cadillac\",\n  \"cadmium\",\n  \"cage\",\n  \"cahoots\",\n  \"cake\",\n  \"calamari\",\n  \"calamity\",\n  \"calcium\",\n  \"calculate\",\n  \"calculus\",\n  \"caliber\",\n  \"calibrate\",\n  \"calm\",\n  \"caloric\",\n  \"calorie\",\n  \"calzone\",\n  \"camcorder\",\n  \"cameo\",\n  \"camera\",\n  \"camisole\",\n  \"camper\",\n  \"campfire\",\n  \"camping\",\n  \"campsite\",\n  \"campus\",\n  \"canal\",\n  \"canary\",\n  \"cancel\",\n  \"candied\",\n  \"candle\",\n  \"candy\",\n  \"cane\",\n  \"canine\",\n  \"canister\",\n  \"cannabis\",\n  \"canned\",\n  \"canning\",\n  \"cannon\",\n  \"cannot\",\n  \"canola\",\n  \"canon\",\n  \"canopener\",\n  \"canopy\",\n  \"canteen\",\n  \"canyon\",\n  \"capable\",\n  \"capably\",\n  \"capacity\",\n  \"cape\",\n  \"capillary\",\n  \"capital\",\n  \"capitol\",\n  \"capped\",\n  \"capricorn\",\n  \"capsize\",\n  \"capsule\",\n  \"caption\",\n  \"captivate\",\n  \"captive\",\n  \"captivity\",\n  \"capture\",\n  \"caramel\",\n  \"carat\",\n  \"caravan\",\n  \"carbon\",\n  \"cardboard\",\n  \"carded\",\n  \"cardiac\",\n  \"cardigan\",\n  \"cardinal\",\n  \"cardstock\",\n  \"carefully\",\n  \"caregiver\",\n  \"careless\",\n  \"caress\",\n  \"caretaker\",\n  \"cargo\",\n  \"caring\",\n  \"carless\",\n  \"carload\",\n  \"carmaker\",\n  \"carnage\",\n  \"carnation\",\n  \"carnival\",\n  \"carnivore\",\n  \"carol\",\n  \"carpenter\",\n  \"carpentry\",\n  \"carpool\",\n  \"carport\",\n  \"carried\",\n  \"carrot\",\n  \"carrousel\",\n  \"carry\",\n  \"cartel\",\n  \"cartload\",\n  \"carton\",\n  \"cartoon\",\n  \"cartridge\",\n  \"cartwheel\",\n  \"carve\",\n  \"carving\",\n  \"carwash\",\n  \"cascade\",\n  \"case\",\n  \"cash\",\n  \"casing\",\n  \"casino\",\n  \"casket\",\n  \"cassette\",\n  \"casually\",\n  \"casualty\",\n  \"catacomb\",\n  \"catalog\",\n  \"catalyst\",\n  \"catalyze\",\n  \"catapult\",\n  \"cataract\",\n  \"catatonic\",\n  \"catcall\",\n  \"catchable\",\n  \"catcher\",\n  \"catching\",\n  \"catchy\",\n  \"caterer\",\n  \"catering\",\n  \"catfight\",\n  \"catfish\",\n  \"cathedral\",\n  \"cathouse\",\n  \"catlike\",\n  \"catnap\",\n  \"catnip\",\n  \"catsup\",\n  \"cattail\",\n  \"cattishly\",\n  \"cattle\",\n  \"catty\",\n  \"catwalk\",\n  \"caucasian\",\n  \"caucus\",\n  \"causal\",\n  \"causation\",\n  \"cause\",\n  \"causing\",\n  \"cauterize\",\n  \"caution\",\n  \"cautious\",\n  \"cavalier\",\n  \"cavalry\",\n  \"caviar\",\n  \"cavity\",\n  \"cedar\",\n  \"celery\",\n  \"celestial\",\n  \"celibacy\",\n  \"celibate\",\n  \"celtic\",\n  \"cement\",\n  \"census\",\n  \"ceramics\",\n  \"ceremony\",\n  \"certainly\",\n  \"certainty\",\n  \"certified\",\n  \"certify\",\n  \"cesarean\",\n  \"cesspool\",\n  \"chafe\",\n  \"chaffing\",\n  \"chain\",\n  \"chair\",\n  \"chalice\",\n  \"challenge\",\n  \"chamber\",\n  \"chamomile\",\n  \"champion\",\n  \"chance\",\n  \"change\",\n  \"channel\",\n  \"chant\",\n  \"chaos\",\n  \"chaperone\",\n  \"chaplain\",\n  \"chapped\",\n  \"chaps\",\n  \"chapter\",\n  \"character\",\n  \"charbroil\",\n  \"charcoal\",\n  \"charger\",\n  \"charging\",\n  \"chariot\",\n  \"charity\",\n  \"charm\",\n  \"charred\",\n  \"charter\",\n  \"charting\",\n  \"chase\",\n  \"chasing\",\n  \"chaste\",\n  \"chastise\",\n  \"chastity\",\n  \"chatroom\",\n  \"chatter\",\n  \"chatting\",\n  \"chatty\",\n  \"cheating\",\n  \"cheddar\",\n  \"cheek\",\n  \"cheer\",\n  \"cheese\",\n  \"cheesy\",\n  \"chef\",\n  \"chemicals\",\n  \"chemist\",\n  \"chemo\",\n  \"cherisher\",\n  \"cherub\",\n  \"chess\",\n  \"chest\",\n  \"chevron\",\n  \"chevy\",\n  \"chewable\",\n  \"chewer\",\n  \"chewing\",\n  \"chewy\",\n  \"chief\",\n  \"chihuahua\",\n  \"childcare\",\n  \"childhood\",\n  \"childish\",\n  \"childless\",\n  \"childlike\",\n  \"chili\",\n  \"chill\",\n  \"chimp\",\n  \"chip\",\n  \"chirping\",\n  \"chirpy\",\n  \"chitchat\",\n  \"chivalry\",\n  \"chive\",\n  \"chloride\",\n  \"chlorine\",\n  \"choice\",\n  \"chokehold\",\n  \"choking\",\n  \"chomp\",\n  \"chooser\",\n  \"choosing\",\n  \"choosy\",\n  \"chop\",\n  \"chosen\",\n  \"chowder\",\n  \"chowtime\",\n  \"chrome\",\n  \"chubby\",\n  \"chuck\",\n  \"chug\",\n  \"chummy\",\n  \"chump\",\n  \"chunk\",\n  \"churn\",\n  \"chute\",\n  \"cider\",\n  \"cilantro\",\n  \"cinch\",\n  \"cinema\",\n  \"cinnamon\",\n  \"circle\",\n  \"circling\",\n  \"circular\",\n  \"circulate\",\n  \"circus\",\n  \"citable\",\n  \"citadel\",\n  \"citation\",\n  \"citizen\",\n  \"citric\",\n  \"citrus\",\n  \"city\",\n  \"civic\",\n  \"civil\",\n  \"clad\",\n  \"claim\",\n  \"clambake\",\n  \"clammy\",\n  \"clamor\",\n  \"clamp\",\n  \"clamshell\",\n  \"clang\",\n  \"clanking\",\n  \"clapped\",\n  \"clapper\",\n  \"clapping\",\n  \"clarify\",\n  \"clarinet\",\n  \"clarity\",\n  \"clash\",\n  \"clasp\",\n  \"class\",\n  \"clatter\",\n  \"clause\",\n  \"clavicle\",\n  \"claw\",\n  \"clay\",\n  \"clean\",\n  \"clear\",\n  \"cleat\",\n  \"cleaver\",\n  \"cleft\",\n  \"clench\",\n  \"clergyman\",\n  \"clerical\",\n  \"clerk\",\n  \"clever\",\n  \"clicker\",\n  \"client\",\n  \"climate\",\n  \"climatic\",\n  \"cling\",\n  \"clinic\",\n  \"clinking\",\n  \"clip\",\n  \"clique\",\n  \"cloak\",\n  \"clobber\",\n  \"clock\",\n  \"clone\",\n  \"cloning\",\n  \"closable\",\n  \"closure\",\n  \"clothes\",\n  \"clothing\",\n  \"cloud\",\n  \"clover\",\n  \"clubbed\",\n  \"clubbing\",\n  \"clubhouse\",\n  \"clump\",\n  \"clumsily\",\n  \"clumsy\",\n  \"clunky\",\n  \"clustered\",\n  \"clutch\",\n  \"clutter\",\n  \"coach\",\n  \"coagulant\",\n  \"coastal\",\n  \"coaster\",\n  \"coasting\",\n  \"coastland\",\n  \"coastline\",\n  \"coat\",\n  \"coauthor\",\n  \"cobalt\",\n  \"cobbler\",\n  \"cobweb\",\n  \"cocoa\",\n  \"coconut\",\n  \"cod\",\n  \"coeditor\",\n  \"coerce\",\n  \"coexist\",\n  \"coffee\",\n  \"cofounder\",\n  \"cognition\",\n  \"cognitive\",\n  \"cogwheel\",\n  \"coherence\",\n  \"coherent\",\n  \"cohesive\",\n  \"coil\",\n  \"coke\",\n  \"cola\",\n  \"cold\",\n  \"coleslaw\",\n  \"coliseum\",\n  \"collage\",\n  \"collapse\",\n  \"collar\",\n  \"collected\",\n  \"collector\",\n  \"collide\",\n  \"collie\",\n  \"collision\",\n  \"colonial\",\n  \"colonist\",\n  \"colonize\",\n  \"colony\",\n  \"colossal\",\n  \"colt\",\n  \"coma\",\n  \"come\",\n  \"comfort\",\n  \"comfy\",\n  \"comic\",\n  \"coming\",\n  \"comma\",\n  \"commence\",\n  \"commend\",\n  \"comment\",\n  \"commerce\",\n  \"commode\",\n  \"commodity\",\n  \"commodore\",\n  \"common\",\n  \"commotion\",\n  \"commute\",\n  \"commuting\",\n  \"compacted\",\n  \"compacter\",\n  \"compactly\",\n  \"compactor\",\n  \"companion\",\n  \"company\",\n  \"compare\",\n  \"compel\",\n  \"compile\",\n  \"comply\",\n  \"component\",\n  \"composed\",\n  \"composer\",\n  \"composite\",\n  \"compost\",\n  \"composure\",\n  \"compound\",\n  \"compress\",\n  \"comprised\",\n  \"computer\",\n  \"computing\",\n  \"comrade\",\n  \"concave\",\n  \"conceal\",\n  \"conceded\",\n  \"concept\",\n  \"concerned\",\n  \"concert\",\n  \"conch\",\n  \"concierge\",\n  \"concise\",\n  \"conclude\",\n  \"concrete\",\n  \"concur\",\n  \"condense\",\n  \"condiment\",\n  \"condition\",\n  \"condone\",\n  \"conducive\",\n  \"conductor\",\n  \"conduit\",\n  \"cone\",\n  \"confess\",\n  \"confetti\",\n  \"confidant\",\n  \"confident\",\n  \"confider\",\n  \"confiding\",\n  \"configure\",\n  \"confined\",\n  \"confining\",\n  \"confirm\",\n  \"conflict\",\n  \"conform\",\n  \"confound\",\n  \"confront\",\n  \"confused\",\n  \"confusing\",\n  \"confusion\",\n  \"congenial\",\n  \"congested\",\n  \"congrats\",\n  \"congress\",\n  \"conical\",\n  \"conjoined\",\n  \"conjure\",\n  \"conjuror\",\n  \"connected\",\n  \"connector\",\n  \"consensus\",\n  \"consent\",\n  \"console\",\n  \"consoling\",\n  \"consonant\",\n  \"constable\",\n  \"constant\",\n  \"constrain\",\n  \"constrict\",\n  \"construct\",\n  \"consult\",\n  \"consumer\",\n  \"consuming\",\n  \"contact\",\n  \"container\",\n  \"contempt\",\n  \"contend\",\n  \"contented\",\n  \"contently\",\n  \"contents\",\n  \"contest\",\n  \"context\",\n  \"contort\",\n  \"contour\",\n  \"contrite\",\n  \"control\",\n  \"contusion\",\n  \"convene\",\n  \"convent\",\n  \"copartner\",\n  \"cope\",\n  \"copied\",\n  \"copier\",\n  \"copilot\",\n  \"coping\",\n  \"copious\",\n  \"copper\",\n  \"copy\",\n  \"coral\",\n  \"cork\",\n  \"cornball\",\n  \"cornbread\",\n  \"corncob\",\n  \"cornea\",\n  \"corned\",\n  \"corner\",\n  \"cornfield\",\n  \"cornflake\",\n  \"cornhusk\",\n  \"cornmeal\",\n  \"cornstalk\",\n  \"corny\",\n  \"coronary\",\n  \"coroner\",\n  \"corporal\",\n  \"corporate\",\n  \"corral\",\n  \"correct\",\n  \"corridor\",\n  \"corrode\",\n  \"corroding\",\n  \"corrosive\",\n  \"corsage\",\n  \"corset\",\n  \"cortex\",\n  \"cosigner\",\n  \"cosmetics\",\n  \"cosmic\",\n  \"cosmos\",\n  \"cosponsor\",\n  \"cost\",\n  \"cottage\",\n  \"cotton\",\n  \"couch\",\n  \"cough\",\n  \"could\",\n  \"countable\",\n  \"countdown\",\n  \"counting\",\n  \"countless\",\n  \"country\",\n  \"county\",\n  \"courier\",\n  \"covenant\",\n  \"cover\",\n  \"coveted\",\n  \"coveting\",\n  \"coyness\",\n  \"cozily\",\n  \"coziness\",\n  \"cozy\",\n  \"crabbing\",\n  \"crabgrass\",\n  \"crablike\",\n  \"crabmeat\",\n  \"cradle\",\n  \"cradling\",\n  \"crafter\",\n  \"craftily\",\n  \"craftsman\",\n  \"craftwork\",\n  \"crafty\",\n  \"cramp\",\n  \"cranberry\",\n  \"crane\",\n  \"cranial\",\n  \"cranium\",\n  \"crank\",\n  \"crate\",\n  \"crave\",\n  \"craving\",\n  \"crawfish\",\n  \"crawlers\",\n  \"crawling\",\n  \"crayfish\",\n  \"crayon\",\n  \"crazed\",\n  \"crazily\",\n  \"craziness\",\n  \"crazy\",\n  \"creamed\",\n  \"creamer\",\n  \"creamlike\",\n  \"crease\",\n  \"creasing\",\n  \"creatable\",\n  \"create\",\n  \"creation\",\n  \"creative\",\n  \"creature\",\n  \"credible\",\n  \"credibly\",\n  \"credit\",\n  \"creed\",\n  \"creme\",\n  \"creole\",\n  \"crepe\",\n  \"crept\",\n  \"crescent\",\n  \"crested\",\n  \"cresting\",\n  \"crestless\",\n  \"crevice\",\n  \"crewless\",\n  \"crewman\",\n  \"crewmate\",\n  \"crib\",\n  \"cricket\",\n  \"cried\",\n  \"crier\",\n  \"crimp\",\n  \"crimson\",\n  \"cringe\",\n  \"cringing\",\n  \"crinkle\",\n  \"crinkly\",\n  \"crisped\",\n  \"crisping\",\n  \"crisply\",\n  \"crispness\",\n  \"crispy\",\n  \"criteria\",\n  \"critter\",\n  \"croak\",\n  \"crock\",\n  \"crook\",\n  \"croon\",\n  \"crop\",\n  \"cross\",\n  \"crouch\",\n  \"crouton\",\n  \"crowbar\",\n  \"crowd\",\n  \"crown\",\n  \"crucial\",\n  \"crudely\",\n  \"crudeness\",\n  \"cruelly\",\n  \"cruelness\",\n  \"cruelty\",\n  \"crumb\",\n  \"crummiest\",\n  \"crummy\",\n  \"crumpet\",\n  \"crumpled\",\n  \"cruncher\",\n  \"crunching\",\n  \"crunchy\",\n  \"crusader\",\n  \"crushable\",\n  \"crushed\",\n  \"crusher\",\n  \"crushing\",\n  \"crust\",\n  \"crux\",\n  \"crying\",\n  \"cryptic\",\n  \"crystal\",\n  \"cubbyhole\",\n  \"cube\",\n  \"cubical\",\n  \"cubicle\",\n  \"cucumber\",\n  \"cuddle\",\n  \"cuddly\",\n  \"cufflink\",\n  \"culinary\",\n  \"culminate\",\n  \"culpable\",\n  \"culprit\",\n  \"cultivate\",\n  \"cultural\",\n  \"culture\",\n  \"cupbearer\",\n  \"cupcake\",\n  \"cupid\",\n  \"cupped\",\n  \"cupping\",\n  \"curable\",\n  \"curator\",\n  \"curdle\",\n  \"cure\",\n  \"curfew\",\n  \"curing\",\n  \"curled\",\n  \"curler\",\n  \"curliness\",\n  \"curling\",\n  \"curly\",\n  \"curry\",\n  \"curse\",\n  \"cursive\",\n  \"cursor\",\n  \"curtain\",\n  \"curtly\",\n  \"curtsy\",\n  \"curvature\",\n  \"curve\",\n  \"curvy\",\n  \"cushy\",\n  \"cusp\",\n  \"cussed\",\n  \"custard\",\n  \"custodian\",\n  \"custody\",\n  \"customary\",\n  \"customer\",\n  \"customize\",\n  \"customs\",\n  \"cut\",\n  \"cycle\",\n  \"cyclic\",\n  \"cycling\",\n  \"cyclist\",\n  \"cylinder\",\n  \"cymbal\",\n  \"cytoplasm\",\n  \"cytoplast\",\n  \"dab\",\n  \"dad\",\n  \"daffodil\",\n  \"dagger\",\n  \"daily\",\n  \"daintily\",\n  \"dainty\",\n  \"dairy\",\n  \"daisy\",\n  \"dallying\",\n  \"dance\",\n  \"dancing\",\n  \"dandelion\",\n  \"dander\",\n  \"dandruff\",\n  \"dandy\",\n  \"danger\",\n  \"dangle\",\n  \"dangling\",\n  \"daredevil\",\n  \"dares\",\n  \"daringly\",\n  \"darkened\",\n  \"darkening\",\n  \"darkish\",\n  \"darkness\",\n  \"darkroom\",\n  \"darling\",\n  \"darn\",\n  \"dart\",\n  \"darwinism\",\n  \"dash\",\n  \"dastardly\",\n  \"data\",\n  \"datebook\",\n  \"dating\",\n  \"daughter\",\n  \"daunting\",\n  \"dawdler\",\n  \"dawn\",\n  \"daybed\",\n  \"daybreak\",\n  \"daycare\",\n  \"daydream\",\n  \"daylight\",\n  \"daylong\",\n  \"dayroom\",\n  \"daytime\",\n  \"dazzler\",\n  \"dazzling\",\n  \"deacon\",\n  \"deafening\",\n  \"deafness\",\n  \"dealer\",\n  \"dealing\",\n  \"dealmaker\",\n  \"dealt\",\n  \"dean\",\n  \"debatable\",\n  \"debate\",\n  \"debating\",\n  \"debit\",\n  \"debrief\",\n  \"debtless\",\n  \"debtor\",\n  \"debug\",\n  \"debunk\",\n  \"decade\",\n  \"decaf\",\n  \"decal\",\n  \"decathlon\",\n  \"decay\",\n  \"deceased\",\n  \"deceit\",\n  \"deceiver\",\n  \"deceiving\",\n  \"december\",\n  \"decency\",\n  \"decent\",\n  \"deception\",\n  \"deceptive\",\n  \"decibel\",\n  \"decidable\",\n  \"decimal\",\n  \"decimeter\",\n  \"decipher\",\n  \"deck\",\n  \"declared\",\n  \"decline\",\n  \"decode\",\n  \"decompose\",\n  \"decorated\",\n  \"decorator\",\n  \"decoy\",\n  \"decrease\",\n  \"decree\",\n  \"dedicate\",\n  \"dedicator\",\n  \"deduce\",\n  \"deduct\",\n  \"deed\",\n  \"deem\",\n  \"deepen\",\n  \"deeply\",\n  \"deepness\",\n  \"deface\",\n  \"defacing\",\n  \"defame\",\n  \"default\",\n  \"defeat\",\n  \"defection\",\n  \"defective\",\n  \"defendant\",\n  \"defender\",\n  \"defense\",\n  \"defensive\",\n  \"deferral\",\n  \"deferred\",\n  \"defiance\",\n  \"defiant\",\n  \"defile\",\n  \"defiling\",\n  \"define\",\n  \"definite\",\n  \"deflate\",\n  \"deflation\",\n  \"deflator\",\n  \"deflected\",\n  \"deflector\",\n  \"defog\",\n  \"deforest\",\n  \"defraud\",\n  \"defrost\",\n  \"deftly\",\n  \"defuse\",\n  \"defy\",\n  \"degraded\",\n  \"degrading\",\n  \"degrease\",\n  \"degree\",\n  \"dehydrate\",\n  \"deity\",\n  \"dejected\",\n  \"delay\",\n  \"delegate\",\n  \"delegator\",\n  \"delete\",\n  \"deletion\",\n  \"delicacy\",\n  \"delicate\",\n  \"delicious\",\n  \"delighted\",\n  \"delirious\",\n  \"delirium\",\n  \"deliverer\",\n  \"delivery\",\n  \"delouse\",\n  \"delta\",\n  \"deluge\",\n  \"delusion\",\n  \"deluxe\",\n  \"demanding\",\n  \"demeaning\",\n  \"demeanor\",\n  \"demise\",\n  \"democracy\",\n  \"democrat\",\n  \"demote\",\n  \"demotion\",\n  \"demystify\",\n  \"denatured\",\n  \"deniable\",\n  \"denial\",\n  \"denim\",\n  \"denote\",\n  \"dense\",\n  \"density\",\n  \"dental\",\n  \"dentist\",\n  \"denture\",\n  \"deny\",\n  \"deodorant\",\n  \"deodorize\",\n  \"departed\",\n  \"departure\",\n  \"depict\",\n  \"deplete\",\n  \"depletion\",\n  \"deplored\",\n  \"deploy\",\n  \"deport\",\n  \"depose\",\n  \"depraved\",\n  \"depravity\",\n  \"deprecate\",\n  \"depress\",\n  \"deprive\",\n  \"depth\",\n  \"deputize\",\n  \"deputy\",\n  \"derail\",\n  \"deranged\",\n  \"derby\",\n  \"derived\",\n  \"desecrate\",\n  \"deserve\",\n  \"deserving\",\n  \"designate\",\n  \"designed\",\n  \"designer\",\n  \"designing\",\n  \"deskbound\",\n  \"desktop\",\n  \"deskwork\",\n  \"desolate\",\n  \"despair\",\n  \"despise\",\n  \"despite\",\n  \"destiny\",\n  \"destitute\",\n  \"destruct\",\n  \"detached\",\n  \"detail\",\n  \"detection\",\n  \"detective\",\n  \"detector\",\n  \"detention\",\n  \"detergent\",\n  \"detest\",\n  \"detonate\",\n  \"detonator\",\n  \"detoxify\",\n  \"detract\",\n  \"deuce\",\n  \"devalue\",\n  \"deviancy\",\n  \"deviant\",\n  \"deviate\",\n  \"deviation\",\n  \"deviator\",\n  \"device\",\n  \"devious\",\n  \"devotedly\",\n  \"devotee\",\n  \"devotion\",\n  \"devourer\",\n  \"devouring\",\n  \"devoutly\",\n  \"dexterity\",\n  \"dexterous\",\n  \"diabetes\",\n  \"diabetic\",\n  \"diabolic\",\n  \"diagnoses\",\n  \"diagnosis\",\n  \"diagram\",\n  \"dial\",\n  \"diameter\",\n  \"diaper\",\n  \"diaphragm\",\n  \"diary\",\n  \"dice\",\n  \"dicing\",\n  \"dictate\",\n  \"dictation\",\n  \"dictator\",\n  \"difficult\",\n  \"diffused\",\n  \"diffuser\",\n  \"diffusion\",\n  \"diffusive\",\n  \"dig\",\n  \"dilation\",\n  \"diligence\",\n  \"diligent\",\n  \"dill\",\n  \"dilute\",\n  \"dime\",\n  \"diminish\",\n  \"dimly\",\n  \"dimmed\",\n  \"dimmer\",\n  \"dimness\",\n  \"dimple\",\n  \"diner\",\n  \"dingbat\",\n  \"dinghy\",\n  \"dinginess\",\n  \"dingo\",\n  \"dingy\",\n  \"dining\",\n  \"dinner\",\n  \"diocese\",\n  \"dioxide\",\n  \"diploma\",\n  \"dipped\",\n  \"dipper\",\n  \"dipping\",\n  \"directed\",\n  \"direction\",\n  \"directive\",\n  \"directly\",\n  \"directory\",\n  \"direness\",\n  \"dirtiness\",\n  \"disabled\",\n  \"disagree\",\n  \"disallow\",\n  \"disarm\",\n  \"disarray\",\n  \"disaster\",\n  \"disband\",\n  \"disbelief\",\n  \"disburse\",\n  \"discard\",\n  \"discern\",\n  \"discharge\",\n  \"disclose\",\n  \"discolor\",\n  \"discount\",\n  \"discourse\",\n  \"discover\",\n  \"discuss\",\n  \"disdain\",\n  \"disengage\",\n  \"disfigure\",\n  \"disgrace\",\n  \"dish\",\n  \"disinfect\",\n  \"disjoin\",\n  \"disk\",\n  \"dislike\",\n  \"disliking\",\n  \"dislocate\",\n  \"dislodge\",\n  \"disloyal\",\n  \"dismantle\",\n  \"dismay\",\n  \"dismiss\",\n  \"dismount\",\n  \"disobey\",\n  \"disorder\",\n  \"disown\",\n  \"disparate\",\n  \"disparity\",\n  \"dispatch\",\n  \"dispense\",\n  \"dispersal\",\n  \"dispersed\",\n  \"disperser\",\n  \"displace\",\n  \"display\",\n  \"displease\",\n  \"disposal\",\n  \"dispose\",\n  \"disprove\",\n  \"dispute\",\n  \"disregard\",\n  \"disrupt\",\n  \"dissuade\",\n  \"distance\",\n  \"distant\",\n  \"distaste\",\n  \"distill\",\n  \"distinct\",\n  \"distort\",\n  \"distract\",\n  \"distress\",\n  \"district\",\n  \"distrust\",\n  \"ditch\",\n  \"ditto\",\n  \"ditzy\",\n  \"dividable\",\n  \"divided\",\n  \"dividend\",\n  \"dividers\",\n  \"dividing\",\n  \"divinely\",\n  \"diving\",\n  \"divinity\",\n  \"divisible\",\n  \"divisibly\",\n  \"division\",\n  \"divisive\",\n  \"divorcee\",\n  \"dizziness\",\n  \"dizzy\",\n  \"doable\",\n  \"docile\",\n  \"dock\",\n  \"doctrine\",\n  \"document\",\n  \"dodge\",\n  \"dodgy\",\n  \"doily\",\n  \"doing\",\n  \"dole\",\n  \"dollar\",\n  \"dollhouse\",\n  \"dollop\",\n  \"dolly\",\n  \"dolphin\",\n  \"domain\",\n  \"domelike\",\n  \"domestic\",\n  \"dominion\",\n  \"dominoes\",\n  \"donated\",\n  \"donation\",\n  \"donator\",\n  \"donor\",\n  \"donut\",\n  \"doodle\",\n  \"doorbell\",\n  \"doorframe\",\n  \"doorknob\",\n  \"doorman\",\n  \"doormat\",\n  \"doornail\",\n  \"doorpost\",\n  \"doorstep\",\n  \"doorstop\",\n  \"doorway\",\n  \"doozy\",\n  \"dork\",\n  \"dormitory\",\n  \"dorsal\",\n  \"dosage\",\n  \"dose\",\n  \"dotted\",\n  \"doubling\",\n  \"douche\",\n  \"dove\",\n  \"down\",\n  \"dowry\",\n  \"doze\",\n  \"drab\",\n  \"dragging\",\n  \"dragonfly\",\n  \"dragonish\",\n  \"dragster\",\n  \"drainable\",\n  \"drainage\",\n  \"drained\",\n  \"drainer\",\n  \"drainpipe\",\n  \"dramatic\",\n  \"dramatize\",\n  \"drank\",\n  \"drapery\",\n  \"drastic\",\n  \"draw\",\n  \"dreaded\",\n  \"dreadful\",\n  \"dreadlock\",\n  \"dreamboat\",\n  \"dreamily\",\n  \"dreamland\",\n  \"dreamless\",\n  \"dreamlike\",\n  \"dreamt\",\n  \"dreamy\",\n  \"drearily\",\n  \"dreary\",\n  \"drench\",\n  \"dress\",\n  \"drew\",\n  \"dribble\",\n  \"dried\",\n  \"drier\",\n  \"drift\",\n  \"driller\",\n  \"drilling\",\n  \"drinkable\",\n  \"drinking\",\n  \"dripping\",\n  \"drippy\",\n  \"drivable\",\n  \"driven\",\n  \"driver\",\n  \"driveway\",\n  \"driving\",\n  \"drizzle\",\n  \"drizzly\",\n  \"drone\",\n  \"drool\",\n  \"droop\",\n  \"drop-down\",\n  \"dropbox\",\n  \"dropkick\",\n  \"droplet\",\n  \"dropout\",\n  \"dropper\",\n  \"drove\",\n  \"drown\",\n  \"drowsily\",\n  \"drudge\",\n  \"drum\",\n  \"dry\",\n  \"dubbed\",\n  \"dubiously\",\n  \"duchess\",\n  \"duckbill\",\n  \"ducking\",\n  \"duckling\",\n  \"ducktail\",\n  \"ducky\",\n  \"duct\",\n  \"dude\",\n  \"duffel\",\n  \"dugout\",\n  \"duh\",\n  \"duke\",\n  \"duller\",\n  \"dullness\",\n  \"duly\",\n  \"dumping\",\n  \"dumpling\",\n  \"dumpster\",\n  \"duo\",\n  \"dupe\",\n  \"duplex\",\n  \"duplicate\",\n  \"duplicity\",\n  \"durable\",\n  \"durably\",\n  \"duration\",\n  \"duress\",\n  \"during\",\n  \"dusk\",\n  \"dust\",\n  \"dutiful\",\n  \"duty\",\n  \"duvet\",\n  \"dwarf\",\n  \"dweeb\",\n  \"dwelled\",\n  \"dweller\",\n  \"dwelling\",\n  \"dwindle\",\n  \"dwindling\",\n  \"dynamic\",\n  \"dynamite\",\n  \"dynasty\",\n  \"dyslexia\",\n  \"dyslexic\",\n  \"each\",\n  \"eagle\",\n  \"earache\",\n  \"eardrum\",\n  \"earflap\",\n  \"earful\",\n  \"earlobe\",\n  \"early\",\n  \"earmark\",\n  \"earmuff\",\n  \"earphone\",\n  \"earpiece\",\n  \"earplugs\",\n  \"earring\",\n  \"earshot\",\n  \"earthen\",\n  \"earthlike\",\n  \"earthling\",\n  \"earthly\",\n  \"earthworm\",\n  \"earthy\",\n  \"earwig\",\n  \"easeful\",\n  \"easel\",\n  \"easiest\",\n  \"easily\",\n  \"easiness\",\n  \"easing\",\n  \"eastbound\",\n  \"eastcoast\",\n  \"easter\",\n  \"eastward\",\n  \"eatable\",\n  \"eaten\",\n  \"eatery\",\n  \"eating\",\n  \"eats\",\n  \"ebay\",\n  \"ebony\",\n  \"ebook\",\n  \"ecard\",\n  \"eccentric\",\n  \"echo\",\n  \"eclair\",\n  \"eclipse\",\n  \"ecologist\",\n  \"ecology\",\n  \"economic\",\n  \"economist\",\n  \"economy\",\n  \"ecosphere\",\n  \"ecosystem\",\n  \"edge\",\n  \"edginess\",\n  \"edging\",\n  \"edgy\",\n  \"edition\",\n  \"editor\",\n  \"educated\",\n  \"education\",\n  \"educator\",\n  \"eel\",\n  \"effective\",\n  \"effects\",\n  \"efficient\",\n  \"effort\",\n  \"eggbeater\",\n  \"egging\",\n  \"eggnog\",\n  \"eggplant\",\n  \"eggshell\",\n  \"egomaniac\",\n  \"egotism\",\n  \"egotistic\",\n  \"either\",\n  \"eject\",\n  \"elaborate\",\n  \"elastic\",\n  \"elated\",\n  \"elbow\",\n  \"eldercare\",\n  \"elderly\",\n  \"eldest\",\n  \"electable\",\n  \"election\",\n  \"elective\",\n  \"elephant\",\n  \"elevate\",\n  \"elevating\",\n  \"elevation\",\n  \"elevator\",\n  \"eleven\",\n  \"elf\",\n  \"eligible\",\n  \"eligibly\",\n  \"eliminate\",\n  \"elite\",\n  \"elitism\",\n  \"elixir\",\n  \"elk\",\n  \"ellipse\",\n  \"elliptic\",\n  \"elm\",\n  \"elongated\",\n  \"elope\",\n  \"eloquence\",\n  \"eloquent\",\n  \"elsewhere\",\n  \"elude\",\n  \"elusive\",\n  \"elves\",\n  \"email\",\n  \"embargo\",\n  \"embark\",\n  \"embassy\",\n  \"embattled\",\n  \"embellish\",\n  \"ember\",\n  \"embezzle\",\n  \"emblaze\",\n  \"emblem\",\n  \"embody\",\n  \"embolism\",\n  \"emboss\",\n  \"embroider\",\n  \"emcee\",\n  \"emerald\",\n  \"emergency\",\n  \"emission\",\n  \"emit\",\n  \"emote\",\n  \"emoticon\",\n  \"emotion\",\n  \"empathic\",\n  \"empathy\",\n  \"emperor\",\n  \"emphases\",\n  \"emphasis\",\n  \"emphasize\",\n  \"emphatic\",\n  \"empirical\",\n  \"employed\",\n  \"employee\",\n  \"employer\",\n  \"emporium\",\n  \"empower\",\n  \"emptier\",\n  \"emptiness\",\n  \"empty\",\n  \"emu\",\n  \"enable\",\n  \"enactment\",\n  \"enamel\",\n  \"enchanted\",\n  \"enchilada\",\n  \"encircle\",\n  \"enclose\",\n  \"enclosure\",\n  \"encode\",\n  \"encore\",\n  \"encounter\",\n  \"encourage\",\n  \"encroach\",\n  \"encrust\",\n  \"encrypt\",\n  \"endanger\",\n  \"endeared\",\n  \"endearing\",\n  \"ended\",\n  \"ending\",\n  \"endless\",\n  \"endnote\",\n  \"endocrine\",\n  \"endorphin\",\n  \"endorse\",\n  \"endowment\",\n  \"endpoint\",\n  \"endurable\",\n  \"endurance\",\n  \"enduring\",\n  \"energetic\",\n  \"energize\",\n  \"energy\",\n  \"enforced\",\n  \"enforcer\",\n  \"engaged\",\n  \"engaging\",\n  \"engine\",\n  \"engorge\",\n  \"engraved\",\n  \"engraver\",\n  \"engraving\",\n  \"engross\",\n  \"engulf\",\n  \"enhance\",\n  \"enigmatic\",\n  \"enjoyable\",\n  \"enjoyably\",\n  \"enjoyer\",\n  \"enjoying\",\n  \"enjoyment\",\n  \"enlarged\",\n  \"enlarging\",\n  \"enlighten\",\n  \"enlisted\",\n  \"enquirer\",\n  \"enrage\",\n  \"enrich\",\n  \"enroll\",\n  \"enslave\",\n  \"ensnare\",\n  \"ensure\",\n  \"entail\",\n  \"entangled\",\n  \"entering\",\n  \"entertain\",\n  \"enticing\",\n  \"entire\",\n  \"entitle\",\n  \"entity\",\n  \"entomb\",\n  \"entourage\",\n  \"entrap\",\n  \"entree\",\n  \"entrench\",\n  \"entrust\",\n  \"entryway\",\n  \"entwine\",\n  \"enunciate\",\n  \"envelope\",\n  \"enviable\",\n  \"enviably\",\n  \"envious\",\n  \"envision\",\n  \"envoy\",\n  \"envy\",\n  \"enzyme\",\n  \"epic\",\n  \"epidemic\",\n  \"epidermal\",\n  \"epidermis\",\n  \"epidural\",\n  \"epilepsy\",\n  \"epileptic\",\n  \"epilogue\",\n  \"epiphany\",\n  \"episode\",\n  \"equal\",\n  \"equate\",\n  \"equation\",\n  \"equator\",\n  \"equinox\",\n  \"equipment\",\n  \"equity\",\n  \"equivocal\",\n  \"eradicate\",\n  \"erasable\",\n  \"erased\",\n  \"eraser\",\n  \"erasure\",\n  \"ergonomic\",\n  \"errand\",\n  \"errant\",\n  \"erratic\",\n  \"error\",\n  \"erupt\",\n  \"escalate\",\n  \"escalator\",\n  \"escapable\",\n  \"escapade\",\n  \"escapist\",\n  \"escargot\",\n  \"eskimo\",\n  \"esophagus\",\n  \"espionage\",\n  \"espresso\",\n  \"esquire\",\n  \"essay\",\n  \"essence\",\n  \"essential\",\n  \"establish\",\n  \"estate\",\n  \"esteemed\",\n  \"estimate\",\n  \"estimator\",\n  \"estranged\",\n  \"estrogen\",\n  \"etching\",\n  \"eternal\",\n  \"eternity\",\n  \"ethanol\",\n  \"ether\",\n  \"ethically\",\n  \"ethics\",\n  \"euphemism\",\n  \"evacuate\",\n  \"evacuee\",\n  \"evade\",\n  \"evaluate\",\n  \"evaluator\",\n  \"evaporate\",\n  \"evasion\",\n  \"evasive\",\n  \"even\",\n  \"everglade\",\n  \"evergreen\",\n  \"everybody\",\n  \"everyday\",\n  \"everyone\",\n  \"evict\",\n  \"evidence\",\n  \"evident\",\n  \"evil\",\n  \"evoke\",\n  \"evolution\",\n  \"evolve\",\n  \"exact\",\n  \"exalted\",\n  \"example\",\n  \"excavate\",\n  \"excavator\",\n  \"exceeding\",\n  \"exception\",\n  \"excess\",\n  \"exchange\",\n  \"excitable\",\n  \"exciting\",\n  \"exclaim\",\n  \"exclude\",\n  \"excluding\",\n  \"exclusion\",\n  \"exclusive\",\n  \"excretion\",\n  \"excretory\",\n  \"excursion\",\n  \"excusable\",\n  \"excusably\",\n  \"excuse\",\n  \"exemplary\",\n  \"exemplify\",\n  \"exemption\",\n  \"exerciser\",\n  \"exert\",\n  \"exes\",\n  \"exfoliate\",\n  \"exhale\",\n  \"exhaust\",\n  \"exhume\",\n  \"exile\",\n  \"existing\",\n  \"exit\",\n  \"exodus\",\n  \"exonerate\",\n  \"exorcism\",\n  \"exorcist\",\n  \"expand\",\n  \"expanse\",\n  \"expansion\",\n  \"expansive\",\n  \"expectant\",\n  \"expedited\",\n  \"expediter\",\n  \"expel\",\n  \"expend\",\n  \"expenses\",\n  \"expensive\",\n  \"expert\",\n  \"expire\",\n  \"expiring\",\n  \"explain\",\n  \"expletive\",\n  \"explicit\",\n  \"explode\",\n  \"exploit\",\n  \"explore\",\n  \"exploring\",\n  \"exponent\",\n  \"exporter\",\n  \"exposable\",\n  \"expose\",\n  \"exposure\",\n  \"express\",\n  \"expulsion\",\n  \"exquisite\",\n  \"extended\",\n  \"extending\",\n  \"extent\",\n  \"extenuate\",\n  \"exterior\",\n  \"external\",\n  \"extinct\",\n  \"extortion\",\n  \"extradite\",\n  \"extras\",\n  \"extrovert\",\n  \"extrude\",\n  \"extruding\",\n  \"exuberant\",\n  \"fable\",\n  \"fabric\",\n  \"fabulous\",\n  \"facebook\",\n  \"facecloth\",\n  \"facedown\",\n  \"faceless\",\n  \"facelift\",\n  \"faceplate\",\n  \"faceted\",\n  \"facial\",\n  \"facility\",\n  \"facing\",\n  \"facsimile\",\n  \"faction\",\n  \"factoid\",\n  \"factor\",\n  \"factsheet\",\n  \"factual\",\n  \"faculty\",\n  \"fade\",\n  \"fading\",\n  \"failing\",\n  \"falcon\",\n  \"fall\",\n  \"false\",\n  \"falsify\",\n  \"fame\",\n  \"familiar\",\n  \"family\",\n  \"famine\",\n  \"famished\",\n  \"fanatic\",\n  \"fancied\",\n  \"fanciness\",\n  \"fancy\",\n  \"fanfare\",\n  \"fang\",\n  \"fanning\",\n  \"fantasize\",\n  \"fantastic\",\n  \"fantasy\",\n  \"fascism\",\n  \"fastball\",\n  \"faster\",\n  \"fasting\",\n  \"fastness\",\n  \"faucet\",\n  \"favorable\",\n  \"favorably\",\n  \"favored\",\n  \"favoring\",\n  \"favorite\",\n  \"fax\",\n  \"feast\",\n  \"federal\",\n  \"fedora\",\n  \"feeble\",\n  \"feed\",\n  \"feel\",\n  \"feisty\",\n  \"feline\",\n  \"felt-tip\",\n  \"feminine\",\n  \"feminism\",\n  \"feminist\",\n  \"feminize\",\n  \"femur\",\n  \"fence\",\n  \"fencing\",\n  \"fender\",\n  \"ferment\",\n  \"fernlike\",\n  \"ferocious\",\n  \"ferocity\",\n  \"ferret\",\n  \"ferris\",\n  \"ferry\",\n  \"fervor\",\n  \"fester\",\n  \"festival\",\n  \"festive\",\n  \"festivity\",\n  \"fetal\",\n  \"fetch\",\n  \"fever\",\n  \"fiber\",\n  \"fiction\",\n  \"fiddle\",\n  \"fiddling\",\n  \"fidelity\",\n  \"fidgeting\",\n  \"fidgety\",\n  \"fifteen\",\n  \"fifth\",\n  \"fiftieth\",\n  \"fifty\",\n  \"figment\",\n  \"figure\",\n  \"figurine\",\n  \"filing\",\n  \"filled\",\n  \"filler\",\n  \"filling\",\n  \"film\",\n  \"filter\",\n  \"filth\",\n  \"filtrate\",\n  \"finale\",\n  \"finalist\",\n  \"finalize\",\n  \"finally\",\n  \"finance\",\n  \"financial\",\n  \"finch\",\n  \"fineness\",\n  \"finer\",\n  \"finicky\",\n  \"finished\",\n  \"finisher\",\n  \"finishing\",\n  \"finite\",\n  \"finless\",\n  \"finlike\",\n  \"fiscally\",\n  \"fit\",\n  \"five\",\n  \"flaccid\",\n  \"flagman\",\n  \"flagpole\",\n  \"flagship\",\n  \"flagstick\",\n  \"flagstone\",\n  \"flail\",\n  \"flakily\",\n  \"flaky\",\n  \"flame\",\n  \"flammable\",\n  \"flanked\",\n  \"flanking\",\n  \"flannels\",\n  \"flap\",\n  \"flaring\",\n  \"flashback\",\n  \"flashbulb\",\n  \"flashcard\",\n  \"flashily\",\n  \"flashing\",\n  \"flashy\",\n  \"flask\",\n  \"flatbed\",\n  \"flatfoot\",\n  \"flatly\",\n  \"flatness\",\n  \"flatten\",\n  \"flattered\",\n  \"flatterer\",\n  \"flattery\",\n  \"flattop\",\n  \"flatware\",\n  \"flatworm\",\n  \"flavored\",\n  \"flavorful\",\n  \"flavoring\",\n  \"flaxseed\",\n  \"fled\",\n  \"fleshed\",\n  \"fleshy\",\n  \"flick\",\n  \"flier\",\n  \"flight\",\n  \"flinch\",\n  \"fling\",\n  \"flint\",\n  \"flip\",\n  \"flirt\",\n  \"float\",\n  \"flock\",\n  \"flogging\",\n  \"flop\",\n  \"floral\",\n  \"florist\",\n  \"floss\",\n  \"flounder\",\n  \"flyable\",\n  \"flyaway\",\n  \"flyer\",\n  \"flying\",\n  \"flyover\",\n  \"flypaper\",\n  \"foam\",\n  \"foe\",\n  \"fog\",\n  \"foil\",\n  \"folic\",\n  \"folk\",\n  \"follicle\",\n  \"follow\",\n  \"fondling\",\n  \"fondly\",\n  \"fondness\",\n  \"fondue\",\n  \"font\",\n  \"food\",\n  \"fool\",\n  \"footage\",\n  \"football\",\n  \"footbath\",\n  \"footboard\",\n  \"footer\",\n  \"footgear\",\n  \"foothill\",\n  \"foothold\",\n  \"footing\",\n  \"footless\",\n  \"footman\",\n  \"footnote\",\n  \"footpad\",\n  \"footpath\",\n  \"footprint\",\n  \"footrest\",\n  \"footsie\",\n  \"footsore\",\n  \"footwear\",\n  \"footwork\",\n  \"fossil\",\n  \"foster\",\n  \"founder\",\n  \"founding\",\n  \"fountain\",\n  \"fox\",\n  \"foyer\",\n  \"fraction\",\n  \"fracture\",\n  \"fragile\",\n  \"fragility\",\n  \"fragment\",\n  \"fragrance\",\n  \"fragrant\",\n  \"frail\",\n  \"frame\",\n  \"framing\",\n  \"frantic\",\n  \"fraternal\",\n  \"frayed\",\n  \"fraying\",\n  \"frays\",\n  \"freckled\",\n  \"freckles\",\n  \"freebase\",\n  \"freebee\",\n  \"freebie\",\n  \"freedom\",\n  \"freefall\",\n  \"freehand\",\n  \"freeing\",\n  \"freeload\",\n  \"freely\",\n  \"freemason\",\n  \"freeness\",\n  \"freestyle\",\n  \"freeware\",\n  \"freeway\",\n  \"freewill\",\n  \"freezable\",\n  \"freezing\",\n  \"freight\",\n  \"french\",\n  \"frenzied\",\n  \"frenzy\",\n  \"frequency\",\n  \"frequent\",\n  \"fresh\",\n  \"fretful\",\n  \"fretted\",\n  \"friction\",\n  \"friday\",\n  \"fridge\",\n  \"fried\",\n  \"friend\",\n  \"frighten\",\n  \"frightful\",\n  \"frigidity\",\n  \"frigidly\",\n  \"frill\",\n  \"fringe\",\n  \"frisbee\",\n  \"frisk\",\n  \"fritter\",\n  \"frivolous\",\n  \"frolic\",\n  \"from\",\n  \"front\",\n  \"frostbite\",\n  \"frosted\",\n  \"frostily\",\n  \"frosting\",\n  \"frostlike\",\n  \"frosty\",\n  \"froth\",\n  \"frown\",\n  \"frozen\",\n  \"fructose\",\n  \"frugality\",\n  \"frugally\",\n  \"fruit\",\n  \"frustrate\",\n  \"frying\",\n  \"gab\",\n  \"gaffe\",\n  \"gag\",\n  \"gainfully\",\n  \"gaining\",\n  \"gains\",\n  \"gala\",\n  \"gallantly\",\n  \"galleria\",\n  \"gallery\",\n  \"galley\",\n  \"gallon\",\n  \"gallows\",\n  \"gallstone\",\n  \"galore\",\n  \"galvanize\",\n  \"gambling\",\n  \"game\",\n  \"gaming\",\n  \"gamma\",\n  \"gander\",\n  \"gangly\",\n  \"gangrene\",\n  \"gangway\",\n  \"gap\",\n  \"garage\",\n  \"garbage\",\n  \"garden\",\n  \"gargle\",\n  \"garland\",\n  \"garlic\",\n  \"garment\",\n  \"garnet\",\n  \"garnish\",\n  \"garter\",\n  \"gas\",\n  \"gatherer\",\n  \"gathering\",\n  \"gating\",\n  \"gauging\",\n  \"gauntlet\",\n  \"gauze\",\n  \"gave\",\n  \"gawk\",\n  \"gazing\",\n  \"gear\",\n  \"gecko\",\n  \"geek\",\n  \"geiger\",\n  \"gem\",\n  \"gender\",\n  \"generic\",\n  \"generous\",\n  \"genetics\",\n  \"genre\",\n  \"gentile\",\n  \"gentleman\",\n  \"gently\",\n  \"gents\",\n  \"geography\",\n  \"geologic\",\n  \"geologist\",\n  \"geology\",\n  \"geometric\",\n  \"geometry\",\n  \"geranium\",\n  \"gerbil\",\n  \"geriatric\",\n  \"germicide\",\n  \"germinate\",\n  \"germless\",\n  \"germproof\",\n  \"gestate\",\n  \"gestation\",\n  \"gesture\",\n  \"getaway\",\n  \"getting\",\n  \"getup\",\n  \"giant\",\n  \"gibberish\",\n  \"giblet\",\n  \"giddily\",\n  \"giddiness\",\n  \"giddy\",\n  \"gift\",\n  \"gigabyte\",\n  \"gigahertz\",\n  \"gigantic\",\n  \"giggle\",\n  \"giggling\",\n  \"giggly\",\n  \"gigolo\",\n  \"gilled\",\n  \"gills\",\n  \"gimmick\",\n  \"girdle\",\n  \"giveaway\",\n  \"given\",\n  \"giver\",\n  \"giving\",\n  \"gizmo\",\n  \"gizzard\",\n  \"glacial\",\n  \"glacier\",\n  \"glade\",\n  \"gladiator\",\n  \"gladly\",\n  \"glamorous\",\n  \"glamour\",\n  \"glance\",\n  \"glancing\",\n  \"glandular\",\n  \"glare\",\n  \"glaring\",\n  \"glass\",\n  \"glaucoma\",\n  \"glazing\",\n  \"gleaming\",\n  \"gleeful\",\n  \"glider\",\n  \"gliding\",\n  \"glimmer\",\n  \"glimpse\",\n  \"glisten\",\n  \"glitch\",\n  \"glitter\",\n  \"glitzy\",\n  \"gloater\",\n  \"gloating\",\n  \"gloomily\",\n  \"gloomy\",\n  \"glorified\",\n  \"glorifier\",\n  \"glorify\",\n  \"glorious\",\n  \"glory\",\n  \"gloss\",\n  \"glove\",\n  \"glowing\",\n  \"glowworm\",\n  \"glucose\",\n  \"glue\",\n  \"gluten\",\n  \"glutinous\",\n  \"glutton\",\n  \"gnarly\",\n  \"gnat\",\n  \"goal\",\n  \"goatskin\",\n  \"goes\",\n  \"goggles\",\n  \"going\",\n  \"goldfish\",\n  \"goldmine\",\n  \"goldsmith\",\n  \"golf\",\n  \"goliath\",\n  \"gonad\",\n  \"gondola\",\n  \"gone\",\n  \"gong\",\n  \"good\",\n  \"gooey\",\n  \"goofball\",\n  \"goofiness\",\n  \"goofy\",\n  \"google\",\n  \"goon\",\n  \"gopher\",\n  \"gore\",\n  \"gorged\",\n  \"gorgeous\",\n  \"gory\",\n  \"gosling\",\n  \"gossip\",\n  \"gothic\",\n  \"gotten\",\n  \"gout\",\n  \"gown\",\n  \"grab\",\n  \"graceful\",\n  \"graceless\",\n  \"gracious\",\n  \"gradation\",\n  \"graded\",\n  \"grader\",\n  \"gradient\",\n  \"grading\",\n  \"gradually\",\n  \"graduate\",\n  \"graffiti\",\n  \"grafted\",\n  \"grafting\",\n  \"grain\",\n  \"granddad\",\n  \"grandkid\",\n  \"grandly\",\n  \"grandma\",\n  \"grandpa\",\n  \"grandson\",\n  \"granite\",\n  \"granny\",\n  \"granola\",\n  \"grant\",\n  \"granular\",\n  \"grape\",\n  \"graph\",\n  \"grapple\",\n  \"grappling\",\n  \"grasp\",\n  \"grass\",\n  \"gratified\",\n  \"gratify\",\n  \"grating\",\n  \"gratitude\",\n  \"gratuity\",\n  \"gravel\",\n  \"graveness\",\n  \"graves\",\n  \"graveyard\",\n  \"gravitate\",\n  \"gravity\",\n  \"gravy\",\n  \"gray\",\n  \"grazing\",\n  \"greasily\",\n  \"greedily\",\n  \"greedless\",\n  \"greedy\",\n  \"green\",\n  \"greeter\",\n  \"greeting\",\n  \"grew\",\n  \"greyhound\",\n  \"grid\",\n  \"grief\",\n  \"grievance\",\n  \"grieving\",\n  \"grievous\",\n  \"grill\",\n  \"grimace\",\n  \"grimacing\",\n  \"grime\",\n  \"griminess\",\n  \"grimy\",\n  \"grinch\",\n  \"grinning\",\n  \"grip\",\n  \"gristle\",\n  \"grit\",\n  \"groggily\",\n  \"groggy\",\n  \"groin\",\n  \"groom\",\n  \"groove\",\n  \"grooving\",\n  \"groovy\",\n  \"grope\",\n  \"ground\",\n  \"grouped\",\n  \"grout\",\n  \"grove\",\n  \"grower\",\n  \"growing\",\n  \"growl\",\n  \"grub\",\n  \"grudge\",\n  \"grudging\",\n  \"grueling\",\n  \"gruffly\",\n  \"grumble\",\n  \"grumbling\",\n  \"grumbly\",\n  \"grumpily\",\n  \"grunge\",\n  \"grunt\",\n  \"guacamole\",\n  \"guidable\",\n  \"guidance\",\n  \"guide\",\n  \"guiding\",\n  \"guileless\",\n  \"guise\",\n  \"gulf\",\n  \"gullible\",\n  \"gully\",\n  \"gulp\",\n  \"gumball\",\n  \"gumdrop\",\n  \"gumminess\",\n  \"gumming\",\n  \"gummy\",\n  \"gurgle\",\n  \"gurgling\",\n  \"guru\",\n  \"gush\",\n  \"gusto\",\n  \"gusty\",\n  \"gutless\",\n  \"guts\",\n  \"gutter\",\n  \"guy\",\n  \"guzzler\",\n  \"gyration\",\n  \"habitable\",\n  \"habitant\",\n  \"habitat\",\n  \"habitual\",\n  \"hacked\",\n  \"hacker\",\n  \"hacking\",\n  \"hacksaw\",\n  \"had\",\n  \"haggler\",\n  \"haiku\",\n  \"half\",\n  \"halogen\",\n  \"halt\",\n  \"halved\",\n  \"halves\",\n  \"hamburger\",\n  \"hamlet\",\n  \"hammock\",\n  \"hamper\",\n  \"hamster\",\n  \"hamstring\",\n  \"handbag\",\n  \"handball\",\n  \"handbook\",\n  \"handbrake\",\n  \"handcart\",\n  \"handclap\",\n  \"handclasp\",\n  \"handcraft\",\n  \"handcuff\",\n  \"handed\",\n  \"handful\",\n  \"handgrip\",\n  \"handgun\",\n  \"handheld\",\n  \"handiness\",\n  \"handiwork\",\n  \"handlebar\",\n  \"handled\",\n  \"handler\",\n  \"handling\",\n  \"handmade\",\n  \"handoff\",\n  \"handpick\",\n  \"handprint\",\n  \"handrail\",\n  \"handsaw\",\n  \"handset\",\n  \"handsfree\",\n  \"handshake\",\n  \"handstand\",\n  \"handwash\",\n  \"handwork\",\n  \"handwoven\",\n  \"handwrite\",\n  \"handyman\",\n  \"hangnail\",\n  \"hangout\",\n  \"hangover\",\n  \"hangup\",\n  \"hankering\",\n  \"hankie\",\n  \"hanky\",\n  \"haphazard\",\n  \"happening\",\n  \"happier\",\n  \"happiest\",\n  \"happily\",\n  \"happiness\",\n  \"happy\",\n  \"harbor\",\n  \"hardcopy\",\n  \"hardcore\",\n  \"hardcover\",\n  \"harddisk\",\n  \"hardened\",\n  \"hardener\",\n  \"hardening\",\n  \"hardhat\",\n  \"hardhead\",\n  \"hardiness\",\n  \"hardly\",\n  \"hardness\",\n  \"hardship\",\n  \"hardware\",\n  \"hardwired\",\n  \"hardwood\",\n  \"hardy\",\n  \"harmful\",\n  \"harmless\",\n  \"harmonica\",\n  \"harmonics\",\n  \"harmonize\",\n  \"harmony\",\n  \"harness\",\n  \"harpist\",\n  \"harsh\",\n  \"harvest\",\n  \"hash\",\n  \"hassle\",\n  \"haste\",\n  \"hastily\",\n  \"hastiness\",\n  \"hasty\",\n  \"hatbox\",\n  \"hatchback\",\n  \"hatchery\",\n  \"hatchet\",\n  \"hatching\",\n  \"hatchling\",\n  \"hate\",\n  \"hatless\",\n  \"hatred\",\n  \"haunt\",\n  \"haven\",\n  \"hazard\",\n  \"hazelnut\",\n  \"hazily\",\n  \"haziness\",\n  \"hazing\",\n  \"hazy\",\n  \"headache\",\n  \"headband\",\n  \"headboard\",\n  \"headcount\",\n  \"headdress\",\n  \"headed\",\n  \"header\",\n  \"headfirst\",\n  \"headgear\",\n  \"heading\",\n  \"headlamp\",\n  \"headless\",\n  \"headlock\",\n  \"headphone\",\n  \"headpiece\",\n  \"headrest\",\n  \"headroom\",\n  \"headscarf\",\n  \"headset\",\n  \"headsman\",\n  \"headstand\",\n  \"headstone\",\n  \"headway\",\n  \"headwear\",\n  \"heap\",\n  \"heat\",\n  \"heave\",\n  \"heavily\",\n  \"heaviness\",\n  \"heaving\",\n  \"hedge\",\n  \"hedging\",\n  \"heftiness\",\n  \"hefty\",\n  \"helium\",\n  \"helmet\",\n  \"helper\",\n  \"helpful\",\n  \"helping\",\n  \"helpless\",\n  \"helpline\",\n  \"hemlock\",\n  \"hemstitch\",\n  \"hence\",\n  \"henchman\",\n  \"henna\",\n  \"herald\",\n  \"herbal\",\n  \"herbicide\",\n  \"herbs\",\n  \"heritage\",\n  \"hermit\",\n  \"heroics\",\n  \"heroism\",\n  \"herring\",\n  \"herself\",\n  \"hertz\",\n  \"hesitancy\",\n  \"hesitant\",\n  \"hesitate\",\n  \"hexagon\",\n  \"hexagram\",\n  \"hubcap\",\n  \"huddle\",\n  \"huddling\",\n  \"huff\",\n  \"hug\",\n  \"hula\",\n  \"hulk\",\n  \"hull\",\n  \"human\",\n  \"humble\",\n  \"humbling\",\n  \"humbly\",\n  \"humid\",\n  \"humiliate\",\n  \"humility\",\n  \"humming\",\n  \"hummus\",\n  \"humongous\",\n  \"humorist\",\n  \"humorless\",\n  \"humorous\",\n  \"humpback\",\n  \"humped\",\n  \"humvee\",\n  \"hunchback\",\n  \"hundredth\",\n  \"hunger\",\n  \"hungrily\",\n  \"hungry\",\n  \"hunk\",\n  \"hunter\",\n  \"hunting\",\n  \"huntress\",\n  \"huntsman\",\n  \"hurdle\",\n  \"hurled\",\n  \"hurler\",\n  \"hurling\",\n  \"hurray\",\n  \"hurricane\",\n  \"hurried\",\n  \"hurry\",\n  \"hurt\",\n  \"husband\",\n  \"hush\",\n  \"husked\",\n  \"huskiness\",\n  \"hut\",\n  \"hybrid\",\n  \"hydrant\",\n  \"hydrated\",\n  \"hydration\",\n  \"hydrogen\",\n  \"hydroxide\",\n  \"hyperlink\",\n  \"hypertext\",\n  \"hyphen\",\n  \"hypnoses\",\n  \"hypnosis\",\n  \"hypnotic\",\n  \"hypnotism\",\n  \"hypnotist\",\n  \"hypnotize\",\n  \"hypocrisy\",\n  \"hypocrite\",\n  \"ibuprofen\",\n  \"ice\",\n  \"iciness\",\n  \"icing\",\n  \"icky\",\n  \"icon\",\n  \"icy\",\n  \"idealism\",\n  \"idealist\",\n  \"idealize\",\n  \"ideally\",\n  \"idealness\",\n  \"identical\",\n  \"identify\",\n  \"identity\",\n  \"ideology\",\n  \"idiocy\",\n  \"idiom\",\n  \"idly\",\n  \"igloo\",\n  \"ignition\",\n  \"ignore\",\n  \"iguana\",\n  \"illicitly\",\n  \"illusion\",\n  \"illusive\",\n  \"image\",\n  \"imaginary\",\n  \"imagines\",\n  \"imaging\",\n  \"imbecile\",\n  \"imitate\",\n  \"imitation\",\n  \"immature\",\n  \"immerse\",\n  \"immersion\",\n  \"imminent\",\n  \"immobile\",\n  \"immodest\",\n  \"immorally\",\n  \"immortal\",\n  \"immovable\",\n  \"immovably\",\n  \"immunity\",\n  \"immunize\",\n  \"impaired\",\n  \"impale\",\n  \"impart\",\n  \"impatient\",\n  \"impeach\",\n  \"impeding\",\n  \"impending\",\n  \"imperfect\",\n  \"imperial\",\n  \"impish\",\n  \"implant\",\n  \"implement\",\n  \"implicate\",\n  \"implicit\",\n  \"implode\",\n  \"implosion\",\n  \"implosive\",\n  \"imply\",\n  \"impolite\",\n  \"important\",\n  \"importer\",\n  \"impose\",\n  \"imposing\",\n  \"impotence\",\n  \"impotency\",\n  \"impotent\",\n  \"impound\",\n  \"imprecise\",\n  \"imprint\",\n  \"imprison\",\n  \"impromptu\",\n  \"improper\",\n  \"improve\",\n  \"improving\",\n  \"improvise\",\n  \"imprudent\",\n  \"impulse\",\n  \"impulsive\",\n  \"impure\",\n  \"impurity\",\n  \"iodine\",\n  \"iodize\",\n  \"ion\",\n  \"ipad\",\n  \"iphone\",\n  \"ipod\",\n  \"irate\",\n  \"irk\",\n  \"iron\",\n  \"irregular\",\n  \"irrigate\",\n  \"irritable\",\n  \"irritably\",\n  \"irritant\",\n  \"irritate\",\n  \"islamic\",\n  \"islamist\",\n  \"isolated\",\n  \"isolating\",\n  \"isolation\",\n  \"isotope\",\n  \"issue\",\n  \"issuing\",\n  \"italicize\",\n  \"italics\",\n  \"item\",\n  \"itinerary\",\n  \"itunes\",\n  \"ivory\",\n  \"ivy\",\n  \"jab\",\n  \"jackal\",\n  \"jacket\",\n  \"jackknife\",\n  \"jackpot\",\n  \"jailbird\",\n  \"jailbreak\",\n  \"jailer\",\n  \"jailhouse\",\n  \"jalapeno\",\n  \"jam\",\n  \"janitor\",\n  \"january\",\n  \"jargon\",\n  \"jarring\",\n  \"jasmine\",\n  \"jaundice\",\n  \"jaunt\",\n  \"java\",\n  \"jawed\",\n  \"jawless\",\n  \"jawline\",\n  \"jaws\",\n  \"jaybird\",\n  \"jaywalker\",\n  \"jazz\",\n  \"jeep\",\n  \"jeeringly\",\n  \"jellied\",\n  \"jelly\",\n  \"jersey\",\n  \"jester\",\n  \"jet\",\n  \"jiffy\",\n  \"jigsaw\",\n  \"jimmy\",\n  \"jingle\",\n  \"jingling\",\n  \"jinx\",\n  \"jitters\",\n  \"jittery\",\n  \"job\",\n  \"jockey\",\n  \"jockstrap\",\n  \"jogger\",\n  \"jogging\",\n  \"john\",\n  \"joining\",\n  \"jokester\",\n  \"jokingly\",\n  \"jolliness\",\n  \"jolly\",\n  \"jolt\",\n  \"jot\",\n  \"jovial\",\n  \"joyfully\",\n  \"joylessly\",\n  \"joyous\",\n  \"joyride\",\n  \"joystick\",\n  \"jubilance\",\n  \"jubilant\",\n  \"judge\",\n  \"judgingly\",\n  \"judicial\",\n  \"judiciary\",\n  \"judo\",\n  \"juggle\",\n  \"juggling\",\n  \"jugular\",\n  \"juice\",\n  \"juiciness\",\n  \"juicy\",\n  \"jujitsu\",\n  \"jukebox\",\n  \"july\",\n  \"jumble\",\n  \"jumbo\",\n  \"jump\",\n  \"junction\",\n  \"juncture\",\n  \"june\",\n  \"junior\",\n  \"juniper\",\n  \"junkie\",\n  \"junkman\",\n  \"junkyard\",\n  \"jurist\",\n  \"juror\",\n  \"jury\",\n  \"justice\",\n  \"justifier\",\n  \"justify\",\n  \"justly\",\n  \"justness\",\n  \"juvenile\",\n  \"kabob\",\n  \"kangaroo\",\n  \"karaoke\",\n  \"karate\",\n  \"karma\",\n  \"kebab\",\n  \"keenly\",\n  \"keenness\",\n  \"keep\",\n  \"keg\",\n  \"kelp\",\n  \"kennel\",\n  \"kept\",\n  \"kerchief\",\n  \"kerosene\",\n  \"kettle\",\n  \"kick\",\n  \"kiln\",\n  \"kilobyte\",\n  \"kilogram\",\n  \"kilometer\",\n  \"kilowatt\",\n  \"kilt\",\n  \"kimono\",\n  \"kindle\",\n  \"kindling\",\n  \"kindly\",\n  \"kindness\",\n  \"kindred\",\n  \"kinetic\",\n  \"kinfolk\",\n  \"king\",\n  \"kinship\",\n  \"kinsman\",\n  \"kinswoman\",\n  \"kissable\",\n  \"kisser\",\n  \"kissing\",\n  \"kitchen\",\n  \"kite\",\n  \"kitten\",\n  \"kitty\",\n  \"kiwi\",\n  \"kleenex\",\n  \"knapsack\",\n  \"knee\",\n  \"knelt\",\n  \"knickers\",\n  \"knoll\",\n  \"koala\",\n  \"kooky\",\n  \"kosher\",\n  \"krypton\",\n  \"kudos\",\n  \"kung\",\n  \"labored\",\n  \"laborer\",\n  \"laboring\",\n  \"laborious\",\n  \"labrador\",\n  \"ladder\",\n  \"ladies\",\n  \"ladle\",\n  \"ladybug\",\n  \"ladylike\",\n  \"lagged\",\n  \"lagging\",\n  \"lagoon\",\n  \"lair\",\n  \"lake\",\n  \"lance\",\n  \"landed\",\n  \"landfall\",\n  \"landfill\",\n  \"landing\",\n  \"landlady\",\n  \"landless\",\n  \"landline\",\n  \"landlord\",\n  \"landmark\",\n  \"landmass\",\n  \"landmine\",\n  \"landowner\",\n  \"landscape\",\n  \"landside\",\n  \"landslide\",\n  \"language\",\n  \"lankiness\",\n  \"lanky\",\n  \"lantern\",\n  \"lapdog\",\n  \"lapel\",\n  \"lapped\",\n  \"lapping\",\n  \"laptop\",\n  \"lard\",\n  \"large\",\n  \"lark\",\n  \"lash\",\n  \"lasso\",\n  \"last\",\n  \"latch\",\n  \"late\",\n  \"lather\",\n  \"latitude\",\n  \"latrine\",\n  \"latter\",\n  \"latticed\",\n  \"launch\",\n  \"launder\",\n  \"laundry\",\n  \"laurel\",\n  \"lavender\",\n  \"lavish\",\n  \"laxative\",\n  \"lazily\",\n  \"laziness\",\n  \"lazy\",\n  \"lecturer\",\n  \"left\",\n  \"legacy\",\n  \"legal\",\n  \"legend\",\n  \"legged\",\n  \"leggings\",\n  \"legible\",\n  \"legibly\",\n  \"legislate\",\n  \"lego\",\n  \"legroom\",\n  \"legume\",\n  \"legwarmer\",\n  \"legwork\",\n  \"lemon\",\n  \"lend\",\n  \"length\",\n  \"lens\",\n  \"lent\",\n  \"leotard\",\n  \"lesser\",\n  \"letdown\",\n  \"lethargic\",\n  \"lethargy\",\n  \"letter\",\n  \"lettuce\",\n  \"level\",\n  \"leverage\",\n  \"levers\",\n  \"levitate\",\n  \"levitator\",\n  \"liability\",\n  \"liable\",\n  \"liberty\",\n  \"librarian\",\n  \"library\",\n  \"licking\",\n  \"licorice\",\n  \"lid\",\n  \"life\",\n  \"lifter\",\n  \"lifting\",\n  \"liftoff\",\n  \"ligament\",\n  \"likely\",\n  \"likeness\",\n  \"likewise\",\n  \"liking\",\n  \"lilac\",\n  \"lilly\",\n  \"lily\",\n  \"limb\",\n  \"limeade\",\n  \"limelight\",\n  \"limes\",\n  \"limit\",\n  \"limping\",\n  \"limpness\",\n  \"line\",\n  \"lingo\",\n  \"linguini\",\n  \"linguist\",\n  \"lining\",\n  \"linked\",\n  \"linoleum\",\n  \"linseed\",\n  \"lint\",\n  \"lion\",\n  \"lip\",\n  \"liquefy\",\n  \"liqueur\",\n  \"liquid\",\n  \"lisp\",\n  \"list\",\n  \"litigate\",\n  \"litigator\",\n  \"litmus\",\n  \"litter\",\n  \"little\",\n  \"livable\",\n  \"lived\",\n  \"lively\",\n  \"liver\",\n  \"livestock\",\n  \"lividly\",\n  \"living\",\n  \"lizard\",\n  \"lubricant\",\n  \"lubricate\",\n  \"lucid\",\n  \"luckily\",\n  \"luckiness\",\n  \"luckless\",\n  \"lucrative\",\n  \"ludicrous\",\n  \"lugged\",\n  \"lukewarm\",\n  \"lullaby\",\n  \"lumber\",\n  \"luminance\",\n  \"luminous\",\n  \"lumpiness\",\n  \"lumping\",\n  \"lumpish\",\n  \"lunacy\",\n  \"lunar\",\n  \"lunchbox\",\n  \"luncheon\",\n  \"lunchroom\",\n  \"lunchtime\",\n  \"lung\",\n  \"lurch\",\n  \"lure\",\n  \"luridness\",\n  \"lurk\",\n  \"lushly\",\n  \"lushness\",\n  \"luster\",\n  \"lustfully\",\n  \"lustily\",\n  \"lustiness\",\n  \"lustrous\",\n  \"lusty\",\n  \"luxurious\",\n  \"luxury\",\n  \"lying\",\n  \"lyrically\",\n  \"lyricism\",\n  \"lyricist\",\n  \"lyrics\",\n  \"macarena\",\n  \"macaroni\",\n  \"macaw\",\n  \"mace\",\n  \"machine\",\n  \"machinist\",\n  \"magazine\",\n  \"magenta\",\n  \"maggot\",\n  \"magical\",\n  \"magician\",\n  \"magma\",\n  \"magnesium\",\n  \"magnetic\",\n  \"magnetism\",\n  \"magnetize\",\n  \"magnifier\",\n  \"magnify\",\n  \"magnitude\",\n  \"magnolia\",\n  \"mahogany\",\n  \"maimed\",\n  \"majestic\",\n  \"majesty\",\n  \"majorette\",\n  \"majority\",\n  \"makeover\",\n  \"maker\",\n  \"makeshift\",\n  \"making\",\n  \"malformed\",\n  \"malt\",\n  \"mama\",\n  \"mammal\",\n  \"mammary\",\n  \"mammogram\",\n  \"manager\",\n  \"managing\",\n  \"manatee\",\n  \"mandarin\",\n  \"mandate\",\n  \"mandatory\",\n  \"mandolin\",\n  \"manger\",\n  \"mangle\",\n  \"mango\",\n  \"mangy\",\n  \"manhandle\",\n  \"manhole\",\n  \"manhood\",\n  \"manhunt\",\n  \"manicotti\",\n  \"manicure\",\n  \"manifesto\",\n  \"manila\",\n  \"mankind\",\n  \"manlike\",\n  \"manliness\",\n  \"manly\",\n  \"manmade\",\n  \"manned\",\n  \"mannish\",\n  \"manor\",\n  \"manpower\",\n  \"mantis\",\n  \"mantra\",\n  \"manual\",\n  \"many\",\n  \"map\",\n  \"marathon\",\n  \"marauding\",\n  \"marbled\",\n  \"marbles\",\n  \"marbling\",\n  \"march\",\n  \"mardi\",\n  \"margarine\",\n  \"margarita\",\n  \"margin\",\n  \"marigold\",\n  \"marina\",\n  \"marine\",\n  \"marital\",\n  \"maritime\",\n  \"marlin\",\n  \"marmalade\",\n  \"maroon\",\n  \"married\",\n  \"marrow\",\n  \"marry\",\n  \"marshland\",\n  \"marshy\",\n  \"marsupial\",\n  \"marvelous\",\n  \"marxism\",\n  \"mascot\",\n  \"masculine\",\n  \"mashed\",\n  \"mashing\",\n  \"massager\",\n  \"masses\",\n  \"massive\",\n  \"mastiff\",\n  \"matador\",\n  \"matchbook\",\n  \"matchbox\",\n  \"matcher\",\n  \"matching\",\n  \"matchless\",\n  \"material\",\n  \"maternal\",\n  \"maternity\",\n  \"math\",\n  \"mating\",\n  \"matriarch\",\n  \"matrimony\",\n  \"matrix\",\n  \"matron\",\n  \"matted\",\n  \"matter\",\n  \"maturely\",\n  \"maturing\",\n  \"maturity\",\n  \"mauve\",\n  \"maverick\",\n  \"maximize\",\n  \"maximum\",\n  \"maybe\",\n  \"mayday\",\n  \"mayflower\",\n  \"moaner\",\n  \"moaning\",\n  \"mobile\",\n  \"mobility\",\n  \"mobilize\",\n  \"mobster\",\n  \"mocha\",\n  \"mocker\",\n  \"mockup\",\n  \"modified\",\n  \"modify\",\n  \"modular\",\n  \"modulator\",\n  \"module\",\n  \"moisten\",\n  \"moistness\",\n  \"moisture\",\n  \"molar\",\n  \"molasses\",\n  \"mold\",\n  \"molecular\",\n  \"molecule\",\n  \"molehill\",\n  \"mollusk\",\n  \"mom\",\n  \"monastery\",\n  \"monday\",\n  \"monetary\",\n  \"monetize\",\n  \"moneybags\",\n  \"moneyless\",\n  \"moneywise\",\n  \"mongoose\",\n  \"mongrel\",\n  \"monitor\",\n  \"monkhood\",\n  \"monogamy\",\n  \"monogram\",\n  \"monologue\",\n  \"monopoly\",\n  \"monorail\",\n  \"monotone\",\n  \"monotype\",\n  \"monoxide\",\n  \"monsieur\",\n  \"monsoon\",\n  \"monstrous\",\n  \"monthly\",\n  \"monument\",\n  \"moocher\",\n  \"moodiness\",\n  \"moody\",\n  \"mooing\",\n  \"moonbeam\",\n  \"mooned\",\n  \"moonlight\",\n  \"moonlike\",\n  \"moonlit\",\n  \"moonrise\",\n  \"moonscape\",\n  \"moonshine\",\n  \"moonstone\",\n  \"moonwalk\",\n  \"mop\",\n  \"morale\",\n  \"morality\",\n  \"morally\",\n  \"morbidity\",\n  \"morbidly\",\n  \"morphine\",\n  \"morphing\",\n  \"morse\",\n  \"mortality\",\n  \"mortally\",\n  \"mortician\",\n  \"mortified\",\n  \"mortify\",\n  \"mortuary\",\n  \"mosaic\",\n  \"mossy\",\n  \"most\",\n  \"mothball\",\n  \"mothproof\",\n  \"motion\",\n  \"motivate\",\n  \"motivator\",\n  \"motive\",\n  \"motocross\",\n  \"motor\",\n  \"motto\",\n  \"mountable\",\n  \"mountain\",\n  \"mounted\",\n  \"mounting\",\n  \"mourner\",\n  \"mournful\",\n  \"mouse\",\n  \"mousiness\",\n  \"moustache\",\n  \"mousy\",\n  \"mouth\",\n  \"movable\",\n  \"move\",\n  \"movie\",\n  \"moving\",\n  \"mower\",\n  \"mowing\",\n  \"much\",\n  \"muck\",\n  \"mud\",\n  \"mug\",\n  \"mulberry\",\n  \"mulch\",\n  \"mule\",\n  \"mulled\",\n  \"mullets\",\n  \"multiple\",\n  \"multiply\",\n  \"multitask\",\n  \"multitude\",\n  \"mumble\",\n  \"mumbling\",\n  \"mumbo\",\n  \"mummified\",\n  \"mummify\",\n  \"mummy\",\n  \"mumps\",\n  \"munchkin\",\n  \"mundane\",\n  \"municipal\",\n  \"muppet\",\n  \"mural\",\n  \"murkiness\",\n  \"murky\",\n  \"murmuring\",\n  \"muscular\",\n  \"museum\",\n  \"mushily\",\n  \"mushiness\",\n  \"mushroom\",\n  \"mushy\",\n  \"music\",\n  \"musket\",\n  \"muskiness\",\n  \"musky\",\n  \"mustang\",\n  \"mustard\",\n  \"muster\",\n  \"mustiness\",\n  \"musty\",\n  \"mutable\",\n  \"mutate\",\n  \"mutation\",\n  \"mute\",\n  \"mutilated\",\n  \"mutilator\",\n  \"mutiny\",\n  \"mutt\",\n  \"mutual\",\n  \"muzzle\",\n  \"myself\",\n  \"myspace\",\n  \"mystified\",\n  \"mystify\",\n  \"myth\",\n  \"nacho\",\n  \"nag\",\n  \"nail\",\n  \"name\",\n  \"naming\",\n  \"nanny\",\n  \"nanometer\",\n  \"nape\",\n  \"napkin\",\n  \"napped\",\n  \"napping\",\n  \"nappy\",\n  \"narrow\",\n  \"nastily\",\n  \"nastiness\",\n  \"national\",\n  \"native\",\n  \"nativity\",\n  \"natural\",\n  \"nature\",\n  \"naturist\",\n  \"nautical\",\n  \"navigate\",\n  \"navigator\",\n  \"navy\",\n  \"nearby\",\n  \"nearest\",\n  \"nearly\",\n  \"nearness\",\n  \"neatly\",\n  \"neatness\",\n  \"nebula\",\n  \"nebulizer\",\n  \"nectar\",\n  \"negate\",\n  \"negation\",\n  \"negative\",\n  \"neglector\",\n  \"negligee\",\n  \"negligent\",\n  \"negotiate\",\n  \"nemeses\",\n  \"nemesis\",\n  \"neon\",\n  \"nephew\",\n  \"nerd\",\n  \"nervous\",\n  \"nervy\",\n  \"nest\",\n  \"net\",\n  \"neurology\",\n  \"neuron\",\n  \"neurosis\",\n  \"neurotic\",\n  \"neuter\",\n  \"neutron\",\n  \"never\",\n  \"next\",\n  \"nibble\",\n  \"nickname\",\n  \"nicotine\",\n  \"niece\",\n  \"nifty\",\n  \"nimble\",\n  \"nimbly\",\n  \"nineteen\",\n  \"ninetieth\",\n  \"ninja\",\n  \"nintendo\",\n  \"ninth\",\n  \"nuclear\",\n  \"nuclei\",\n  \"nucleus\",\n  \"nugget\",\n  \"nullify\",\n  \"number\",\n  \"numbing\",\n  \"numbly\",\n  \"numbness\",\n  \"numeral\",\n  \"numerate\",\n  \"numerator\",\n  \"numeric\",\n  \"numerous\",\n  \"nuptials\",\n  \"nursery\",\n  \"nursing\",\n  \"nurture\",\n  \"nutcase\",\n  \"nutlike\",\n  \"nutmeg\",\n  \"nutrient\",\n  \"nutshell\",\n  \"nuttiness\",\n  \"nutty\",\n  \"nuzzle\",\n  \"nylon\",\n  \"oaf\",\n  \"oak\",\n  \"oasis\",\n  \"oat\",\n  \"obedience\",\n  \"obedient\",\n  \"obituary\",\n  \"object\",\n  \"obligate\",\n  \"obliged\",\n  \"oblivion\",\n  \"oblivious\",\n  \"oblong\",\n  \"obnoxious\",\n  \"oboe\",\n  \"obscure\",\n  \"obscurity\",\n  \"observant\",\n  \"observer\",\n  \"observing\",\n  \"obsessed\",\n  \"obsession\",\n  \"obsessive\",\n  \"obsolete\",\n  \"obstacle\",\n  \"obstinate\",\n  \"obstruct\",\n  \"obtain\",\n  \"obtrusive\",\n  \"obtuse\",\n  \"obvious\",\n  \"occultist\",\n  \"occupancy\",\n  \"occupant\",\n  \"occupier\",\n  \"occupy\",\n  \"ocean\",\n  \"ocelot\",\n  \"octagon\",\n  \"octane\",\n  \"october\",\n  \"octopus\",\n  \"ogle\",\n  \"oil\",\n  \"oink\",\n  \"ointment\",\n  \"okay\",\n  \"old\",\n  \"olive\",\n  \"olympics\",\n  \"omega\",\n  \"omen\",\n  \"ominous\",\n  \"omission\",\n  \"omit\",\n  \"omnivore\",\n  \"onboard\",\n  \"oncoming\",\n  \"ongoing\",\n  \"onion\",\n  \"online\",\n  \"onlooker\",\n  \"only\",\n  \"onscreen\",\n  \"onset\",\n  \"onshore\",\n  \"onslaught\",\n  \"onstage\",\n  \"onto\",\n  \"onward\",\n  \"onyx\",\n  \"oops\",\n  \"ooze\",\n  \"oozy\",\n  \"opacity\",\n  \"opal\",\n  \"open\",\n  \"operable\",\n  \"operate\",\n  \"operating\",\n  \"operation\",\n  \"operative\",\n  \"operator\",\n  \"opium\",\n  \"opossum\",\n  \"opponent\",\n  \"oppose\",\n  \"opposing\",\n  \"opposite\",\n  \"oppressed\",\n  \"oppressor\",\n  \"opt\",\n  \"opulently\",\n  \"osmosis\",\n  \"other\",\n  \"otter\",\n  \"ouch\",\n  \"ought\",\n  \"ounce\",\n  \"outage\",\n  \"outback\",\n  \"outbid\",\n  \"outboard\",\n  \"outbound\",\n  \"outbreak\",\n  \"outburst\",\n  \"outcast\",\n  \"outclass\",\n  \"outcome\",\n  \"outdated\",\n  \"outdoors\",\n  \"outer\",\n  \"outfield\",\n  \"outfit\",\n  \"outflank\",\n  \"outgoing\",\n  \"outgrow\",\n  \"outhouse\",\n  \"outing\",\n  \"outlast\",\n  \"outlet\",\n  \"outline\",\n  \"outlook\",\n  \"outlying\",\n  \"outmatch\",\n  \"outmost\",\n  \"outnumber\",\n  \"outplayed\",\n  \"outpost\",\n  \"outpour\",\n  \"output\",\n  \"outrage\",\n  \"outrank\",\n  \"outreach\",\n  \"outright\",\n  \"outscore\",\n  \"outsell\",\n  \"outshine\",\n  \"outshoot\",\n  \"outsider\",\n  \"outskirts\",\n  \"outsmart\",\n  \"outsource\",\n  \"outspoken\",\n  \"outtakes\",\n  \"outthink\",\n  \"outward\",\n  \"outweigh\",\n  \"outwit\",\n  \"oval\",\n  \"ovary\",\n  \"oven\",\n  \"overact\",\n  \"overall\",\n  \"overarch\",\n  \"overbid\",\n  \"overbill\",\n  \"overbite\",\n  \"overblown\",\n  \"overboard\",\n  \"overbook\",\n  \"overbuilt\",\n  \"overcast\",\n  \"overcoat\",\n  \"overcome\",\n  \"overcook\",\n  \"overcrowd\",\n  \"overdraft\",\n  \"overdrawn\",\n  \"overdress\",\n  \"overdrive\",\n  \"overdue\",\n  \"overeager\",\n  \"overeater\",\n  \"overexert\",\n  \"overfed\",\n  \"overfeed\",\n  \"overfill\",\n  \"overflow\",\n  \"overfull\",\n  \"overgrown\",\n  \"overhand\",\n  \"overhang\",\n  \"overhaul\",\n  \"overhead\",\n  \"overhear\",\n  \"overheat\",\n  \"overhung\",\n  \"overjoyed\",\n  \"overkill\",\n  \"overlabor\",\n  \"overlaid\",\n  \"overlap\",\n  \"overlay\",\n  \"overload\",\n  \"overlook\",\n  \"overlord\",\n  \"overlying\",\n  \"overnight\",\n  \"overpass\",\n  \"overpay\",\n  \"overplant\",\n  \"overplay\",\n  \"overpower\",\n  \"overprice\",\n  \"overrate\",\n  \"overreach\",\n  \"overreact\",\n  \"override\",\n  \"overripe\",\n  \"overrule\",\n  \"overrun\",\n  \"overshoot\",\n  \"overshot\",\n  \"oversight\",\n  \"oversized\",\n  \"oversleep\",\n  \"oversold\",\n  \"overspend\",\n  \"overstate\",\n  \"overstay\",\n  \"overstep\",\n  \"overstock\",\n  \"overstuff\",\n  \"oversweet\",\n  \"overtake\",\n  \"overthrow\",\n  \"overtime\",\n  \"overtly\",\n  \"overtone\",\n  \"overture\",\n  \"overturn\",\n  \"overuse\",\n  \"overvalue\",\n  \"overview\",\n  \"overwrite\",\n  \"owl\",\n  \"oxford\",\n  \"oxidant\",\n  \"oxidation\",\n  \"oxidize\",\n  \"oxidizing\",\n  \"oxygen\",\n  \"oxymoron\",\n  \"oyster\",\n  \"ozone\",\n  \"paced\",\n  \"pacemaker\",\n  \"pacific\",\n  \"pacifier\",\n  \"pacifism\",\n  \"pacifist\",\n  \"pacify\",\n  \"padded\",\n  \"padding\",\n  \"paddle\",\n  \"paddling\",\n  \"padlock\",\n  \"pagan\",\n  \"pager\",\n  \"paging\",\n  \"pajamas\",\n  \"palace\",\n  \"palatable\",\n  \"palm\",\n  \"palpable\",\n  \"palpitate\",\n  \"paltry\",\n  \"pampered\",\n  \"pamperer\",\n  \"pampers\",\n  \"pamphlet\",\n  \"panama\",\n  \"pancake\",\n  \"pancreas\",\n  \"panda\",\n  \"pandemic\",\n  \"pang\",\n  \"panhandle\",\n  \"panic\",\n  \"panning\",\n  \"panorama\",\n  \"panoramic\",\n  \"panther\",\n  \"pantomime\",\n  \"pantry\",\n  \"pants\",\n  \"pantyhose\",\n  \"paparazzi\",\n  \"papaya\",\n  \"paper\",\n  \"paprika\",\n  \"papyrus\",\n  \"parabola\",\n  \"parachute\",\n  \"parade\",\n  \"paradox\",\n  \"paragraph\",\n  \"parakeet\",\n  \"paralegal\",\n  \"paralyses\",\n  \"paralysis\",\n  \"paralyze\",\n  \"paramedic\",\n  \"parameter\",\n  \"paramount\",\n  \"parasail\",\n  \"parasite\",\n  \"parasitic\",\n  \"parcel\",\n  \"parched\",\n  \"parchment\",\n  \"pardon\",\n  \"parish\",\n  \"parka\",\n  \"parking\",\n  \"parkway\",\n  \"parlor\",\n  \"parmesan\",\n  \"parole\",\n  \"parrot\",\n  \"parsley\",\n  \"parsnip\",\n  \"partake\",\n  \"parted\",\n  \"parting\",\n  \"partition\",\n  \"partly\",\n  \"partner\",\n  \"partridge\",\n  \"party\",\n  \"passable\",\n  \"passably\",\n  \"passage\",\n  \"passcode\",\n  \"passenger\",\n  \"passerby\",\n  \"passing\",\n  \"passion\",\n  \"passive\",\n  \"passivism\",\n  \"passover\",\n  \"passport\",\n  \"password\",\n  \"pasta\",\n  \"pasted\",\n  \"pastel\",\n  \"pastime\",\n  \"pastor\",\n  \"pastrami\",\n  \"pasture\",\n  \"pasty\",\n  \"patchwork\",\n  \"patchy\",\n  \"paternal\",\n  \"paternity\",\n  \"path\",\n  \"patience\",\n  \"patient\",\n  \"patio\",\n  \"patriarch\",\n  \"patriot\",\n  \"patrol\",\n  \"patronage\",\n  \"patronize\",\n  \"pauper\",\n  \"pavement\",\n  \"paver\",\n  \"pavestone\",\n  \"pavilion\",\n  \"paving\",\n  \"pawing\",\n  \"payable\",\n  \"payback\",\n  \"paycheck\",\n  \"payday\",\n  \"payee\",\n  \"payer\",\n  \"paying\",\n  \"payment\",\n  \"payphone\",\n  \"payroll\",\n  \"pebble\",\n  \"pebbly\",\n  \"pecan\",\n  \"pectin\",\n  \"peculiar\",\n  \"peddling\",\n  \"pediatric\",\n  \"pedicure\",\n  \"pedigree\",\n  \"pedometer\",\n  \"pegboard\",\n  \"pelican\",\n  \"pellet\",\n  \"pelt\",\n  \"pelvis\",\n  \"penalize\",\n  \"penalty\",\n  \"pencil\",\n  \"pendant\",\n  \"pending\",\n  \"penholder\",\n  \"penknife\",\n  \"pennant\",\n  \"penniless\",\n  \"penny\",\n  \"penpal\",\n  \"pension\",\n  \"pentagon\",\n  \"pentagram\",\n  \"pep\",\n  \"perceive\",\n  \"percent\",\n  \"perch\",\n  \"percolate\",\n  \"perennial\",\n  \"perfected\",\n  \"perfectly\",\n  \"perfume\",\n  \"periscope\",\n  \"perish\",\n  \"perjurer\",\n  \"perjury\",\n  \"perkiness\",\n  \"perky\",\n  \"perm\",\n  \"peroxide\",\n  \"perpetual\",\n  \"perplexed\",\n  \"persecute\",\n  \"persevere\",\n  \"persuaded\",\n  \"persuader\",\n  \"pesky\",\n  \"peso\",\n  \"pessimism\",\n  \"pessimist\",\n  \"pester\",\n  \"pesticide\",\n  \"petal\",\n  \"petite\",\n  \"petition\",\n  \"petri\",\n  \"petroleum\",\n  \"petted\",\n  \"petticoat\",\n  \"pettiness\",\n  \"petty\",\n  \"petunia\",\n  \"phantom\",\n  \"phobia\",\n  \"phoenix\",\n  \"phonebook\",\n  \"phoney\",\n  \"phonics\",\n  \"phoniness\",\n  \"phony\",\n  \"phosphate\",\n  \"photo\",\n  \"phrase\",\n  \"phrasing\",\n  \"placard\",\n  \"placate\",\n  \"placidly\",\n  \"plank\",\n  \"planner\",\n  \"plant\",\n  \"plasma\",\n  \"plaster\",\n  \"plastic\",\n  \"plated\",\n  \"platform\",\n  \"plating\",\n  \"platinum\",\n  \"platonic\",\n  \"platter\",\n  \"platypus\",\n  \"plausible\",\n  \"plausibly\",\n  \"playable\",\n  \"playback\",\n  \"player\",\n  \"playful\",\n  \"playgroup\",\n  \"playhouse\",\n  \"playing\",\n  \"playlist\",\n  \"playmaker\",\n  \"playmate\",\n  \"playoff\",\n  \"playpen\",\n  \"playroom\",\n  \"playset\",\n  \"plaything\",\n  \"playtime\",\n  \"plaza\",\n  \"pleading\",\n  \"pleat\",\n  \"pledge\",\n  \"plentiful\",\n  \"plenty\",\n  \"plethora\",\n  \"plexiglas\",\n  \"pliable\",\n  \"plod\",\n  \"plop\",\n  \"plot\",\n  \"plow\",\n  \"ploy\",\n  \"pluck\",\n  \"plug\",\n  \"plunder\",\n  \"plunging\",\n  \"plural\",\n  \"plus\",\n  \"plutonium\",\n  \"plywood\",\n  \"poach\",\n  \"pod\",\n  \"poem\",\n  \"poet\",\n  \"pogo\",\n  \"pointed\",\n  \"pointer\",\n  \"pointing\",\n  \"pointless\",\n  \"pointy\",\n  \"poise\",\n  \"poison\",\n  \"poker\",\n  \"poking\",\n  \"polar\",\n  \"police\",\n  \"policy\",\n  \"polio\",\n  \"polish\",\n  \"politely\",\n  \"polka\",\n  \"polo\",\n  \"polyester\",\n  \"polygon\",\n  \"polygraph\",\n  \"polymer\",\n  \"poncho\",\n  \"pond\",\n  \"pony\",\n  \"popcorn\",\n  \"pope\",\n  \"poplar\",\n  \"popper\",\n  \"poppy\",\n  \"popsicle\",\n  \"populace\",\n  \"popular\",\n  \"populate\",\n  \"porcupine\",\n  \"pork\",\n  \"porous\",\n  \"porridge\",\n  \"portable\",\n  \"portal\",\n  \"portfolio\",\n  \"porthole\",\n  \"portion\",\n  \"portly\",\n  \"portside\",\n  \"poser\",\n  \"posh\",\n  \"posing\",\n  \"possible\",\n  \"possibly\",\n  \"possum\",\n  \"postage\",\n  \"postal\",\n  \"postbox\",\n  \"postcard\",\n  \"posted\",\n  \"poster\",\n  \"posting\",\n  \"postnasal\",\n  \"posture\",\n  \"postwar\",\n  \"pouch\",\n  \"pounce\",\n  \"pouncing\",\n  \"pound\",\n  \"pouring\",\n  \"pout\",\n  \"powdered\",\n  \"powdering\",\n  \"powdery\",\n  \"power\",\n  \"powwow\",\n  \"pox\",\n  \"praising\",\n  \"prance\",\n  \"prancing\",\n  \"pranker\",\n  \"prankish\",\n  \"prankster\",\n  \"prayer\",\n  \"praying\",\n  \"preacher\",\n  \"preaching\",\n  \"preachy\",\n  \"preamble\",\n  \"precinct\",\n  \"precise\",\n  \"precision\",\n  \"precook\",\n  \"precut\",\n  \"predator\",\n  \"predefine\",\n  \"predict\",\n  \"preface\",\n  \"prefix\",\n  \"preflight\",\n  \"preformed\",\n  \"pregame\",\n  \"pregnancy\",\n  \"pregnant\",\n  \"preheated\",\n  \"prelaunch\",\n  \"prelaw\",\n  \"prelude\",\n  \"premiere\",\n  \"premises\",\n  \"premium\",\n  \"prenatal\",\n  \"preoccupy\",\n  \"preorder\",\n  \"prepaid\",\n  \"prepay\",\n  \"preplan\",\n  \"preppy\",\n  \"preschool\",\n  \"prescribe\",\n  \"preseason\",\n  \"preset\",\n  \"preshow\",\n  \"president\",\n  \"presoak\",\n  \"press\",\n  \"presume\",\n  \"presuming\",\n  \"preteen\",\n  \"pretended\",\n  \"pretender\",\n  \"pretense\",\n  \"pretext\",\n  \"pretty\",\n  \"pretzel\",\n  \"prevail\",\n  \"prevalent\",\n  \"prevent\",\n  \"preview\",\n  \"previous\",\n  \"prewar\",\n  \"prewashed\",\n  \"prideful\",\n  \"pried\",\n  \"primal\",\n  \"primarily\",\n  \"primary\",\n  \"primate\",\n  \"primer\",\n  \"primp\",\n  \"princess\",\n  \"print\",\n  \"prior\",\n  \"prism\",\n  \"prison\",\n  \"prissy\",\n  \"pristine\",\n  \"privacy\",\n  \"private\",\n  \"privatize\",\n  \"prize\",\n  \"proactive\",\n  \"probable\",\n  \"probably\",\n  \"probation\",\n  \"probe\",\n  \"probing\",\n  \"probiotic\",\n  \"problem\",\n  \"procedure\",\n  \"process\",\n  \"proclaim\",\n  \"procreate\",\n  \"procurer\",\n  \"prodigal\",\n  \"prodigy\",\n  \"produce\",\n  \"product\",\n  \"profane\",\n  \"profanity\",\n  \"professed\",\n  \"professor\",\n  \"profile\",\n  \"profound\",\n  \"profusely\",\n  \"progeny\",\n  \"prognosis\",\n  \"program\",\n  \"progress\",\n  \"projector\",\n  \"prologue\",\n  \"prolonged\",\n  \"promenade\",\n  \"prominent\",\n  \"promoter\",\n  \"promotion\",\n  \"prompter\",\n  \"promptly\",\n  \"prone\",\n  \"prong\",\n  \"pronounce\",\n  \"pronto\",\n  \"proofing\",\n  \"proofread\",\n  \"proofs\",\n  \"propeller\",\n  \"properly\",\n  \"property\",\n  \"proponent\",\n  \"proposal\",\n  \"propose\",\n  \"props\",\n  \"prorate\",\n  \"protector\",\n  \"protegee\",\n  \"proton\",\n  \"prototype\",\n  \"protozoan\",\n  \"protract\",\n  \"protrude\",\n  \"proud\",\n  \"provable\",\n  \"proved\",\n  \"proven\",\n  \"provided\",\n  \"provider\",\n  \"providing\",\n  \"province\",\n  \"proving\",\n  \"provoke\",\n  \"provoking\",\n  \"provolone\",\n  \"prowess\",\n  \"prowler\",\n  \"prowling\",\n  \"proximity\",\n  \"proxy\",\n  \"prozac\",\n  \"prude\",\n  \"prudishly\",\n  \"prune\",\n  \"pruning\",\n  \"pry\",\n  \"psychic\",\n  \"public\",\n  \"publisher\",\n  \"pucker\",\n  \"pueblo\",\n  \"pug\",\n  \"pull\",\n  \"pulmonary\",\n  \"pulp\",\n  \"pulsate\",\n  \"pulse\",\n  \"pulverize\",\n  \"puma\",\n  \"pumice\",\n  \"pummel\",\n  \"punch\",\n  \"punctual\",\n  \"punctuate\",\n  \"punctured\",\n  \"pungent\",\n  \"punisher\",\n  \"punk\",\n  \"pupil\",\n  \"puppet\",\n  \"puppy\",\n  \"purchase\",\n  \"pureblood\",\n  \"purebred\",\n  \"purely\",\n  \"pureness\",\n  \"purgatory\",\n  \"purge\",\n  \"purging\",\n  \"purifier\",\n  \"purify\",\n  \"purist\",\n  \"puritan\",\n  \"purity\",\n  \"purple\",\n  \"purplish\",\n  \"purposely\",\n  \"purr\",\n  \"purse\",\n  \"pursuable\",\n  \"pursuant\",\n  \"pursuit\",\n  \"purveyor\",\n  \"pushcart\",\n  \"pushchair\",\n  \"pusher\",\n  \"pushiness\",\n  \"pushing\",\n  \"pushover\",\n  \"pushpin\",\n  \"pushup\",\n  \"pushy\",\n  \"putdown\",\n  \"putt\",\n  \"puzzle\",\n  \"puzzling\",\n  \"pyramid\",\n  \"pyromania\",\n  \"python\",\n  \"quack\",\n  \"quadrant\",\n  \"quail\",\n  \"quaintly\",\n  \"quake\",\n  \"quaking\",\n  \"qualified\",\n  \"qualifier\",\n  \"qualify\",\n  \"quality\",\n  \"qualm\",\n  \"quantum\",\n  \"quarrel\",\n  \"quarry\",\n  \"quartered\",\n  \"quarterly\",\n  \"quarters\",\n  \"quartet\",\n  \"quench\",\n  \"query\",\n  \"quicken\",\n  \"quickly\",\n  \"quickness\",\n  \"quicksand\",\n  \"quickstep\",\n  \"quiet\",\n  \"quill\",\n  \"quilt\",\n  \"quintet\",\n  \"quintuple\",\n  \"quirk\",\n  \"quit\",\n  \"quiver\",\n  \"quizzical\",\n  \"quotable\",\n  \"quotation\",\n  \"quote\",\n  \"rabid\",\n  \"race\",\n  \"racing\",\n  \"racism\",\n  \"rack\",\n  \"racoon\",\n  \"radar\",\n  \"radial\",\n  \"radiance\",\n  \"radiantly\",\n  \"radiated\",\n  \"radiation\",\n  \"radiator\",\n  \"radio\",\n  \"radish\",\n  \"raffle\",\n  \"raft\",\n  \"rage\",\n  \"ragged\",\n  \"raging\",\n  \"ragweed\",\n  \"raider\",\n  \"railcar\",\n  \"railing\",\n  \"railroad\",\n  \"railway\",\n  \"raisin\",\n  \"rake\",\n  \"raking\",\n  \"rally\",\n  \"ramble\",\n  \"rambling\",\n  \"ramp\",\n  \"ramrod\",\n  \"ranch\",\n  \"rancidity\",\n  \"random\",\n  \"ranged\",\n  \"ranger\",\n  \"ranging\",\n  \"ranked\",\n  \"ranking\",\n  \"ransack\",\n  \"ranting\",\n  \"rants\",\n  \"rare\",\n  \"rarity\",\n  \"rascal\",\n  \"rash\",\n  \"rasping\",\n  \"ravage\",\n  \"raven\",\n  \"ravine\",\n  \"raving\",\n  \"ravioli\",\n  \"ravishing\",\n  \"reabsorb\",\n  \"reach\",\n  \"reacquire\",\n  \"reaction\",\n  \"reactive\",\n  \"reactor\",\n  \"reaffirm\",\n  \"ream\",\n  \"reanalyze\",\n  \"reappear\",\n  \"reapply\",\n  \"reappoint\",\n  \"reapprove\",\n  \"rearrange\",\n  \"rearview\",\n  \"reason\",\n  \"reassign\",\n  \"reassure\",\n  \"reattach\",\n  \"reawake\",\n  \"rebalance\",\n  \"rebate\",\n  \"rebel\",\n  \"rebirth\",\n  \"reboot\",\n  \"reborn\",\n  \"rebound\",\n  \"rebuff\",\n  \"rebuild\",\n  \"rebuilt\",\n  \"reburial\",\n  \"rebuttal\",\n  \"recall\",\n  \"recant\",\n  \"recapture\",\n  \"recast\",\n  \"recede\",\n  \"recent\",\n  \"recess\",\n  \"recharger\",\n  \"recipient\",\n  \"recital\",\n  \"recite\",\n  \"reckless\",\n  \"reclaim\",\n  \"recliner\",\n  \"reclining\",\n  \"recluse\",\n  \"reclusive\",\n  \"recognize\",\n  \"recoil\",\n  \"recollect\",\n  \"recolor\",\n  \"reconcile\",\n  \"reconfirm\",\n  \"reconvene\",\n  \"recopy\",\n  \"record\",\n  \"recount\",\n  \"recoup\",\n  \"recovery\",\n  \"recreate\",\n  \"rectal\",\n  \"rectangle\",\n  \"rectified\",\n  \"rectify\",\n  \"recycled\",\n  \"recycler\",\n  \"recycling\",\n  \"reemerge\",\n  \"reenact\",\n  \"reenter\",\n  \"reentry\",\n  \"reexamine\",\n  \"referable\",\n  \"referee\",\n  \"reference\",\n  \"refill\",\n  \"refinance\",\n  \"refined\",\n  \"refinery\",\n  \"refining\",\n  \"refinish\",\n  \"reflected\",\n  \"reflector\",\n  \"reflex\",\n  \"reflux\",\n  \"refocus\",\n  \"refold\",\n  \"reforest\",\n  \"reformat\",\n  \"reformed\",\n  \"reformer\",\n  \"reformist\",\n  \"refract\",\n  \"refrain\",\n  \"refreeze\",\n  \"refresh\",\n  \"refried\",\n  \"refueling\",\n  \"refund\",\n  \"refurbish\",\n  \"refurnish\",\n  \"refusal\",\n  \"refuse\",\n  \"refusing\",\n  \"refutable\",\n  \"refute\",\n  \"regain\",\n  \"regalia\",\n  \"regally\",\n  \"reggae\",\n  \"regime\",\n  \"region\",\n  \"register\",\n  \"registrar\",\n  \"registry\",\n  \"regress\",\n  \"regretful\",\n  \"regroup\",\n  \"regular\",\n  \"regulate\",\n  \"regulator\",\n  \"rehab\",\n  \"reheat\",\n  \"rehire\",\n  \"rehydrate\",\n  \"reimburse\",\n  \"reissue\",\n  \"reiterate\",\n  \"rejoice\",\n  \"rejoicing\",\n  \"rejoin\",\n  \"rekindle\",\n  \"relapse\",\n  \"relapsing\",\n  \"relatable\",\n  \"related\",\n  \"relation\",\n  \"relative\",\n  \"relax\",\n  \"relay\",\n  \"relearn\",\n  \"release\",\n  \"relenting\",\n  \"reliable\",\n  \"reliably\",\n  \"reliance\",\n  \"reliant\",\n  \"relic\",\n  \"relieve\",\n  \"relieving\",\n  \"relight\",\n  \"relish\",\n  \"relive\",\n  \"reload\",\n  \"relocate\",\n  \"relock\",\n  \"reluctant\",\n  \"rely\",\n  \"remake\",\n  \"remark\",\n  \"remarry\",\n  \"rematch\",\n  \"remedial\",\n  \"remedy\",\n  \"remember\",\n  \"reminder\",\n  \"remindful\",\n  \"remission\",\n  \"remix\",\n  \"remnant\",\n  \"remodeler\",\n  \"remold\",\n  \"remorse\",\n  \"remote\",\n  \"removable\",\n  \"removal\",\n  \"removed\",\n  \"remover\",\n  \"removing\",\n  \"rename\",\n  \"renderer\",\n  \"rendering\",\n  \"rendition\",\n  \"renegade\",\n  \"renewable\",\n  \"renewably\",\n  \"renewal\",\n  \"renewed\",\n  \"renounce\",\n  \"renovate\",\n  \"renovator\",\n  \"rentable\",\n  \"rental\",\n  \"rented\",\n  \"renter\",\n  \"reoccupy\",\n  \"reoccur\",\n  \"reopen\",\n  \"reorder\",\n  \"repackage\",\n  \"repacking\",\n  \"repaint\",\n  \"repair\",\n  \"repave\",\n  \"repaying\",\n  \"repayment\",\n  \"repeal\",\n  \"repeated\",\n  \"repeater\",\n  \"repent\",\n  \"rephrase\",\n  \"replace\",\n  \"replay\",\n  \"replica\",\n  \"reply\",\n  \"reporter\",\n  \"repose\",\n  \"repossess\",\n  \"repost\",\n  \"repressed\",\n  \"reprimand\",\n  \"reprint\",\n  \"reprise\",\n  \"reproach\",\n  \"reprocess\",\n  \"reproduce\",\n  \"reprogram\",\n  \"reps\",\n  \"reptile\",\n  \"reptilian\",\n  \"repugnant\",\n  \"repulsion\",\n  \"repulsive\",\n  \"repurpose\",\n  \"reputable\",\n  \"reputably\",\n  \"request\",\n  \"require\",\n  \"requisite\",\n  \"reroute\",\n  \"rerun\",\n  \"resale\",\n  \"resample\",\n  \"rescuer\",\n  \"reseal\",\n  \"research\",\n  \"reselect\",\n  \"reseller\",\n  \"resemble\",\n  \"resend\",\n  \"resent\",\n  \"reset\",\n  \"reshape\",\n  \"reshoot\",\n  \"reshuffle\",\n  \"residence\",\n  \"residency\",\n  \"resident\",\n  \"residual\",\n  \"residue\",\n  \"resigned\",\n  \"resilient\",\n  \"resistant\",\n  \"resisting\",\n  \"resize\",\n  \"resolute\",\n  \"resolved\",\n  \"resonant\",\n  \"resonate\",\n  \"resort\",\n  \"resource\",\n  \"respect\",\n  \"resubmit\",\n  \"result\",\n  \"resume\",\n  \"resupply\",\n  \"resurface\",\n  \"resurrect\",\n  \"retail\",\n  \"retainer\",\n  \"retaining\",\n  \"retake\",\n  \"retaliate\",\n  \"retention\",\n  \"rethink\",\n  \"retinal\",\n  \"retired\",\n  \"retiree\",\n  \"retiring\",\n  \"retold\",\n  \"retool\",\n  \"retorted\",\n  \"retouch\",\n  \"retrace\",\n  \"retract\",\n  \"retrain\",\n  \"retread\",\n  \"retreat\",\n  \"retrial\",\n  \"retrieval\",\n  \"retriever\",\n  \"retry\",\n  \"return\",\n  \"retying\",\n  \"retype\",\n  \"reunion\",\n  \"reunite\",\n  \"reusable\",\n  \"reuse\",\n  \"reveal\",\n  \"reveler\",\n  \"revenge\",\n  \"revenue\",\n  \"reverb\",\n  \"revered\",\n  \"reverence\",\n  \"reverend\",\n  \"reversal\",\n  \"reverse\",\n  \"reversing\",\n  \"reversion\",\n  \"revert\",\n  \"revisable\",\n  \"revise\",\n  \"revision\",\n  \"revisit\",\n  \"revivable\",\n  \"revival\",\n  \"reviver\",\n  \"reviving\",\n  \"revocable\",\n  \"revoke\",\n  \"revolt\",\n  \"revolver\",\n  \"revolving\",\n  \"reward\",\n  \"rewash\",\n  \"rewind\",\n  \"rewire\",\n  \"reword\",\n  \"rework\",\n  \"rewrap\",\n  \"rewrite\",\n  \"rhyme\",\n  \"ribbon\",\n  \"ribcage\",\n  \"rice\",\n  \"riches\",\n  \"richly\",\n  \"richness\",\n  \"rickety\",\n  \"ricotta\",\n  \"riddance\",\n  \"ridden\",\n  \"ride\",\n  \"riding\",\n  \"rifling\",\n  \"rift\",\n  \"rigging\",\n  \"rigid\",\n  \"rigor\",\n  \"rimless\",\n  \"rimmed\",\n  \"rind\",\n  \"rink\",\n  \"rinse\",\n  \"rinsing\",\n  \"riot\",\n  \"ripcord\",\n  \"ripeness\",\n  \"ripening\",\n  \"ripping\",\n  \"ripple\",\n  \"rippling\",\n  \"riptide\",\n  \"rise\",\n  \"rising\",\n  \"risk\",\n  \"risotto\",\n  \"ritalin\",\n  \"ritzy\",\n  \"rival\",\n  \"riverbank\",\n  \"riverbed\",\n  \"riverboat\",\n  \"riverside\",\n  \"riveter\",\n  \"riveting\",\n  \"roamer\",\n  \"roaming\",\n  \"roast\",\n  \"robbing\",\n  \"robe\",\n  \"robin\",\n  \"robotics\",\n  \"robust\",\n  \"rockband\",\n  \"rocker\",\n  \"rocket\",\n  \"rockfish\",\n  \"rockiness\",\n  \"rocking\",\n  \"rocklike\",\n  \"rockslide\",\n  \"rockstar\",\n  \"rocky\",\n  \"rogue\",\n  \"roman\",\n  \"romp\",\n  \"rope\",\n  \"roping\",\n  \"roster\",\n  \"rosy\",\n  \"rotten\",\n  \"rotting\",\n  \"rotunda\",\n  \"roulette\",\n  \"rounding\",\n  \"roundish\",\n  \"roundness\",\n  \"roundup\",\n  \"roundworm\",\n  \"routine\",\n  \"routing\",\n  \"rover\",\n  \"roving\",\n  \"royal\",\n  \"rubbed\",\n  \"rubber\",\n  \"rubbing\",\n  \"rubble\",\n  \"rubdown\",\n  \"ruby\",\n  \"ruckus\",\n  \"rudder\",\n  \"rug\",\n  \"ruined\",\n  \"rule\",\n  \"rumble\",\n  \"rumbling\",\n  \"rummage\",\n  \"rumor\",\n  \"runaround\",\n  \"rundown\",\n  \"runner\",\n  \"running\",\n  \"runny\",\n  \"runt\",\n  \"runway\",\n  \"rupture\",\n  \"rural\",\n  \"ruse\",\n  \"rush\",\n  \"rust\",\n  \"rut\",\n  \"sabbath\",\n  \"sabotage\",\n  \"sacrament\",\n  \"sacred\",\n  \"sacrifice\",\n  \"sadden\",\n  \"saddlebag\",\n  \"saddled\",\n  \"saddling\",\n  \"sadly\",\n  \"sadness\",\n  \"safari\",\n  \"safeguard\",\n  \"safehouse\",\n  \"safely\",\n  \"safeness\",\n  \"saffron\",\n  \"saga\",\n  \"sage\",\n  \"sagging\",\n  \"saggy\",\n  \"said\",\n  \"saint\",\n  \"sake\",\n  \"salad\",\n  \"salami\",\n  \"salaried\",\n  \"salary\",\n  \"saline\",\n  \"salon\",\n  \"saloon\",\n  \"salsa\",\n  \"salt\",\n  \"salutary\",\n  \"salute\",\n  \"salvage\",\n  \"salvaging\",\n  \"salvation\",\n  \"same\",\n  \"sample\",\n  \"sampling\",\n  \"sanction\",\n  \"sanctity\",\n  \"sanctuary\",\n  \"sandal\",\n  \"sandbag\",\n  \"sandbank\",\n  \"sandbar\",\n  \"sandblast\",\n  \"sandbox\",\n  \"sanded\",\n  \"sandfish\",\n  \"sanding\",\n  \"sandlot\",\n  \"sandpaper\",\n  \"sandpit\",\n  \"sandstone\",\n  \"sandstorm\",\n  \"sandworm\",\n  \"sandy\",\n  \"sanitary\",\n  \"sanitizer\",\n  \"sank\",\n  \"santa\",\n  \"sapling\",\n  \"sappiness\",\n  \"sappy\",\n  \"sarcasm\",\n  \"sarcastic\",\n  \"sardine\",\n  \"sash\",\n  \"sasquatch\",\n  \"sassy\",\n  \"satchel\",\n  \"satiable\",\n  \"satin\",\n  \"satirical\",\n  \"satisfied\",\n  \"satisfy\",\n  \"saturate\",\n  \"saturday\",\n  \"sauciness\",\n  \"saucy\",\n  \"sauna\",\n  \"savage\",\n  \"savanna\",\n  \"saved\",\n  \"savings\",\n  \"savior\",\n  \"savor\",\n  \"saxophone\",\n  \"say\",\n  \"scabbed\",\n  \"scabby\",\n  \"scalded\",\n  \"scalding\",\n  \"scale\",\n  \"scaling\",\n  \"scallion\",\n  \"scallop\",\n  \"scalping\",\n  \"scam\",\n  \"scandal\",\n  \"scanner\",\n  \"scanning\",\n  \"scant\",\n  \"scapegoat\",\n  \"scarce\",\n  \"scarcity\",\n  \"scarecrow\",\n  \"scared\",\n  \"scarf\",\n  \"scarily\",\n  \"scariness\",\n  \"scarring\",\n  \"scary\",\n  \"scavenger\",\n  \"scenic\",\n  \"schedule\",\n  \"schematic\",\n  \"scheme\",\n  \"scheming\",\n  \"schilling\",\n  \"schnapps\",\n  \"scholar\",\n  \"science\",\n  \"scientist\",\n  \"scion\",\n  \"scoff\",\n  \"scolding\",\n  \"scone\",\n  \"scoop\",\n  \"scooter\",\n  \"scope\",\n  \"scorch\",\n  \"scorebook\",\n  \"scorecard\",\n  \"scored\",\n  \"scoreless\",\n  \"scorer\",\n  \"scoring\",\n  \"scorn\",\n  \"scorpion\",\n  \"scotch\",\n  \"scoundrel\",\n  \"scoured\",\n  \"scouring\",\n  \"scouting\",\n  \"scouts\",\n  \"scowling\",\n  \"scrabble\",\n  \"scraggly\",\n  \"scrambled\",\n  \"scrambler\",\n  \"scrap\",\n  \"scratch\",\n  \"scrawny\",\n  \"screen\",\n  \"scribble\",\n  \"scribe\",\n  \"scribing\",\n  \"scrimmage\",\n  \"script\",\n  \"scroll\",\n  \"scrooge\",\n  \"scrounger\",\n  \"scrubbed\",\n  \"scrubber\",\n  \"scruffy\",\n  \"scrunch\",\n  \"scrutiny\",\n  \"scuba\",\n  \"scuff\",\n  \"sculptor\",\n  \"sculpture\",\n  \"scurvy\",\n  \"scuttle\",\n  \"secluded\",\n  \"secluding\",\n  \"seclusion\",\n  \"second\",\n  \"secrecy\",\n  \"secret\",\n  \"sectional\",\n  \"sector\",\n  \"secular\",\n  \"securely\",\n  \"security\",\n  \"sedan\",\n  \"sedate\",\n  \"sedation\",\n  \"sedative\",\n  \"sediment\",\n  \"seduce\",\n  \"seducing\",\n  \"segment\",\n  \"seismic\",\n  \"seizing\",\n  \"seldom\",\n  \"selected\",\n  \"selection\",\n  \"selective\",\n  \"selector\",\n  \"self\",\n  \"seltzer\",\n  \"semantic\",\n  \"semester\",\n  \"semicolon\",\n  \"semifinal\",\n  \"seminar\",\n  \"semisoft\",\n  \"semisweet\",\n  \"senate\",\n  \"senator\",\n  \"send\",\n  \"senior\",\n  \"senorita\",\n  \"sensation\",\n  \"sensitive\",\n  \"sensitize\",\n  \"sensually\",\n  \"sensuous\",\n  \"sepia\",\n  \"september\",\n  \"septic\",\n  \"septum\",\n  \"sequel\",\n  \"sequence\",\n  \"sequester\",\n  \"series\",\n  \"sermon\",\n  \"serotonin\",\n  \"serpent\",\n  \"serrated\",\n  \"serve\",\n  \"service\",\n  \"serving\",\n  \"sesame\",\n  \"sessions\",\n  \"setback\",\n  \"setting\",\n  \"settle\",\n  \"settling\",\n  \"setup\",\n  \"sevenfold\",\n  \"seventeen\",\n  \"seventh\",\n  \"seventy\",\n  \"severity\",\n  \"shabby\",\n  \"shack\",\n  \"shaded\",\n  \"shadily\",\n  \"shadiness\",\n  \"shading\",\n  \"shadow\",\n  \"shady\",\n  \"shaft\",\n  \"shakable\",\n  \"shakily\",\n  \"shakiness\",\n  \"shaking\",\n  \"shaky\",\n  \"shale\",\n  \"shallot\",\n  \"shallow\",\n  \"shame\",\n  \"shampoo\",\n  \"shamrock\",\n  \"shank\",\n  \"shanty\",\n  \"shape\",\n  \"shaping\",\n  \"share\",\n  \"sharpener\",\n  \"sharper\",\n  \"sharpie\",\n  \"sharply\",\n  \"sharpness\",\n  \"shawl\",\n  \"sheath\",\n  \"shed\",\n  \"sheep\",\n  \"sheet\",\n  \"shelf\",\n  \"shell\",\n  \"shelter\",\n  \"shelve\",\n  \"shelving\",\n  \"sherry\",\n  \"shield\",\n  \"shifter\",\n  \"shifting\",\n  \"shiftless\",\n  \"shifty\",\n  \"shimmer\",\n  \"shimmy\",\n  \"shindig\",\n  \"shine\",\n  \"shingle\",\n  \"shininess\",\n  \"shining\",\n  \"shiny\",\n  \"ship\",\n  \"shirt\",\n  \"shivering\",\n  \"shock\",\n  \"shone\",\n  \"shoplift\",\n  \"shopper\",\n  \"shopping\",\n  \"shoptalk\",\n  \"shore\",\n  \"shortage\",\n  \"shortcake\",\n  \"shortcut\",\n  \"shorten\",\n  \"shorter\",\n  \"shorthand\",\n  \"shortlist\",\n  \"shortly\",\n  \"shortness\",\n  \"shorts\",\n  \"shortwave\",\n  \"shorty\",\n  \"shout\",\n  \"shove\",\n  \"showbiz\",\n  \"showcase\",\n  \"showdown\",\n  \"shower\",\n  \"showgirl\",\n  \"showing\",\n  \"showman\",\n  \"shown\",\n  \"showoff\",\n  \"showpiece\",\n  \"showplace\",\n  \"showroom\",\n  \"showy\",\n  \"shrank\",\n  \"shrapnel\",\n  \"shredder\",\n  \"shredding\",\n  \"shrewdly\",\n  \"shriek\",\n  \"shrill\",\n  \"shrimp\",\n  \"shrine\",\n  \"shrink\",\n  \"shrivel\",\n  \"shrouded\",\n  \"shrubbery\",\n  \"shrubs\",\n  \"shrug\",\n  \"shrunk\",\n  \"shucking\",\n  \"shudder\",\n  \"shuffle\",\n  \"shuffling\",\n  \"shun\",\n  \"shush\",\n  \"shut\",\n  \"shy\",\n  \"siamese\",\n  \"siberian\",\n  \"sibling\",\n  \"siding\",\n  \"sierra\",\n  \"siesta\",\n  \"sift\",\n  \"sighing\",\n  \"silenced\",\n  \"silencer\",\n  \"silent\",\n  \"silica\",\n  \"silicon\",\n  \"silk\",\n  \"silliness\",\n  \"silly\",\n  \"silo\",\n  \"silt\",\n  \"silver\",\n  \"similarly\",\n  \"simile\",\n  \"simmering\",\n  \"simple\",\n  \"simplify\",\n  \"simply\",\n  \"sincere\",\n  \"sincerity\",\n  \"singer\",\n  \"singing\",\n  \"single\",\n  \"singular\",\n  \"sinister\",\n  \"sinless\",\n  \"sinner\",\n  \"sinuous\",\n  \"sip\",\n  \"siren\",\n  \"sister\",\n  \"sitcom\",\n  \"sitter\",\n  \"sitting\",\n  \"situated\",\n  \"situation\",\n  \"sixfold\",\n  \"sixteen\",\n  \"sixth\",\n  \"sixties\",\n  \"sixtieth\",\n  \"sixtyfold\",\n  \"sizable\",\n  \"sizably\",\n  \"size\",\n  \"sizing\",\n  \"sizzle\",\n  \"sizzling\",\n  \"skater\",\n  \"skating\",\n  \"skedaddle\",\n  \"skeletal\",\n  \"skeleton\",\n  \"skeptic\",\n  \"sketch\",\n  \"skewed\",\n  \"skewer\",\n  \"skid\",\n  \"skied\",\n  \"skier\",\n  \"skies\",\n  \"skiing\",\n  \"skilled\",\n  \"skillet\",\n  \"skillful\",\n  \"skimmed\",\n  \"skimmer\",\n  \"skimming\",\n  \"skimpily\",\n  \"skincare\",\n  \"skinhead\",\n  \"skinless\",\n  \"skinning\",\n  \"skinny\",\n  \"skintight\",\n  \"skipper\",\n  \"skipping\",\n  \"skirmish\",\n  \"skirt\",\n  \"skittle\",\n  \"skydiver\",\n  \"skylight\",\n  \"skyline\",\n  \"skype\",\n  \"skyrocket\",\n  \"skyward\",\n  \"slab\",\n  \"slacked\",\n  \"slacker\",\n  \"slacking\",\n  \"slackness\",\n  \"slacks\",\n  \"slain\",\n  \"slam\",\n  \"slander\",\n  \"slang\",\n  \"slapping\",\n  \"slapstick\",\n  \"slashed\",\n  \"slashing\",\n  \"slate\",\n  \"slather\",\n  \"slaw\",\n  \"sled\",\n  \"sleek\",\n  \"sleep\",\n  \"sleet\",\n  \"sleeve\",\n  \"slept\",\n  \"sliceable\",\n  \"sliced\",\n  \"slicer\",\n  \"slicing\",\n  \"slick\",\n  \"slider\",\n  \"slideshow\",\n  \"sliding\",\n  \"slighted\",\n  \"slighting\",\n  \"slightly\",\n  \"slimness\",\n  \"slimy\",\n  \"slinging\",\n  \"slingshot\",\n  \"slinky\",\n  \"slip\",\n  \"slit\",\n  \"sliver\",\n  \"slobbery\",\n  \"slogan\",\n  \"sloped\",\n  \"sloping\",\n  \"sloppily\",\n  \"sloppy\",\n  \"slot\",\n  \"slouching\",\n  \"slouchy\",\n  \"sludge\",\n  \"slug\",\n  \"slum\",\n  \"slurp\",\n  \"slush\",\n  \"sly\",\n  \"small\",\n  \"smartly\",\n  \"smartness\",\n  \"smasher\",\n  \"smashing\",\n  \"smashup\",\n  \"smell\",\n  \"smelting\",\n  \"smile\",\n  \"smilingly\",\n  \"smirk\",\n  \"smite\",\n  \"smith\",\n  \"smitten\",\n  \"smock\",\n  \"smog\",\n  \"smoked\",\n  \"smokeless\",\n  \"smokiness\",\n  \"smoking\",\n  \"smoky\",\n  \"smolder\",\n  \"smooth\",\n  \"smother\",\n  \"smudge\",\n  \"smudgy\",\n  \"smuggler\",\n  \"smuggling\",\n  \"smugly\",\n  \"smugness\",\n  \"snack\",\n  \"snagged\",\n  \"snaking\",\n  \"snap\",\n  \"snare\",\n  \"snarl\",\n  \"snazzy\",\n  \"sneak\",\n  \"sneer\",\n  \"sneeze\",\n  \"sneezing\",\n  \"snide\",\n  \"sniff\",\n  \"snippet\",\n  \"snipping\",\n  \"snitch\",\n  \"snooper\",\n  \"snooze\",\n  \"snore\",\n  \"snoring\",\n  \"snorkel\",\n  \"snort\",\n  \"snout\",\n  \"snowbird\",\n  \"snowboard\",\n  \"snowbound\",\n  \"snowcap\",\n  \"snowdrift\",\n  \"snowdrop\",\n  \"snowfall\",\n  \"snowfield\",\n  \"snowflake\",\n  \"snowiness\",\n  \"snowless\",\n  \"snowman\",\n  \"snowplow\",\n  \"snowshoe\",\n  \"snowstorm\",\n  \"snowsuit\",\n  \"snowy\",\n  \"snub\",\n  \"snuff\",\n  \"snuggle\",\n  \"snugly\",\n  \"snugness\",\n  \"speak\",\n  \"spearfish\",\n  \"spearhead\",\n  \"spearman\",\n  \"spearmint\",\n  \"species\",\n  \"specimen\",\n  \"specked\",\n  \"speckled\",\n  \"specks\",\n  \"spectacle\",\n  \"spectator\",\n  \"spectrum\",\n  \"speculate\",\n  \"speech\",\n  \"speed\",\n  \"spellbind\",\n  \"speller\",\n  \"spelling\",\n  \"spendable\",\n  \"spender\",\n  \"spending\",\n  \"spent\",\n  \"spew\",\n  \"sphere\",\n  \"spherical\",\n  \"sphinx\",\n  \"spider\",\n  \"spied\",\n  \"spiffy\",\n  \"spill\",\n  \"spilt\",\n  \"spinach\",\n  \"spinal\",\n  \"spindle\",\n  \"spinner\",\n  \"spinning\",\n  \"spinout\",\n  \"spinster\",\n  \"spiny\",\n  \"spiral\",\n  \"spirited\",\n  \"spiritism\",\n  \"spirits\",\n  \"spiritual\",\n  \"splashed\",\n  \"splashing\",\n  \"splashy\",\n  \"splatter\",\n  \"spleen\",\n  \"splendid\",\n  \"splendor\",\n  \"splice\",\n  \"splicing\",\n  \"splinter\",\n  \"splotchy\",\n  \"splurge\",\n  \"spoilage\",\n  \"spoiled\",\n  \"spoiler\",\n  \"spoiling\",\n  \"spoils\",\n  \"spoken\",\n  \"spokesman\",\n  \"sponge\",\n  \"spongy\",\n  \"sponsor\",\n  \"spoof\",\n  \"spookily\",\n  \"spooky\",\n  \"spool\",\n  \"spoon\",\n  \"spore\",\n  \"sporting\",\n  \"sports\",\n  \"sporty\",\n  \"spotless\",\n  \"spotlight\",\n  \"spotted\",\n  \"spotter\",\n  \"spotting\",\n  \"spotty\",\n  \"spousal\",\n  \"spouse\",\n  \"spout\",\n  \"sprain\",\n  \"sprang\",\n  \"sprawl\",\n  \"spray\",\n  \"spree\",\n  \"sprig\",\n  \"spring\",\n  \"sprinkled\",\n  \"sprinkler\",\n  \"sprint\",\n  \"sprite\",\n  \"sprout\",\n  \"spruce\",\n  \"sprung\",\n  \"spry\",\n  \"spud\",\n  \"spur\",\n  \"sputter\",\n  \"spyglass\",\n  \"squabble\",\n  \"squad\",\n  \"squall\",\n  \"squander\",\n  \"squash\",\n  \"squatted\",\n  \"squatter\",\n  \"squatting\",\n  \"squeak\",\n  \"squealer\",\n  \"squealing\",\n  \"squeamish\",\n  \"squeegee\",\n  \"squeeze\",\n  \"squeezing\",\n  \"squid\",\n  \"squiggle\",\n  \"squiggly\",\n  \"squint\",\n  \"squire\",\n  \"squirt\",\n  \"squishier\",\n  \"squishy\",\n  \"stability\",\n  \"stabilize\",\n  \"stable\",\n  \"stack\",\n  \"stadium\",\n  \"staff\",\n  \"stage\",\n  \"staging\",\n  \"stagnant\",\n  \"stagnate\",\n  \"stainable\",\n  \"stained\",\n  \"staining\",\n  \"stainless\",\n  \"stalemate\",\n  \"staleness\",\n  \"stalling\",\n  \"stallion\",\n  \"stamina\",\n  \"stammer\",\n  \"stamp\",\n  \"stand\",\n  \"stank\",\n  \"staple\",\n  \"stapling\",\n  \"starboard\",\n  \"starch\",\n  \"stardom\",\n  \"stardust\",\n  \"starfish\",\n  \"stargazer\",\n  \"staring\",\n  \"stark\",\n  \"starless\",\n  \"starlet\",\n  \"starlight\",\n  \"starlit\",\n  \"starring\",\n  \"starry\",\n  \"starship\",\n  \"starter\",\n  \"starting\",\n  \"startle\",\n  \"startling\",\n  \"startup\",\n  \"starved\",\n  \"starving\",\n  \"stash\",\n  \"state\",\n  \"static\",\n  \"statistic\",\n  \"statue\",\n  \"stature\",\n  \"status\",\n  \"statute\",\n  \"statutory\",\n  \"staunch\",\n  \"stays\",\n  \"steadfast\",\n  \"steadier\",\n  \"steadily\",\n  \"steadying\",\n  \"steam\",\n  \"steed\",\n  \"steep\",\n  \"steerable\",\n  \"steering\",\n  \"steersman\",\n  \"stegosaur\",\n  \"stellar\",\n  \"stem\",\n  \"stench\",\n  \"stencil\",\n  \"step\",\n  \"stereo\",\n  \"sterile\",\n  \"sterility\",\n  \"sterilize\",\n  \"sterling\",\n  \"sternness\",\n  \"sternum\",\n  \"stew\",\n  \"stick\",\n  \"stiffen\",\n  \"stiffly\",\n  \"stiffness\",\n  \"stifle\",\n  \"stifling\",\n  \"stillness\",\n  \"stilt\",\n  \"stimulant\",\n  \"stimulate\",\n  \"stimuli\",\n  \"stimulus\",\n  \"stinger\",\n  \"stingily\",\n  \"stinging\",\n  \"stingray\",\n  \"stingy\",\n  \"stinking\",\n  \"stinky\",\n  \"stipend\",\n  \"stipulate\",\n  \"stir\",\n  \"stitch\",\n  \"stock\",\n  \"stoic\",\n  \"stoke\",\n  \"stole\",\n  \"stomp\",\n  \"stonewall\",\n  \"stoneware\",\n  \"stonework\",\n  \"stoning\",\n  \"stony\",\n  \"stood\",\n  \"stooge\",\n  \"stool\",\n  \"stoop\",\n  \"stoplight\",\n  \"stoppable\",\n  \"stoppage\",\n  \"stopped\",\n  \"stopper\",\n  \"stopping\",\n  \"stopwatch\",\n  \"storable\",\n  \"storage\",\n  \"storeroom\",\n  \"storewide\",\n  \"storm\",\n  \"stout\",\n  \"stove\",\n  \"stowaway\",\n  \"stowing\",\n  \"straddle\",\n  \"straggler\",\n  \"strained\",\n  \"strainer\",\n  \"straining\",\n  \"strangely\",\n  \"stranger\",\n  \"strangle\",\n  \"strategic\",\n  \"strategy\",\n  \"stratus\",\n  \"straw\",\n  \"stray\",\n  \"streak\",\n  \"stream\",\n  \"street\",\n  \"strength\",\n  \"strenuous\",\n  \"strep\",\n  \"stress\",\n  \"stretch\",\n  \"strewn\",\n  \"stricken\",\n  \"strict\",\n  \"stride\",\n  \"strife\",\n  \"strike\",\n  \"striking\",\n  \"strive\",\n  \"striving\",\n  \"strobe\",\n  \"strode\",\n  \"stroller\",\n  \"strongbox\",\n  \"strongly\",\n  \"strongman\",\n  \"struck\",\n  \"structure\",\n  \"strudel\",\n  \"struggle\",\n  \"strum\",\n  \"strung\",\n  \"strut\",\n  \"stubbed\",\n  \"stubble\",\n  \"stubbly\",\n  \"stubborn\",\n  \"stucco\",\n  \"stuck\",\n  \"student\",\n  \"studied\",\n  \"studio\",\n  \"study\",\n  \"stuffed\",\n  \"stuffing\",\n  \"stuffy\",\n  \"stumble\",\n  \"stumbling\",\n  \"stump\",\n  \"stung\",\n  \"stunned\",\n  \"stunner\",\n  \"stunning\",\n  \"stunt\",\n  \"stupor\",\n  \"sturdily\",\n  \"sturdy\",\n  \"styling\",\n  \"stylishly\",\n  \"stylist\",\n  \"stylized\",\n  \"stylus\",\n  \"suave\",\n  \"subarctic\",\n  \"subatomic\",\n  \"subdivide\",\n  \"subdued\",\n  \"subduing\",\n  \"subfloor\",\n  \"subgroup\",\n  \"subheader\",\n  \"subject\",\n  \"sublease\",\n  \"sublet\",\n  \"sublevel\",\n  \"sublime\",\n  \"submarine\",\n  \"submerge\",\n  \"submersed\",\n  \"submitter\",\n  \"subpanel\",\n  \"subpar\",\n  \"subplot\",\n  \"subprime\",\n  \"subscribe\",\n  \"subscript\",\n  \"subsector\",\n  \"subside\",\n  \"subsiding\",\n  \"subsidize\",\n  \"subsidy\",\n  \"subsoil\",\n  \"subsonic\",\n  \"substance\",\n  \"subsystem\",\n  \"subtext\",\n  \"subtitle\",\n  \"subtly\",\n  \"subtotal\",\n  \"subtract\",\n  \"subtype\",\n  \"suburb\",\n  \"subway\",\n  \"subwoofer\",\n  \"subzero\",\n  \"succulent\",\n  \"such\",\n  \"suction\",\n  \"sudden\",\n  \"sudoku\",\n  \"suds\",\n  \"sufferer\",\n  \"suffering\",\n  \"suffice\",\n  \"suffix\",\n  \"suffocate\",\n  \"suffrage\",\n  \"sugar\",\n  \"suggest\",\n  \"suing\",\n  \"suitable\",\n  \"suitably\",\n  \"suitcase\",\n  \"suitor\",\n  \"sulfate\",\n  \"sulfide\",\n  \"sulfite\",\n  \"sulfur\",\n  \"sulk\",\n  \"sullen\",\n  \"sulphate\",\n  \"sulphuric\",\n  \"sultry\",\n  \"superbowl\",\n  \"superglue\",\n  \"superhero\",\n  \"superior\",\n  \"superjet\",\n  \"superman\",\n  \"supermom\",\n  \"supernova\",\n  \"supervise\",\n  \"supper\",\n  \"supplier\",\n  \"supply\",\n  \"support\",\n  \"supremacy\",\n  \"supreme\",\n  \"surcharge\",\n  \"surely\",\n  \"sureness\",\n  \"surface\",\n  \"surfacing\",\n  \"surfboard\",\n  \"surfer\",\n  \"surgery\",\n  \"surgical\",\n  \"surging\",\n  \"surname\",\n  \"surpass\",\n  \"surplus\",\n  \"surprise\",\n  \"surreal\",\n  \"surrender\",\n  \"surrogate\",\n  \"surround\",\n  \"survey\",\n  \"survival\",\n  \"survive\",\n  \"surviving\",\n  \"survivor\",\n  \"sushi\",\n  \"suspect\",\n  \"suspend\",\n  \"suspense\",\n  \"sustained\",\n  \"sustainer\",\n  \"swab\",\n  \"swaddling\",\n  \"swagger\",\n  \"swampland\",\n  \"swan\",\n  \"swapping\",\n  \"swarm\",\n  \"sway\",\n  \"swear\",\n  \"sweat\",\n  \"sweep\",\n  \"swell\",\n  \"swept\",\n  \"swerve\",\n  \"swifter\",\n  \"swiftly\",\n  \"swiftness\",\n  \"swimmable\",\n  \"swimmer\",\n  \"swimming\",\n  \"swimsuit\",\n  \"swimwear\",\n  \"swinger\",\n  \"swinging\",\n  \"swipe\",\n  \"swirl\",\n  \"switch\",\n  \"swivel\",\n  \"swizzle\",\n  \"swooned\",\n  \"swoop\",\n  \"swoosh\",\n  \"swore\",\n  \"sworn\",\n  \"swung\",\n  \"sycamore\",\n  \"sympathy\",\n  \"symphonic\",\n  \"symphony\",\n  \"symptom\",\n  \"synapse\",\n  \"syndrome\",\n  \"synergy\",\n  \"synopses\",\n  \"synopsis\",\n  \"synthesis\",\n  \"synthetic\",\n  \"syrup\",\n  \"system\",\n  \"t-shirt\",\n  \"tabasco\",\n  \"tabby\",\n  \"tableful\",\n  \"tables\",\n  \"tablet\",\n  \"tableware\",\n  \"tabloid\",\n  \"tackiness\",\n  \"tacking\",\n  \"tackle\",\n  \"tackling\",\n  \"tacky\",\n  \"taco\",\n  \"tactful\",\n  \"tactical\",\n  \"tactics\",\n  \"tactile\",\n  \"tactless\",\n  \"tadpole\",\n  \"taekwondo\",\n  \"tag\",\n  \"tainted\",\n  \"take\",\n  \"taking\",\n  \"talcum\",\n  \"talisman\",\n  \"tall\",\n  \"talon\",\n  \"tamale\",\n  \"tameness\",\n  \"tamer\",\n  \"tamper\",\n  \"tank\",\n  \"tanned\",\n  \"tannery\",\n  \"tanning\",\n  \"tantrum\",\n  \"tapeless\",\n  \"tapered\",\n  \"tapering\",\n  \"tapestry\",\n  \"tapioca\",\n  \"tapping\",\n  \"taps\",\n  \"tarantula\",\n  \"target\",\n  \"tarmac\",\n  \"tarnish\",\n  \"tarot\",\n  \"tartar\",\n  \"tartly\",\n  \"tartness\",\n  \"task\",\n  \"tassel\",\n  \"taste\",\n  \"tastiness\",\n  \"tasting\",\n  \"tasty\",\n  \"tattered\",\n  \"tattle\",\n  \"tattling\",\n  \"tattoo\",\n  \"taunt\",\n  \"tavern\",\n  \"thank\",\n  \"that\",\n  \"thaw\",\n  \"theater\",\n  \"theatrics\",\n  \"thee\",\n  \"theft\",\n  \"theme\",\n  \"theology\",\n  \"theorize\",\n  \"thermal\",\n  \"thermos\",\n  \"thesaurus\",\n  \"these\",\n  \"thesis\",\n  \"thespian\",\n  \"thicken\",\n  \"thicket\",\n  \"thickness\",\n  \"thieving\",\n  \"thievish\",\n  \"thigh\",\n  \"thimble\",\n  \"thing\",\n  \"think\",\n  \"thinly\",\n  \"thinner\",\n  \"thinness\",\n  \"thinning\",\n  \"thirstily\",\n  \"thirsting\",\n  \"thirsty\",\n  \"thirteen\",\n  \"thirty\",\n  \"thong\",\n  \"thorn\",\n  \"those\",\n  \"thousand\",\n  \"thrash\",\n  \"thread\",\n  \"threaten\",\n  \"threefold\",\n  \"thrift\",\n  \"thrill\",\n  \"thrive\",\n  \"thriving\",\n  \"throat\",\n  \"throbbing\",\n  \"throng\",\n  \"throttle\",\n  \"throwaway\",\n  \"throwback\",\n  \"thrower\",\n  \"throwing\",\n  \"thud\",\n  \"thumb\",\n  \"thumping\",\n  \"thursday\",\n  \"thus\",\n  \"thwarting\",\n  \"thyself\",\n  \"tiara\",\n  \"tibia\",\n  \"tidal\",\n  \"tidbit\",\n  \"tidiness\",\n  \"tidings\",\n  \"tidy\",\n  \"tiger\",\n  \"tighten\",\n  \"tightly\",\n  \"tightness\",\n  \"tightrope\",\n  \"tightwad\",\n  \"tigress\",\n  \"tile\",\n  \"tiling\",\n  \"till\",\n  \"tilt\",\n  \"timid\",\n  \"timing\",\n  \"timothy\",\n  \"tinderbox\",\n  \"tinfoil\",\n  \"tingle\",\n  \"tingling\",\n  \"tingly\",\n  \"tinker\",\n  \"tinkling\",\n  \"tinsel\",\n  \"tinsmith\",\n  \"tint\",\n  \"tinwork\",\n  \"tiny\",\n  \"tipoff\",\n  \"tipped\",\n  \"tipper\",\n  \"tipping\",\n  \"tiptoeing\",\n  \"tiptop\",\n  \"tiring\",\n  \"tissue\",\n  \"trace\",\n  \"tracing\",\n  \"track\",\n  \"traction\",\n  \"tractor\",\n  \"trade\",\n  \"trading\",\n  \"tradition\",\n  \"traffic\",\n  \"tragedy\",\n  \"trailing\",\n  \"trailside\",\n  \"train\",\n  \"traitor\",\n  \"trance\",\n  \"tranquil\",\n  \"transfer\",\n  \"transform\",\n  \"translate\",\n  \"transpire\",\n  \"transport\",\n  \"transpose\",\n  \"trapdoor\",\n  \"trapeze\",\n  \"trapezoid\",\n  \"trapped\",\n  \"trapper\",\n  \"trapping\",\n  \"traps\",\n  \"trash\",\n  \"travel\",\n  \"traverse\",\n  \"travesty\",\n  \"tray\",\n  \"treachery\",\n  \"treading\",\n  \"treadmill\",\n  \"treason\",\n  \"treat\",\n  \"treble\",\n  \"tree\",\n  \"trekker\",\n  \"tremble\",\n  \"trembling\",\n  \"tremor\",\n  \"trench\",\n  \"trend\",\n  \"trespass\",\n  \"triage\",\n  \"trial\",\n  \"triangle\",\n  \"tribesman\",\n  \"tribunal\",\n  \"tribune\",\n  \"tributary\",\n  \"tribute\",\n  \"triceps\",\n  \"trickery\",\n  \"trickily\",\n  \"tricking\",\n  \"trickle\",\n  \"trickster\",\n  \"tricky\",\n  \"tricolor\",\n  \"tricycle\",\n  \"trident\",\n  \"tried\",\n  \"trifle\",\n  \"trifocals\",\n  \"trillion\",\n  \"trilogy\",\n  \"trimester\",\n  \"trimmer\",\n  \"trimming\",\n  \"trimness\",\n  \"trinity\",\n  \"trio\",\n  \"tripod\",\n  \"tripping\",\n  \"triumph\",\n  \"trivial\",\n  \"trodden\",\n  \"trolling\",\n  \"trombone\",\n  \"trophy\",\n  \"tropical\",\n  \"tropics\",\n  \"trouble\",\n  \"troubling\",\n  \"trough\",\n  \"trousers\",\n  \"trout\",\n  \"trowel\",\n  \"truce\",\n  \"truck\",\n  \"truffle\",\n  \"trump\",\n  \"trunks\",\n  \"trustable\",\n  \"trustee\",\n  \"trustful\",\n  \"trusting\",\n  \"trustless\",\n  \"truth\",\n  \"try\",\n  \"tubby\",\n  \"tubeless\",\n  \"tubular\",\n  \"tucking\",\n  \"tuesday\",\n  \"tug\",\n  \"tuition\",\n  \"tulip\",\n  \"tumble\",\n  \"tumbling\",\n  \"tummy\",\n  \"turban\",\n  \"turbine\",\n  \"turbofan\",\n  \"turbojet\",\n  \"turbulent\",\n  \"turf\",\n  \"turkey\",\n  \"turmoil\",\n  \"turret\",\n  \"turtle\",\n  \"tusk\",\n  \"tutor\",\n  \"tutu\",\n  \"tux\",\n  \"tweak\",\n  \"tweed\",\n  \"tweet\",\n  \"tweezers\",\n  \"twelve\",\n  \"twentieth\",\n  \"twenty\",\n  \"twerp\",\n  \"twice\",\n  \"twiddle\",\n  \"twiddling\",\n  \"twig\",\n  \"twilight\",\n  \"twine\",\n  \"twins\",\n  \"twirl\",\n  \"twistable\",\n  \"twisted\",\n  \"twister\",\n  \"twisting\",\n  \"twisty\",\n  \"twitch\",\n  \"twitter\",\n  \"tycoon\",\n  \"tying\",\n  \"tyke\",\n  \"udder\",\n  \"ultimate\",\n  \"ultimatum\",\n  \"ultra\",\n  \"umbilical\",\n  \"umbrella\",\n  \"umpire\",\n  \"unabashed\",\n  \"unable\",\n  \"unadorned\",\n  \"unadvised\",\n  \"unafraid\",\n  \"unaired\",\n  \"unaligned\",\n  \"unaltered\",\n  \"unarmored\",\n  \"unashamed\",\n  \"unaudited\",\n  \"unawake\",\n  \"unaware\",\n  \"unbaked\",\n  \"unbalance\",\n  \"unbeaten\",\n  \"unbend\",\n  \"unbent\",\n  \"unbiased\",\n  \"unbitten\",\n  \"unblended\",\n  \"unblessed\",\n  \"unblock\",\n  \"unbolted\",\n  \"unbounded\",\n  \"unboxed\",\n  \"unbraided\",\n  \"unbridle\",\n  \"unbroken\",\n  \"unbuckled\",\n  \"unbundle\",\n  \"unburned\",\n  \"unbutton\",\n  \"uncanny\",\n  \"uncapped\",\n  \"uncaring\",\n  \"uncertain\",\n  \"unchain\",\n  \"unchanged\",\n  \"uncharted\",\n  \"uncheck\",\n  \"uncivil\",\n  \"unclad\",\n  \"unclaimed\",\n  \"unclamped\",\n  \"unclasp\",\n  \"uncle\",\n  \"unclip\",\n  \"uncloak\",\n  \"unclog\",\n  \"unclothed\",\n  \"uncoated\",\n  \"uncoiled\",\n  \"uncolored\",\n  \"uncombed\",\n  \"uncommon\",\n  \"uncooked\",\n  \"uncork\",\n  \"uncorrupt\",\n  \"uncounted\",\n  \"uncouple\",\n  \"uncouth\",\n  \"uncover\",\n  \"uncross\",\n  \"uncrown\",\n  \"uncrushed\",\n  \"uncured\",\n  \"uncurious\",\n  \"uncurled\",\n  \"uncut\",\n  \"undamaged\",\n  \"undated\",\n  \"undaunted\",\n  \"undead\",\n  \"undecided\",\n  \"undefined\",\n  \"underage\",\n  \"underarm\",\n  \"undercoat\",\n  \"undercook\",\n  \"undercut\",\n  \"underdog\",\n  \"underdone\",\n  \"underfed\",\n  \"underfeed\",\n  \"underfoot\",\n  \"undergo\",\n  \"undergrad\",\n  \"underhand\",\n  \"underline\",\n  \"underling\",\n  \"undermine\",\n  \"undermost\",\n  \"underpaid\",\n  \"underpass\",\n  \"underpay\",\n  \"underrate\",\n  \"undertake\",\n  \"undertone\",\n  \"undertook\",\n  \"undertow\",\n  \"underuse\",\n  \"underwear\",\n  \"underwent\",\n  \"underwire\",\n  \"undesired\",\n  \"undiluted\",\n  \"undivided\",\n  \"undocked\",\n  \"undoing\",\n  \"undone\",\n  \"undrafted\",\n  \"undress\",\n  \"undrilled\",\n  \"undusted\",\n  \"undying\",\n  \"unearned\",\n  \"unearth\",\n  \"unease\",\n  \"uneasily\",\n  \"uneasy\",\n  \"uneatable\",\n  \"uneaten\",\n  \"unedited\",\n  \"unelected\",\n  \"unending\",\n  \"unengaged\",\n  \"unenvied\",\n  \"unequal\",\n  \"unethical\",\n  \"uneven\",\n  \"unexpired\",\n  \"unexposed\",\n  \"unfailing\",\n  \"unfair\",\n  \"unfasten\",\n  \"unfazed\",\n  \"unfeeling\",\n  \"unfiled\",\n  \"unfilled\",\n  \"unfitted\",\n  \"unfitting\",\n  \"unfixable\",\n  \"unfixed\",\n  \"unflawed\",\n  \"unfocused\",\n  \"unfold\",\n  \"unfounded\",\n  \"unframed\",\n  \"unfreeze\",\n  \"unfrosted\",\n  \"unfrozen\",\n  \"unfunded\",\n  \"unglazed\",\n  \"ungloved\",\n  \"unglue\",\n  \"ungodly\",\n  \"ungraded\",\n  \"ungreased\",\n  \"unguarded\",\n  \"unguided\",\n  \"unhappily\",\n  \"unhappy\",\n  \"unharmed\",\n  \"unhealthy\",\n  \"unheard\",\n  \"unhearing\",\n  \"unheated\",\n  \"unhelpful\",\n  \"unhidden\",\n  \"unhinge\",\n  \"unhitched\",\n  \"unholy\",\n  \"unhook\",\n  \"unicorn\",\n  \"unicycle\",\n  \"unified\",\n  \"unifier\",\n  \"uniformed\",\n  \"uniformly\",\n  \"unify\",\n  \"unimpeded\",\n  \"uninjured\",\n  \"uninstall\",\n  \"uninsured\",\n  \"uninvited\",\n  \"union\",\n  \"uniquely\",\n  \"unisexual\",\n  \"unison\",\n  \"unissued\",\n  \"unit\",\n  \"universal\",\n  \"universe\",\n  \"unjustly\",\n  \"unkempt\",\n  \"unkind\",\n  \"unknotted\",\n  \"unknowing\",\n  \"unknown\",\n  \"unlaced\",\n  \"unlatch\",\n  \"unlawful\",\n  \"unleaded\",\n  \"unlearned\",\n  \"unleash\",\n  \"unless\",\n  \"unleveled\",\n  \"unlighted\",\n  \"unlikable\",\n  \"unlimited\",\n  \"unlined\",\n  \"unlinked\",\n  \"unlisted\",\n  \"unlit\",\n  \"unlivable\",\n  \"unloaded\",\n  \"unloader\",\n  \"unlocked\",\n  \"unlocking\",\n  \"unlovable\",\n  \"unloved\",\n  \"unlovely\",\n  \"unloving\",\n  \"unluckily\",\n  \"unlucky\",\n  \"unmade\",\n  \"unmanaged\",\n  \"unmanned\",\n  \"unmapped\",\n  \"unmarked\",\n  \"unmasked\",\n  \"unmasking\",\n  \"unmatched\",\n  \"unmindful\",\n  \"unmixable\",\n  \"unmixed\",\n  \"unmolded\",\n  \"unmoral\",\n  \"unmovable\",\n  \"unmoved\",\n  \"unmoving\",\n  \"unnamable\",\n  \"unnamed\",\n  \"unnatural\",\n  \"unneeded\",\n  \"unnerve\",\n  \"unnerving\",\n  \"unnoticed\",\n  \"unopened\",\n  \"unopposed\",\n  \"unpack\",\n  \"unpadded\",\n  \"unpaid\",\n  \"unpainted\",\n  \"unpaired\",\n  \"unpaved\",\n  \"unpeeled\",\n  \"unpicked\",\n  \"unpiloted\",\n  \"unpinned\",\n  \"unplanned\",\n  \"unplanted\",\n  \"unpleased\",\n  \"unpledged\",\n  \"unplowed\",\n  \"unplug\",\n  \"unpopular\",\n  \"unproven\",\n  \"unquote\",\n  \"unranked\",\n  \"unrated\",\n  \"unraveled\",\n  \"unreached\",\n  \"unread\",\n  \"unreal\",\n  \"unreeling\",\n  \"unrefined\",\n  \"unrelated\",\n  \"unrented\",\n  \"unrest\",\n  \"unretired\",\n  \"unrevised\",\n  \"unrigged\",\n  \"unripe\",\n  \"unrivaled\",\n  \"unroasted\",\n  \"unrobed\",\n  \"unroll\",\n  \"unruffled\",\n  \"unruly\",\n  \"unrushed\",\n  \"unsaddle\",\n  \"unsafe\",\n  \"unsaid\",\n  \"unsalted\",\n  \"unsaved\",\n  \"unsavory\",\n  \"unscathed\",\n  \"unscented\",\n  \"unscrew\",\n  \"unsealed\",\n  \"unseated\",\n  \"unsecured\",\n  \"unseeing\",\n  \"unseemly\",\n  \"unseen\",\n  \"unselect\",\n  \"unselfish\",\n  \"unsent\",\n  \"unsettled\",\n  \"unshackle\",\n  \"unshaken\",\n  \"unshaved\",\n  \"unshaven\",\n  \"unsheathe\",\n  \"unshipped\",\n  \"unsightly\",\n  \"unsigned\",\n  \"unskilled\",\n  \"unsliced\",\n  \"unsmooth\",\n  \"unsnap\",\n  \"unsocial\",\n  \"unsoiled\",\n  \"unsold\",\n  \"unsolved\",\n  \"unsorted\",\n  \"unspoiled\",\n  \"unspoken\",\n  \"unstable\",\n  \"unstaffed\",\n  \"unstamped\",\n  \"unsteady\",\n  \"unsterile\",\n  \"unstirred\",\n  \"unstitch\",\n  \"unstopped\",\n  \"unstuck\",\n  \"unstuffed\",\n  \"unstylish\",\n  \"unsubtle\",\n  \"unsubtly\",\n  \"unsuited\",\n  \"unsure\",\n  \"unsworn\",\n  \"untagged\",\n  \"untainted\",\n  \"untaken\",\n  \"untamed\",\n  \"untangled\",\n  \"untapped\",\n  \"untaxed\",\n  \"unthawed\",\n  \"unthread\",\n  \"untidy\",\n  \"untie\",\n  \"until\",\n  \"untimed\",\n  \"untimely\",\n  \"untitled\",\n  \"untoasted\",\n  \"untold\",\n  \"untouched\",\n  \"untracked\",\n  \"untrained\",\n  \"untreated\",\n  \"untried\",\n  \"untrimmed\",\n  \"untrue\",\n  \"untruth\",\n  \"unturned\",\n  \"untwist\",\n  \"untying\",\n  \"unusable\",\n  \"unused\",\n  \"unusual\",\n  \"unvalued\",\n  \"unvaried\",\n  \"unvarying\",\n  \"unveiled\",\n  \"unveiling\",\n  \"unvented\",\n  \"unviable\",\n  \"unvisited\",\n  \"unvocal\",\n  \"unwanted\",\n  \"unwarlike\",\n  \"unwary\",\n  \"unwashed\",\n  \"unwatched\",\n  \"unweave\",\n  \"unwed\",\n  \"unwelcome\",\n  \"unwell\",\n  \"unwieldy\",\n  \"unwilling\",\n  \"unwind\",\n  \"unwired\",\n  \"unwitting\",\n  \"unwomanly\",\n  \"unworldly\",\n  \"unworn\",\n  \"unworried\",\n  \"unworthy\",\n  \"unwound\",\n  \"unwoven\",\n  \"unwrapped\",\n  \"unwritten\",\n  \"unzip\",\n  \"upbeat\",\n  \"upchuck\",\n  \"upcoming\",\n  \"upcountry\",\n  \"update\",\n  \"upfront\",\n  \"upgrade\",\n  \"upheaval\",\n  \"upheld\",\n  \"uphill\",\n  \"uphold\",\n  \"uplifted\",\n  \"uplifting\",\n  \"upload\",\n  \"upon\",\n  \"upper\",\n  \"upright\",\n  \"uprising\",\n  \"upriver\",\n  \"uproar\",\n  \"uproot\",\n  \"upscale\",\n  \"upside\",\n  \"upstage\",\n  \"upstairs\",\n  \"upstart\",\n  \"upstate\",\n  \"upstream\",\n  \"upstroke\",\n  \"upswing\",\n  \"uptake\",\n  \"uptight\",\n  \"uptown\",\n  \"upturned\",\n  \"upward\",\n  \"upwind\",\n  \"uranium\",\n  \"urban\",\n  \"urchin\",\n  \"urethane\",\n  \"urgency\",\n  \"urgent\",\n  \"urging\",\n  \"urologist\",\n  \"urology\",\n  \"usable\",\n  \"usage\",\n  \"useable\",\n  \"used\",\n  \"uselessly\",\n  \"user\",\n  \"usher\",\n  \"usual\",\n  \"utensil\",\n  \"utility\",\n  \"utilize\",\n  \"utmost\",\n  \"utopia\",\n  \"utter\",\n  \"vacancy\",\n  \"vacant\",\n  \"vacate\",\n  \"vacation\",\n  \"vagabond\",\n  \"vagrancy\",\n  \"vagrantly\",\n  \"vaguely\",\n  \"vagueness\",\n  \"valiant\",\n  \"valid\",\n  \"valium\",\n  \"valley\",\n  \"valuables\",\n  \"value\",\n  \"vanilla\",\n  \"vanish\",\n  \"vanity\",\n  \"vanquish\",\n  \"vantage\",\n  \"vaporizer\",\n  \"variable\",\n  \"variably\",\n  \"varied\",\n  \"variety\",\n  \"various\",\n  \"varmint\",\n  \"varnish\",\n  \"varsity\",\n  \"varying\",\n  \"vascular\",\n  \"vaseline\",\n  \"vastly\",\n  \"vastness\",\n  \"veal\",\n  \"vegan\",\n  \"veggie\",\n  \"vehicular\",\n  \"velcro\",\n  \"velocity\",\n  \"velvet\",\n  \"vendetta\",\n  \"vending\",\n  \"vendor\",\n  \"veneering\",\n  \"vengeful\",\n  \"venomous\",\n  \"ventricle\",\n  \"venture\",\n  \"venue\",\n  \"venus\",\n  \"verbalize\",\n  \"verbally\",\n  \"verbose\",\n  \"verdict\",\n  \"verify\",\n  \"verse\",\n  \"version\",\n  \"versus\",\n  \"vertebrae\",\n  \"vertical\",\n  \"vertigo\",\n  \"very\",\n  \"vessel\",\n  \"vest\",\n  \"veteran\",\n  \"veto\",\n  \"vexingly\",\n  \"viability\",\n  \"viable\",\n  \"vibes\",\n  \"vice\",\n  \"vicinity\",\n  \"victory\",\n  \"video\",\n  \"viewable\",\n  \"viewer\",\n  \"viewing\",\n  \"viewless\",\n  \"viewpoint\",\n  \"vigorous\",\n  \"village\",\n  \"villain\",\n  \"vindicate\",\n  \"vineyard\",\n  \"vintage\",\n  \"violate\",\n  \"violation\",\n  \"violator\",\n  \"violet\",\n  \"violin\",\n  \"viper\",\n  \"viral\",\n  \"virtual\",\n  \"virtuous\",\n  \"virus\",\n  \"visa\",\n  \"viscosity\",\n  \"viscous\",\n  \"viselike\",\n  \"visible\",\n  \"visibly\",\n  \"vision\",\n  \"visiting\",\n  \"visitor\",\n  \"visor\",\n  \"vista\",\n  \"vitality\",\n  \"vitalize\",\n  \"vitally\",\n  \"vitamins\",\n  \"vivacious\",\n  \"vividly\",\n  \"vividness\",\n  \"vixen\",\n  \"vocalist\",\n  \"vocalize\",\n  \"vocally\",\n  \"vocation\",\n  \"voice\",\n  \"voicing\",\n  \"void\",\n  \"volatile\",\n  \"volley\",\n  \"voltage\",\n  \"volumes\",\n  \"voter\",\n  \"voting\",\n  \"voucher\",\n  \"vowed\",\n  \"vowel\",\n  \"voyage\",\n  \"wackiness\",\n  \"wad\",\n  \"wafer\",\n  \"waffle\",\n  \"waged\",\n  \"wager\",\n  \"wages\",\n  \"waggle\",\n  \"wagon\",\n  \"wake\",\n  \"waking\",\n  \"walk\",\n  \"walmart\",\n  \"walnut\",\n  \"walrus\",\n  \"waltz\",\n  \"wand\",\n  \"wannabe\",\n  \"wanted\",\n  \"wanting\",\n  \"wasabi\",\n  \"washable\",\n  \"washbasin\",\n  \"washboard\",\n  \"washbowl\",\n  \"washcloth\",\n  \"washday\",\n  \"washed\",\n  \"washer\",\n  \"washhouse\",\n  \"washing\",\n  \"washout\",\n  \"washroom\",\n  \"washstand\",\n  \"washtub\",\n  \"wasp\",\n  \"wasting\",\n  \"watch\",\n  \"water\",\n  \"waviness\",\n  \"waving\",\n  \"wavy\",\n  \"whacking\",\n  \"whacky\",\n  \"wham\",\n  \"wharf\",\n  \"wheat\",\n  \"whenever\",\n  \"whiff\",\n  \"whimsical\",\n  \"whinny\",\n  \"whiny\",\n  \"whisking\",\n  \"whoever\",\n  \"whole\",\n  \"whomever\",\n  \"whoopee\",\n  \"whooping\",\n  \"whoops\",\n  \"why\",\n  \"wick\",\n  \"widely\",\n  \"widen\",\n  \"widget\",\n  \"widow\",\n  \"width\",\n  \"wieldable\",\n  \"wielder\",\n  \"wife\",\n  \"wifi\",\n  \"wikipedia\",\n  \"wildcard\",\n  \"wildcat\",\n  \"wilder\",\n  \"wildfire\",\n  \"wildfowl\",\n  \"wildland\",\n  \"wildlife\",\n  \"wildly\",\n  \"wildness\",\n  \"willed\",\n  \"willfully\",\n  \"willing\",\n  \"willow\",\n  \"willpower\",\n  \"wilt\",\n  \"wimp\",\n  \"wince\",\n  \"wincing\",\n  \"wind\",\n  \"wing\",\n  \"winking\",\n  \"winner\",\n  \"winnings\",\n  \"winter\",\n  \"wipe\",\n  \"wired\",\n  \"wireless\",\n  \"wiring\",\n  \"wiry\",\n  \"wisdom\",\n  \"wise\",\n  \"wish\",\n  \"wisplike\",\n  \"wispy\",\n  \"wistful\",\n  \"wizard\",\n  \"wobble\",\n  \"wobbling\",\n  \"wobbly\",\n  \"wok\",\n  \"wolf\",\n  \"wolverine\",\n  \"womanhood\",\n  \"womankind\",\n  \"womanless\",\n  \"womanlike\",\n  \"womanly\",\n  \"womb\",\n  \"woof\",\n  \"wooing\",\n  \"wool\",\n  \"woozy\",\n  \"word\",\n  \"work\",\n  \"worried\",\n  \"worrier\",\n  \"worrisome\",\n  \"worry\",\n  \"worsening\",\n  \"worshiper\",\n  \"worst\",\n  \"wound\",\n  \"woven\",\n  \"wow\",\n  \"wrangle\",\n  \"wrath\",\n  \"wreath\",\n  \"wreckage\",\n  \"wrecker\",\n  \"wrecking\",\n  \"wrench\",\n  \"wriggle\",\n  \"wriggly\",\n  \"wrinkle\",\n  \"wrinkly\",\n  \"wrist\",\n  \"writing\",\n  \"written\",\n  \"wrongdoer\",\n  \"wronged\",\n  \"wrongful\",\n  \"wrongly\",\n  \"wrongness\",\n  \"wrought\",\n  \"xbox\",\n  \"xerox\",\n  \"yahoo\",\n  \"yam\",\n  \"yanking\",\n  \"yapping\",\n  \"yard\",\n  \"yarn\",\n  \"yeah\",\n  \"yearbook\",\n  \"yearling\",\n  \"yearly\",\n  \"yearning\",\n  \"yeast\",\n  \"yelling\",\n  \"yelp\",\n  \"yen\",\n  \"yesterday\",\n  \"yiddish\",\n  \"yield\",\n  \"yin\",\n  \"yippee\",\n  \"yo-yo\",\n  \"yodel\",\n  \"yoga\",\n  \"yogurt\",\n  \"yonder\",\n  \"yoyo\",\n  \"yummy\",\n  \"zap\",\n  \"zealous\",\n  \"zebra\",\n  \"zen\",\n  \"zeppelin\",\n  \"zero\",\n  \"zestfully\",\n  \"zesty\",\n  \"zigzagged\",\n  \"zipfile\",\n  \"zipping\",\n  \"zippy\",\n  \"zips\",\n  \"zit\",\n  \"zodiac\",\n  \"zombie\",\n  \"zone\",\n  \"zoning\",\n  \"zookeeper\",\n  \"zoologist\",\n  \"zoology\",\n  \"zoom\",\n];\n","export class GeneratedPasswordHistory {\n  password: string;\n  date: number;\n\n  constructor(password: string, date: number) {\n    this.password = password;\n    this.date = date;\n  }\n}\n","import Domain from \"./domainBase\";\n\nexport class PasswordGeneratorPolicyOptions extends Domain {\n  defaultType = \"\";\n  minLength = 0;\n  useUppercase = false;\n  useLowercase = false;\n  useNumbers = false;\n  numberCount = 0;\n  useSpecial = false;\n  specialCount = 0;\n  minNumberWords = 0;\n  capitalize = false;\n  includeNumber = false;\n\n  inEffect() {\n    return (\n      this.defaultType !== \"\" ||\n      this.minLength > 0 ||\n      this.numberCount > 0 ||\n      this.specialCount > 0 ||\n      this.useUppercase ||\n      this.useLowercase ||\n      this.useNumbers ||\n      this.useSpecial ||\n      this.minNumberWords > 0 ||\n      this.capitalize ||\n      this.includeNumber\n    );\n  }\n}\n","import * as zxcvbn from \"zxcvbn\";\n\nimport { CryptoService } from \"../abstractions/crypto.service\";\nimport { PasswordGenerationService as PasswordGenerationServiceAbstraction } from \"../abstractions/passwordGeneration.service\";\nimport { PolicyService } from \"../abstractions/policy/policy.service.abstraction\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { PolicyType } from \"../enums/policyType\";\nimport { EEFLongWordList } from \"../misc/wordlist\";\nimport { EncString } from \"../models/domain/encString\";\nimport { GeneratedPasswordHistory } from \"../models/domain/generatedPasswordHistory\";\nimport { PasswordGeneratorPolicyOptions } from \"../models/domain/passwordGeneratorPolicyOptions\";\nimport { Policy } from \"../models/domain/policy\";\n\nconst DefaultOptions = {\n  length: 14,\n  ambiguous: false,\n  number: true,\n  minNumber: 1,\n  uppercase: true,\n  minUppercase: 0,\n  lowercase: true,\n  minLowercase: 0,\n  special: false,\n  minSpecial: 1,\n  type: \"password\",\n  numWords: 3,\n  wordSeparator: \"-\",\n  capitalize: false,\n  includeNumber: false,\n};\n\nconst MaxPasswordsInHistory = 100;\n\nexport class PasswordGenerationService implements PasswordGenerationServiceAbstraction {\n  constructor(\n    private cryptoService: CryptoService,\n    private policyService: PolicyService,\n    private stateService: StateService\n  ) {}\n\n  async generatePassword(options: any): Promise<string> {\n    // overload defaults with given options\n    const o = Object.assign({}, DefaultOptions, options);\n\n    if (o.type === \"passphrase\") {\n      return this.generatePassphrase(options);\n    }\n\n    // sanitize\n    this.sanitizePasswordLength(o, true);\n\n    const minLength: number = o.minUppercase + o.minLowercase + o.minNumber + o.minSpecial;\n    if (o.length < minLength) {\n      o.length = minLength;\n    }\n\n    const positions: string[] = [];\n    if (o.lowercase && o.minLowercase > 0) {\n      for (let i = 0; i < o.minLowercase; i++) {\n        positions.push(\"l\");\n      }\n    }\n    if (o.uppercase && o.minUppercase > 0) {\n      for (let i = 0; i < o.minUppercase; i++) {\n        positions.push(\"u\");\n      }\n    }\n    if (o.number && o.minNumber > 0) {\n      for (let i = 0; i < o.minNumber; i++) {\n        positions.push(\"n\");\n      }\n    }\n    if (o.special && o.minSpecial > 0) {\n      for (let i = 0; i < o.minSpecial; i++) {\n        positions.push(\"s\");\n      }\n    }\n    while (positions.length < o.length) {\n      positions.push(\"a\");\n    }\n\n    // shuffle\n    await this.shuffleArray(positions);\n\n    // build out the char sets\n    let allCharSet = \"\";\n\n    let lowercaseCharSet = \"abcdefghijkmnopqrstuvwxyz\";\n    if (o.ambiguous) {\n      lowercaseCharSet += \"l\";\n    }\n    if (o.lowercase) {\n      allCharSet += lowercaseCharSet;\n    }\n\n    let uppercaseCharSet = \"ABCDEFGHJKLMNPQRSTUVWXYZ\";\n    if (o.ambiguous) {\n      uppercaseCharSet += \"IO\";\n    }\n    if (o.uppercase) {\n      allCharSet += uppercaseCharSet;\n    }\n\n    let numberCharSet = \"23456789\";\n    if (o.ambiguous) {\n      numberCharSet += \"01\";\n    }\n    if (o.number) {\n      allCharSet += numberCharSet;\n    }\n\n    const specialCharSet = \"!@#$%^&*\";\n    if (o.special) {\n      allCharSet += specialCharSet;\n    }\n\n    let password = \"\";\n    for (let i = 0; i < o.length; i++) {\n      let positionChars: string;\n      switch (positions[i]) {\n        case \"l\":\n          positionChars = lowercaseCharSet;\n          break;\n        case \"u\":\n          positionChars = uppercaseCharSet;\n          break;\n        case \"n\":\n          positionChars = numberCharSet;\n          break;\n        case \"s\":\n          positionChars = specialCharSet;\n          break;\n        case \"a\":\n          positionChars = allCharSet;\n          break;\n        default:\n          break;\n      }\n\n      const randomCharIndex = await this.cryptoService.randomNumber(0, positionChars.length - 1);\n      password += positionChars.charAt(randomCharIndex);\n    }\n\n    return password;\n  }\n\n  async generatePassphrase(options: any): Promise<string> {\n    const o = Object.assign({}, DefaultOptions, options);\n\n    if (o.numWords == null || o.numWords <= 2) {\n      o.numWords = DefaultOptions.numWords;\n    }\n    if (o.wordSeparator == null || o.wordSeparator.length === 0 || o.wordSeparator.length > 1) {\n      o.wordSeparator = \" \";\n    }\n    if (o.capitalize == null) {\n      o.capitalize = false;\n    }\n    if (o.includeNumber == null) {\n      o.includeNumber = false;\n    }\n\n    const listLength = EEFLongWordList.length - 1;\n    const wordList = new Array(o.numWords);\n    for (let i = 0; i < o.numWords; i++) {\n      const wordIndex = await this.cryptoService.randomNumber(0, listLength);\n      if (o.capitalize) {\n        wordList[i] = this.capitalize(EEFLongWordList[wordIndex]);\n      } else {\n        wordList[i] = EEFLongWordList[wordIndex];\n      }\n    }\n\n    if (o.includeNumber) {\n      await this.appendRandomNumberToRandomWord(wordList);\n    }\n    return wordList.join(o.wordSeparator);\n  }\n\n  async getOptions(): Promise<[any, PasswordGeneratorPolicyOptions]> {\n    let options = await this.stateService.getPasswordGenerationOptions();\n    if (options == null) {\n      options = Object.assign({}, DefaultOptions);\n    } else {\n      options = Object.assign({}, DefaultOptions, options);\n    }\n    await this.stateService.setPasswordGenerationOptions(options);\n    const enforcedOptions = await this.enforcePasswordGeneratorPoliciesOnOptions(options);\n    options = enforcedOptions[0];\n    return [options, enforcedOptions[1]];\n  }\n\n  async enforcePasswordGeneratorPoliciesOnOptions(\n    options: any\n  ): Promise<[any, PasswordGeneratorPolicyOptions]> {\n    let enforcedPolicyOptions = await this.getPasswordGeneratorPolicyOptions();\n    if (enforcedPolicyOptions != null) {\n      if (options.length < enforcedPolicyOptions.minLength) {\n        options.length = enforcedPolicyOptions.minLength;\n      }\n\n      if (enforcedPolicyOptions.useUppercase) {\n        options.uppercase = true;\n      }\n\n      if (enforcedPolicyOptions.useLowercase) {\n        options.lowercase = true;\n      }\n\n      if (enforcedPolicyOptions.useNumbers) {\n        options.number = true;\n      }\n\n      if (options.minNumber < enforcedPolicyOptions.numberCount) {\n        options.minNumber = enforcedPolicyOptions.numberCount;\n      }\n\n      if (enforcedPolicyOptions.useSpecial) {\n        options.special = true;\n      }\n\n      if (options.minSpecial < enforcedPolicyOptions.specialCount) {\n        options.minSpecial = enforcedPolicyOptions.specialCount;\n      }\n\n      // Must normalize these fields because the receiving call expects all options to pass the current rules\n      if (options.minSpecial + options.minNumber > options.length) {\n        options.minSpecial = options.length - options.minNumber;\n      }\n\n      if (options.numWords < enforcedPolicyOptions.minNumberWords) {\n        options.numWords = enforcedPolicyOptions.minNumberWords;\n      }\n\n      if (enforcedPolicyOptions.capitalize) {\n        options.capitalize = true;\n      }\n\n      if (enforcedPolicyOptions.includeNumber) {\n        options.includeNumber = true;\n      }\n\n      // Force default type if password/passphrase selected via policy\n      if (\n        enforcedPolicyOptions.defaultType === \"password\" ||\n        enforcedPolicyOptions.defaultType === \"passphrase\"\n      ) {\n        options.type = enforcedPolicyOptions.defaultType;\n      }\n    } else {\n      // UI layer expects an instantiated object to prevent more explicit null checks\n      enforcedPolicyOptions = new PasswordGeneratorPolicyOptions();\n    }\n    return [options, enforcedPolicyOptions];\n  }\n\n  async getPasswordGeneratorPolicyOptions(): Promise<PasswordGeneratorPolicyOptions> {\n    const policies: Policy[] =\n      this.policyService == null\n        ? null\n        : await this.policyService.getAll(PolicyType.PasswordGenerator);\n    let enforcedOptions: PasswordGeneratorPolicyOptions = null;\n\n    if (policies == null || policies.length === 0) {\n      return enforcedOptions;\n    }\n\n    policies.forEach((currentPolicy) => {\n      if (!currentPolicy.enabled || currentPolicy.data == null) {\n        return;\n      }\n\n      if (enforcedOptions == null) {\n        enforcedOptions = new PasswordGeneratorPolicyOptions();\n      }\n\n      // Password wins in multi-org collisions\n      if (currentPolicy.data.defaultType != null && enforcedOptions.defaultType !== \"password\") {\n        enforcedOptions.defaultType = currentPolicy.data.defaultType;\n      }\n\n      if (\n        currentPolicy.data.minLength != null &&\n        currentPolicy.data.minLength > enforcedOptions.minLength\n      ) {\n        enforcedOptions.minLength = currentPolicy.data.minLength;\n      }\n\n      if (currentPolicy.data.useUpper) {\n        enforcedOptions.useUppercase = true;\n      }\n\n      if (currentPolicy.data.useLower) {\n        enforcedOptions.useLowercase = true;\n      }\n\n      if (currentPolicy.data.useNumbers) {\n        enforcedOptions.useNumbers = true;\n      }\n\n      if (\n        currentPolicy.data.minNumbers != null &&\n        currentPolicy.data.minNumbers > enforcedOptions.numberCount\n      ) {\n        enforcedOptions.numberCount = currentPolicy.data.minNumbers;\n      }\n\n      if (currentPolicy.data.useSpecial) {\n        enforcedOptions.useSpecial = true;\n      }\n\n      if (\n        currentPolicy.data.minSpecial != null &&\n        currentPolicy.data.minSpecial > enforcedOptions.specialCount\n      ) {\n        enforcedOptions.specialCount = currentPolicy.data.minSpecial;\n      }\n\n      if (\n        currentPolicy.data.minNumberWords != null &&\n        currentPolicy.data.minNumberWords > enforcedOptions.minNumberWords\n      ) {\n        enforcedOptions.minNumberWords = currentPolicy.data.minNumberWords;\n      }\n\n      if (currentPolicy.data.capitalize) {\n        enforcedOptions.capitalize = true;\n      }\n\n      if (currentPolicy.data.includeNumber) {\n        enforcedOptions.includeNumber = true;\n      }\n    });\n\n    return enforcedOptions;\n  }\n\n  async saveOptions(options: any) {\n    await this.stateService.setPasswordGenerationOptions(options);\n  }\n\n  async getHistory(): Promise<GeneratedPasswordHistory[]> {\n    const hasKey = await this.cryptoService.hasKey();\n    if (!hasKey) {\n      return new Array<GeneratedPasswordHistory>();\n    }\n\n    if ((await this.stateService.getDecryptedPasswordGenerationHistory()) == null) {\n      const encrypted = await this.stateService.getEncryptedPasswordGenerationHistory();\n      const decrypted = await this.decryptHistory(encrypted);\n      await this.stateService.setDecryptedPasswordGenerationHistory(decrypted);\n    }\n\n    const passwordGenerationHistory =\n      await this.stateService.getDecryptedPasswordGenerationHistory();\n    return passwordGenerationHistory != null\n      ? passwordGenerationHistory\n      : new Array<GeneratedPasswordHistory>();\n  }\n\n  async addHistory(password: string): Promise<any> {\n    // Cannot add new history if no key is available\n    const hasKey = await this.cryptoService.hasKey();\n    if (!hasKey) {\n      return;\n    }\n\n    const currentHistory = await this.getHistory();\n\n    // Prevent duplicates\n    if (this.matchesPrevious(password, currentHistory)) {\n      return;\n    }\n\n    currentHistory.unshift(new GeneratedPasswordHistory(password, Date.now()));\n\n    // Remove old items.\n    if (currentHistory.length > MaxPasswordsInHistory) {\n      currentHistory.pop();\n    }\n\n    const newHistory = await this.encryptHistory(currentHistory);\n    await this.stateService.setDecryptedPasswordGenerationHistory(currentHistory);\n    return await this.stateService.setEncryptedPasswordGenerationHistory(newHistory);\n  }\n\n  async clear(userId?: string): Promise<any> {\n    await this.stateService.setEncryptedPasswordGenerationHistory(null, { userId: userId });\n    await this.stateService.setDecryptedPasswordGenerationHistory(null, { userId: userId });\n  }\n\n  passwordStrength(password: string, userInputs: string[] = null): zxcvbn.ZXCVBNResult {\n    if (password == null || password.length === 0) {\n      return null;\n    }\n    let globalUserInputs = [\"bitwarden\", \"bit\", \"warden\"];\n    if (userInputs != null && userInputs.length > 0) {\n      globalUserInputs = globalUserInputs.concat(userInputs);\n    }\n    // Use a hash set to get rid of any duplicate user inputs\n    const finalUserInputs = Array.from(new Set(globalUserInputs));\n    const result = zxcvbn(password, finalUserInputs);\n    return result;\n  }\n\n  normalizeOptions(options: any, enforcedPolicyOptions: PasswordGeneratorPolicyOptions) {\n    options.minLowercase = 0;\n    options.minUppercase = 0;\n\n    if (!options.length || options.length < 5) {\n      options.length = 5;\n    } else if (options.length > 128) {\n      options.length = 128;\n    }\n\n    if (options.length < enforcedPolicyOptions.minLength) {\n      options.length = enforcedPolicyOptions.minLength;\n    }\n\n    if (!options.minNumber) {\n      options.minNumber = 0;\n    } else if (options.minNumber > options.length) {\n      options.minNumber = options.length;\n    } else if (options.minNumber > 9) {\n      options.minNumber = 9;\n    }\n\n    if (options.minNumber < enforcedPolicyOptions.numberCount) {\n      options.minNumber = enforcedPolicyOptions.numberCount;\n    }\n\n    if (!options.minSpecial) {\n      options.minSpecial = 0;\n    } else if (options.minSpecial > options.length) {\n      options.minSpecial = options.length;\n    } else if (options.minSpecial > 9) {\n      options.minSpecial = 9;\n    }\n\n    if (options.minSpecial < enforcedPolicyOptions.specialCount) {\n      options.minSpecial = enforcedPolicyOptions.specialCount;\n    }\n\n    if (options.minSpecial + options.minNumber > options.length) {\n      options.minSpecial = options.length - options.minNumber;\n    }\n\n    if (options.numWords == null || options.length < 3) {\n      options.numWords = 3;\n    } else if (options.numWords > 20) {\n      options.numWords = 20;\n    }\n\n    if (options.numWords < enforcedPolicyOptions.minNumberWords) {\n      options.numWords = enforcedPolicyOptions.minNumberWords;\n    }\n\n    if (options.wordSeparator != null && options.wordSeparator.length > 1) {\n      options.wordSeparator = options.wordSeparator[0];\n    }\n\n    this.sanitizePasswordLength(options, false);\n  }\n\n  private capitalize(str: string) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  }\n\n  private async appendRandomNumberToRandomWord(wordList: string[]) {\n    if (wordList == null || wordList.length <= 0) {\n      return;\n    }\n    const index = await this.cryptoService.randomNumber(0, wordList.length - 1);\n    const num = await this.cryptoService.randomNumber(0, 9);\n    wordList[index] = wordList[index] + num;\n  }\n\n  private async encryptHistory(\n    history: GeneratedPasswordHistory[]\n  ): Promise<GeneratedPasswordHistory[]> {\n    if (history == null || history.length === 0) {\n      return Promise.resolve([]);\n    }\n\n    const promises = history.map(async (item) => {\n      const encrypted = await this.cryptoService.encrypt(item.password);\n      return new GeneratedPasswordHistory(encrypted.encryptedString, item.date);\n    });\n\n    return await Promise.all(promises);\n  }\n\n  private async decryptHistory(\n    history: GeneratedPasswordHistory[]\n  ): Promise<GeneratedPasswordHistory[]> {\n    if (history == null || history.length === 0) {\n      return Promise.resolve([]);\n    }\n\n    const promises = history.map(async (item) => {\n      const decrypted = await this.cryptoService.decryptToUtf8(new EncString(item.password));\n      return new GeneratedPasswordHistory(decrypted, item.date);\n    });\n\n    return await Promise.all(promises);\n  }\n\n  private matchesPrevious(password: string, history: GeneratedPasswordHistory[]): boolean {\n    if (history == null || history.length === 0) {\n      return false;\n    }\n\n    return history[history.length - 1].password === password;\n  }\n\n  // ref: https://stackoverflow.com/a/12646864/1090359\n  private async shuffleArray(array: string[]) {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = await this.cryptoService.randomNumber(0, i);\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  }\n\n  private sanitizePasswordLength(options: any, forGeneration: boolean) {\n    let minUppercaseCalc = 0;\n    let minLowercaseCalc = 0;\n    let minNumberCalc: number = options.minNumber;\n    let minSpecialCalc: number = options.minSpecial;\n\n    if (options.uppercase && options.minUppercase <= 0) {\n      minUppercaseCalc = 1;\n    } else if (!options.uppercase) {\n      minUppercaseCalc = 0;\n    }\n\n    if (options.lowercase && options.minLowercase <= 0) {\n      minLowercaseCalc = 1;\n    } else if (!options.lowercase) {\n      minLowercaseCalc = 0;\n    }\n\n    if (options.number && options.minNumber <= 0) {\n      minNumberCalc = 1;\n    } else if (!options.number) {\n      minNumberCalc = 0;\n    }\n\n    if (options.special && options.minSpecial <= 0) {\n      minSpecialCalc = 1;\n    } else if (!options.special) {\n      minSpecialCalc = 0;\n    }\n\n    // This should never happen but is a final safety net\n    if (!options.length || options.length < 1) {\n      options.length = 10;\n    }\n\n    const minLength: number = minUppercaseCalc + minLowercaseCalc + minNumberCalc + minSpecialCalc;\n    // Normalize and Generation both require this modification\n    if (options.length < minLength) {\n      options.length = minLength;\n    }\n\n    // Apply other changes if the options object passed in is for generation\n    if (forGeneration) {\n      options.minUppercase = minUppercaseCalc;\n      options.minLowercase = minLowercaseCalc;\n      options.minNumber = minNumberCalc;\n      options.minSpecial = minSpecialCalc;\n    }\n  }\n}\n","import { PolicyType } from \"../../enums/policyType\";\nimport { PolicyResponse } from \"../response/policyResponse\";\n\nexport class PolicyData {\n  id: string;\n  organizationId: string;\n  type: PolicyType;\n  data: any;\n  enabled: boolean;\n\n  constructor(response: PolicyResponse) {\n    this.id = response.id;\n    this.organizationId = response.organizationId;\n    this.type = response.type;\n    this.data = response.data;\n    this.enabled = response.enabled;\n  }\n}\n","import { PolicyType } from \"../../enums/policyType\";\nimport { PolicyData } from \"../data/policyData\";\n\nimport Domain from \"./domainBase\";\n\nexport class Policy extends Domain {\n  id: string;\n  organizationId: string;\n  type: PolicyType;\n  data: any;\n  enabled: boolean;\n\n  constructor(obj?: PolicyData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.id = obj.id;\n    this.organizationId = obj.organizationId;\n    this.type = obj.type;\n    this.data = obj.data;\n    this.enabled = obj.enabled;\n  }\n}\n","import { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { OrganizationService } from \"@bitwarden/common/abstractions/organization.service\";\nimport { PolicyApiServiceAbstraction } from \"@bitwarden/common/abstractions/policy/policy-api.service.abstraction\";\nimport { InternalPolicyService } from \"@bitwarden/common/abstractions/policy/policy.service.abstraction\";\nimport { StateService } from \"@bitwarden/common/abstractions/state.service\";\nimport { PolicyType } from \"@bitwarden/common/enums/policyType\";\nimport { PolicyData } from \"@bitwarden/common/models/data/policyData\";\nimport { MasterPasswordPolicyOptions } from \"@bitwarden/common/models/domain/masterPasswordPolicyOptions\";\nimport { Policy } from \"@bitwarden/common/models/domain/policy\";\nimport { PolicyRequest } from \"@bitwarden/common/models/request/policyRequest\";\nimport { ListResponse } from \"@bitwarden/common/models/response/listResponse\";\nimport { PolicyResponse } from \"@bitwarden/common/models/response/policyResponse\";\n\nexport class PolicyApiService implements PolicyApiServiceAbstraction {\n  constructor(\n    private policyService: InternalPolicyService,\n    private apiService: ApiService,\n    private stateService: StateService,\n    private organizationService: OrganizationService\n  ) {}\n\n  async getPolicy(organizationId: string, type: PolicyType): Promise<PolicyResponse> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/policies/\" + type,\n      null,\n      true,\n      true\n    );\n    return new PolicyResponse(r);\n  }\n\n  async getPolicies(organizationId: string): Promise<ListResponse<PolicyResponse>> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/policies\",\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, PolicyResponse);\n  }\n\n  async getPoliciesByToken(\n    organizationId: string,\n    token: string,\n    email: string,\n    organizationUserId: string\n  ): Promise<ListResponse<PolicyResponse>> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/organizations/\" +\n        organizationId +\n        \"/policies/token?\" +\n        \"token=\" +\n        encodeURIComponent(token) +\n        \"&email=\" +\n        encodeURIComponent(email) +\n        \"&organizationUserId=\" +\n        organizationUserId,\n      null,\n      false,\n      true\n    );\n    return new ListResponse(r, PolicyResponse);\n  }\n\n  async getPoliciesByInvitedUser(\n    organizationId: string,\n    userId: string\n  ): Promise<ListResponse<PolicyResponse>> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/policies/invited-user?\" + \"userId=\" + userId,\n      null,\n      false,\n      true\n    );\n    return new ListResponse(r, PolicyResponse);\n  }\n\n  async getPolicyForOrganization(policyType: PolicyType, organizationId: string): Promise<Policy> {\n    const org = await this.organizationService.get(organizationId);\n    if (org?.isProviderUser) {\n      const orgPolicies = await this.getPolicies(organizationId);\n      const policy = orgPolicies.data.find((p) => p.organizationId === organizationId);\n\n      if (policy == null) {\n        return null;\n      }\n\n      return new Policy(new PolicyData(policy));\n    }\n\n    const policies = await this.policyService.getAll(policyType);\n    return policies.find((p) => p.organizationId === organizationId);\n  }\n\n  async getMasterPasswordPoliciesForInvitedUsers(\n    orgId: string\n  ): Promise<MasterPasswordPolicyOptions> {\n    const userId = await this.stateService.getUserId();\n    const response = await this.getPoliciesByInvitedUser(orgId, userId);\n    const policies = await this.policyService.mapPoliciesFromToken(response);\n    return this.policyService.getMasterPasswordPolicyOptions(policies);\n  }\n\n  async putPolicy(organizationId: string, type: PolicyType, request: PolicyRequest): Promise<any> {\n    const r = await this.apiService.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/policies/\" + type,\n      request,\n      true,\n      true\n    );\n    const response = new PolicyResponse(r);\n    const data = new PolicyData(response);\n    await this.policyService.upsert(data);\n  }\n}\n","import Domain from \"./domainBase\";\n\nexport class MasterPasswordPolicyOptions extends Domain {\n  minComplexity = 0;\n  minLength = 0;\n  requireUpper = false;\n  requireLower = false;\n  requireNumbers = false;\n  requireSpecial = false;\n}\n","import Domain from \"./domainBase\";\n\nexport class ResetPasswordPolicyOptions extends Domain {\n  autoEnrollEnabled = false;\n}\n","export enum ProviderUserStatusType {\n  Invited = 0,\n  Accepted = 1,\n  Confirmed = 2,\n  Revoked = -1, // Not used, compile-time support only\n}\n","export enum ProviderUserType {\n  ProviderAdmin = 0,\n  ServiceUser = 1,\n}\n","import { OrganizationService } from \"../../abstractions/organization.service\";\nimport { InternalPolicyService as InternalPolicyServiceAbstraction } from \"../../abstractions/policy/policy.service.abstraction\";\nimport { StateService } from \"../../abstractions/state.service\";\nimport { OrganizationUserStatusType } from \"../../enums/organizationUserStatusType\";\nimport { OrganizationUserType } from \"../../enums/organizationUserType\";\nimport { PolicyType } from \"../../enums/policyType\";\nimport { PolicyData } from \"../../models/data/policyData\";\nimport { MasterPasswordPolicyOptions } from \"../../models/domain/masterPasswordPolicyOptions\";\nimport { Organization } from \"../../models/domain/organization\";\nimport { Policy } from \"../../models/domain/policy\";\nimport { ResetPasswordPolicyOptions } from \"../../models/domain/resetPasswordPolicyOptions\";\nimport { ListResponse } from \"../../models/response/listResponse\";\nimport { PolicyResponse } from \"../../models/response/policyResponse\";\n\nexport class PolicyService implements InternalPolicyServiceAbstraction {\n  policyCache: Policy[];\n\n  constructor(\n    private stateService: StateService,\n    private organizationService: OrganizationService\n  ) {}\n\n  async getAll(type?: PolicyType, userId?: string): Promise<Policy[]> {\n    let response: Policy[] = [];\n    const decryptedPolicies = await this.stateService.getDecryptedPolicies({ userId: userId });\n    if (decryptedPolicies != null) {\n      response = decryptedPolicies;\n    } else {\n      const diskPolicies = await this.stateService.getEncryptedPolicies({ userId: userId });\n      for (const id in diskPolicies) {\n        // eslint-disable-next-line\n        if (diskPolicies.hasOwnProperty(id)) {\n          response.push(new Policy(diskPolicies[id]));\n        }\n      }\n      await this.stateService.setDecryptedPolicies(response, { userId: userId });\n    }\n    if (type != null) {\n      return response.filter((policy) => policy.type === type);\n    } else {\n      return response;\n    }\n  }\n\n  async getMasterPasswordPolicyOptions(policies?: Policy[]): Promise<MasterPasswordPolicyOptions> {\n    let enforcedOptions: MasterPasswordPolicyOptions = null;\n\n    if (policies == null) {\n      policies = await this.getAll(PolicyType.MasterPassword);\n    } else {\n      policies = policies.filter((p) => p.type === PolicyType.MasterPassword);\n    }\n\n    if (policies == null || policies.length === 0) {\n      return enforcedOptions;\n    }\n\n    policies.forEach((currentPolicy) => {\n      if (!currentPolicy.enabled || currentPolicy.data == null) {\n        return;\n      }\n\n      if (enforcedOptions == null) {\n        enforcedOptions = new MasterPasswordPolicyOptions();\n      }\n\n      if (\n        currentPolicy.data.minComplexity != null &&\n        currentPolicy.data.minComplexity > enforcedOptions.minComplexity\n      ) {\n        enforcedOptions.minComplexity = currentPolicy.data.minComplexity;\n      }\n\n      if (\n        currentPolicy.data.minLength != null &&\n        currentPolicy.data.minLength > enforcedOptions.minLength\n      ) {\n        enforcedOptions.minLength = currentPolicy.data.minLength;\n      }\n\n      if (currentPolicy.data.requireUpper) {\n        enforcedOptions.requireUpper = true;\n      }\n\n      if (currentPolicy.data.requireLower) {\n        enforcedOptions.requireLower = true;\n      }\n\n      if (currentPolicy.data.requireNumbers) {\n        enforcedOptions.requireNumbers = true;\n      }\n\n      if (currentPolicy.data.requireSpecial) {\n        enforcedOptions.requireSpecial = true;\n      }\n    });\n\n    return enforcedOptions;\n  }\n\n  evaluateMasterPassword(\n    passwordStrength: number,\n    newPassword: string,\n    enforcedPolicyOptions: MasterPasswordPolicyOptions\n  ): boolean {\n    if (enforcedPolicyOptions == null) {\n      return true;\n    }\n\n    if (\n      enforcedPolicyOptions.minComplexity > 0 &&\n      enforcedPolicyOptions.minComplexity > passwordStrength\n    ) {\n      return false;\n    }\n\n    if (\n      enforcedPolicyOptions.minLength > 0 &&\n      enforcedPolicyOptions.minLength > newPassword.length\n    ) {\n      return false;\n    }\n\n    if (enforcedPolicyOptions.requireUpper && newPassword.toLocaleLowerCase() === newPassword) {\n      return false;\n    }\n\n    if (enforcedPolicyOptions.requireLower && newPassword.toLocaleUpperCase() === newPassword) {\n      return false;\n    }\n\n    if (enforcedPolicyOptions.requireNumbers && !/[0-9]/.test(newPassword)) {\n      return false;\n    }\n\n    // eslint-disable-next-line\n    if (enforcedPolicyOptions.requireSpecial && !/[!@#$%\\^&*]/g.test(newPassword)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  getResetPasswordPolicyOptions(\n    policies: Policy[],\n    orgId: string\n  ): [ResetPasswordPolicyOptions, boolean] {\n    const resetPasswordPolicyOptions = new ResetPasswordPolicyOptions();\n\n    if (policies == null || orgId == null) {\n      return [resetPasswordPolicyOptions, false];\n    }\n\n    const policy = policies.find(\n      (p) => p.organizationId === orgId && p.type === PolicyType.ResetPassword && p.enabled\n    );\n    resetPasswordPolicyOptions.autoEnrollEnabled = policy?.data?.autoEnrollEnabled ?? false;\n\n    return [resetPasswordPolicyOptions, policy?.enabled ?? false];\n  }\n\n  mapPoliciesFromToken(policiesResponse: ListResponse<PolicyResponse>): Policy[] {\n    if (policiesResponse == null || policiesResponse.data == null) {\n      return null;\n    }\n\n    const policiesData = policiesResponse.data.map((p) => new PolicyData(p));\n    return policiesData.map((p) => new Policy(p));\n  }\n\n  async policyAppliesToUser(\n    policyType: PolicyType,\n    policyFilter?: (policy: Policy) => boolean,\n    userId?: string\n  ) {\n    const policies = await this.getAll(policyType, userId);\n    const organizations = await this.organizationService.getAll(userId);\n    let filteredPolicies;\n\n    if (policyFilter != null) {\n      filteredPolicies = policies.filter((p) => p.enabled && policyFilter(p));\n    } else {\n      filteredPolicies = policies.filter((p) => p.enabled);\n    }\n\n    const policySet = new Set(filteredPolicies.map((p) => p.organizationId));\n\n    return organizations.some(\n      (o) =>\n        o.enabled &&\n        o.status >= OrganizationUserStatusType.Accepted &&\n        o.usePolicies &&\n        !this.isExcemptFromPolicies(o, policyType) &&\n        policySet.has(o.id)\n    );\n  }\n\n  async upsert(policy: PolicyData): Promise<any> {\n    let policies = await this.stateService.getEncryptedPolicies();\n    if (policies == null) {\n      policies = {};\n    }\n\n    policies[policy.id] = policy;\n\n    await this.stateService.setDecryptedPolicies(null);\n    await this.stateService.setEncryptedPolicies(policies);\n  }\n\n  async replace(policies: { [id: string]: PolicyData }): Promise<any> {\n    await this.stateService.setDecryptedPolicies(null);\n    await this.stateService.setEncryptedPolicies(policies);\n  }\n\n  async clear(userId?: string): Promise<any> {\n    await this.stateService.setDecryptedPolicies(null, { userId: userId });\n    await this.stateService.setEncryptedPolicies(null, { userId: userId });\n  }\n\n  private isExcemptFromPolicies(organization: Organization, policyType: PolicyType) {\n    if (policyType === PolicyType.MaximumVaultTimeout) {\n      return organization.type === OrganizationUserType.Owner;\n    }\n\n    return organization.isExemptFromPolicies;\n  }\n}\n","import { ProviderUserStatusType } from \"../../enums/providerUserStatusType\";\nimport { ProviderUserType } from \"../../enums/providerUserType\";\nimport { ProviderData } from \"../data/providerData\";\n\nexport class Provider {\n  id: string;\n  name: string;\n  status: ProviderUserStatusType;\n  type: ProviderUserType;\n  enabled: boolean;\n  userId: string;\n  useEvents: boolean;\n\n  constructor(obj?: ProviderData) {\n    if (obj == null) {\n      return;\n    }\n\n    this.id = obj.id;\n    this.name = obj.name;\n    this.status = obj.status;\n    this.type = obj.type;\n    this.enabled = obj.enabled;\n    this.userId = obj.userId;\n    this.useEvents = obj.useEvents;\n  }\n\n  get canAccess() {\n    if (this.isProviderAdmin) {\n      return true;\n    }\n    return this.enabled && this.status === ProviderUserStatusType.Confirmed;\n  }\n\n  get canCreateOrganizations() {\n    return this.enabled && this.isProviderAdmin;\n  }\n\n  get canManageUsers() {\n    return this.isProviderAdmin;\n  }\n\n  get canAccessEventLogs() {\n    return this.isProviderAdmin;\n  }\n\n  get isProviderAdmin() {\n    return this.type === ProviderUserType.ProviderAdmin;\n  }\n}\n","import { ProviderService as ProviderServiceAbstraction } from \"../abstractions/provider.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { ProviderData } from \"../models/data/providerData\";\nimport { Provider } from \"../models/domain/provider\";\n\nexport class ProviderService implements ProviderServiceAbstraction {\n  constructor(private stateService: StateService) {}\n\n  async get(id: string): Promise<Provider> {\n    const providers = await this.stateService.getProviders();\n    // eslint-disable-next-line\n    if (providers == null || !providers.hasOwnProperty(id)) {\n      return null;\n    }\n\n    return new Provider(providers[id]);\n  }\n\n  async getAll(): Promise<Provider[]> {\n    const providers = await this.stateService.getProviders();\n    const response: Provider[] = [];\n    for (const id in providers) {\n      // eslint-disable-next-line\n      if (providers.hasOwnProperty(id)) {\n        response.push(new Provider(providers[id]));\n      }\n    }\n    return response;\n  }\n\n  async save(providers: { [id: string]: ProviderData }) {\n    await this.stateService.setProviders(providers);\n  }\n}\n","export enum SendType {\n  Text = 0,\n  File = 1,\n}\n","import * as lunr from \"lunr\";\n\nimport { CipherService } from \"../abstractions/cipher.service\";\nimport { I18nService } from \"../abstractions/i18n.service\";\nimport { LogService } from \"../abstractions/log.service\";\nimport { SearchService as SearchServiceAbstraction } from \"../abstractions/search.service\";\nimport { CipherType } from \"../enums/cipherType\";\nimport { FieldType } from \"../enums/fieldType\";\nimport { UriMatchType } from \"../enums/uriMatchType\";\nimport { CipherView } from \"../models/view/cipherView\";\nimport { SendView } from \"../models/view/sendView\";\n\nexport class SearchService implements SearchServiceAbstraction {\n  private static registeredPipeline = false;\n\n  indexedEntityId?: string = null;\n  private indexing = false;\n  private index: lunr.Index = null;\n  private readonly immediateSearchLocales: string[] = [\"zh-CN\", \"zh-TW\", \"ja\", \"ko\", \"vi\"];\n  private readonly defaultSearchableMinLength: number = 2;\n  private searchableMinLength: number = this.defaultSearchableMinLength;\n\n  constructor(\n    private cipherService: CipherService,\n    private logService: LogService,\n    private i18nService: I18nService\n  ) {\n    this.i18nService.locale$.subscribe((locale) => {\n      if (this.immediateSearchLocales.indexOf(locale) !== -1) {\n        this.searchableMinLength = 1;\n      } else {\n        this.searchableMinLength = this.defaultSearchableMinLength;\n      }\n    });\n\n    // Currently have to ensure this is only done a single time. Lunr allows you to register a function\n    // multiple times but they will add a warning message to the console. The way they do that breaks when ran on a service worker.\n    if (!SearchService.registeredPipeline) {\n      SearchService.registeredPipeline = true;\n      //register lunr pipeline function\n      lunr.Pipeline.registerFunction(this.normalizeAccentsPipelineFunction, \"normalizeAccents\");\n    }\n  }\n\n  clearIndex(): void {\n    this.indexedEntityId = null;\n    this.index = null;\n  }\n\n  isSearchable(query: string): boolean {\n    query = SearchService.normalizeSearchQuery(query);\n    const notSearchable =\n      query == null ||\n      (this.index == null && query.length < this.searchableMinLength) ||\n      (this.index != null && query.length < this.searchableMinLength && query.indexOf(\">\") !== 0);\n    return !notSearchable;\n  }\n\n  async indexCiphers(indexedEntityId?: string, ciphers?: CipherView[]): Promise<void> {\n    if (this.indexing) {\n      return;\n    }\n\n    this.indexing = true;\n    this.indexedEntityId = indexedEntityId;\n    this.index = null;\n    const builder = new lunr.Builder();\n    builder.pipeline.add(this.normalizeAccentsPipelineFunction);\n    builder.ref(\"id\");\n    builder.field(\"shortid\", { boost: 100, extractor: (c: CipherView) => c.id.substr(0, 8) });\n    builder.field(\"name\", {\n      boost: 10,\n    });\n    builder.field(\"subtitle\", {\n      boost: 5,\n      extractor: (c: CipherView) => {\n        if (c.subTitle != null && c.type === CipherType.Card) {\n          return c.subTitle.replace(/\\*/g, \"\");\n        }\n        return c.subTitle;\n      },\n    });\n    builder.field(\"notes\");\n    builder.field(\"login.username\", {\n      extractor: (c: CipherView) =>\n        c.type === CipherType.Login && c.login != null ? c.login.username : null,\n    });\n    builder.field(\"login.uris\", { boost: 2, extractor: (c: CipherView) => this.uriExtractor(c) });\n    builder.field(\"fields\", { extractor: (c: CipherView) => this.fieldExtractor(c, false) });\n    builder.field(\"fields_joined\", { extractor: (c: CipherView) => this.fieldExtractor(c, true) });\n    builder.field(\"attachments\", {\n      extractor: (c: CipherView) => this.attachmentExtractor(c, false),\n    });\n    builder.field(\"attachments_joined\", {\n      extractor: (c: CipherView) => this.attachmentExtractor(c, true),\n    });\n    builder.field(\"organizationid\", { extractor: (c: CipherView) => c.organizationId });\n    ciphers = ciphers || (await this.cipherService.getAllDecrypted());\n    ciphers.forEach((c) => builder.add(c));\n    this.index = builder.build();\n\n    this.indexing = false;\n\n    this.logService.info(\"Finished search indexing\");\n  }\n\n  async searchCiphers(\n    query: string,\n    filter: ((cipher: CipherView) => boolean) | ((cipher: CipherView) => boolean)[] = null,\n    ciphers: CipherView[] = null\n  ): Promise<CipherView[]> {\n    const results: CipherView[] = [];\n    if (query != null) {\n      query = SearchService.normalizeSearchQuery(query.trim().toLowerCase());\n    }\n    if (query === \"\") {\n      query = null;\n    }\n\n    if (ciphers == null) {\n      ciphers = await this.cipherService.getAllDecrypted();\n    }\n\n    if (filter != null && Array.isArray(filter) && filter.length > 0) {\n      ciphers = ciphers.filter((c) => filter.every((f) => f == null || f(c)));\n    } else if (filter != null) {\n      ciphers = ciphers.filter(filter as (cipher: CipherView) => boolean);\n    }\n\n    if (!this.isSearchable(query)) {\n      return ciphers;\n    }\n\n    if (this.indexing) {\n      await new Promise((r) => setTimeout(r, 250));\n      if (this.indexing) {\n        await new Promise((r) => setTimeout(r, 500));\n      }\n    }\n\n    const index = this.getIndexForSearch();\n    if (index == null) {\n      // Fall back to basic search if index is not available\n      return this.searchCiphersBasic(ciphers, query);\n    }\n\n    const ciphersMap = new Map<string, CipherView>();\n    ciphers.forEach((c) => ciphersMap.set(c.id, c));\n\n    let searchResults: lunr.Index.Result[] = null;\n    const isQueryString = query != null && query.length > 1 && query.indexOf(\">\") === 0;\n    if (isQueryString) {\n      try {\n        searchResults = index.search(query.substr(1).trim());\n      } catch (e) {\n        this.logService.error(e);\n      }\n    } else {\n      const soWild = lunr.Query.wildcard.LEADING | lunr.Query.wildcard.TRAILING;\n      searchResults = index.query((q) => {\n        lunr.tokenizer(query).forEach((token) => {\n          const t = token.toString();\n          q.term(t, { fields: [\"name\"], wildcard: soWild });\n          q.term(t, { fields: [\"subtitle\"], wildcard: soWild });\n          q.term(t, { fields: [\"login.uris\"], wildcard: soWild });\n          q.term(t, {});\n        });\n      });\n    }\n\n    if (searchResults != null) {\n      searchResults.forEach((r) => {\n        if (ciphersMap.has(r.ref)) {\n          results.push(ciphersMap.get(r.ref));\n        }\n      });\n    }\n    return results;\n  }\n\n  searchCiphersBasic(ciphers: CipherView[], query: string, deleted = false) {\n    query = SearchService.normalizeSearchQuery(query.trim().toLowerCase());\n    return ciphers.filter((c) => {\n      if (deleted !== c.isDeleted) {\n        return false;\n      }\n      if (c.name != null && c.name.toLowerCase().indexOf(query) > -1) {\n        return true;\n      }\n      if (query.length >= 8 && c.id.startsWith(query)) {\n        return true;\n      }\n      if (c.subTitle != null && c.subTitle.toLowerCase().indexOf(query) > -1) {\n        return true;\n      }\n      if (\n        c.login &&\n        c.login.hasUris &&\n        c.login.uris.some((loginUri) => loginUri?.uri?.toLowerCase().indexOf(query) > -1)\n      ) {\n        return true;\n      }\n      return false;\n    });\n  }\n\n  searchSends(sends: SendView[], query: string) {\n    query = SearchService.normalizeSearchQuery(query.trim().toLocaleLowerCase());\n    if (query === null) {\n      return sends;\n    }\n    const sendsMatched: SendView[] = [];\n    const lowPriorityMatched: SendView[] = [];\n    sends.forEach((s) => {\n      if (s.name != null && s.name.toLowerCase().indexOf(query) > -1) {\n        sendsMatched.push(s);\n      } else if (\n        query.length >= 8 &&\n        (s.id.startsWith(query) ||\n          s.accessId.toLocaleLowerCase().startsWith(query) ||\n          (s.file?.id != null && s.file.id.startsWith(query)))\n      ) {\n        lowPriorityMatched.push(s);\n      } else if (s.notes != null && s.notes.toLowerCase().indexOf(query) > -1) {\n        lowPriorityMatched.push(s);\n      } else if (s.text?.text != null && s.text.text.toLowerCase().indexOf(query) > -1) {\n        lowPriorityMatched.push(s);\n      } else if (s.file?.fileName != null && s.file.fileName.toLowerCase().indexOf(query) > -1) {\n        lowPriorityMatched.push(s);\n      }\n    });\n    return sendsMatched.concat(lowPriorityMatched);\n  }\n\n  getIndexForSearch(): lunr.Index {\n    return this.index;\n  }\n\n  private fieldExtractor(c: CipherView, joined: boolean) {\n    if (!c.hasFields) {\n      return null;\n    }\n    let fields: string[] = [];\n    c.fields.forEach((f) => {\n      if (f.name != null) {\n        fields.push(f.name);\n      }\n      if (f.type === FieldType.Text && f.value != null) {\n        fields.push(f.value);\n      }\n    });\n    fields = fields.filter((f) => f.trim() !== \"\");\n    if (fields.length === 0) {\n      return null;\n    }\n    return joined ? fields.join(\" \") : fields;\n  }\n\n  private attachmentExtractor(c: CipherView, joined: boolean) {\n    if (!c.hasAttachments) {\n      return null;\n    }\n    let attachments: string[] = [];\n    c.attachments.forEach((a) => {\n      if (a != null && a.fileName != null) {\n        if (joined && a.fileName.indexOf(\".\") > -1) {\n          attachments.push(a.fileName.substr(0, a.fileName.lastIndexOf(\".\")));\n        } else {\n          attachments.push(a.fileName);\n        }\n      }\n    });\n    attachments = attachments.filter((f) => f.trim() !== \"\");\n    if (attachments.length === 0) {\n      return null;\n    }\n    return joined ? attachments.join(\" \") : attachments;\n  }\n\n  private uriExtractor(c: CipherView) {\n    if (c.type !== CipherType.Login || c.login == null || !c.login.hasUris) {\n      return null;\n    }\n    const uris: string[] = [];\n    c.login.uris.forEach((u) => {\n      if (u.uri == null || u.uri === \"\") {\n        return;\n      }\n      if (u.hostname != null) {\n        uris.push(u.hostname);\n        return;\n      }\n      let uri = u.uri;\n      if (u.match !== UriMatchType.RegularExpression) {\n        const protocolIndex = uri.indexOf(\"://\");\n        if (protocolIndex > -1) {\n          uri = uri.substr(protocolIndex + 3);\n        }\n        const queryIndex = uri.search(/\\?|&|#/);\n        if (queryIndex > -1) {\n          uri = uri.substring(0, queryIndex);\n        }\n      }\n      uris.push(uri);\n    });\n    return uris.length > 0 ? uris : null;\n  }\n\n  private normalizeAccentsPipelineFunction(token: lunr.Token): any {\n    const searchableFields = [\"name\", \"login.username\", \"subtitle\", \"notes\"];\n    const fields = (token as any).metadata[\"fields\"];\n    const checkFields = fields.every((i: any) => searchableFields.includes(i));\n\n    if (checkFields) {\n      return SearchService.normalizeSearchQuery(token.toString());\n    }\n\n    return token;\n  }\n\n  // Remove accents/diacritics characters from text. This regex is equivalent to the Diacritic unicode property escape, i.e. it will match all diacritic characters.\n  static normalizeSearchQuery(query: string): string {\n    return query?.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\n  }\n}\n","import { SendFileApi } from \"../api/sendFileApi\";\n\nexport class SendFileData {\n  id: string;\n  fileName: string;\n  size: string;\n  sizeName: string;\n\n  constructor(data?: SendFileApi) {\n    if (data == null) {\n      return;\n    }\n\n    this.id = data.id;\n    this.fileName = data.fileName;\n    this.size = data.size;\n    this.sizeName = data.sizeName;\n  }\n}\n","import { SendTextApi } from \"../api/sendTextApi\";\n\nexport class SendTextData {\n  text: string;\n  hidden: boolean;\n\n  constructor(data?: SendTextApi) {\n    if (data == null) {\n      return;\n    }\n\n    this.text = data.text;\n    this.hidden = data.hidden;\n  }\n}\n","import { SendType } from \"../../enums/sendType\";\nimport { SendResponse } from \"../response/sendResponse\";\n\nimport { SendFileData } from \"./sendFileData\";\nimport { SendTextData } from \"./sendTextData\";\n\nexport class SendData {\n  id: string;\n  accessId: string;\n  type: SendType;\n  name: string;\n  notes: string;\n  file: SendFileData;\n  text: SendTextData;\n  key: string;\n  maxAccessCount?: number;\n  accessCount: number;\n  revisionDate: string;\n  expirationDate: string;\n  deletionDate: string;\n  password: string;\n  disabled: boolean;\n  hideEmail: boolean;\n\n  constructor(response?: SendResponse) {\n    if (response == null) {\n      return;\n    }\n\n    this.id = response.id;\n    this.accessId = response.accessId;\n    this.type = response.type;\n    this.name = response.name;\n    this.notes = response.notes;\n    this.key = response.key;\n    this.maxAccessCount = response.maxAccessCount;\n    this.accessCount = response.accessCount;\n    this.revisionDate = response.revisionDate;\n    this.expirationDate = response.expirationDate;\n    this.deletionDate = response.deletionDate;\n    this.password = response.password;\n    this.disabled = response.disable;\n    this.hideEmail = response.hideEmail;\n\n    switch (this.type) {\n      case SendType.Text:\n        this.text = new SendTextData(response.text);\n        break;\n      case SendType.File:\n        this.file = new SendFileData(response.file);\n        break;\n      default:\n        break;\n    }\n  }\n}\n","import { SendFile } from \"../domain/sendFile\";\n\nimport { View } from \"./view\";\n\nexport class SendFileView implements View {\n  id: string = null;\n  size: string = null;\n  sizeName: string = null;\n  fileName: string = null;\n\n  constructor(f?: SendFile) {\n    if (!f) {\n      return;\n    }\n\n    this.id = f.id;\n    this.size = f.size;\n    this.sizeName = f.sizeName;\n  }\n\n  get fileSize(): number {\n    try {\n      if (this.size != null) {\n        return parseInt(this.size, null);\n      }\n    } catch {\n      // Invalid file size.\n    }\n    return 0;\n  }\n}\n","import { SendText } from \"../domain/sendText\";\n\nimport { View } from \"./view\";\n\nexport class SendTextView implements View {\n  text: string = null;\n  hidden: boolean;\n\n  constructor(t?: SendText) {\n    if (!t) {\n      return;\n    }\n\n    this.hidden = t.hidden;\n  }\n\n  get maskedText(): string {\n    return this.text != null ? \"••••••••\" : null;\n  }\n}\n","import { SendType } from \"../../enums/sendType\";\nimport { Utils } from \"../../misc/utils\";\nimport { Send } from \"../domain/send\";\nimport { SymmetricCryptoKey } from \"../domain/symmetricCryptoKey\";\n\nimport { SendFileView } from \"./sendFileView\";\nimport { SendTextView } from \"./sendTextView\";\nimport { View } from \"./view\";\n\nexport class SendView implements View {\n  id: string = null;\n  accessId: string = null;\n  name: string = null;\n  notes: string = null;\n  key: ArrayBuffer;\n  cryptoKey: SymmetricCryptoKey;\n  type: SendType = null;\n  text = new SendTextView();\n  file = new SendFileView();\n  maxAccessCount?: number = null;\n  accessCount = 0;\n  revisionDate: Date = null;\n  deletionDate: Date = null;\n  expirationDate: Date = null;\n  password: string = null;\n  disabled = false;\n  hideEmail = false;\n\n  constructor(s?: Send) {\n    if (!s) {\n      return;\n    }\n\n    this.id = s.id;\n    this.accessId = s.accessId;\n    this.type = s.type;\n    this.maxAccessCount = s.maxAccessCount;\n    this.accessCount = s.accessCount;\n    this.revisionDate = s.revisionDate;\n    this.deletionDate = s.deletionDate;\n    this.expirationDate = s.expirationDate;\n    this.disabled = s.disabled;\n    this.password = s.password;\n    this.hideEmail = s.hideEmail;\n  }\n\n  get urlB64Key(): string {\n    return Utils.fromBufferToUrlB64(this.key);\n  }\n\n  get maxAccessCountReached(): boolean {\n    if (this.maxAccessCount == null) {\n      return false;\n    }\n    return this.accessCount >= this.maxAccessCount;\n  }\n\n  get expired(): boolean {\n    if (this.expirationDate == null) {\n      return false;\n    }\n    return this.expirationDate <= new Date();\n  }\n\n  get pendingDelete(): boolean {\n    return this.deletionDate <= new Date();\n  }\n}\n","import { SendFileData } from \"../data/sendFileData\";\nimport { SendFileView } from \"../view/sendFileView\";\n\nimport Domain from \"./domainBase\";\nimport { EncString } from \"./encString\";\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport class SendFile extends Domain {\n  id: string;\n  size: string;\n  sizeName: string;\n  fileName: EncString;\n\n  constructor(obj?: SendFileData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.size = obj.size;\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        id: null,\n        sizeName: null,\n        fileName: null,\n      },\n      [\"id\", \"sizeName\"]\n    );\n  }\n\n  async decrypt(key: SymmetricCryptoKey): Promise<SendFileView> {\n    const view = await this.decryptObj(\n      new SendFileView(this),\n      {\n        fileName: null,\n      },\n      null,\n      key\n    );\n    return view;\n  }\n}\n","import { SendTextData } from \"../data/sendTextData\";\nimport { SendTextView } from \"../view/sendTextView\";\n\nimport Domain from \"./domainBase\";\nimport { EncString } from \"./encString\";\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport class SendText extends Domain {\n  text: EncString;\n  hidden: boolean;\n\n  constructor(obj?: SendTextData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.hidden = obj.hidden;\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        text: null,\n      },\n      []\n    );\n  }\n\n  decrypt(key: SymmetricCryptoKey): Promise<SendTextView> {\n    return this.decryptObj(\n      new SendTextView(this),\n      {\n        text: null,\n      },\n      null,\n      key\n    );\n  }\n}\n","import { CryptoService } from \"../../abstractions/crypto.service\";\nimport { SendType } from \"../../enums/sendType\";\nimport { Utils } from \"../../misc/utils\";\nimport { SendData } from \"../data/sendData\";\nimport { SendView } from \"../view/sendView\";\n\nimport Domain from \"./domainBase\";\nimport { EncString } from \"./encString\";\nimport { SendFile } from \"./sendFile\";\nimport { SendText } from \"./sendText\";\n\nexport class Send extends Domain {\n  id: string;\n  accessId: string;\n  type: SendType;\n  name: EncString;\n  notes: EncString;\n  file: SendFile;\n  text: SendText;\n  key: EncString;\n  maxAccessCount?: number;\n  accessCount: number;\n  revisionDate: Date;\n  expirationDate: Date;\n  deletionDate: Date;\n  password: string;\n  disabled: boolean;\n  hideEmail: boolean;\n\n  constructor(obj?: SendData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        id: null,\n        accessId: null,\n        name: null,\n        notes: null,\n        key: null,\n      },\n      [\"id\", \"accessId\"]\n    );\n\n    this.type = obj.type;\n    this.maxAccessCount = obj.maxAccessCount;\n    this.accessCount = obj.accessCount;\n    this.password = obj.password;\n    this.disabled = obj.disabled;\n    this.revisionDate = obj.revisionDate != null ? new Date(obj.revisionDate) : null;\n    this.deletionDate = obj.deletionDate != null ? new Date(obj.deletionDate) : null;\n    this.expirationDate = obj.expirationDate != null ? new Date(obj.expirationDate) : null;\n    this.hideEmail = obj.hideEmail;\n\n    switch (this.type) {\n      case SendType.Text:\n        this.text = new SendText(obj.text);\n        break;\n      case SendType.File:\n        this.file = new SendFile(obj.file);\n        break;\n      default:\n        break;\n    }\n  }\n\n  async decrypt(): Promise<SendView> {\n    const model = new SendView(this);\n\n    let cryptoService: CryptoService;\n    const containerService = (Utils.global as any).bitwardenContainerService;\n    if (containerService) {\n      cryptoService = containerService.getCryptoService();\n    } else {\n      throw new Error(\"global bitwardenContainerService not initialized.\");\n    }\n\n    try {\n      model.key = await cryptoService.decryptToBytes(this.key, null);\n      model.cryptoKey = await cryptoService.makeSendKey(model.key);\n    } catch (e) {\n      // TODO: error?\n    }\n\n    await this.decryptObj(\n      model,\n      {\n        name: null,\n        notes: null,\n      },\n      null,\n      model.cryptoKey\n    );\n\n    switch (this.type) {\n      case SendType.File:\n        model.file = await this.file.decrypt(model.cryptoKey);\n        break;\n      case SendType.Text:\n        model.text = await this.text.decrypt(model.cryptoKey);\n        break;\n      default:\n        break;\n    }\n\n    return model;\n  }\n}\n","import { SendType } from \"../../enums/sendType\";\nimport { SendFileApi } from \"../api/sendFileApi\";\nimport { SendTextApi } from \"../api/sendTextApi\";\nimport { Send } from \"../domain/send\";\n\nexport class SendRequest {\n  type: SendType;\n  fileLength?: number;\n  name: string;\n  notes: string;\n  key: string;\n  maxAccessCount?: number;\n  expirationDate: string;\n  deletionDate: string;\n  text: SendTextApi;\n  file: SendFileApi;\n  password: string;\n  disabled: boolean;\n  hideEmail: boolean;\n\n  constructor(send: Send, fileLength?: number) {\n    this.type = send.type;\n    this.fileLength = fileLength;\n    this.name = send.name ? send.name.encryptedString : null;\n    this.notes = send.notes ? send.notes.encryptedString : null;\n    this.maxAccessCount = send.maxAccessCount;\n    this.expirationDate = send.expirationDate != null ? send.expirationDate.toISOString() : null;\n    this.deletionDate = send.deletionDate != null ? send.deletionDate.toISOString() : null;\n    this.key = send.key != null ? send.key.encryptedString : null;\n    this.password = send.password;\n    this.disabled = send.disabled;\n    this.hideEmail = send.hideEmail;\n\n    switch (this.type) {\n      case SendType.Text:\n        this.text = new SendTextApi();\n        this.text.text = send.text.text != null ? send.text.text.encryptedString : null;\n        this.text.hidden = send.text.hidden;\n        break;\n      case SendType.File:\n        this.file = new SendFileApi();\n        this.file.fileName = send.file.fileName != null ? send.file.fileName.encryptedString : null;\n        break;\n      default:\n        break;\n    }\n  }\n}\n","import { ApiService } from \"../abstractions/api.service\";\nimport { CryptoService } from \"../abstractions/crypto.service\";\nimport { CryptoFunctionService } from \"../abstractions/cryptoFunction.service\";\nimport { FileUploadService } from \"../abstractions/fileUpload.service\";\nimport { I18nService } from \"../abstractions/i18n.service\";\nimport { SendService as SendServiceAbstraction } from \"../abstractions/send.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { SEND_KDF_ITERATIONS } from \"../enums/kdfType\";\nimport { SendType } from \"../enums/sendType\";\nimport { Utils } from \"../misc/utils\";\nimport { SendData } from \"../models/data/sendData\";\nimport { EncArrayBuffer } from \"../models/domain/encArrayBuffer\";\nimport { EncString } from \"../models/domain/encString\";\nimport { Send } from \"../models/domain/send\";\nimport { SendFile } from \"../models/domain/sendFile\";\nimport { SendText } from \"../models/domain/sendText\";\nimport { SymmetricCryptoKey } from \"../models/domain/symmetricCryptoKey\";\nimport { SendRequest } from \"../models/request/sendRequest\";\nimport { ErrorResponse } from \"../models/response/errorResponse\";\nimport { SendResponse } from \"../models/response/sendResponse\";\nimport { SendView } from \"../models/view/sendView\";\n\nexport class SendService implements SendServiceAbstraction {\n  constructor(\n    private cryptoService: CryptoService,\n    private apiService: ApiService,\n    private fileUploadService: FileUploadService,\n    private i18nService: I18nService,\n    private cryptoFunctionService: CryptoFunctionService,\n    private stateService: StateService\n  ) {}\n\n  async clearCache(): Promise<void> {\n    await this.stateService.setDecryptedSends(null);\n  }\n\n  async encrypt(\n    model: SendView,\n    file: File | ArrayBuffer,\n    password: string,\n    key?: SymmetricCryptoKey\n  ): Promise<[Send, EncArrayBuffer]> {\n    let fileData: EncArrayBuffer = null;\n    const send = new Send();\n    send.id = model.id;\n    send.type = model.type;\n    send.disabled = model.disabled;\n    send.hideEmail = model.hideEmail;\n    send.maxAccessCount = model.maxAccessCount;\n    if (model.key == null) {\n      model.key = await this.cryptoFunctionService.randomBytes(16);\n      model.cryptoKey = await this.cryptoService.makeSendKey(model.key);\n    }\n    if (password != null) {\n      const passwordHash = await this.cryptoFunctionService.pbkdf2(\n        password,\n        model.key,\n        \"sha256\",\n        SEND_KDF_ITERATIONS\n      );\n      send.password = Utils.fromBufferToB64(passwordHash);\n    }\n    send.key = await this.cryptoService.encrypt(model.key, key);\n    send.name = await this.cryptoService.encrypt(model.name, model.cryptoKey);\n    send.notes = await this.cryptoService.encrypt(model.notes, model.cryptoKey);\n    if (send.type === SendType.Text) {\n      send.text = new SendText();\n      send.text.text = await this.cryptoService.encrypt(model.text.text, model.cryptoKey);\n      send.text.hidden = model.text.hidden;\n    } else if (send.type === SendType.File) {\n      send.file = new SendFile();\n      if (file != null) {\n        if (file instanceof ArrayBuffer) {\n          const [name, data] = await this.encryptFileData(\n            model.file.fileName,\n            file,\n            model.cryptoKey\n          );\n          send.file.fileName = name;\n          fileData = data;\n        } else {\n          fileData = await this.parseFile(send, file, model.cryptoKey);\n        }\n      }\n    }\n\n    return [send, fileData];\n  }\n\n  async get(id: string): Promise<Send> {\n    const sends = await this.stateService.getEncryptedSends();\n    // eslint-disable-next-line\n    if (sends == null || !sends.hasOwnProperty(id)) {\n      return null;\n    }\n\n    return new Send(sends[id]);\n  }\n\n  async getAll(): Promise<Send[]> {\n    const sends = await this.stateService.getEncryptedSends();\n    const response: Send[] = [];\n    for (const id in sends) {\n      // eslint-disable-next-line\n      if (sends.hasOwnProperty(id)) {\n        response.push(new Send(sends[id]));\n      }\n    }\n    return response;\n  }\n\n  async getAllDecrypted(): Promise<SendView[]> {\n    let decSends = await this.stateService.getDecryptedSends();\n    if (decSends != null) {\n      return decSends;\n    }\n\n    decSends = [];\n    const hasKey = await this.cryptoService.hasKey();\n    if (!hasKey) {\n      throw new Error(\"No key.\");\n    }\n\n    const promises: Promise<any>[] = [];\n    const sends = await this.getAll();\n    sends.forEach((send) => {\n      promises.push(send.decrypt().then((f) => decSends.push(f)));\n    });\n\n    await Promise.all(promises);\n    decSends.sort(Utils.getSortFunction(this.i18nService, \"name\"));\n\n    await this.stateService.setDecryptedSends(decSends);\n    return decSends;\n  }\n\n  async saveWithServer(sendData: [Send, EncArrayBuffer]): Promise<any> {\n    const request = new SendRequest(sendData[0], sendData[1]?.buffer.byteLength);\n    let response: SendResponse;\n    if (sendData[0].id == null) {\n      if (sendData[0].type === SendType.Text) {\n        response = await this.apiService.postSend(request);\n      } else {\n        try {\n          const uploadDataResponse = await this.apiService.postFileTypeSend(request);\n          response = uploadDataResponse.sendResponse;\n\n          await this.fileUploadService.uploadSendFile(\n            uploadDataResponse,\n            sendData[0].file.fileName,\n            sendData[1]\n          );\n        } catch (e) {\n          if (e instanceof ErrorResponse && (e as ErrorResponse).statusCode === 404) {\n            response = await this.legacyServerSendFileUpload(sendData, request);\n          } else if (e instanceof ErrorResponse) {\n            throw new Error((e as ErrorResponse).getSingleMessage());\n          } else {\n            throw e;\n          }\n        }\n      }\n      sendData[0].id = response.id;\n      sendData[0].accessId = response.accessId;\n    } else {\n      response = await this.apiService.putSend(sendData[0].id, request);\n    }\n\n    const data = new SendData(response);\n    await this.upsert(data);\n  }\n\n  /**\n   * @deprecated Mar 25 2021: This method has been deprecated in favor of direct uploads.\n   * This method still exists for backward compatibility with old server versions.\n   */\n  async legacyServerSendFileUpload(\n    sendData: [Send, EncArrayBuffer],\n    request: SendRequest\n  ): Promise<SendResponse> {\n    const fd = new FormData();\n    try {\n      const blob = new Blob([sendData[1].buffer], { type: \"application/octet-stream\" });\n      fd.append(\"model\", JSON.stringify(request));\n      fd.append(\"data\", blob, sendData[0].file.fileName.encryptedString);\n    } catch (e) {\n      if (Utils.isNode && !Utils.isBrowser) {\n        fd.append(\"model\", JSON.stringify(request));\n        fd.append(\n          \"data\",\n          Buffer.from(sendData[1].buffer) as any,\n          {\n            filepath: sendData[0].file.fileName.encryptedString,\n            contentType: \"application/octet-stream\",\n          } as any\n        );\n      } else {\n        throw e;\n      }\n    }\n    return await this.apiService.postSendFileLegacy(fd);\n  }\n\n  async upsert(send: SendData | SendData[]): Promise<any> {\n    let sends = await this.stateService.getEncryptedSends();\n    if (sends == null) {\n      sends = {};\n    }\n\n    if (send instanceof SendData) {\n      const s = send as SendData;\n      sends[s.id] = s;\n    } else {\n      (send as SendData[]).forEach((s) => {\n        sends[s.id] = s;\n      });\n    }\n\n    await this.replace(sends);\n  }\n\n  async replace(sends: { [id: string]: SendData }): Promise<any> {\n    await this.stateService.setDecryptedSends(null);\n    await this.stateService.setEncryptedSends(sends);\n  }\n\n  async clear(): Promise<any> {\n    await this.stateService.setDecryptedSends(null);\n    await this.stateService.setEncryptedSends(null);\n  }\n\n  async delete(id: string | string[]): Promise<any> {\n    const sends = await this.stateService.getEncryptedSends();\n    if (sends == null) {\n      return;\n    }\n\n    if (typeof id === \"string\") {\n      if (sends[id] == null) {\n        return;\n      }\n      delete sends[id];\n    } else {\n      (id as string[]).forEach((i) => {\n        delete sends[i];\n      });\n    }\n\n    await this.replace(sends);\n  }\n\n  async deleteWithServer(id: string): Promise<any> {\n    await this.apiService.deleteSend(id);\n    await this.delete(id);\n  }\n\n  async removePasswordWithServer(id: string): Promise<any> {\n    const response = await this.apiService.putSendRemovePassword(id);\n    const data = new SendData(response);\n    await this.upsert(data);\n  }\n\n  private parseFile(send: Send, file: File, key: SymmetricCryptoKey): Promise<EncArrayBuffer> {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsArrayBuffer(file);\n      reader.onload = async (evt) => {\n        try {\n          const [name, data] = await this.encryptFileData(\n            file.name,\n            evt.target.result as ArrayBuffer,\n            key\n          );\n          send.file.fileName = name;\n          resolve(data);\n        } catch (e) {\n          reject(e);\n        }\n      };\n      reader.onerror = () => {\n        reject(\"Error reading file.\");\n      };\n    });\n  }\n\n  private async encryptFileData(\n    fileName: string,\n    data: ArrayBuffer,\n    key: SymmetricCryptoKey\n  ): Promise<[EncString, EncArrayBuffer]> {\n    const encFileName = await this.cryptoService.encrypt(fileName, key);\n    const encFileData = await this.cryptoService.encryptToBytes(data, key);\n    return [encFileName, encFileData];\n  }\n}\n","import { SettingsService as SettingsServiceAbstraction } from \"../abstractions/settings.service\";\nimport { StateService } from \"../abstractions/state.service\";\n\nconst Keys = {\n  settingsPrefix: \"settings_\",\n  equivalentDomains: \"equivalentDomains\",\n};\n\nexport class SettingsService implements SettingsServiceAbstraction {\n  constructor(private stateService: StateService) {}\n\n  async clearCache(): Promise<void> {\n    await this.stateService.setSettings(null);\n  }\n\n  getEquivalentDomains(): Promise<any> {\n    return this.getSettingsKey(Keys.equivalentDomains);\n  }\n\n  async setEquivalentDomains(equivalentDomains: string[][]): Promise<void> {\n    await this.setSettingsKey(Keys.equivalentDomains, equivalentDomains);\n  }\n\n  async clear(userId?: string): Promise<void> {\n    await this.stateService.setSettings(null, { userId: userId });\n  }\n\n  // Helpers\n\n  private async getSettings(): Promise<any> {\n    const settings = await this.stateService.getSettings();\n    if (settings == null) {\n      // eslint-disable-next-line\n      const userId = await this.stateService.getUserId();\n    }\n    return settings;\n  }\n\n  private async getSettingsKey(key: string): Promise<any> {\n    const settings = await this.getSettings();\n    if (settings != null && settings[key]) {\n      return settings[key];\n    }\n    return null;\n  }\n\n  private async setSettingsKey(key: string, value: any): Promise<void> {\n    let settings = await this.getSettings();\n    if (!settings) {\n      settings = {};\n    }\n\n    settings[key] = value;\n    await this.stateService.setSettings(settings);\n  }\n}\n","import { OrganizationUserStatusType } from \"../../enums/organizationUserStatusType\";\nimport { OrganizationUserType } from \"../../enums/organizationUserType\";\nimport { ProductType } from \"../../enums/productType\";\nimport { PermissionsApi } from \"../api/permissionsApi\";\nimport { ProfileOrganizationResponse } from \"../response/profileOrganizationResponse\";\n\nexport class OrganizationData {\n  id: string;\n  name: string;\n  status: OrganizationUserStatusType;\n  type: OrganizationUserType;\n  enabled: boolean;\n  usePolicies: boolean;\n  useGroups: boolean;\n  useDirectory: boolean;\n  useEvents: boolean;\n  useTotp: boolean;\n  use2fa: boolean;\n  useApi: boolean;\n  useSso: boolean;\n  useKeyConnector: boolean;\n  useScim: boolean;\n  useResetPassword: boolean;\n  selfHost: boolean;\n  usersGetPremium: boolean;\n  seats: number;\n  maxCollections: number;\n  maxStorageGb?: number;\n  ssoBound: boolean;\n  identifier: string;\n  permissions: PermissionsApi;\n  resetPasswordEnrolled: boolean;\n  userId: string;\n  hasPublicAndPrivateKeys: boolean;\n  providerId: string;\n  providerName: string;\n  isProviderUser: boolean;\n  familySponsorshipFriendlyName: string;\n  familySponsorshipAvailable: boolean;\n  planProductType: ProductType;\n  keyConnectorEnabled: boolean;\n  keyConnectorUrl: string;\n  familySponsorshipLastSyncDate?: Date;\n  familySponsorshipValidUntil?: Date;\n  familySponsorshipToDelete?: boolean;\n\n  constructor(response: ProfileOrganizationResponse) {\n    this.id = response.id;\n    this.name = response.name;\n    this.status = response.status;\n    this.type = response.type;\n    this.enabled = response.enabled;\n    this.usePolicies = response.usePolicies;\n    this.useGroups = response.useGroups;\n    this.useDirectory = response.useDirectory;\n    this.useEvents = response.useEvents;\n    this.useTotp = response.useTotp;\n    this.use2fa = response.use2fa;\n    this.useApi = response.useApi;\n    this.useSso = response.useSso;\n    this.useKeyConnector = response.useKeyConnector;\n    this.useScim = response.useScim;\n    this.useResetPassword = response.useResetPassword;\n    this.selfHost = response.selfHost;\n    this.usersGetPremium = response.usersGetPremium;\n    this.seats = response.seats;\n    this.maxCollections = response.maxCollections;\n    this.maxStorageGb = response.maxStorageGb;\n    this.ssoBound = response.ssoBound;\n    this.identifier = response.identifier;\n    this.permissions = response.permissions;\n    this.resetPasswordEnrolled = response.resetPasswordEnrolled;\n    this.userId = response.userId;\n    this.hasPublicAndPrivateKeys = response.hasPublicAndPrivateKeys;\n    this.providerId = response.providerId;\n    this.providerName = response.providerName;\n    this.familySponsorshipFriendlyName = response.familySponsorshipFriendlyName;\n    this.familySponsorshipAvailable = response.familySponsorshipAvailable;\n    this.planProductType = response.planProductType;\n    this.keyConnectorEnabled = response.keyConnectorEnabled;\n    this.keyConnectorUrl = response.keyConnectorUrl;\n    this.familySponsorshipLastSyncDate = response.familySponsorshipLastSyncDate;\n    this.familySponsorshipValidUntil = response.familySponsorshipValidUntil;\n    this.familySponsorshipToDelete = response.familySponsorshipToDelete;\n  }\n}\n","import { ProviderUserStatusType } from \"../../enums/providerUserStatusType\";\nimport { ProviderUserType } from \"../../enums/providerUserType\";\nimport { ProfileProviderResponse } from \"../response/profileProviderResponse\";\n\nexport class ProviderData {\n  id: string;\n  name: string;\n  status: ProviderUserStatusType;\n  type: ProviderUserType;\n  enabled: boolean;\n  userId: string;\n  useEvents: boolean;\n\n  constructor(response: ProfileProviderResponse) {\n    this.id = response.id;\n    this.name = response.name;\n    this.status = response.status;\n    this.type = response.type;\n    this.enabled = response.enabled;\n    this.userId = response.userId;\n    this.useEvents = response.useEvents;\n  }\n}\n","import { ApiService } from \"../abstractions/api.service\";\nimport { CipherService } from \"../abstractions/cipher.service\";\nimport { CollectionService } from \"../abstractions/collection.service\";\nimport { CryptoService } from \"../abstractions/crypto.service\";\nimport { FolderApiServiceAbstraction } from \"../abstractions/folder/folder-api.service.abstraction\";\nimport { InternalFolderService } from \"../abstractions/folder/folder.service.abstraction\";\nimport { KeyConnectorService } from \"../abstractions/keyConnector.service\";\nimport { LogService } from \"../abstractions/log.service\";\nimport { MessagingService } from \"../abstractions/messaging.service\";\nimport { OrganizationService } from \"../abstractions/organization.service\";\nimport { InternalPolicyService } from \"../abstractions/policy/policy.service.abstraction\";\nimport { ProviderService } from \"../abstractions/provider.service\";\nimport { SendService } from \"../abstractions/send.service\";\nimport { SettingsService } from \"../abstractions/settings.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { SyncService as SyncServiceAbstraction } from \"../abstractions/sync.service\";\nimport { sequentialize } from \"../misc/sequentialize\";\nimport { CipherData } from \"../models/data/cipherData\";\nimport { CollectionData } from \"../models/data/collectionData\";\nimport { FolderData } from \"../models/data/folderData\";\nimport { OrganizationData } from \"../models/data/organizationData\";\nimport { PolicyData } from \"../models/data/policyData\";\nimport { ProviderData } from \"../models/data/providerData\";\nimport { SendData } from \"../models/data/sendData\";\nimport { CipherResponse } from \"../models/response/cipherResponse\";\nimport { CollectionDetailsResponse } from \"../models/response/collectionResponse\";\nimport { DomainsResponse } from \"../models/response/domainsResponse\";\nimport { FolderResponse } from \"../models/response/folderResponse\";\nimport {\n  SyncCipherNotification,\n  SyncFolderNotification,\n  SyncSendNotification,\n} from \"../models/response/notificationResponse\";\nimport { PolicyResponse } from \"../models/response/policyResponse\";\nimport { ProfileResponse } from \"../models/response/profileResponse\";\nimport { SendResponse } from \"../models/response/sendResponse\";\n\nexport class SyncService implements SyncServiceAbstraction {\n  syncInProgress = false;\n\n  constructor(\n    private apiService: ApiService,\n    private settingsService: SettingsService,\n    private folderService: InternalFolderService,\n    private cipherService: CipherService,\n    private cryptoService: CryptoService,\n    private collectionService: CollectionService,\n    private messagingService: MessagingService,\n    private policyService: InternalPolicyService,\n    private sendService: SendService,\n    private logService: LogService,\n    private keyConnectorService: KeyConnectorService,\n    private stateService: StateService,\n    private organizationService: OrganizationService,\n    private providerService: ProviderService,\n    private folderApiService: FolderApiServiceAbstraction,\n    private logoutCallback: (expired: boolean) => Promise<void>\n  ) {}\n\n  async getLastSync(): Promise<Date> {\n    if ((await this.stateService.getUserId()) == null) {\n      return null;\n    }\n\n    const lastSync = await this.stateService.getLastSync();\n    if (lastSync) {\n      return new Date(lastSync);\n    }\n\n    return null;\n  }\n\n  async setLastSync(date: Date, userId?: string): Promise<any> {\n    await this.stateService.setLastSync(date.toJSON(), { userId: userId });\n  }\n\n  @sequentialize(() => \"fullSync\")\n  async fullSync(forceSync: boolean, allowThrowOnError = false): Promise<boolean> {\n    this.syncStarted();\n    const isAuthenticated = await this.stateService.getIsAuthenticated();\n    if (!isAuthenticated) {\n      return this.syncCompleted(false);\n    }\n\n    const now = new Date();\n    let needsSync = false;\n    try {\n      needsSync = await this.needsSyncing(forceSync);\n    } catch (e) {\n      if (allowThrowOnError) {\n        throw e;\n      }\n    }\n\n    if (!needsSync) {\n      await this.setLastSync(now);\n      return this.syncCompleted(false);\n    }\n\n    try {\n      await this.apiService.refreshIdentityToken();\n      const response = await this.apiService.getSync();\n\n      await this.syncProfile(response.profile);\n      await this.syncFolders(response.folders);\n      await this.syncCollections(response.collections);\n      await this.syncCiphers(response.ciphers);\n      await this.syncSends(response.sends);\n      await this.syncSettings(response.domains);\n      await this.syncPolicies(response.policies);\n\n      await this.setLastSync(now);\n      return this.syncCompleted(true);\n    } catch (e) {\n      if (allowThrowOnError) {\n        throw e;\n      } else {\n        return this.syncCompleted(false);\n      }\n    }\n  }\n\n  async syncUpsertFolder(notification: SyncFolderNotification, isEdit: boolean): Promise<boolean> {\n    this.syncStarted();\n    if (await this.stateService.getIsAuthenticated()) {\n      try {\n        const localFolder = await this.folderService.get(notification.id);\n        if (\n          (!isEdit && localFolder == null) ||\n          (isEdit && localFolder != null && localFolder.revisionDate < notification.revisionDate)\n        ) {\n          const remoteFolder = await this.folderApiService.get(notification.id);\n          if (remoteFolder != null) {\n            await this.folderService.upsert(new FolderData(remoteFolder));\n            this.messagingService.send(\"syncedUpsertedFolder\", { folderId: notification.id });\n            return this.syncCompleted(true);\n          }\n        }\n      } catch (e) {\n        this.logService.error(e);\n      }\n    }\n    return this.syncCompleted(false);\n  }\n\n  async syncDeleteFolder(notification: SyncFolderNotification): Promise<boolean> {\n    this.syncStarted();\n    if (await this.stateService.getIsAuthenticated()) {\n      await this.folderService.delete(notification.id);\n      this.messagingService.send(\"syncedDeletedFolder\", { folderId: notification.id });\n      this.syncCompleted(true);\n      return true;\n    }\n    return this.syncCompleted(false);\n  }\n\n  async syncUpsertCipher(notification: SyncCipherNotification, isEdit: boolean): Promise<boolean> {\n    this.syncStarted();\n    if (await this.stateService.getIsAuthenticated()) {\n      try {\n        let shouldUpdate = true;\n        const localCipher = await this.cipherService.get(notification.id);\n        if (localCipher != null && localCipher.revisionDate >= notification.revisionDate) {\n          shouldUpdate = false;\n        }\n\n        let checkCollections = false;\n        if (shouldUpdate) {\n          if (isEdit) {\n            shouldUpdate = localCipher != null;\n            checkCollections = true;\n          } else {\n            if (notification.collectionIds == null || notification.organizationId == null) {\n              shouldUpdate = localCipher == null;\n            } else {\n              shouldUpdate = false;\n              checkCollections = true;\n            }\n          }\n        }\n\n        if (\n          !shouldUpdate &&\n          checkCollections &&\n          notification.organizationId != null &&\n          notification.collectionIds != null &&\n          notification.collectionIds.length > 0\n        ) {\n          const collections = await this.collectionService.getAll();\n          if (collections != null) {\n            for (let i = 0; i < collections.length; i++) {\n              if (notification.collectionIds.indexOf(collections[i].id) > -1) {\n                shouldUpdate = true;\n                break;\n              }\n            }\n          }\n        }\n\n        if (shouldUpdate) {\n          const remoteCipher = await this.apiService.getFullCipherDetails(notification.id);\n          if (remoteCipher != null) {\n            await this.cipherService.upsert(new CipherData(remoteCipher));\n            this.messagingService.send(\"syncedUpsertedCipher\", { cipherId: notification.id });\n            return this.syncCompleted(true);\n          }\n        }\n      } catch (e) {\n        if (e != null && e.statusCode === 404 && isEdit) {\n          await this.cipherService.delete(notification.id);\n          this.messagingService.send(\"syncedDeletedCipher\", { cipherId: notification.id });\n          return this.syncCompleted(true);\n        }\n      }\n    }\n    return this.syncCompleted(false);\n  }\n\n  async syncDeleteCipher(notification: SyncCipherNotification): Promise<boolean> {\n    this.syncStarted();\n    if (await this.stateService.getIsAuthenticated()) {\n      await this.cipherService.delete(notification.id);\n      this.messagingService.send(\"syncedDeletedCipher\", { cipherId: notification.id });\n      return this.syncCompleted(true);\n    }\n    return this.syncCompleted(false);\n  }\n\n  async syncUpsertSend(notification: SyncSendNotification, isEdit: boolean): Promise<boolean> {\n    this.syncStarted();\n    if (await this.stateService.getIsAuthenticated()) {\n      try {\n        const localSend = await this.sendService.get(notification.id);\n        if (\n          (!isEdit && localSend == null) ||\n          (isEdit && localSend != null && localSend.revisionDate < notification.revisionDate)\n        ) {\n          const remoteSend = await this.apiService.getSend(notification.id);\n          if (remoteSend != null) {\n            await this.sendService.upsert(new SendData(remoteSend));\n            this.messagingService.send(\"syncedUpsertedSend\", { sendId: notification.id });\n            return this.syncCompleted(true);\n          }\n        }\n      } catch (e) {\n        this.logService.error(e);\n      }\n    }\n    return this.syncCompleted(false);\n  }\n\n  async syncDeleteSend(notification: SyncSendNotification): Promise<boolean> {\n    this.syncStarted();\n    if (await this.stateService.getIsAuthenticated()) {\n      await this.sendService.delete(notification.id);\n      this.messagingService.send(\"syncedDeletedSend\", { sendId: notification.id });\n      this.syncCompleted(true);\n      return true;\n    }\n    return this.syncCompleted(false);\n  }\n\n  // Helpers\n\n  private syncStarted() {\n    this.syncInProgress = true;\n    this.messagingService.send(\"syncStarted\");\n  }\n\n  private syncCompleted(successfully: boolean): boolean {\n    this.syncInProgress = false;\n    this.messagingService.send(\"syncCompleted\", { successfully: successfully });\n    return successfully;\n  }\n\n  private async needsSyncing(forceSync: boolean) {\n    if (forceSync) {\n      return true;\n    }\n\n    const lastSync = await this.getLastSync();\n    if (lastSync == null || lastSync.getTime() === 0) {\n      return true;\n    }\n\n    const response = await this.apiService.getAccountRevisionDate();\n    if (new Date(response) <= lastSync) {\n      return false;\n    }\n    return true;\n  }\n\n  private async syncProfile(response: ProfileResponse) {\n    const stamp = await this.stateService.getSecurityStamp();\n    if (stamp != null && stamp !== response.securityStamp) {\n      if (this.logoutCallback != null) {\n        await this.logoutCallback(true);\n      }\n\n      throw new Error(\"Stamp has changed\");\n    }\n\n    await this.cryptoService.setEncKey(response.key);\n    await this.cryptoService.setEncPrivateKey(response.privateKey);\n    await this.cryptoService.setProviderKeys(response.providers);\n    await this.cryptoService.setOrgKeys(response.organizations, response.providerOrganizations);\n    await this.stateService.setSecurityStamp(response.securityStamp);\n    await this.stateService.setEmailVerified(response.emailVerified);\n    await this.stateService.setHasPremiumPersonally(response.premiumPersonally);\n    await this.stateService.setHasPremiumFromOrganization(response.premiumFromOrganization);\n    await this.stateService.setForcePasswordReset(response.forcePasswordReset);\n    await this.keyConnectorService.setUsesKeyConnector(response.usesKeyConnector);\n\n    const organizations: { [id: string]: OrganizationData } = {};\n    response.organizations.forEach((o) => {\n      organizations[o.id] = new OrganizationData(o);\n    });\n\n    const providers: { [id: string]: ProviderData } = {};\n    response.providers.forEach((p) => {\n      providers[p.id] = new ProviderData(p);\n    });\n\n    response.providerOrganizations.forEach((o) => {\n      if (organizations[o.id] == null) {\n        organizations[o.id] = new OrganizationData(o);\n        organizations[o.id].isProviderUser = true;\n      }\n    });\n\n    await this.organizationService.save(organizations);\n    await this.providerService.save(providers);\n\n    if (await this.keyConnectorService.userNeedsMigration()) {\n      await this.keyConnectorService.setConvertAccountRequired(true);\n      this.messagingService.send(\"convertAccountToKeyConnector\");\n    } else {\n      this.keyConnectorService.removeConvertAccountRequired();\n    }\n  }\n\n  private async syncFolders(response: FolderResponse[]) {\n    const folders: { [id: string]: FolderData } = {};\n    response.forEach((f) => {\n      folders[f.id] = new FolderData(f);\n    });\n    return await this.folderService.replace(folders);\n  }\n\n  private async syncCollections(response: CollectionDetailsResponse[]) {\n    const collections: { [id: string]: CollectionData } = {};\n    response.forEach((c) => {\n      collections[c.id] = new CollectionData(c);\n    });\n    return await this.collectionService.replace(collections);\n  }\n\n  private async syncCiphers(response: CipherResponse[]) {\n    const ciphers: { [id: string]: CipherData } = {};\n    response.forEach((c) => {\n      ciphers[c.id] = new CipherData(c);\n    });\n    return await this.cipherService.replace(ciphers);\n  }\n\n  private async syncSends(response: SendResponse[]) {\n    const sends: { [id: string]: SendData } = {};\n    response.forEach((s) => {\n      sends[s.id] = new SendData(s);\n    });\n    return await this.sendService.replace(sends);\n  }\n\n  private async syncSettings(response: DomainsResponse) {\n    let eqDomains: string[][] = [];\n    if (response != null && response.equivalentDomains != null) {\n      eqDomains = eqDomains.concat(response.equivalentDomains);\n    }\n\n    if (response != null && response.globalEquivalentDomains != null) {\n      response.globalEquivalentDomains.forEach((global) => {\n        if (global.domains.length > 0) {\n          eqDomains.push(global.domains);\n        }\n      });\n    }\n\n    return this.settingsService.setEquivalentDomains(eqDomains);\n  }\n\n  private async syncPolicies(response: PolicyResponse[]) {\n    const policies: { [id: string]: PolicyData } = {};\n    if (response != null) {\n      response.forEach((p) => {\n        policies[p.id] = new PolicyData(p);\n      });\n    }\n    return await this.policyService.replace(policies);\n  }\n}\n","import { AuthService } from \"../abstractions/auth.service\";\nimport { MessagingService } from \"../abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"../abstractions/platformUtils.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { SystemService as SystemServiceAbstraction } from \"../abstractions/system.service\";\nimport { AuthenticationStatus } from \"../enums/authenticationStatus\";\nimport { Utils } from \"../misc/utils\";\n\nexport class SystemService implements SystemServiceAbstraction {\n  private reloadInterval: any = null;\n  private clearClipboardTimeout: any = null;\n  private clearClipboardTimeoutFunction: () => Promise<any> = null;\n\n  constructor(\n    private messagingService: MessagingService,\n    private platformUtilsService: PlatformUtilsService,\n    private reloadCallback: () => Promise<void> = null,\n    private stateService: StateService\n  ) {}\n\n  async startProcessReload(authService: AuthService): Promise<void> {\n    const accounts = this.stateService.accounts.getValue();\n    if (accounts != null) {\n      const keys = Object.keys(accounts);\n      if (keys.length > 0) {\n        for (const userId of keys) {\n          if ((await authService.getAuthStatus(userId)) === AuthenticationStatus.Unlocked) {\n            return;\n          }\n        }\n      }\n    }\n\n    // A reloadInterval has already been set and is executing\n    if (this.reloadInterval != null) {\n      return;\n    }\n\n    // User has set a PIN, with ask for master password on restart, to protect their vault\n    const decryptedPinProtected = await this.stateService.getDecryptedPinProtected();\n    if (decryptedPinProtected != null) {\n      return;\n    }\n\n    this.cancelProcessReload();\n    this.reloadInterval = setInterval(async () => await this.executeProcessReload(), 10000);\n  }\n\n  private async inactiveMoreThanSeconds(seconds: number): Promise<boolean> {\n    const lastActive = await this.stateService.getLastActive();\n    if (lastActive != null) {\n      const diffMs = new Date().getTime() - lastActive;\n      return diffMs >= seconds * 1000;\n    }\n    return true;\n  }\n\n  private async executeProcessReload() {\n    const accounts = this.stateService.accounts.getValue();\n    const doRefresh =\n      accounts == null ||\n      Object.keys(accounts).length == 0 ||\n      (await this.inactiveMoreThanSeconds(5));\n\n    const biometricLockedFingerprintValidated =\n      await this.stateService.getBiometricFingerprintValidated();\n    if (doRefresh && !biometricLockedFingerprintValidated) {\n      clearInterval(this.reloadInterval);\n      this.reloadInterval = null;\n      this.messagingService.send(\"reloadProcess\");\n      if (this.reloadCallback != null) {\n        await this.reloadCallback();\n      }\n    }\n  }\n\n  cancelProcessReload(): void {\n    if (this.reloadInterval != null) {\n      clearInterval(this.reloadInterval);\n      this.reloadInterval = null;\n    }\n  }\n\n  async clearClipboard(clipboardValue: string, timeoutMs: number = null): Promise<void> {\n    if (this.clearClipboardTimeout != null) {\n      clearTimeout(this.clearClipboardTimeout);\n      this.clearClipboardTimeout = null;\n    }\n    if (Utils.isNullOrWhitespace(clipboardValue)) {\n      return;\n    }\n    await this.stateService.getClearClipboard().then((clearSeconds) => {\n      if (clearSeconds == null) {\n        return;\n      }\n      if (timeoutMs == null) {\n        timeoutMs = clearSeconds * 1000;\n      }\n      this.clearClipboardTimeoutFunction = async () => {\n        const clipboardValueNow = await this.platformUtilsService.readFromClipboard();\n        if (clipboardValue === clipboardValueNow) {\n          this.platformUtilsService.copyToClipboard(\"\", { clearing: true });\n        }\n      };\n      this.clearClipboardTimeout = setTimeout(async () => {\n        await this.clearPendingClipboard();\n      }, timeoutMs);\n    });\n  }\n\n  async clearPendingClipboard() {\n    if (this.clearClipboardTimeoutFunction != null) {\n      await this.clearClipboardTimeoutFunction();\n      this.clearClipboardTimeoutFunction = null;\n    }\n  }\n}\n","import { StateService } from \"../abstractions/state.service\";\nimport { TokenService as TokenServiceAbstraction } from \"../abstractions/token.service\";\nimport { Utils } from \"../misc/utils\";\nimport { IdentityTokenResponse } from \"../models/response/identityTokenResponse\";\n\nexport class TokenService implements TokenServiceAbstraction {\n  static decodeToken(token: string): Promise<any> {\n    if (token == null) {\n      throw new Error(\"Token not provided.\");\n    }\n\n    const parts = token.split(\".\");\n    if (parts.length !== 3) {\n      throw new Error(\"JWT must have 3 parts\");\n    }\n\n    const decoded = Utils.fromUrlB64ToUtf8(parts[1]);\n    if (decoded == null) {\n      throw new Error(\"Cannot decode the token\");\n    }\n\n    const decodedToken = JSON.parse(decoded);\n    return decodedToken;\n  }\n\n  constructor(private stateService: StateService) {}\n\n  async setTokens(\n    accessToken: string,\n    refreshToken: string,\n    clientIdClientSecret: [string, string]\n  ): Promise<any> {\n    await this.setToken(accessToken);\n    await this.setRefreshToken(refreshToken);\n    if (clientIdClientSecret != null) {\n      await this.setClientId(clientIdClientSecret[0]);\n      await this.setClientSecret(clientIdClientSecret[1]);\n    }\n  }\n\n  async setClientId(clientId: string): Promise<any> {\n    return await this.stateService.setApiKeyClientId(clientId);\n  }\n\n  async getClientId(): Promise<string> {\n    return await this.stateService.getApiKeyClientId();\n  }\n\n  async setClientSecret(clientSecret: string): Promise<any> {\n    return await this.stateService.setApiKeyClientSecret(clientSecret);\n  }\n\n  async getClientSecret(): Promise<string> {\n    return await this.stateService.getApiKeyClientSecret();\n  }\n\n  async setToken(token: string): Promise<void> {\n    await this.stateService.setAccessToken(token);\n  }\n\n  async getToken(): Promise<string> {\n    return await this.stateService.getAccessToken();\n  }\n\n  async setRefreshToken(refreshToken: string): Promise<any> {\n    return await this.stateService.setRefreshToken(refreshToken);\n  }\n\n  async getRefreshToken(): Promise<string> {\n    return await this.stateService.getRefreshToken();\n  }\n\n  async setTwoFactorToken(tokenResponse: IdentityTokenResponse): Promise<any> {\n    return await this.stateService.setTwoFactorToken(tokenResponse.twoFactorToken);\n  }\n\n  async getTwoFactorToken(): Promise<string> {\n    return await this.stateService.getTwoFactorToken();\n  }\n\n  async clearTwoFactorToken(): Promise<any> {\n    return await this.stateService.setTwoFactorToken(null);\n  }\n\n  async clearToken(userId?: string): Promise<any> {\n    await this.stateService.setAccessToken(null, { userId: userId });\n    await this.stateService.setRefreshToken(null, { userId: userId });\n    await this.stateService.setApiKeyClientId(null, { userId: userId });\n    await this.stateService.setApiKeyClientSecret(null, { userId: userId });\n  }\n\n  // jwthelper methods\n  // ref https://github.com/auth0/angular-jwt/blob/master/src/angularJwt/services/jwt.js\n\n  async decodeToken(token?: string): Promise<any> {\n    const storedToken = await this.stateService.getDecodedToken();\n    if (token === null && storedToken != null) {\n      return storedToken;\n    }\n\n    token = token ?? (await this.stateService.getAccessToken());\n\n    if (token == null) {\n      throw new Error(\"Token not found.\");\n    }\n\n    return TokenService.decodeToken(token);\n  }\n\n  async getTokenExpirationDate(): Promise<Date> {\n    const decoded = await this.decodeToken();\n    if (typeof decoded.exp === \"undefined\") {\n      return null;\n    }\n\n    const d = new Date(0); // The 0 here is the key, which sets the date to the epoch\n    d.setUTCSeconds(decoded.exp);\n    return d;\n  }\n\n  async tokenSecondsRemaining(offsetSeconds = 0): Promise<number> {\n    const d = await this.getTokenExpirationDate();\n    if (d == null) {\n      return 0;\n    }\n\n    const msRemaining = d.valueOf() - (new Date().valueOf() + offsetSeconds * 1000);\n    return Math.round(msRemaining / 1000);\n  }\n\n  async tokenNeedsRefresh(minutes = 5): Promise<boolean> {\n    const sRemaining = await this.tokenSecondsRemaining();\n    return sRemaining < 60 * minutes;\n  }\n\n  async getUserId(): Promise<string> {\n    const decoded = await this.decodeToken();\n    if (typeof decoded.sub === \"undefined\") {\n      throw new Error(\"No user id found\");\n    }\n\n    return decoded.sub as string;\n  }\n\n  async getEmail(): Promise<string> {\n    const decoded = await this.decodeToken();\n    if (typeof decoded.email === \"undefined\") {\n      throw new Error(\"No email found\");\n    }\n\n    return decoded.email as string;\n  }\n\n  async getEmailVerified(): Promise<boolean> {\n    const decoded = await this.decodeToken();\n    if (typeof decoded.email_verified === \"undefined\") {\n      throw new Error(\"No email verification found\");\n    }\n\n    return decoded.email_verified as boolean;\n  }\n\n  async getName(): Promise<string> {\n    const decoded = await this.decodeToken();\n    if (typeof decoded.name === \"undefined\") {\n      return null;\n    }\n\n    return decoded.name as string;\n  }\n\n  async getIssuer(): Promise<string> {\n    const decoded = await this.decodeToken();\n    if (typeof decoded.iss === \"undefined\") {\n      throw new Error(\"No issuer found\");\n    }\n\n    return decoded.iss as string;\n  }\n\n  async getIsExternal(): Promise<boolean> {\n    const decoded = await this.decodeToken();\n\n    return Array.isArray(decoded.amr) && decoded.amr.includes(\"external\");\n  }\n}\n","import { CryptoFunctionService } from \"../abstractions/cryptoFunction.service\";\nimport { LogService } from \"../abstractions/log.service\";\nimport { TotpService as TotpServiceAbstraction } from \"../abstractions/totp.service\";\nimport { Utils } from \"../misc/utils\";\n\nconst B32Chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\";\nconst SteamChars = \"23456789BCDFGHJKMNPQRTVWXY\";\n\nexport class TotpService implements TotpServiceAbstraction {\n  constructor(\n    private cryptoFunctionService: CryptoFunctionService,\n    private logService: LogService\n  ) {}\n\n  async getCode(key: string): Promise<string> {\n    if (key == null) {\n      return null;\n    }\n    let period = 30;\n    let alg: \"sha1\" | \"sha256\" | \"sha512\" = \"sha1\";\n    let digits = 6;\n    let keyB32 = key;\n    const isOtpAuth = key.toLowerCase().indexOf(\"otpauth://\") === 0;\n    const isSteamAuth = !isOtpAuth && key.toLowerCase().indexOf(\"steam://\") === 0;\n    if (isOtpAuth) {\n      const params = Utils.getQueryParams(key);\n      if (params.has(\"digits\") && params.get(\"digits\") != null) {\n        try {\n          const digitParams = parseInt(params.get(\"digits\").trim(), null);\n          if (digitParams > 10) {\n            digits = 10;\n          } else if (digitParams > 0) {\n            digits = digitParams;\n          }\n        } catch {\n          this.logService.error(\"Invalid digits param.\");\n        }\n      }\n      if (params.has(\"period\") && params.get(\"period\") != null) {\n        try {\n          const periodParam = parseInt(params.get(\"period\").trim(), null);\n          if (periodParam > 0) {\n            period = periodParam;\n          }\n        } catch {\n          this.logService.error(\"Invalid period param.\");\n        }\n      }\n      if (params.has(\"secret\") && params.get(\"secret\") != null) {\n        keyB32 = params.get(\"secret\");\n      }\n      if (params.has(\"algorithm\") && params.get(\"algorithm\") != null) {\n        const algParam = params.get(\"algorithm\").toLowerCase();\n        if (algParam === \"sha1\" || algParam === \"sha256\" || algParam === \"sha512\") {\n          alg = algParam;\n        }\n      }\n    } else if (isSteamAuth) {\n      keyB32 = key.substr(\"steam://\".length);\n      digits = 5;\n    }\n\n    const epoch = Math.round(new Date().getTime() / 1000.0);\n    const timeHex = this.leftPad(this.decToHex(Math.floor(epoch / period)), 16, \"0\");\n    const timeBytes = Utils.fromHexToArray(timeHex);\n    const keyBytes = this.b32ToBytes(keyB32);\n\n    if (!keyBytes.length || !timeBytes.length) {\n      return null;\n    }\n\n    const hash = await this.sign(keyBytes, timeBytes, alg);\n    if (hash.length === 0) {\n      return null;\n    }\n\n    const offset = hash[hash.length - 1] & 0xf;\n    const binary =\n      ((hash[offset] & 0x7f) << 24) |\n      ((hash[offset + 1] & 0xff) << 16) |\n      ((hash[offset + 2] & 0xff) << 8) |\n      (hash[offset + 3] & 0xff);\n\n    let otp = \"\";\n    if (isSteamAuth) {\n      let fullCode = binary & 0x7fffffff;\n      for (let i = 0; i < digits; i++) {\n        otp += SteamChars[fullCode % SteamChars.length];\n        fullCode = Math.trunc(fullCode / SteamChars.length);\n      }\n    } else {\n      otp = (binary % Math.pow(10, digits)).toString();\n      otp = this.leftPad(otp, digits, \"0\");\n    }\n\n    return otp;\n  }\n\n  getTimeInterval(key: string): number {\n    let period = 30;\n    if (key != null && key.toLowerCase().indexOf(\"otpauth://\") === 0) {\n      const params = Utils.getQueryParams(key);\n      if (params.has(\"period\") && params.get(\"period\") != null) {\n        try {\n          period = parseInt(params.get(\"period\").trim(), null);\n        } catch {\n          this.logService.error(\"Invalid period param.\");\n        }\n      }\n    }\n    return period;\n  }\n\n  // Helpers\n\n  private leftPad(s: string, l: number, p: string): string {\n    if (l + 1 >= s.length) {\n      s = Array(l + 1 - s.length).join(p) + s;\n    }\n    return s;\n  }\n\n  private decToHex(d: number): string {\n    return (d < 15.5 ? \"0\" : \"\") + Math.round(d).toString(16);\n  }\n\n  private b32ToHex(s: string): string {\n    s = s.toUpperCase();\n    let cleanedInput = \"\";\n\n    for (let i = 0; i < s.length; i++) {\n      if (B32Chars.indexOf(s[i]) < 0) {\n        continue;\n      }\n\n      cleanedInput += s[i];\n    }\n    s = cleanedInput;\n\n    let bits = \"\";\n    let hex = \"\";\n    for (let i = 0; i < s.length; i++) {\n      const byteIndex = B32Chars.indexOf(s.charAt(i));\n      if (byteIndex < 0) {\n        continue;\n      }\n      bits += this.leftPad(byteIndex.toString(2), 5, \"0\");\n    }\n    for (let i = 0; i + 4 <= bits.length; i += 4) {\n      const chunk = bits.substr(i, 4);\n      hex = hex + parseInt(chunk, 2).toString(16);\n    }\n    return hex;\n  }\n\n  private b32ToBytes(s: string): Uint8Array {\n    return Utils.fromHexToArray(this.b32ToHex(s));\n  }\n\n  private async sign(\n    keyBytes: Uint8Array,\n    timeBytes: Uint8Array,\n    alg: \"sha1\" | \"sha256\" | \"sha512\"\n  ) {\n    const signature = await this.cryptoFunctionService.hmac(timeBytes.buffer, keyBytes.buffer, alg);\n    return new Uint8Array(signature);\n  }\n}\n","import { I18nService } from \"../abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"../abstractions/platformUtils.service\";\nimport {\n  TwoFactorProviderDetails,\n  TwoFactorService as TwoFactorServiceAbstraction,\n} from \"../abstractions/twoFactor.service\";\nimport { TwoFactorProviderType } from \"../enums/twoFactorProviderType\";\nimport { IdentityTwoFactorResponse } from \"../models/response/identityTwoFactorResponse\";\n\nexport const TwoFactorProviders: Partial<Record<TwoFactorProviderType, TwoFactorProviderDetails>> =\n  {\n    [TwoFactorProviderType.Authenticator]: {\n      type: TwoFactorProviderType.Authenticator,\n      name: null as string,\n      description: null as string,\n      priority: 1,\n      sort: 1,\n      premium: false,\n    },\n    [TwoFactorProviderType.Yubikey]: {\n      type: TwoFactorProviderType.Yubikey,\n      name: null as string,\n      description: null as string,\n      priority: 3,\n      sort: 2,\n      premium: true,\n    },\n    [TwoFactorProviderType.Duo]: {\n      type: TwoFactorProviderType.Duo,\n      name: \"Duo\",\n      description: null as string,\n      priority: 2,\n      sort: 3,\n      premium: true,\n    },\n    [TwoFactorProviderType.OrganizationDuo]: {\n      type: TwoFactorProviderType.OrganizationDuo,\n      name: \"Duo (Organization)\",\n      description: null as string,\n      priority: 10,\n      sort: 4,\n      premium: false,\n    },\n    [TwoFactorProviderType.Email]: {\n      type: TwoFactorProviderType.Email,\n      name: null as string,\n      description: null as string,\n      priority: 0,\n      sort: 6,\n      premium: false,\n    },\n    [TwoFactorProviderType.WebAuthn]: {\n      type: TwoFactorProviderType.WebAuthn,\n      name: null as string,\n      description: null as string,\n      priority: 4,\n      sort: 5,\n      premium: true,\n    },\n  };\n\nexport class TwoFactorService implements TwoFactorServiceAbstraction {\n  private twoFactorProvidersData: Map<TwoFactorProviderType, { [key: string]: string }>;\n  private selectedTwoFactorProviderType: TwoFactorProviderType = null;\n\n  constructor(\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService\n  ) {}\n\n  init() {\n    TwoFactorProviders[TwoFactorProviderType.Email].name = this.i18nService.t(\"emailTitle\");\n    TwoFactorProviders[TwoFactorProviderType.Email].description = this.i18nService.t(\"emailDesc\");\n\n    TwoFactorProviders[TwoFactorProviderType.Authenticator].name =\n      this.i18nService.t(\"authenticatorAppTitle\");\n    TwoFactorProviders[TwoFactorProviderType.Authenticator].description =\n      this.i18nService.t(\"authenticatorAppDesc\");\n\n    TwoFactorProviders[TwoFactorProviderType.Duo].description = this.i18nService.t(\"duoDesc\");\n\n    TwoFactorProviders[TwoFactorProviderType.OrganizationDuo].name =\n      \"Duo (\" + this.i18nService.t(\"organization\") + \")\";\n    TwoFactorProviders[TwoFactorProviderType.OrganizationDuo].description =\n      this.i18nService.t(\"duoOrganizationDesc\");\n\n    TwoFactorProviders[TwoFactorProviderType.WebAuthn].name = this.i18nService.t(\"webAuthnTitle\");\n    TwoFactorProviders[TwoFactorProviderType.WebAuthn].description =\n      this.i18nService.t(\"webAuthnDesc\");\n\n    TwoFactorProviders[TwoFactorProviderType.Yubikey].name = this.i18nService.t(\"yubiKeyTitle\");\n    TwoFactorProviders[TwoFactorProviderType.Yubikey].description =\n      this.i18nService.t(\"yubiKeyDesc\");\n  }\n\n  getSupportedProviders(win: Window): TwoFactorProviderDetails[] {\n    const providers: any[] = [];\n    if (this.twoFactorProvidersData == null) {\n      return providers;\n    }\n\n    if (\n      this.twoFactorProvidersData.has(TwoFactorProviderType.OrganizationDuo) &&\n      this.platformUtilsService.supportsDuo()\n    ) {\n      providers.push(TwoFactorProviders[TwoFactorProviderType.OrganizationDuo]);\n    }\n\n    if (this.twoFactorProvidersData.has(TwoFactorProviderType.Authenticator)) {\n      providers.push(TwoFactorProviders[TwoFactorProviderType.Authenticator]);\n    }\n\n    if (this.twoFactorProvidersData.has(TwoFactorProviderType.Yubikey)) {\n      providers.push(TwoFactorProviders[TwoFactorProviderType.Yubikey]);\n    }\n\n    if (\n      this.twoFactorProvidersData.has(TwoFactorProviderType.Duo) &&\n      this.platformUtilsService.supportsDuo()\n    ) {\n      providers.push(TwoFactorProviders[TwoFactorProviderType.Duo]);\n    }\n\n    if (\n      this.twoFactorProvidersData.has(TwoFactorProviderType.WebAuthn) &&\n      this.platformUtilsService.supportsWebAuthn(win)\n    ) {\n      providers.push(TwoFactorProviders[TwoFactorProviderType.WebAuthn]);\n    }\n\n    if (this.twoFactorProvidersData.has(TwoFactorProviderType.Email)) {\n      providers.push(TwoFactorProviders[TwoFactorProviderType.Email]);\n    }\n\n    return providers;\n  }\n\n  getDefaultProvider(webAuthnSupported: boolean): TwoFactorProviderType {\n    if (this.twoFactorProvidersData == null) {\n      return null;\n    }\n\n    if (\n      this.selectedTwoFactorProviderType != null &&\n      this.twoFactorProvidersData.has(this.selectedTwoFactorProviderType)\n    ) {\n      return this.selectedTwoFactorProviderType;\n    }\n\n    let providerType: TwoFactorProviderType = null;\n    let providerPriority = -1;\n    this.twoFactorProvidersData.forEach((_value, type) => {\n      const provider = (TwoFactorProviders as any)[type];\n      if (provider != null && provider.priority > providerPriority) {\n        if (type === TwoFactorProviderType.WebAuthn && !webAuthnSupported) {\n          return;\n        }\n\n        providerType = type;\n        providerPriority = provider.priority;\n      }\n    });\n\n    return providerType;\n  }\n\n  setSelectedProvider(type: TwoFactorProviderType) {\n    this.selectedTwoFactorProviderType = type;\n  }\n\n  clearSelectedProvider() {\n    this.selectedTwoFactorProviderType = null;\n  }\n\n  setProviders(response: IdentityTwoFactorResponse) {\n    this.twoFactorProvidersData = response.twoFactorProviders2;\n  }\n\n  clearProviders() {\n    this.twoFactorProvidersData = null;\n  }\n\n  getProviders() {\n    return this.twoFactorProvidersData;\n  }\n}\n","export enum VerificationType {\n  MasterPassword = 0,\n  OTP = 1,\n}\n","import { ApiService } from \"../../abstractions/api.service\";\nimport { UserVerificationApiServiceAbstraction } from \"../../abstractions/userVerification/userVerification-api.service.abstraction\";\nimport { VerifyOTPRequest } from \"../../models/request/account/verifyOTPRequest\";\n\nexport class UserVerificationApiService implements UserVerificationApiServiceAbstraction {\n  constructor(private apiService: ApiService) {}\n\n  postAccountVerifyOTP(request: VerifyOTPRequest): Promise<void> {\n    return this.apiService.send(\"POST\", \"/accounts/verify-otp\", request, true, false);\n  }\n  async postAccountRequestOTP(): Promise<void> {\n    return this.apiService.send(\"POST\", \"/accounts/request-otp\", null, true, false);\n  }\n}\n","export class VerifyOTPRequest {\n  OTP: string;\n\n  constructor(OTP: string) {\n    this.OTP = OTP;\n  }\n}\n","export class SecretVerificationRequest {\n  masterPasswordHash: string;\n  otp: string;\n}\n","import { CryptoService } from \"../../abstractions/crypto.service\";\nimport { I18nService } from \"../../abstractions/i18n.service\";\nimport { UserVerificationApiServiceAbstraction } from \"../../abstractions/userVerification/userVerification-api.service.abstraction\";\nimport { UserVerificationService as UserVerificationServiceAbstraction } from \"../../abstractions/userVerification/userVerification.service.abstraction\";\nimport { VerificationType } from \"../../enums/verificationType\";\nimport { VerifyOTPRequest } from \"../../models/request/account/verifyOTPRequest\";\nimport { SecretVerificationRequest } from \"../../models/request/secretVerificationRequest\";\nimport { Verification } from \"../../types/verification\";\n\n/**\n * Used for general-purpose user verification throughout the app.\n * Use it to verify the input collected by UserVerificationComponent.\n */\nexport class UserVerificationService implements UserVerificationServiceAbstraction {\n  constructor(\n    private cryptoService: CryptoService,\n    private i18nService: I18nService,\n    private userVerificationApiService: UserVerificationApiServiceAbstraction\n  ) {}\n\n  /**\n   * Create a new request model to be used for server-side verification\n   * @param verification User-supplied verification data (Master Password or OTP)\n   * @param requestClass The request model to create\n   * @param alreadyHashed Whether the master password is already hashed\n   */\n  async buildRequest<T extends SecretVerificationRequest>(\n    verification: Verification,\n    requestClass?: new () => T,\n    alreadyHashed?: boolean\n  ) {\n    this.validateInput(verification);\n\n    const request =\n      requestClass != null ? new requestClass() : (new SecretVerificationRequest() as T);\n\n    if (verification.type === VerificationType.OTP) {\n      request.otp = verification.secret;\n    } else {\n      request.masterPasswordHash = alreadyHashed\n        ? verification.secret\n        : await this.cryptoService.hashPassword(verification.secret, null);\n    }\n\n    return request;\n  }\n\n  /**\n   * Used to verify the Master Password client-side, or send the OTP to the server for verification (with no other data)\n   * Generally used for client-side verification only.\n   * @param verification User-supplied verification data (Master Password or OTP)\n   */\n  async verifyUser(verification: Verification): Promise<boolean> {\n    this.validateInput(verification);\n\n    if (verification.type === VerificationType.OTP) {\n      const request = new VerifyOTPRequest(verification.secret);\n      try {\n        await this.userVerificationApiService.postAccountVerifyOTP(request);\n      } catch (e) {\n        throw new Error(this.i18nService.t(\"invalidVerificationCode\"));\n      }\n    } else {\n      const passwordValid = await this.cryptoService.compareAndUpdateKeyHash(\n        verification.secret,\n        null\n      );\n      if (!passwordValid) {\n        throw new Error(this.i18nService.t(\"invalidMasterPassword\"));\n      }\n    }\n    return true;\n  }\n\n  async requestOTP() {\n    await this.userVerificationApiService.postAccountRequestOTP();\n  }\n\n  private validateInput(verification: Verification) {\n    if (verification?.secret == null || verification.secret === \"\") {\n      if (verification.type === VerificationType.OTP) {\n        throw new Error(this.i18nService.t(\"verificationCodeRequired\"));\n      } else {\n        throw new Error(this.i18nService.t(\"masterPassRequired\"));\n      }\n    }\n  }\n}\n","import { ApiService } from \"../abstractions/api.service\";\n\nimport { Forwarder } from \"./forwarder\";\nimport { ForwarderOptions } from \"./forwarderOptions\";\n\nexport class AnonAddyForwarder implements Forwarder {\n  async generate(apiService: ApiService, options: ForwarderOptions): Promise<string> {\n    if (options.apiKey == null || options.apiKey === \"\") {\n      throw \"Invalid AnonAddy API token.\";\n    }\n    if (options.anonaddy?.domain == null || options.anonaddy.domain === \"\") {\n      throw \"Invalid AnonAddy domain.\";\n    }\n    const requestInit: RequestInit = {\n      redirect: \"manual\",\n      cache: \"no-store\",\n      method: \"POST\",\n      headers: new Headers({\n        Authorization: \"Bearer \" + options.apiKey,\n        \"Content-Type\": \"application/json\",\n      }),\n    };\n    const url = \"https://app.anonaddy.com/api/v1/aliases\";\n    requestInit.body = JSON.stringify({\n      domain: options.anonaddy.domain,\n      description:\n        (options.website != null ? \"Website: \" + options.website + \". \" : \"\") +\n        \"Generated by Bitwarden.\",\n    });\n    const request = new Request(url, requestInit);\n    const response = await apiService.nativeFetch(request);\n    if (response.status === 200 || response.status === 201) {\n      const json = await response.json();\n      return json?.data?.email;\n    }\n    if (response.status === 401) {\n      throw \"Invalid AnonAddy API token.\";\n    }\n    throw \"Unknown AnonAddy error occurred.\";\n  }\n}\n","import { ApiService } from \"../abstractions/api.service\";\n\nimport { Forwarder } from \"./forwarder\";\nimport { ForwarderOptions } from \"./forwarderOptions\";\n\nexport class DuckDuckGoForwarder implements Forwarder {\n  async generate(apiService: ApiService, options: ForwarderOptions): Promise<string> {\n    if (options.apiKey == null || options.apiKey === \"\") {\n      throw \"Invalid DuckDuckGo API token.\";\n    }\n    const requestInit: RequestInit = {\n      redirect: \"manual\",\n      cache: \"no-store\",\n      method: \"POST\",\n      headers: new Headers({\n        Authorization: \"Bearer \" + options.apiKey,\n        \"Content-Type\": \"application/json\",\n      }),\n    };\n    const url = \"https://quack.duckduckgo.com/api/email/addresses\";\n    const request = new Request(url, requestInit);\n    const response = await apiService.nativeFetch(request);\n    if (response.status === 200 || response.status === 201) {\n      const json = await response.json();\n      if (json.address) {\n        return `${json.address}@duck.com`;\n      }\n    } else if (response.status === 401) {\n      throw \"Invalid DuckDuckGo API token.\";\n    }\n    throw \"Unknown DuckDuckGo error occurred.\";\n  }\n}\n","import { ApiService } from \"../abstractions/api.service\";\n\nimport { Forwarder } from \"./forwarder\";\nimport { ForwarderOptions } from \"./forwarderOptions\";\n\nexport class FastmailForwarder implements Forwarder {\n  async generate(apiService: ApiService, options: ForwarderOptions): Promise<string> {\n    if (options.apiKey == null || options.apiKey === \"\") {\n      throw \"Invalid Fastmail API token.\";\n    }\n\n    const accountId = await this.getAccountId(apiService, options);\n    if (accountId == null || accountId === \"\") {\n      throw \"Unable to obtain Fastmail masked email account ID.\";\n    }\n\n    const requestInit: RequestInit = {\n      redirect: \"manual\",\n      cache: \"no-store\",\n      method: \"POST\",\n      headers: new Headers({\n        Authorization: \"Bearer \" + options.apiKey,\n        \"Content-Type\": \"application/json\",\n      }),\n    };\n    const url = \"https://api.fastmail.com/jmap/api/\";\n    requestInit.body = JSON.stringify({\n      using: [\"https://www.fastmail.com/dev/maskedemail\", \"urn:ietf:params:jmap:core\"],\n      methodCalls: [\n        [\n          \"MaskedEmail/set\",\n          {\n            accountId: accountId,\n            create: {\n              \"new-masked-email\": {\n                state: \"enabled\",\n                description: \"\",\n                url: options.website,\n                emailPrefix: options.fastmail.prefix,\n              },\n            },\n          },\n          \"0\",\n        ],\n      ],\n    });\n    const request = new Request(url, requestInit);\n    const response = await apiService.nativeFetch(request);\n    if (response.status === 200) {\n      const json = await response.json();\n      if (\n        json.methodResponses != null &&\n        json.methodResponses.length > 0 &&\n        json.methodResponses[0].length > 0\n      ) {\n        if (json.methodResponses[0][0] === \"MaskedEmail/set\") {\n          if (json.methodResponses[0][1]?.created?.[\"new-masked-email\"] != null) {\n            return json.methodResponses[0][1]?.created?.[\"new-masked-email\"]?.email;\n          }\n          if (json.methodResponses[0][1]?.notCreated?.[\"new-masked-email\"] != null) {\n            throw (\n              \"Fastmail error: \" +\n              json.methodResponses[0][1]?.notCreated?.[\"new-masked-email\"]?.description\n            );\n          }\n        } else if (json.methodResponses[0][0] === \"error\") {\n          throw \"Fastmail error: \" + json.methodResponses[0][1]?.description;\n        }\n      }\n    }\n    if (response.status === 401 || response.status === 403) {\n      throw \"Invalid Fastmail API token.\";\n    }\n    throw \"Unknown Fastmail error occurred.\";\n  }\n\n  private async getAccountId(apiService: ApiService, options: ForwarderOptions): Promise<string> {\n    const requestInit: RequestInit = {\n      cache: \"no-store\",\n      method: \"GET\",\n      headers: new Headers({\n        Authorization: \"Bearer \" + options.apiKey,\n      }),\n    };\n    const url = \"https://api.fastmail.com/.well-known/jmap\";\n    const request = new Request(url, requestInit);\n    const response = await apiService.nativeFetch(request);\n    if (response.status === 200) {\n      const json = await response.json();\n      if (json.primaryAccounts != null) {\n        return json.primaryAccounts[\"https://www.fastmail.com/dev/maskedemail\"];\n      }\n    }\n    return null;\n  }\n}\n","import { ApiService } from \"../abstractions/api.service\";\n\nimport { Forwarder } from \"./forwarder\";\nimport { ForwarderOptions } from \"./forwarderOptions\";\n\nexport class FirefoxRelayForwarder implements Forwarder {\n  async generate(apiService: ApiService, options: ForwarderOptions): Promise<string> {\n    if (options.apiKey == null || options.apiKey === \"\") {\n      throw \"Invalid Firefox Relay API token.\";\n    }\n    const requestInit: RequestInit = {\n      redirect: \"manual\",\n      cache: \"no-store\",\n      method: \"POST\",\n      headers: new Headers({\n        Authorization: \"Token \" + options.apiKey,\n        \"Content-Type\": \"application/json\",\n      }),\n    };\n    const url = \"https://relay.firefox.com/api/v1/relayaddresses/\";\n    requestInit.body = JSON.stringify({\n      enabled: true,\n      generated_for: options.website,\n      description:\n        (options.website != null ? options.website + \" - \" : \"\") + \"Generated by Bitwarden.\",\n    });\n    const request = new Request(url, requestInit);\n    const response = await apiService.nativeFetch(request);\n    if (response.status === 200 || response.status === 201) {\n      const json = await response.json();\n      return json?.full_address;\n    }\n    if (response.status === 401) {\n      throw \"Invalid Firefox Relay API token.\";\n    }\n    throw \"Unknown Firefox Relay error occurred.\";\n  }\n}\n","export class ForwarderOptions {\n  apiKey: string;\n  website: string;\n  fastmail = new FastmailForwarderOptions();\n  anonaddy = new AnonAddyForwarderOptions();\n}\n\nexport class FastmailForwarderOptions {\n  prefix: string;\n}\n\nexport class AnonAddyForwarderOptions {\n  domain: string;\n}\n","import { ApiService } from \"../abstractions/api.service\";\n\nimport { Forwarder } from \"./forwarder\";\nimport { ForwarderOptions } from \"./forwarderOptions\";\n\nexport class SimpleLoginForwarder implements Forwarder {\n  async generate(apiService: ApiService, options: ForwarderOptions): Promise<string> {\n    if (options.apiKey == null || options.apiKey === \"\") {\n      throw \"Invalid SimpleLogin API key.\";\n    }\n    const requestInit: RequestInit = {\n      redirect: \"manual\",\n      cache: \"no-store\",\n      method: \"POST\",\n      headers: new Headers({\n        Authentication: options.apiKey,\n        \"Content-Type\": \"application/json\",\n      }),\n    };\n    let url = \"https://app.simplelogin.io/api/alias/random/new\";\n    if (options.website != null) {\n      url += \"?hostname=\" + options.website;\n    }\n    requestInit.body = JSON.stringify({\n      note:\n        (options.website != null ? \"Website: \" + options.website + \". \" : \"\") +\n        \"Generated by Bitwarden.\",\n    });\n    const request = new Request(url, requestInit);\n    const response = await apiService.nativeFetch(request);\n    if (response.status === 200 || response.status === 201) {\n      const json = await response.json();\n      return json.alias;\n    }\n    if (response.status === 401) {\n      throw \"Invalid SimpleLogin API key.\";\n    }\n    try {\n      const json = await response.json();\n      if (json?.error != null) {\n        throw \"SimpleLogin error:\" + json.error;\n      }\n    } catch {\n      // Do nothing...\n    }\n    throw \"Unknown SimpleLogin error occurred.\";\n  }\n}\n","import { ApiService } from \"../abstractions/api.service\";\nimport { CryptoService } from \"../abstractions/crypto.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { UsernameGenerationService as BaseUsernameGenerationService } from \"../abstractions/usernameGeneration.service\";\nimport { AnonAddyForwarder } from \"../emailForwarders/anonAddyForwarder\";\nimport { DuckDuckGoForwarder } from \"../emailForwarders/duckDuckGoForwarder\";\nimport { FastmailForwarder } from \"../emailForwarders/fastmailForwarder\";\nimport { FirefoxRelayForwarder } from \"../emailForwarders/firefoxRelayForwarder\";\nimport { Forwarder } from \"../emailForwarders/forwarder\";\nimport { ForwarderOptions } from \"../emailForwarders/forwarderOptions\";\nimport { SimpleLoginForwarder } from \"../emailForwarders/simpleLoginForwarder\";\nimport { EEFLongWordList } from \"../misc/wordlist\";\n\nconst DefaultOptions = {\n  type: \"word\",\n  wordCapitalize: true,\n  wordIncludeNumber: true,\n  subaddressType: \"random\",\n  catchallType: \"random\",\n  forwardedService: \"simplelogin\",\n  forwardedAnonAddyDomain: \"anonaddy.me\",\n};\n\nexport class UsernameGenerationService implements BaseUsernameGenerationService {\n  constructor(\n    private cryptoService: CryptoService,\n    private stateService: StateService,\n    private apiService: ApiService\n  ) {}\n\n  generateUsername(options: any): Promise<string> {\n    if (options.type === \"catchall\") {\n      return this.generateCatchall(options);\n    } else if (options.type === \"subaddress\") {\n      return this.generateSubaddress(options);\n    } else if (options.type === \"forwarded\") {\n      return this.generateForwarded(options);\n    } else {\n      return this.generateWord(options);\n    }\n  }\n\n  async generateWord(options: any): Promise<string> {\n    const o = Object.assign({}, DefaultOptions, options);\n\n    if (o.wordCapitalize == null) {\n      o.wordCapitalize = true;\n    }\n    if (o.wordIncludeNumber == null) {\n      o.wordIncludeNumber = true;\n    }\n\n    const wordIndex = await this.cryptoService.randomNumber(0, EEFLongWordList.length - 1);\n    let word = EEFLongWordList[wordIndex];\n    if (o.wordCapitalize) {\n      word = word.charAt(0).toUpperCase() + word.slice(1);\n    }\n    if (o.wordIncludeNumber) {\n      const num = await this.cryptoService.randomNumber(1, 9999);\n      word = word + this.zeroPad(num.toString(), 4);\n    }\n    return word;\n  }\n\n  async generateSubaddress(options: any): Promise<string> {\n    const o = Object.assign({}, DefaultOptions, options);\n\n    const subaddressEmail = o.subaddressEmail;\n    if (subaddressEmail == null || subaddressEmail.length < 3) {\n      return o.subaddressEmail;\n    }\n    const atIndex = subaddressEmail.indexOf(\"@\");\n    if (atIndex < 1 || atIndex >= subaddressEmail.length - 1) {\n      return subaddressEmail;\n    }\n    if (o.subaddressType == null) {\n      o.subaddressType = \"random\";\n    }\n\n    const emailBeginning = subaddressEmail.substr(0, atIndex);\n    const emailEnding = subaddressEmail.substr(atIndex + 1, subaddressEmail.length);\n\n    let subaddressString = \"\";\n    if (o.subaddressType === \"random\") {\n      subaddressString = await this.randomString(8);\n    } else if (o.subaddressType === \"website-name\") {\n      subaddressString = o.website;\n    }\n    return emailBeginning + \"+\" + subaddressString + \"@\" + emailEnding;\n  }\n\n  async generateCatchall(options: any): Promise<string> {\n    const o = Object.assign({}, DefaultOptions, options);\n\n    if (o.catchallDomain == null || o.catchallDomain === \"\") {\n      return null;\n    }\n    if (o.catchallType == null) {\n      o.catchallType = \"random\";\n    }\n\n    let startString = \"\";\n    if (o.catchallType === \"random\") {\n      startString = await this.randomString(8);\n    } else if (o.catchallType === \"website-name\") {\n      startString = o.website;\n    }\n    return startString + \"@\" + o.catchallDomain;\n  }\n\n  async generateForwarded(options: any): Promise<string> {\n    const o = Object.assign({}, DefaultOptions, options);\n\n    if (o.forwardedService == null) {\n      return null;\n    }\n\n    let forwarder: Forwarder = null;\n    const forwarderOptions = new ForwarderOptions();\n    forwarderOptions.website = o.website;\n    if (o.forwardedService === \"simplelogin\") {\n      forwarder = new SimpleLoginForwarder();\n      forwarderOptions.apiKey = o.forwardedSimpleLoginApiKey;\n    } else if (o.forwardedService === \"anonaddy\") {\n      forwarder = new AnonAddyForwarder();\n      forwarderOptions.apiKey = o.forwardedAnonAddyApiToken;\n      forwarderOptions.anonaddy.domain = o.forwardedAnonAddyDomain;\n    } else if (o.forwardedService === \"firefoxrelay\") {\n      forwarder = new FirefoxRelayForwarder();\n      forwarderOptions.apiKey = o.forwardedFirefoxApiToken;\n    } else if (o.forwardedService === \"fastmail\") {\n      forwarder = new FastmailForwarder();\n      forwarderOptions.apiKey = o.forwardedFastmailApiToken;\n    } else if (o.forwardedService === \"duckduckgo\") {\n      forwarder = new DuckDuckGoForwarder();\n      forwarderOptions.apiKey = o.forwardedDuckDuckGoToken;\n    }\n\n    if (forwarder == null) {\n      return null;\n    }\n\n    return forwarder.generate(this.apiService, forwarderOptions);\n  }\n\n  async getOptions(): Promise<any> {\n    let options = await this.stateService.getUsernameGenerationOptions();\n    if (options == null) {\n      options = Object.assign({}, DefaultOptions);\n    } else {\n      options = Object.assign({}, DefaultOptions, options);\n    }\n    await this.stateService.setUsernameGenerationOptions(options);\n    return options;\n  }\n\n  async saveOptions(options: any) {\n    await this.stateService.setUsernameGenerationOptions(options);\n  }\n\n  private async randomString(length: number) {\n    let str = \"\";\n    const charSet = \"abcdefghijklmnopqrstuvwxyz1234567890\";\n    for (let i = 0; i < length; i++) {\n      const randomCharIndex = await this.cryptoService.randomNumber(0, charSet.length - 1);\n      str += charSet.charAt(randomCharIndex);\n    }\n    return str;\n  }\n\n  // ref: https://stackoverflow.com/a/10073788\n  private zeroPad(number: string, width: number) {\n    return number.length >= width\n      ? number\n      : new Array(width - number.length + 1).join(\"0\") + number;\n  }\n}\n","export class BrowserApi {\n  static isWebExtensionsApi: boolean = typeof browser !== \"undefined\";\n  static isSafariApi: boolean =\n    navigator.userAgent.indexOf(\" Safari/\") !== -1 &&\n    navigator.userAgent.indexOf(\" Chrome/\") === -1 &&\n    navigator.userAgent.indexOf(\" Chromium/\") === -1;\n  static isChromeApi: boolean = !BrowserApi.isSafariApi && typeof chrome !== \"undefined\";\n  static isFirefoxOnAndroid: boolean =\n    navigator.userAgent.indexOf(\"Firefox/\") !== -1 && navigator.userAgent.indexOf(\"Android\") !== -1;\n\n  static async getTabFromCurrentWindowId(): Promise<chrome.tabs.Tab> | null {\n    return await BrowserApi.tabsQueryFirst({\n      active: true,\n      windowId: chrome.windows.WINDOW_ID_CURRENT,\n    });\n  }\n\n  static async getTabFromCurrentWindow(): Promise<chrome.tabs.Tab> | null {\n    return await BrowserApi.tabsQueryFirst({\n      active: true,\n      currentWindow: true,\n    });\n  }\n\n  static async getActiveTabs(): Promise<chrome.tabs.Tab[]> {\n    return await BrowserApi.tabsQuery({\n      active: true,\n    });\n  }\n\n  static async tabsQuery(options: chrome.tabs.QueryInfo): Promise<chrome.tabs.Tab[]> {\n    return new Promise((resolve) => {\n      chrome.tabs.query(options, (tabs: any[]) => {\n        resolve(tabs);\n      });\n    });\n  }\n\n  static async tabsQueryFirst(options: chrome.tabs.QueryInfo): Promise<chrome.tabs.Tab> | null {\n    const tabs = await BrowserApi.tabsQuery(options);\n    if (tabs.length > 0) {\n      return tabs[0];\n    }\n\n    return null;\n  }\n\n  static tabSendMessageData(\n    tab: chrome.tabs.Tab,\n    command: string,\n    data: any = null\n  ): Promise<any[]> {\n    const obj: any = {\n      command: command,\n    };\n\n    if (data != null) {\n      obj.data = data;\n    }\n\n    return BrowserApi.tabSendMessage(tab, obj);\n  }\n\n  static async tabSendMessage(\n    tab: chrome.tabs.Tab,\n    obj: any,\n    options: chrome.tabs.MessageSendOptions = null\n  ): Promise<any> {\n    if (!tab || !tab.id) {\n      return;\n    }\n\n    return new Promise<void>((resolve) => {\n      chrome.tabs.sendMessage(tab.id, obj, options, () => {\n        if (chrome.runtime.lastError) {\n          // Some error happened\n        }\n        resolve();\n      });\n    });\n  }\n\n  static async getPrivateModeWindows(): Promise<browser.windows.Window[]> {\n    return (await browser.windows.getAll()).filter((win) => win.incognito);\n  }\n\n  static async onWindowCreated(callback: (win: chrome.windows.Window) => any) {\n    return chrome.windows.onCreated.addListener(callback);\n  }\n\n  static getBackgroundPage(): any {\n    return chrome.extension.getBackgroundPage();\n  }\n\n  static getApplicationVersion(): string {\n    return chrome.runtime.getManifest().version;\n  }\n\n  static async isPopupOpen(): Promise<boolean> {\n    return Promise.resolve(chrome.extension.getViews({ type: \"popup\" }).length > 0);\n  }\n\n  static createNewTab(url: string, extensionPage = false, active = true) {\n    chrome.tabs.create({ url: url, active: active });\n  }\n\n  static messageListener(\n    name: string,\n    callback: (message: any, sender: chrome.runtime.MessageSender, response: any) => void\n  ) {\n    chrome.runtime.onMessage.addListener(\n      (msg: any, sender: chrome.runtime.MessageSender, response: any) => {\n        callback(msg, sender, response);\n      }\n    );\n  }\n\n  static sendMessage(subscriber: string, arg: any = {}) {\n    const message = Object.assign({}, { command: subscriber }, arg);\n    return chrome.runtime.sendMessage(message);\n  }\n\n  static async closeLoginTab() {\n    const tabs = await BrowserApi.tabsQuery({\n      active: true,\n      title: \"Bitwarden\",\n      windowType: \"normal\",\n      currentWindow: true,\n    });\n\n    if (tabs.length === 0) {\n      return;\n    }\n\n    const tabToClose = tabs[tabs.length - 1].id;\n    chrome.tabs.remove(tabToClose);\n  }\n\n  static async focusSpecifiedTab(tabId: number) {\n    chrome.tabs.update(tabId, { active: true, highlighted: true });\n  }\n\n  static closePopup(win: Window) {\n    if (BrowserApi.isWebExtensionsApi && BrowserApi.isFirefoxOnAndroid) {\n      // Reactivating the active tab dismisses the popup tab. The promise final\n      // condition is only called if the popup wasn't already dismissed (future proofing).\n      // ref: https://bugzilla.mozilla.org/show_bug.cgi?id=1433604\n      browser.tabs.update({ active: true }).finally(win.close);\n    } else {\n      win.close();\n    }\n  }\n\n  static gaFilter() {\n    return process.env.ENV !== \"production\";\n  }\n\n  static getUILanguage(win: Window) {\n    return chrome.i18n.getUILanguage();\n  }\n\n  static reloadExtension(win: Window) {\n    if (win != null) {\n      return (win.location as any).reload(true);\n    } else {\n      return chrome.runtime.reload();\n    }\n  }\n\n  static reloadOpenWindows() {\n    const views = chrome.extension.getViews() as Window[];\n    views\n      .filter((w) => w.location.href != null)\n      .forEach((w) => {\n        w.location.reload();\n      });\n  }\n\n  static connectNative(application: string): browser.runtime.Port | chrome.runtime.Port {\n    if (BrowserApi.isWebExtensionsApi) {\n      return browser.runtime.connectNative(application);\n    } else if (BrowserApi.isChromeApi) {\n      return chrome.runtime.connectNative(application);\n    }\n  }\n\n  static requestPermission(permission: any) {\n    if (BrowserApi.isWebExtensionsApi) {\n      return browser.permissions.request(permission);\n    }\n    return new Promise((resolve, reject) => {\n      chrome.permissions.request(permission, resolve);\n    });\n  }\n\n  static getPlatformInfo(): Promise<browser.runtime.PlatformInfo | chrome.runtime.PlatformInfo> {\n    if (BrowserApi.isWebExtensionsApi) {\n      return browser.runtime.getPlatformInfo();\n    }\n    return new Promise((resolve) => {\n      chrome.runtime.getPlatformInfo(resolve);\n    });\n  }\n}\n","import { BrowserApi } from \"./browserApi\";\n\nexport class SafariApp {\n  static sendMessageToApp(command: string, data: any = null, resolveNow = false): Promise<any> {\n    if (!BrowserApi.isSafariApi) {\n      return Promise.resolve(null);\n    }\n    return new Promise((resolve) => {\n      const now = new Date();\n      const messageId =\n        now.getTime().toString() + \"_\" + Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n      (browser as any).runtime.sendNativeMessage(\n        \"com.bitwarden.desktop\",\n        {\n          id: messageId,\n          command: command,\n          data: data,\n          responseData: null,\n        },\n        (response: any) => {\n          resolve(response);\n        }\n      );\n    });\n  }\n}\n","export class BrowserComponentState {\n  scrollY: number;\n  searchText: string;\n}\n","import { CipherType } from \"@bitwarden/common/enums/cipherType\";\nimport { CipherView } from \"@bitwarden/common/models/view/cipherView\";\nimport { CollectionView } from \"@bitwarden/common/models/view/collectionView\";\nimport { FolderView } from \"@bitwarden/common/models/view/folderView\";\n\nimport { BrowserComponentState } from \"./browserComponentState\";\n\nexport class BrowserGroupingsComponentState extends BrowserComponentState {\n  favoriteCiphers: CipherView[];\n  noFolderCiphers: CipherView[];\n  ciphers: CipherView[];\n  collectionCounts: Map<string, number>;\n  folderCounts: Map<string, number>;\n  typeCounts: Map<CipherType, number>;\n  folders: FolderView[];\n  collections: CollectionView[];\n  deletedCount: number;\n}\n","import { SendType } from \"@bitwarden/common/enums/sendType\";\nimport { SendView } from \"@bitwarden/common/models/view/sendView\";\n\nimport { BrowserComponentState } from \"./browserComponentState\";\n\nexport class BrowserSendComponentState extends BrowserComponentState {\n  sends: SendView[];\n  typeCounts: Map<SendType, number>;\n}\n","import {\n  Account as BaseAccount,\n  AccountSettings as BaseAccountSettings,\n} from \"@bitwarden/common/models/domain/account\";\n\nimport { BrowserComponentState } from \"./browserComponentState\";\nimport { BrowserGroupingsComponentState } from \"./browserGroupingsComponentState\";\nimport { BrowserSendComponentState } from \"./browserSendComponentState\";\n\nexport class AccountSettings extends BaseAccountSettings {\n  vaultTimeout = -1; // On Restart\n}\n\nexport class Account extends BaseAccount {\n  settings?: AccountSettings = new AccountSettings();\n  groupings?: BrowserGroupingsComponentState;\n  send?: BrowserSendComponentState;\n  ciphers?: BrowserComponentState;\n  sendType?: BrowserComponentState;\n\n  constructor(init: Partial<Account>) {\n    super(init);\n    Object.assign(this.settings, {\n      ...new AccountSettings(),\n      ...this.settings,\n    });\n    this.groupings = init?.groupings ?? new BrowserGroupingsComponentState();\n    this.send = init?.send ?? new BrowserSendComponentState();\n    this.ciphers = init?.ciphers ?? new BrowserComponentState();\n    this.sendType = init?.sendType ?? new BrowserComponentState();\n  }\n}\n","import { Injectable } from \"@angular/core\";\n\nimport { BrowserApi } from \"../../browser/browserApi\";\n\n@Injectable()\nexport class PopupUtilsService {\n  constructor(private privateMode: boolean = false) {}\n\n  inSidebar(win: Window): boolean {\n    return win.location.search !== \"\" && win.location.search.indexOf(\"uilocation=sidebar\") > -1;\n  }\n\n  inTab(win: Window): boolean {\n    return win.location.search !== \"\" && win.location.search.indexOf(\"uilocation=tab\") > -1;\n  }\n\n  inPopout(win: Window): boolean {\n    return win.location.search !== \"\" && win.location.search.indexOf(\"uilocation=popout\") > -1;\n  }\n\n  inPopup(win: Window): boolean {\n    return (\n      win.location.search === \"\" ||\n      win.location.search.indexOf(\"uilocation=\") === -1 ||\n      win.location.search.indexOf(\"uilocation=popup\") > -1\n    );\n  }\n\n  inPrivateMode(): boolean {\n    return this.privateMode;\n  }\n\n  getContentScrollY(win: Window, scrollingContainer = \"main\"): number {\n    const content = win.document.getElementsByTagName(scrollingContainer)[0];\n    return content.scrollTop;\n  }\n\n  setContentScrollY(win: Window, scrollY: number, scrollingContainer = \"main\"): void {\n    if (scrollY != null) {\n      const content = win.document.getElementsByTagName(scrollingContainer)[0];\n      content.scrollTop = scrollY;\n    }\n  }\n\n  popOut(win: Window, href: string = null): void {\n    if (href === null) {\n      href = win.location.href;\n    }\n\n    if (typeof chrome !== \"undefined\" && chrome.windows && chrome.windows.create) {\n      if (href.indexOf(\"?uilocation=\") > -1) {\n        href = href\n          .replace(\"uilocation=popup\", \"uilocation=popout\")\n          .replace(\"uilocation=tab\", \"uilocation=popout\")\n          .replace(\"uilocation=sidebar\", \"uilocation=popout\");\n      } else {\n        const hrefParts = href.split(\"#\");\n        href =\n          hrefParts[0] + \"?uilocation=popout\" + (hrefParts.length > 0 ? \"#\" + hrefParts[1] : \"\");\n      }\n\n      const bodyRect = document.querySelector(\"body\").getBoundingClientRect();\n      chrome.windows.create({\n        url: href,\n        type: \"popup\",\n        width: Math.round(bodyRect.width ? bodyRect.width + 60 : 375),\n        height: Math.round(bodyRect.height || 600),\n      });\n\n      if (this.inPopup(win)) {\n        BrowserApi.closePopup(win);\n      }\n    } else if (typeof chrome !== \"undefined\" && chrome.tabs && chrome.tabs.create) {\n      href = href\n        .replace(\"uilocation=popup\", \"uilocation=tab\")\n        .replace(\"uilocation=popout\", \"uilocation=tab\")\n        .replace(\"uilocation=sidebar\", \"uilocation=tab\");\n      chrome.tabs.create({\n        url: href,\n      });\n    }\n  }\n}\n","export default class AutofillScript {\n  script: string[][] = [];\n  documentUUID: any = {};\n  properties: any = {};\n  options: any = {};\n  metadata: any = {};\n  autosubmit: any = null;\n\n  constructor(documentUUID: string) {\n    this.documentUUID = documentUUID;\n  }\n}\n","export class AutoFillConstants {\n  static readonly UsernameFieldNames: string[] = [\n    // English\n    \"username\",\n    \"user name\",\n    \"email\",\n    \"email address\",\n    \"e-mail\",\n    \"e-mail address\",\n    \"userid\",\n    \"user id\",\n    \"customer id\",\n    \"login id\",\n    // German\n    \"benutzername\",\n    \"benutzer name\",\n    \"email adresse\",\n    \"e-mail adresse\",\n    \"benutzerid\",\n    \"benutzer id\",\n  ];\n\n  static readonly PasswordFieldIgnoreList: string[] = [\n    \"onetimepassword\",\n    \"captcha\",\n    \"findanything\",\n    \"forgot\",\n  ];\n\n  static readonly ExcludedAutofillTypes: string[] = [\n    \"radio\",\n    \"checkbox\",\n    \"hidden\",\n    \"file\",\n    \"button\",\n    \"image\",\n    \"reset\",\n    \"search\",\n  ];\n}\n\nexport class CreditCardAutoFillConstants {\n  static readonly CardAttributes: string[] = [\n    \"autoCompleteType\",\n    \"data-stripe\",\n    \"htmlName\",\n    \"htmlID\",\n    \"label-tag\",\n    \"placeholder\",\n    \"label-left\",\n    \"label-top\",\n    \"data-recurly\",\n  ];\n\n  static readonly CardAttributesExtended: string[] = [\n    ...CreditCardAutoFillConstants.CardAttributes,\n    \"label-right\",\n  ];\n\n  static readonly CardHolderFieldNames: string[] = [\n    \"cc-name\",\n    \"card-name\",\n    \"cardholder-name\",\n    \"cardholder\",\n    \"name\",\n    \"nom\",\n  ];\n\n  static readonly CardHolderFieldNameValues: string[] = [\n    \"cc-name\",\n    \"card-name\",\n    \"cardholder-name\",\n    \"cardholder\",\n    \"tbName\",\n  ];\n\n  static readonly CardNumberFieldNames: string[] = [\n    \"cc-number\",\n    \"cc-num\",\n    \"card-number\",\n    \"card-num\",\n    \"number\",\n    \"cc\",\n    \"cc-no\",\n    \"card-no\",\n    \"credit-card\",\n    \"numero-carte\",\n    \"carte\",\n    \"carte-credit\",\n    \"num-carte\",\n    \"cb-num\",\n  ];\n\n  static readonly CardNumberFieldNameValues: string[] = [\n    \"cc-number\",\n    \"cc-num\",\n    \"card-number\",\n    \"card-num\",\n    \"cc-no\",\n    \"card-no\",\n    \"numero-carte\",\n    \"num-carte\",\n    \"cb-num\",\n  ];\n\n  static readonly CardExpiryFieldNames: string[] = [\n    \"cc-exp\",\n    \"card-exp\",\n    \"cc-expiration\",\n    \"card-expiration\",\n    \"cc-ex\",\n    \"card-ex\",\n    \"card-expire\",\n    \"card-expiry\",\n    \"validite\",\n    \"expiration\",\n    \"expiry\",\n    \"mm-yy\",\n    \"mm-yyyy\",\n    \"yy-mm\",\n    \"yyyy-mm\",\n    \"expiration-date\",\n    \"payment-card-expiration\",\n    \"payment-cc-date\",\n  ];\n\n  static readonly CardExpiryFieldNameValues: string[] = [\n    \"mm-yy\",\n    \"mm-yyyy\",\n    \"yy-mm\",\n    \"yyyy-mm\",\n    \"expiration-date\",\n    \"payment-card-expiration\",\n  ];\n\n  static readonly ExpiryMonthFieldNames: string[] = [\n    \"exp-month\",\n    \"cc-exp-month\",\n    \"cc-month\",\n    \"card-month\",\n    \"cc-mo\",\n    \"card-mo\",\n    \"exp-mo\",\n    \"card-exp-mo\",\n    \"cc-exp-mo\",\n    \"card-expiration-month\",\n    \"expiration-month\",\n    \"cc-mm\",\n    \"cc-m\",\n    \"card-mm\",\n    \"card-m\",\n    \"card-exp-mm\",\n    \"cc-exp-mm\",\n    \"exp-mm\",\n    \"exp-m\",\n    \"expire-month\",\n    \"expire-mo\",\n    \"expiry-month\",\n    \"expiry-mo\",\n    \"card-expire-month\",\n    \"card-expire-mo\",\n    \"card-expiry-month\",\n    \"card-expiry-mo\",\n    \"mois-validite\",\n    \"mois-expiration\",\n    \"m-validite\",\n    \"m-expiration\",\n    \"expiry-date-field-month\",\n    \"expiration-date-month\",\n    \"expiration-date-mm\",\n    \"exp-mon\",\n    \"validity-mo\",\n    \"exp-date-mo\",\n    \"cb-date-mois\",\n    \"date-m\",\n  ];\n\n  static readonly ExpiryYearFieldNames: string[] = [\n    \"exp-year\",\n    \"cc-exp-year\",\n    \"cc-year\",\n    \"card-year\",\n    \"cc-yr\",\n    \"card-yr\",\n    \"exp-yr\",\n    \"card-exp-yr\",\n    \"cc-exp-yr\",\n    \"card-expiration-year\",\n    \"expiration-year\",\n    \"cc-yy\",\n    \"cc-y\",\n    \"card-yy\",\n    \"card-y\",\n    \"card-exp-yy\",\n    \"cc-exp-yy\",\n    \"exp-yy\",\n    \"exp-y\",\n    \"cc-yyyy\",\n    \"card-yyyy\",\n    \"card-exp-yyyy\",\n    \"cc-exp-yyyy\",\n    \"expire-year\",\n    \"expire-yr\",\n    \"expiry-year\",\n    \"expiry-yr\",\n    \"card-expire-year\",\n    \"card-expire-yr\",\n    \"card-expiry-year\",\n    \"card-expiry-yr\",\n    \"an-validite\",\n    \"an-expiration\",\n    \"annee-validite\",\n    \"annee-expiration\",\n    \"expiry-date-field-year\",\n    \"expiration-date-year\",\n    \"cb-date-ann\",\n    \"expiration-date-yy\",\n    \"expiration-date-yyyy\",\n    \"validity-year\",\n    \"exp-date-year\",\n    \"date-y\",\n  ];\n\n  static readonly CVVFieldNames: string[] = [\n    \"cvv\",\n    \"cvc\",\n    \"cvv2\",\n    \"cc-csc\",\n    \"cc-cvv\",\n    \"card-csc\",\n    \"card-cvv\",\n    \"cvd\",\n    \"cid\",\n    \"cvc2\",\n    \"cnv\",\n    \"cvn2\",\n    \"cc-code\",\n    \"card-code\",\n    \"code-securite\",\n    \"security-code\",\n    \"crypto\",\n    \"card-verif\",\n    \"verification-code\",\n    \"csc\",\n    \"ccv\",\n  ];\n\n  static readonly CardBrandFieldNames: string[] = [\n    \"cc-type\",\n    \"card-type\",\n    \"card-brand\",\n    \"cc-brand\",\n    \"cb-type\",\n  ];\n\n  // Each index represents a language. These three arrays should all be the same length.\n  // 0: English, 1: Danish, 2: German/Dutch, 3: French/Spanish/Italian, 4: Russian, 5: Portuguese\n  static readonly MonthAbbr = [\"mm\", \"mm\", \"mm\", \"mm\", \"mm\", \"mm\"];\n  static readonly YearAbbrShort = [\"yy\", \"åå\", \"jj\", \"aa\", \"гг\", \"rr\"];\n  static readonly YearAbbrLong = [\"yyyy\", \"åååå\", \"jjjj\", \"aa\", \"гггг\", \"rrrr\"];\n}\n\nexport class IdentityAutoFillConstants {\n  static readonly IdentityAttributes: string[] = [\n    \"autoCompleteType\",\n    \"data-stripe\",\n    \"htmlName\",\n    \"htmlID\",\n    \"label-tag\",\n    \"placeholder\",\n    \"label-left\",\n    \"label-top\",\n    \"data-recurly\",\n  ];\n\n  static readonly FullNameFieldNames: string[] = [\"name\", \"full-name\", \"your-name\"];\n\n  static readonly FullNameFieldNameValues: string[] = [\"full-name\", \"your-name\"];\n\n  static readonly TitleFieldNames: string[] = [\"honorific-prefix\", \"prefix\", \"title\"];\n\n  static readonly FirstnameFieldNames: string[] = [\n    // English\n    \"f-name\",\n    \"first-name\",\n    \"given-name\",\n    \"first-n\",\n    // German\n    \"vorname\",\n  ];\n\n  static readonly MiddlenameFieldNames: string[] = [\n    \"m-name\",\n    \"middle-name\",\n    \"additional-name\",\n    \"middle-initial\",\n    \"middle-n\",\n    \"middle-i\",\n  ];\n\n  static readonly LastnameFieldNames: string[] = [\n    // English\n    \"l-name\",\n    \"last-name\",\n    \"s-name\",\n    \"surname\",\n    \"family-name\",\n    \"family-n\",\n    \"last-n\",\n    // German\n    \"nachname\",\n    \"familienname\",\n  ];\n\n  static readonly EmailFieldNames: string[] = [\"e-mail\", \"email-address\"];\n\n  static readonly AddressFieldNames: string[] = [\n    \"address\",\n    \"street-address\",\n    \"addr\",\n    \"street\",\n    \"mailing-addr\",\n    \"billing-addr\",\n    \"mail-addr\",\n    \"bill-addr\",\n  ];\n\n  static readonly AddressFieldNameValues: string[] = [\n    \"mailing-addr\",\n    \"billing-addr\",\n    \"mail-addr\",\n    \"bill-addr\",\n  ];\n\n  static readonly Address1FieldNames: string[] = [\n    \"address-1\",\n    \"address-line-1\",\n    \"addr-1\",\n    \"street-1\",\n  ];\n\n  static readonly Address2FieldNames: string[] = [\n    \"address-2\",\n    \"address-line-2\",\n    \"addr-2\",\n    \"street-2\",\n  ];\n\n  static readonly Address3FieldNames: string[] = [\n    \"address-3\",\n    \"address-line-3\",\n    \"addr-3\",\n    \"street-3\",\n  ];\n\n  static readonly PostalCodeFieldNames: string[] = [\n    \"postal\",\n    \"zip\",\n    \"zip2\",\n    \"zip-code\",\n    \"postal-code\",\n    \"post-code\",\n    \"address-zip\",\n    \"address-postal\",\n    \"address-code\",\n    \"address-postal-code\",\n    \"address-zip-code\",\n  ];\n\n  static readonly CityFieldNames: string[] = [\n    \"city\",\n    \"town\",\n    \"address-level-2\",\n    \"address-city\",\n    \"address-town\",\n  ];\n\n  static readonly StateFieldNames: string[] = [\n    \"state\",\n    \"province\",\n    \"provence\",\n    \"address-level-1\",\n    \"address-state\",\n    \"address-province\",\n  ];\n\n  static readonly CountryFieldNames: string[] = [\n    \"country\",\n    \"country-code\",\n    \"country-name\",\n    \"address-country\",\n    \"address-country-name\",\n    \"address-country-code\",\n  ];\n\n  static readonly PhoneFieldNames: string[] = [\n    \"phone\",\n    \"mobile\",\n    \"mobile-phone\",\n    \"tel\",\n    \"telephone\",\n    \"phone-number\",\n  ];\n\n  static readonly UserNameFieldNames: string[] = [\"user-name\", \"user-id\", \"screen-name\"];\n\n  static readonly CompanyFieldNames: string[] = [\n    \"company\",\n    \"company-name\",\n    \"organization\",\n    \"organization-name\",\n  ];\n\n  static readonly IsoCountries: { [id: string]: string } = {\n    afghanistan: \"AF\",\n    \"aland islands\": \"AX\",\n    albania: \"AL\",\n    algeria: \"DZ\",\n    \"american samoa\": \"AS\",\n    andorra: \"AD\",\n    angola: \"AO\",\n    anguilla: \"AI\",\n    antarctica: \"AQ\",\n    \"antigua and barbuda\": \"AG\",\n    argentina: \"AR\",\n    armenia: \"AM\",\n    aruba: \"AW\",\n    australia: \"AU\",\n    austria: \"AT\",\n    azerbaijan: \"AZ\",\n    bahamas: \"BS\",\n    bahrain: \"BH\",\n    bangladesh: \"BD\",\n    barbados: \"BB\",\n    belarus: \"BY\",\n    belgium: \"BE\",\n    belize: \"BZ\",\n    benin: \"BJ\",\n    bermuda: \"BM\",\n    bhutan: \"BT\",\n    bolivia: \"BO\",\n    \"bosnia and herzegovina\": \"BA\",\n    botswana: \"BW\",\n    \"bouvet island\": \"BV\",\n    brazil: \"BR\",\n    \"british indian ocean territory\": \"IO\",\n    \"brunei darussalam\": \"BN\",\n    bulgaria: \"BG\",\n    \"burkina faso\": \"BF\",\n    burundi: \"BI\",\n    cambodia: \"KH\",\n    cameroon: \"CM\",\n    canada: \"CA\",\n    \"cape verde\": \"CV\",\n    \"cayman islands\": \"KY\",\n    \"central african republic\": \"CF\",\n    chad: \"TD\",\n    chile: \"CL\",\n    china: \"CN\",\n    \"christmas island\": \"CX\",\n    \"cocos (keeling) islands\": \"CC\",\n    colombia: \"CO\",\n    comoros: \"KM\",\n    congo: \"CG\",\n    \"congo, democratic republic\": \"CD\",\n    \"cook islands\": \"CK\",\n    \"costa rica\": \"CR\",\n    \"cote d'ivoire\": \"CI\",\n    croatia: \"HR\",\n    cuba: \"CU\",\n    cyprus: \"CY\",\n    \"czech republic\": \"CZ\",\n    denmark: \"DK\",\n    djibouti: \"DJ\",\n    dominica: \"DM\",\n    \"dominican republic\": \"DO\",\n    ecuador: \"EC\",\n    egypt: \"EG\",\n    \"el salvador\": \"SV\",\n    \"equatorial guinea\": \"GQ\",\n    eritrea: \"ER\",\n    estonia: \"EE\",\n    ethiopia: \"ET\",\n    \"falkland islands\": \"FK\",\n    \"faroe islands\": \"FO\",\n    fiji: \"FJ\",\n    finland: \"FI\",\n    france: \"FR\",\n    \"french guiana\": \"GF\",\n    \"french polynesia\": \"PF\",\n    \"french southern territories\": \"TF\",\n    gabon: \"GA\",\n    gambia: \"GM\",\n    georgia: \"GE\",\n    germany: \"DE\",\n    ghana: \"GH\",\n    gibraltar: \"GI\",\n    greece: \"GR\",\n    greenland: \"GL\",\n    grenada: \"GD\",\n    guadeloupe: \"GP\",\n    guam: \"GU\",\n    guatemala: \"GT\",\n    guernsey: \"GG\",\n    guinea: \"GN\",\n    \"guinea-bissau\": \"GW\",\n    guyana: \"GY\",\n    haiti: \"HT\",\n    \"heard island & mcdonald islands\": \"HM\",\n    \"holy see (vatican city state)\": \"VA\",\n    honduras: \"HN\",\n    \"hong kong\": \"HK\",\n    hungary: \"HU\",\n    iceland: \"IS\",\n    india: \"IN\",\n    indonesia: \"ID\",\n    \"iran, islamic republic of\": \"IR\",\n    iraq: \"IQ\",\n    ireland: \"IE\",\n    \"isle of man\": \"IM\",\n    israel: \"IL\",\n    italy: \"IT\",\n    jamaica: \"JM\",\n    japan: \"JP\",\n    jersey: \"JE\",\n    jordan: \"JO\",\n    kazakhstan: \"KZ\",\n    kenya: \"KE\",\n    kiribati: \"KI\",\n    \"republic of korea\": \"KR\",\n    \"south korea\": \"KR\",\n    \"democratic people's republic of korea\": \"KP\",\n    \"north korea\": \"KP\",\n    kuwait: \"KW\",\n    kyrgyzstan: \"KG\",\n    \"lao people's democratic republic\": \"LA\",\n    latvia: \"LV\",\n    lebanon: \"LB\",\n    lesotho: \"LS\",\n    liberia: \"LR\",\n    \"libyan arab jamahiriya\": \"LY\",\n    liechtenstein: \"LI\",\n    lithuania: \"LT\",\n    luxembourg: \"LU\",\n    macao: \"MO\",\n    macedonia: \"MK\",\n    madagascar: \"MG\",\n    malawi: \"MW\",\n    malaysia: \"MY\",\n    maldives: \"MV\",\n    mali: \"ML\",\n    malta: \"MT\",\n    \"marshall islands\": \"MH\",\n    martinique: \"MQ\",\n    mauritania: \"MR\",\n    mauritius: \"MU\",\n    mayotte: \"YT\",\n    mexico: \"MX\",\n    \"micronesia, federated states of\": \"FM\",\n    moldova: \"MD\",\n    monaco: \"MC\",\n    mongolia: \"MN\",\n    montenegro: \"ME\",\n    montserrat: \"MS\",\n    morocco: \"MA\",\n    mozambique: \"MZ\",\n    myanmar: \"MM\",\n    namibia: \"NA\",\n    nauru: \"NR\",\n    nepal: \"NP\",\n    netherlands: \"NL\",\n    \"netherlands antilles\": \"AN\",\n    \"new caledonia\": \"NC\",\n    \"new zealand\": \"NZ\",\n    nicaragua: \"NI\",\n    niger: \"NE\",\n    nigeria: \"NG\",\n    niue: \"NU\",\n    \"norfolk island\": \"NF\",\n    \"northern mariana islands\": \"MP\",\n    norway: \"NO\",\n    oman: \"OM\",\n    pakistan: \"PK\",\n    palau: \"PW\",\n    \"palestinian territory, occupied\": \"PS\",\n    panama: \"PA\",\n    \"papua new guinea\": \"PG\",\n    paraguay: \"PY\",\n    peru: \"PE\",\n    philippines: \"PH\",\n    pitcairn: \"PN\",\n    poland: \"PL\",\n    portugal: \"PT\",\n    \"puerto rico\": \"PR\",\n    qatar: \"QA\",\n    reunion: \"RE\",\n    romania: \"RO\",\n    \"russian federation\": \"RU\",\n    rwanda: \"RW\",\n    \"saint barthelemy\": \"BL\",\n    \"saint helena\": \"SH\",\n    \"saint kitts and nevis\": \"KN\",\n    \"saint lucia\": \"LC\",\n    \"saint martin\": \"MF\",\n    \"saint pierre and miquelon\": \"PM\",\n    \"saint vincent and grenadines\": \"VC\",\n    samoa: \"WS\",\n    \"san marino\": \"SM\",\n    \"sao tome and principe\": \"ST\",\n    \"saudi arabia\": \"SA\",\n    senegal: \"SN\",\n    serbia: \"RS\",\n    seychelles: \"SC\",\n    \"sierra leone\": \"SL\",\n    singapore: \"SG\",\n    slovakia: \"SK\",\n    slovenia: \"SI\",\n    \"solomon islands\": \"SB\",\n    somalia: \"SO\",\n    \"south africa\": \"ZA\",\n    \"south georgia and sandwich isl.\": \"GS\",\n    spain: \"ES\",\n    \"sri lanka\": \"LK\",\n    sudan: \"SD\",\n    suriname: \"SR\",\n    \"svalbard and jan mayen\": \"SJ\",\n    swaziland: \"SZ\",\n    sweden: \"SE\",\n    switzerland: \"CH\",\n    \"syrian arab republic\": \"SY\",\n    taiwan: \"TW\",\n    tajikistan: \"TJ\",\n    tanzania: \"TZ\",\n    thailand: \"TH\",\n    \"timor-leste\": \"TL\",\n    togo: \"TG\",\n    tokelau: \"TK\",\n    tonga: \"TO\",\n    \"trinidad and tobago\": \"TT\",\n    tunisia: \"TN\",\n    turkey: \"TR\",\n    turkmenistan: \"TM\",\n    \"turks and caicos islands\": \"TC\",\n    tuvalu: \"TV\",\n    uganda: \"UG\",\n    ukraine: \"UA\",\n    \"united arab emirates\": \"AE\",\n    \"united kingdom\": \"GB\",\n    \"united states\": \"US\",\n    \"united states outlying islands\": \"UM\",\n    uruguay: \"UY\",\n    uzbekistan: \"UZ\",\n    vanuatu: \"VU\",\n    venezuela: \"VE\",\n    vietnam: \"VN\",\n    \"virgin islands, british\": \"VG\",\n    \"virgin islands, u.s.\": \"VI\",\n    \"wallis and futuna\": \"WF\",\n    \"western sahara\": \"EH\",\n    yemen: \"YE\",\n    zambia: \"ZM\",\n    zimbabwe: \"ZW\",\n  };\n\n  static readonly IsoStates: { [id: string]: string } = {\n    alabama: \"AL\",\n    alaska: \"AK\",\n    \"american samoa\": \"AS\",\n    arizona: \"AZ\",\n    arkansas: \"AR\",\n    california: \"CA\",\n    colorado: \"CO\",\n    connecticut: \"CT\",\n    delaware: \"DE\",\n    \"district of columbia\": \"DC\",\n    \"federated states of micronesia\": \"FM\",\n    florida: \"FL\",\n    georgia: \"GA\",\n    guam: \"GU\",\n    hawaii: \"HI\",\n    idaho: \"ID\",\n    illinois: \"IL\",\n    indiana: \"IN\",\n    iowa: \"IA\",\n    kansas: \"KS\",\n    kentucky: \"KY\",\n    louisiana: \"LA\",\n    maine: \"ME\",\n    \"marshall islands\": \"MH\",\n    maryland: \"MD\",\n    massachusetts: \"MA\",\n    michigan: \"MI\",\n    minnesota: \"MN\",\n    mississippi: \"MS\",\n    missouri: \"MO\",\n    montana: \"MT\",\n    nebraska: \"NE\",\n    nevada: \"NV\",\n    \"new hampshire\": \"NH\",\n    \"new jersey\": \"NJ\",\n    \"new mexico\": \"NM\",\n    \"new york\": \"NY\",\n    \"north carolina\": \"NC\",\n    \"north dakota\": \"ND\",\n    \"northern mariana islands\": \"MP\",\n    ohio: \"OH\",\n    oklahoma: \"OK\",\n    oregon: \"OR\",\n    palau: \"PW\",\n    pennsylvania: \"PA\",\n    \"puerto rico\": \"PR\",\n    \"rhode island\": \"RI\",\n    \"south carolina\": \"SC\",\n    \"south dakota\": \"SD\",\n    tennessee: \"TN\",\n    texas: \"TX\",\n    utah: \"UT\",\n    vermont: \"VT\",\n    \"virgin islands\": \"VI\",\n    virginia: \"VA\",\n    washington: \"WA\",\n    \"west virginia\": \"WV\",\n    wisconsin: \"WI\",\n    wyoming: \"WY\",\n  };\n\n  static readonly IsoProvinces: { [id: string]: string } = {\n    alberta: \"AB\",\n    \"british columbia\": \"BC\",\n    manitoba: \"MB\",\n    \"new brunswick\": \"NB\",\n    \"newfoundland and labrador\": \"NL\",\n    \"nova scotia\": \"NS\",\n    ontario: \"ON\",\n    \"prince edward island\": \"PE\",\n    quebec: \"QC\",\n    saskatchewan: \"SK\",\n  };\n}\n","import { CipherService } from \"@bitwarden/common/abstractions/cipher.service\";\nimport { EventService } from \"@bitwarden/common/abstractions/event.service\";\nimport { LogService } from \"@bitwarden/common/abstractions/log.service\";\nimport { TotpService } from \"@bitwarden/common/abstractions/totp.service\";\nimport { CipherRepromptType } from \"@bitwarden/common/enums/cipherRepromptType\";\nimport { CipherType } from \"@bitwarden/common/enums/cipherType\";\nimport { EventType } from \"@bitwarden/common/enums/eventType\";\nimport { FieldType } from \"@bitwarden/common/enums/fieldType\";\nimport { CipherView } from \"@bitwarden/common/models/view/cipherView\";\nimport { FieldView } from \"@bitwarden/common/models/view/fieldView\";\n\nimport { BrowserApi } from \"../browser/browserApi\";\nimport AutofillField from \"../models/autofillField\";\nimport AutofillPageDetails from \"../models/autofillPageDetails\";\nimport AutofillScript from \"../models/autofillScript\";\nimport { StateService } from \"../services/abstractions/state.service\";\n\nimport {\n  AutoFillOptions,\n  AutofillService as AutofillServiceInterface,\n  PageDetail,\n  FormData,\n} from \"./abstractions/autofill.service\";\nimport {\n  AutoFillConstants,\n  CreditCardAutoFillConstants,\n  IdentityAutoFillConstants,\n} from \"./autofillConstants\";\n\nexport interface GenerateFillScriptOptions {\n  skipUsernameOnlyFill: boolean;\n  onlyEmptyFields: boolean;\n  onlyVisibleFields: boolean;\n  fillNewPassword: boolean;\n  cipher: CipherView;\n}\n\nexport default class AutofillService implements AutofillServiceInterface {\n  constructor(\n    private cipherService: CipherService,\n    private stateService: StateService,\n    private totpService: TotpService,\n    private eventService: EventService,\n    private logService: LogService\n  ) {}\n\n  getFormsWithPasswordFields(pageDetails: AutofillPageDetails): FormData[] {\n    const formData: FormData[] = [];\n\n    const passwordFields = AutofillService.loadPasswordFields(\n      pageDetails,\n      true,\n      true,\n      false,\n      false\n    );\n    if (passwordFields.length === 0) {\n      return formData;\n    }\n\n    for (const formKey in pageDetails.forms) {\n      // eslint-disable-next-line\n      if (!pageDetails.forms.hasOwnProperty(formKey)) {\n        continue;\n      }\n\n      const formPasswordFields = passwordFields.filter((pf) => formKey === pf.form);\n      if (formPasswordFields.length > 0) {\n        let uf = this.findUsernameField(pageDetails, formPasswordFields[0], false, false, false);\n        if (uf == null) {\n          // not able to find any viewable username fields. maybe there are some \"hidden\" ones?\n          uf = this.findUsernameField(pageDetails, formPasswordFields[0], true, true, false);\n        }\n        formData.push({\n          form: pageDetails.forms[formKey],\n          password: formPasswordFields[0],\n          username: uf,\n          passwords: formPasswordFields,\n        });\n      }\n    }\n\n    return formData;\n  }\n\n  async doAutoFill(options: AutoFillOptions) {\n    const tab = options.tab;\n    if (!tab || !options.cipher || !options.pageDetails || !options.pageDetails.length) {\n      throw new Error(\"Nothing to auto-fill.\");\n    }\n\n    let totpPromise: Promise<string> = null;\n\n    const canAccessPremium = await this.stateService.getCanAccessPremium();\n    let didAutofill = false;\n    options.pageDetails.forEach((pd) => {\n      // make sure we're still on correct tab\n      if (pd.tab.id !== tab.id || pd.tab.url !== tab.url) {\n        return;\n      }\n\n      const fillScript = this.generateFillScript(pd.details, {\n        skipUsernameOnlyFill: options.skipUsernameOnlyFill || false,\n        onlyEmptyFields: options.onlyEmptyFields || false,\n        onlyVisibleFields: options.onlyVisibleFields || false,\n        fillNewPassword: options.fillNewPassword || false,\n        cipher: options.cipher,\n      });\n\n      if (!fillScript || !fillScript.script || !fillScript.script.length) {\n        return;\n      }\n\n      // Add a small delay between operations\n      fillScript.properties.delay_between_operations = 20;\n\n      didAutofill = true;\n      if (!options.skipLastUsed) {\n        this.cipherService.updateLastUsedDate(options.cipher.id);\n      }\n\n      BrowserApi.tabSendMessage(\n        tab,\n        {\n          command: \"fillForm\",\n          fillScript: fillScript,\n          url: tab.url,\n        },\n        { frameId: pd.frameId }\n      );\n\n      if (\n        options.cipher.type !== CipherType.Login ||\n        totpPromise ||\n        !options.cipher.login.totp ||\n        (!canAccessPremium && !options.cipher.organizationUseTotp)\n      ) {\n        return;\n      }\n\n      totpPromise = this.stateService.getDisableAutoTotpCopy().then((disabled) => {\n        if (!disabled) {\n          return this.totpService.getCode(options.cipher.login.totp);\n        }\n        return null;\n      });\n    });\n\n    if (didAutofill) {\n      this.eventService.collect(EventType.Cipher_ClientAutofilled, options.cipher.id);\n      if (totpPromise != null) {\n        return await totpPromise;\n      } else {\n        return null;\n      }\n    } else {\n      throw new Error(\"Did not auto-fill.\");\n    }\n  }\n\n  async doAutoFillOnTab(pageDetails: PageDetail[], tab: chrome.tabs.Tab, fromCommand: boolean) {\n    let cipher: CipherView;\n    if (fromCommand) {\n      cipher = await this.cipherService.getNextCipherForUrl(tab.url);\n    } else {\n      const lastLaunchedCipher = await this.cipherService.getLastLaunchedForUrl(tab.url, true);\n      if (\n        lastLaunchedCipher &&\n        Date.now().valueOf() - lastLaunchedCipher.localData?.lastLaunched?.valueOf() < 30000\n      ) {\n        cipher = lastLaunchedCipher;\n      } else {\n        cipher = await this.cipherService.getLastUsedForUrl(tab.url, true);\n      }\n\n      if (cipher == null) {\n        return null;\n      }\n    }\n\n    if (cipher.reprompt !== CipherRepromptType.None) {\n      return;\n    }\n\n    const totpCode = await this.doAutoFill({\n      tab: tab,\n      cipher: cipher,\n      pageDetails: pageDetails,\n      skipLastUsed: !fromCommand,\n      skipUsernameOnlyFill: !fromCommand,\n      onlyEmptyFields: !fromCommand,\n      onlyVisibleFields: !fromCommand,\n      fillNewPassword: fromCommand,\n    });\n\n    // Update last used index as autofill has succeed\n    if (fromCommand) {\n      this.cipherService.updateLastUsedIndexForUrl(tab.url);\n    }\n\n    return totpCode;\n  }\n\n  async doAutoFillActiveTab(pageDetails: PageDetail[], fromCommand: boolean) {\n    const tab = await this.getActiveTab();\n    if (!tab || !tab.url) {\n      return;\n    }\n\n    return await this.doAutoFillOnTab(pageDetails, tab, fromCommand);\n  }\n\n  // Helpers\n\n  private async getActiveTab(): Promise<chrome.tabs.Tab> {\n    const tab = await BrowserApi.getTabFromCurrentWindow();\n    if (!tab) {\n      throw new Error(\"No tab found.\");\n    }\n\n    return tab;\n  }\n\n  private generateFillScript(\n    pageDetails: AutofillPageDetails,\n    options: GenerateFillScriptOptions\n  ): AutofillScript {\n    if (!pageDetails || !options.cipher) {\n      return null;\n    }\n\n    let fillScript = new AutofillScript(pageDetails.documentUUID);\n    const filledFields: { [id: string]: AutofillField } = {};\n    const fields = options.cipher.fields;\n\n    if (fields && fields.length) {\n      const fieldNames: string[] = [];\n\n      fields.forEach((f) => {\n        if (AutofillService.hasValue(f.name)) {\n          fieldNames.push(f.name.toLowerCase());\n        }\n      });\n\n      pageDetails.fields.forEach((field) => {\n        // eslint-disable-next-line\n        if (filledFields.hasOwnProperty(field.opid)) {\n          return;\n        }\n\n        if (!field.viewable && field.tagName !== \"span\") {\n          return;\n        }\n\n        const matchingIndex = this.findMatchingFieldIndex(field, fieldNames);\n        if (matchingIndex > -1) {\n          const matchingField: FieldView = fields[matchingIndex];\n          let val: string;\n          if (matchingField.type === FieldType.Linked) {\n            // Assumption: Linked Field is not being used to autofill a boolean value\n            val = options.cipher.linkedFieldValue(matchingField.linkedId) as string;\n          } else {\n            val = matchingField.value;\n            if (val == null && matchingField.type === FieldType.Boolean) {\n              val = \"false\";\n            }\n          }\n\n          filledFields[field.opid] = field;\n          AutofillService.fillByOpid(fillScript, field, val);\n        }\n      });\n    }\n\n    switch (options.cipher.type) {\n      case CipherType.Login:\n        fillScript = this.generateLoginFillScript(fillScript, pageDetails, filledFields, options);\n        break;\n      case CipherType.Card:\n        fillScript = this.generateCardFillScript(fillScript, pageDetails, filledFields, options);\n        break;\n      case CipherType.Identity:\n        fillScript = this.generateIdentityFillScript(\n          fillScript,\n          pageDetails,\n          filledFields,\n          options\n        );\n        break;\n      default:\n        return null;\n    }\n\n    return fillScript;\n  }\n\n  private generateLoginFillScript(\n    fillScript: AutofillScript,\n    pageDetails: AutofillPageDetails,\n    filledFields: { [id: string]: AutofillField },\n    options: GenerateFillScriptOptions\n  ): AutofillScript {\n    if (!options.cipher.login) {\n      return null;\n    }\n\n    const passwords: AutofillField[] = [];\n    const usernames: AutofillField[] = [];\n    let pf: AutofillField = null;\n    let username: AutofillField = null;\n    const login = options.cipher.login;\n\n    if (!login.password || login.password === \"\") {\n      // No password for this login. Maybe they just wanted to auto-fill some custom fields?\n      fillScript = AutofillService.setFillScriptForFocus(filledFields, fillScript);\n      return fillScript;\n    }\n\n    let passwordFields = AutofillService.loadPasswordFields(\n      pageDetails,\n      false,\n      false,\n      options.onlyEmptyFields,\n      options.fillNewPassword\n    );\n    if (!passwordFields.length && !options.onlyVisibleFields) {\n      // not able to find any viewable password fields. maybe there are some \"hidden\" ones?\n      passwordFields = AutofillService.loadPasswordFields(\n        pageDetails,\n        true,\n        true,\n        options.onlyEmptyFields,\n        options.fillNewPassword\n      );\n    }\n\n    for (const formKey in pageDetails.forms) {\n      // eslint-disable-next-line\n      if (!pageDetails.forms.hasOwnProperty(formKey)) {\n        continue;\n      }\n\n      const passwordFieldsForForm: AutofillField[] = [];\n      passwordFields.forEach((passField) => {\n        if (formKey === passField.form) {\n          passwordFieldsForForm.push(passField);\n        }\n      });\n\n      passwordFields.forEach((passField) => {\n        pf = passField;\n        passwords.push(pf);\n\n        if (login.username) {\n          username = this.findUsernameField(pageDetails, pf, false, false, false);\n\n          if (!username && !options.onlyVisibleFields) {\n            // not able to find any viewable username fields. maybe there are some \"hidden\" ones?\n            username = this.findUsernameField(pageDetails, pf, true, true, false);\n          }\n\n          if (username) {\n            usernames.push(username);\n          }\n        }\n      });\n    }\n\n    if (passwordFields.length && !passwords.length) {\n      // The page does not have any forms with password fields. Use the first password field on the page and the\n      // input field just before it as the username.\n\n      pf = passwordFields[0];\n      passwords.push(pf);\n\n      if (login.username && pf.elementNumber > 0) {\n        username = this.findUsernameField(pageDetails, pf, false, false, true);\n\n        if (!username && !options.onlyVisibleFields) {\n          // not able to find any viewable username fields. maybe there are some \"hidden\" ones?\n          username = this.findUsernameField(pageDetails, pf, true, true, true);\n        }\n\n        if (username) {\n          usernames.push(username);\n        }\n      }\n    }\n\n    if (!passwordFields.length && !options.skipUsernameOnlyFill) {\n      // No password fields on this page. Let's try to just fuzzy fill the username.\n      pageDetails.fields.forEach((f) => {\n        if (\n          f.viewable &&\n          (f.type === \"text\" || f.type === \"email\" || f.type === \"tel\") &&\n          AutofillService.fieldIsFuzzyMatch(f, AutoFillConstants.UsernameFieldNames)\n        ) {\n          usernames.push(f);\n        }\n      });\n    }\n\n    usernames.forEach((u) => {\n      // eslint-disable-next-line\n      if (filledFields.hasOwnProperty(u.opid)) {\n        return;\n      }\n\n      filledFields[u.opid] = u;\n      AutofillService.fillByOpid(fillScript, u, login.username);\n    });\n\n    passwords.forEach((p) => {\n      // eslint-disable-next-line\n      if (filledFields.hasOwnProperty(p.opid)) {\n        return;\n      }\n\n      filledFields[p.opid] = p;\n      AutofillService.fillByOpid(fillScript, p, login.password);\n    });\n\n    fillScript = AutofillService.setFillScriptForFocus(filledFields, fillScript);\n    return fillScript;\n  }\n\n  private generateCardFillScript(\n    fillScript: AutofillScript,\n    pageDetails: AutofillPageDetails,\n    filledFields: { [id: string]: AutofillField },\n    options: GenerateFillScriptOptions\n  ): AutofillScript {\n    if (!options.cipher.card) {\n      return null;\n    }\n\n    const fillFields: { [id: string]: AutofillField } = {};\n\n    pageDetails.fields.forEach((f) => {\n      if (AutofillService.forCustomFieldsOnly(f)) {\n        return;\n      }\n\n      if (this.isExcludedType(f.type, AutoFillConstants.ExcludedAutofillTypes)) {\n        return;\n      }\n\n      for (let i = 0; i < CreditCardAutoFillConstants.CardAttributes.length; i++) {\n        const attr = CreditCardAutoFillConstants.CardAttributes[i];\n        // eslint-disable-next-line\n        if (!f.hasOwnProperty(attr) || !f[attr] || !f.viewable) {\n          continue;\n        }\n\n        // ref https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill\n        // ref https://developers.google.com/web/fundamentals/design-and-ux/input/forms/\n        if (\n          !fillFields.cardholderName &&\n          AutofillService.isFieldMatch(\n            f[attr],\n            CreditCardAutoFillConstants.CardHolderFieldNames,\n            CreditCardAutoFillConstants.CardHolderFieldNameValues\n          )\n        ) {\n          fillFields.cardholderName = f;\n          break;\n        } else if (\n          !fillFields.number &&\n          AutofillService.isFieldMatch(\n            f[attr],\n            CreditCardAutoFillConstants.CardNumberFieldNames,\n            CreditCardAutoFillConstants.CardNumberFieldNameValues\n          )\n        ) {\n          fillFields.number = f;\n          break;\n        } else if (\n          !fillFields.exp &&\n          AutofillService.isFieldMatch(\n            f[attr],\n            CreditCardAutoFillConstants.CardExpiryFieldNames,\n            CreditCardAutoFillConstants.CardExpiryFieldNameValues\n          )\n        ) {\n          fillFields.exp = f;\n          break;\n        } else if (\n          !fillFields.expMonth &&\n          AutofillService.isFieldMatch(f[attr], CreditCardAutoFillConstants.ExpiryMonthFieldNames)\n        ) {\n          fillFields.expMonth = f;\n          break;\n        } else if (\n          !fillFields.expYear &&\n          AutofillService.isFieldMatch(f[attr], CreditCardAutoFillConstants.ExpiryYearFieldNames)\n        ) {\n          fillFields.expYear = f;\n          break;\n        } else if (\n          !fillFields.code &&\n          AutofillService.isFieldMatch(f[attr], CreditCardAutoFillConstants.CVVFieldNames)\n        ) {\n          fillFields.code = f;\n          break;\n        } else if (\n          !fillFields.brand &&\n          AutofillService.isFieldMatch(f[attr], CreditCardAutoFillConstants.CardBrandFieldNames)\n        ) {\n          fillFields.brand = f;\n          break;\n        }\n      }\n    });\n\n    const card = options.cipher.card;\n    this.makeScriptAction(fillScript, card, fillFields, filledFields, \"cardholderName\");\n    this.makeScriptAction(fillScript, card, fillFields, filledFields, \"number\");\n    this.makeScriptAction(fillScript, card, fillFields, filledFields, \"code\");\n    this.makeScriptAction(fillScript, card, fillFields, filledFields, \"brand\");\n\n    if (fillFields.expMonth && AutofillService.hasValue(card.expMonth)) {\n      let expMonth: string = card.expMonth;\n\n      if (fillFields.expMonth.selectInfo && fillFields.expMonth.selectInfo.options) {\n        let index: number = null;\n        const siOptions = fillFields.expMonth.selectInfo.options;\n        if (siOptions.length === 12) {\n          index = parseInt(card.expMonth, null) - 1;\n        } else if (siOptions.length === 13) {\n          if (\n            siOptions[0][0] != null &&\n            siOptions[0][0] !== \"\" &&\n            (siOptions[12][0] == null || siOptions[12][0] === \"\")\n          ) {\n            index = parseInt(card.expMonth, null) - 1;\n          } else {\n            index = parseInt(card.expMonth, null);\n          }\n        }\n\n        if (index != null) {\n          const option = siOptions[index];\n          if (option.length > 1) {\n            expMonth = option[1];\n          }\n        }\n      } else if (\n        (this.fieldAttrsContain(fillFields.expMonth, \"mm\") ||\n          fillFields.expMonth.maxLength === 2) &&\n        expMonth.length === 1\n      ) {\n        expMonth = \"0\" + expMonth;\n      }\n\n      filledFields[fillFields.expMonth.opid] = fillFields.expMonth;\n      AutofillService.fillByOpid(fillScript, fillFields.expMonth, expMonth);\n    }\n\n    if (fillFields.expYear && AutofillService.hasValue(card.expYear)) {\n      let expYear: string = card.expYear;\n      if (fillFields.expYear.selectInfo && fillFields.expYear.selectInfo.options) {\n        for (let i = 0; i < fillFields.expYear.selectInfo.options.length; i++) {\n          const o: [string, string] = fillFields.expYear.selectInfo.options[i];\n          if (o[0] === card.expYear || o[1] === card.expYear) {\n            expYear = o[1];\n            break;\n          }\n          if (\n            o[1].length === 2 &&\n            card.expYear.length === 4 &&\n            o[1] === card.expYear.substring(2)\n          ) {\n            expYear = o[1];\n            break;\n          }\n          const colonIndex = o[1].indexOf(\":\");\n          if (colonIndex > -1 && o[1].length > colonIndex + 1) {\n            const val = o[1].substring(colonIndex + 2);\n            if (val != null && val.trim() !== \"\" && val === card.expYear) {\n              expYear = o[1];\n              break;\n            }\n          }\n        }\n      } else if (\n        this.fieldAttrsContain(fillFields.expYear, \"yyyy\") ||\n        fillFields.expYear.maxLength === 4\n      ) {\n        if (expYear.length === 2) {\n          expYear = \"20\" + expYear;\n        }\n      } else if (\n        this.fieldAttrsContain(fillFields.expYear, \"yy\") ||\n        fillFields.expYear.maxLength === 2\n      ) {\n        if (expYear.length === 4) {\n          expYear = expYear.substr(2);\n        }\n      }\n\n      filledFields[fillFields.expYear.opid] = fillFields.expYear;\n      AutofillService.fillByOpid(fillScript, fillFields.expYear, expYear);\n    }\n\n    if (\n      fillFields.exp &&\n      AutofillService.hasValue(card.expMonth) &&\n      AutofillService.hasValue(card.expYear)\n    ) {\n      const fullMonth = (\"0\" + card.expMonth).slice(-2);\n\n      let fullYear: string = card.expYear;\n      let partYear: string = null;\n      if (fullYear.length === 2) {\n        partYear = fullYear;\n        fullYear = \"20\" + fullYear;\n      } else if (fullYear.length === 4) {\n        partYear = fullYear.substr(2, 2);\n      }\n\n      let exp: string = null;\n      for (let i = 0; i < CreditCardAutoFillConstants.MonthAbbr.length; i++) {\n        if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.MonthAbbr[i] +\n              \"/\" +\n              CreditCardAutoFillConstants.YearAbbrShort[i]\n          ) &&\n          partYear != null\n        ) {\n          exp = fullMonth + \"/\" + partYear;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.MonthAbbr[i] +\n              \"/\" +\n              CreditCardAutoFillConstants.YearAbbrLong[i]\n          )\n        ) {\n          exp = fullMonth + \"/\" + fullYear;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.YearAbbrShort[i] +\n              \"/\" +\n              CreditCardAutoFillConstants.MonthAbbr[i]\n          ) &&\n          partYear != null\n        ) {\n          exp = partYear + \"/\" + fullMonth;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.YearAbbrLong[i] +\n              \"/\" +\n              CreditCardAutoFillConstants.MonthAbbr[i]\n          )\n        ) {\n          exp = fullYear + \"/\" + fullMonth;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.MonthAbbr[i] +\n              \"-\" +\n              CreditCardAutoFillConstants.YearAbbrShort[i]\n          ) &&\n          partYear != null\n        ) {\n          exp = fullMonth + \"-\" + partYear;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.MonthAbbr[i] +\n              \"-\" +\n              CreditCardAutoFillConstants.YearAbbrLong[i]\n          )\n        ) {\n          exp = fullMonth + \"-\" + fullYear;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.YearAbbrShort[i] +\n              \"-\" +\n              CreditCardAutoFillConstants.MonthAbbr[i]\n          ) &&\n          partYear != null\n        ) {\n          exp = partYear + \"-\" + fullMonth;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.YearAbbrLong[i] +\n              \"-\" +\n              CreditCardAutoFillConstants.MonthAbbr[i]\n          )\n        ) {\n          exp = fullYear + \"-\" + fullMonth;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.YearAbbrShort[i] + CreditCardAutoFillConstants.MonthAbbr[i]\n          ) &&\n          partYear != null\n        ) {\n          exp = partYear + fullMonth;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.YearAbbrLong[i] + CreditCardAutoFillConstants.MonthAbbr[i]\n          )\n        ) {\n          exp = fullYear + fullMonth;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.MonthAbbr[i] + CreditCardAutoFillConstants.YearAbbrShort[i]\n          ) &&\n          partYear != null\n        ) {\n          exp = fullMonth + partYear;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.MonthAbbr[i] + CreditCardAutoFillConstants.YearAbbrLong[i]\n          )\n        ) {\n          exp = fullMonth + fullYear;\n        }\n\n        if (exp != null) {\n          break;\n        }\n      }\n\n      if (exp == null) {\n        exp = fullYear + \"-\" + fullMonth;\n      }\n\n      this.makeScriptActionWithValue(fillScript, exp, fillFields.exp, filledFields);\n    }\n\n    return fillScript;\n  }\n\n  private fieldAttrsContain(field: AutofillField, containsVal: string) {\n    if (!field) {\n      return false;\n    }\n\n    let doesContain = false;\n    CreditCardAutoFillConstants.CardAttributesExtended.forEach((attr) => {\n      // eslint-disable-next-line\n      if (doesContain || !field.hasOwnProperty(attr) || !field[attr]) {\n        return;\n      }\n\n      let val = field[attr];\n      val = val.replace(/ /g, \"\").toLowerCase();\n      doesContain = val.indexOf(containsVal) > -1;\n    });\n\n    return doesContain;\n  }\n\n  private generateIdentityFillScript(\n    fillScript: AutofillScript,\n    pageDetails: AutofillPageDetails,\n    filledFields: { [id: string]: AutofillField },\n    options: GenerateFillScriptOptions\n  ): AutofillScript {\n    if (!options.cipher.identity) {\n      return null;\n    }\n\n    const fillFields: { [id: string]: AutofillField } = {};\n\n    pageDetails.fields.forEach((f) => {\n      if (AutofillService.forCustomFieldsOnly(f)) {\n        return;\n      }\n\n      if (this.isExcludedType(f.type, AutoFillConstants.ExcludedAutofillTypes)) {\n        return;\n      }\n\n      for (let i = 0; i < IdentityAutoFillConstants.IdentityAttributes.length; i++) {\n        const attr = IdentityAutoFillConstants.IdentityAttributes[i];\n        // eslint-disable-next-line\n        if (!f.hasOwnProperty(attr) || !f[attr] || !f.viewable) {\n          continue;\n        }\n\n        // ref https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill\n        // ref https://developers.google.com/web/fundamentals/design-and-ux/input/forms/\n        if (\n          !fillFields.name &&\n          AutofillService.isFieldMatch(\n            f[attr],\n            IdentityAutoFillConstants.FullNameFieldNames,\n            IdentityAutoFillConstants.FullNameFieldNameValues\n          )\n        ) {\n          fillFields.name = f;\n          break;\n        } else if (\n          !fillFields.firstName &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.FirstnameFieldNames)\n        ) {\n          fillFields.firstName = f;\n          break;\n        } else if (\n          !fillFields.middleName &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.MiddlenameFieldNames)\n        ) {\n          fillFields.middleName = f;\n          break;\n        } else if (\n          !fillFields.lastName &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.LastnameFieldNames)\n        ) {\n          fillFields.lastName = f;\n          break;\n        } else if (\n          !fillFields.title &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.TitleFieldNames)\n        ) {\n          fillFields.title = f;\n          break;\n        } else if (\n          !fillFields.email &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.EmailFieldNames)\n        ) {\n          fillFields.email = f;\n          break;\n        } else if (\n          !fillFields.address &&\n          AutofillService.isFieldMatch(\n            f[attr],\n            IdentityAutoFillConstants.AddressFieldNames,\n            IdentityAutoFillConstants.AddressFieldNameValues\n          )\n        ) {\n          fillFields.address = f;\n          break;\n        } else if (\n          !fillFields.address1 &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.Address1FieldNames)\n        ) {\n          fillFields.address1 = f;\n          break;\n        } else if (\n          !fillFields.address2 &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.Address2FieldNames)\n        ) {\n          fillFields.address2 = f;\n          break;\n        } else if (\n          !fillFields.address3 &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.Address3FieldNames)\n        ) {\n          fillFields.address3 = f;\n          break;\n        } else if (\n          !fillFields.postalCode &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.PostalCodeFieldNames)\n        ) {\n          fillFields.postalCode = f;\n          break;\n        } else if (\n          !fillFields.city &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.CityFieldNames)\n        ) {\n          fillFields.city = f;\n          break;\n        } else if (\n          !fillFields.state &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.StateFieldNames)\n        ) {\n          fillFields.state = f;\n          break;\n        } else if (\n          !fillFields.country &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.CountryFieldNames)\n        ) {\n          fillFields.country = f;\n          break;\n        } else if (\n          !fillFields.phone &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.PhoneFieldNames)\n        ) {\n          fillFields.phone = f;\n          break;\n        } else if (\n          !fillFields.username &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.UserNameFieldNames)\n        ) {\n          fillFields.username = f;\n          break;\n        } else if (\n          !fillFields.company &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.CompanyFieldNames)\n        ) {\n          fillFields.company = f;\n          break;\n        }\n      }\n    });\n\n    const identity = options.cipher.identity;\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"title\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"firstName\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"middleName\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"lastName\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"address1\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"address2\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"address3\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"city\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"postalCode\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"company\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"email\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"phone\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"username\");\n\n    let filledState = false;\n    if (fillFields.state && identity.state && identity.state.length > 2) {\n      const stateLower = identity.state.toLowerCase();\n      const isoState =\n        IdentityAutoFillConstants.IsoStates[stateLower] ||\n        IdentityAutoFillConstants.IsoProvinces[stateLower];\n      if (isoState) {\n        filledState = true;\n        this.makeScriptActionWithValue(fillScript, isoState, fillFields.state, filledFields);\n      }\n    }\n\n    if (!filledState) {\n      this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"state\");\n    }\n\n    let filledCountry = false;\n    if (fillFields.country && identity.country && identity.country.length > 2) {\n      const countryLower = identity.country.toLowerCase();\n      const isoCountry = IdentityAutoFillConstants.IsoCountries[countryLower];\n      if (isoCountry) {\n        filledCountry = true;\n        this.makeScriptActionWithValue(fillScript, isoCountry, fillFields.country, filledFields);\n      }\n    }\n\n    if (!filledCountry) {\n      this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"country\");\n    }\n\n    if (fillFields.name && (identity.firstName || identity.lastName)) {\n      let fullName = \"\";\n      if (AutofillService.hasValue(identity.firstName)) {\n        fullName = identity.firstName;\n      }\n      if (AutofillService.hasValue(identity.middleName)) {\n        if (fullName !== \"\") {\n          fullName += \" \";\n        }\n        fullName += identity.middleName;\n      }\n      if (AutofillService.hasValue(identity.lastName)) {\n        if (fullName !== \"\") {\n          fullName += \" \";\n        }\n        fullName += identity.lastName;\n      }\n\n      this.makeScriptActionWithValue(fillScript, fullName, fillFields.name, filledFields);\n    }\n\n    if (fillFields.address && AutofillService.hasValue(identity.address1)) {\n      let address = \"\";\n      if (AutofillService.hasValue(identity.address1)) {\n        address = identity.address1;\n      }\n      if (AutofillService.hasValue(identity.address2)) {\n        if (address !== \"\") {\n          address += \", \";\n        }\n        address += identity.address2;\n      }\n      if (AutofillService.hasValue(identity.address3)) {\n        if (address !== \"\") {\n          address += \", \";\n        }\n        address += identity.address3;\n      }\n\n      this.makeScriptActionWithValue(fillScript, address, fillFields.address, filledFields);\n    }\n\n    return fillScript;\n  }\n\n  private isExcludedType(type: string, excludedTypes: string[]) {\n    return excludedTypes.indexOf(type) > -1;\n  }\n\n  private static isFieldMatch(\n    value: string,\n    options: string[],\n    containsOptions?: string[]\n  ): boolean {\n    value = value\n      .trim()\n      .toLowerCase()\n      .replace(/[^a-zA-Z0-9]+/g, \"\");\n    for (let i = 0; i < options.length; i++) {\n      let option = options[i];\n      const checkValueContains = containsOptions == null || containsOptions.indexOf(option) > -1;\n      option = option.toLowerCase().replace(/-/g, \"\");\n      if (value === option || (checkValueContains && value.indexOf(option) > -1)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private makeScriptAction(\n    fillScript: AutofillScript,\n    cipherData: any,\n    fillFields: { [id: string]: AutofillField },\n    filledFields: { [id: string]: AutofillField },\n    dataProp: string,\n    fieldProp?: string\n  ) {\n    fieldProp = fieldProp || dataProp;\n    this.makeScriptActionWithValue(\n      fillScript,\n      cipherData[dataProp],\n      fillFields[fieldProp],\n      filledFields\n    );\n  }\n\n  private makeScriptActionWithValue(\n    fillScript: AutofillScript,\n    dataValue: any,\n    field: AutofillField,\n    filledFields: { [id: string]: AutofillField }\n  ) {\n    let doFill = false;\n    if (AutofillService.hasValue(dataValue) && field) {\n      if (field.type === \"select-one\" && field.selectInfo && field.selectInfo.options) {\n        for (let i = 0; i < field.selectInfo.options.length; i++) {\n          const option = field.selectInfo.options[i];\n          for (let j = 0; j < option.length; j++) {\n            if (\n              AutofillService.hasValue(option[j]) &&\n              option[j].toLowerCase() === dataValue.toLowerCase()\n            ) {\n              doFill = true;\n              if (option.length > 1) {\n                dataValue = option[1];\n              }\n              break;\n            }\n          }\n\n          if (doFill) {\n            break;\n          }\n        }\n      } else {\n        doFill = true;\n      }\n    }\n\n    if (doFill) {\n      filledFields[field.opid] = field;\n      AutofillService.fillByOpid(fillScript, field, dataValue);\n    }\n  }\n\n  static loadPasswordFields(\n    pageDetails: AutofillPageDetails,\n    canBeHidden: boolean,\n    canBeReadOnly: boolean,\n    mustBeEmpty: boolean,\n    fillNewPassword: boolean\n  ) {\n    const arr: AutofillField[] = [];\n    pageDetails.fields.forEach((f) => {\n      if (AutofillService.forCustomFieldsOnly(f)) {\n        return;\n      }\n\n      const isPassword = f.type === \"password\";\n      const valueIsLikePassword = (value: string) => {\n        if (value == null) {\n          return false;\n        }\n        // Removes all whitespace, _ and - characters\n        // eslint-disable-next-line\n        const cleanedValue = value.toLowerCase().replace(/[\\s_\\-]/g, \"\");\n\n        if (cleanedValue.indexOf(\"password\") < 0) {\n          return false;\n        }\n\n        if (AutoFillConstants.PasswordFieldIgnoreList.some((i) => cleanedValue.indexOf(i) > -1)) {\n          return false;\n        }\n\n        return true;\n      };\n      const isLikePassword = () => {\n        if (f.type !== \"text\") {\n          return false;\n        }\n        if (valueIsLikePassword(f.htmlID)) {\n          return true;\n        }\n        if (valueIsLikePassword(f.htmlName)) {\n          return true;\n        }\n        if (valueIsLikePassword(f.placeholder)) {\n          return true;\n        }\n        return false;\n      };\n      if (\n        !f.disabled &&\n        (canBeReadOnly || !f.readonly) &&\n        (isPassword || isLikePassword()) &&\n        (canBeHidden || f.viewable) &&\n        (!mustBeEmpty || f.value == null || f.value.trim() === \"\") &&\n        (fillNewPassword || f.autoCompleteType !== \"new-password\")\n      ) {\n        arr.push(f);\n      }\n    });\n    return arr;\n  }\n\n  private findUsernameField(\n    pageDetails: AutofillPageDetails,\n    passwordField: AutofillField,\n    canBeHidden: boolean,\n    canBeReadOnly: boolean,\n    withoutForm: boolean\n  ) {\n    let usernameField: AutofillField = null;\n    for (let i = 0; i < pageDetails.fields.length; i++) {\n      const f = pageDetails.fields[i];\n      if (AutofillService.forCustomFieldsOnly(f)) {\n        continue;\n      }\n\n      if (f.elementNumber >= passwordField.elementNumber) {\n        break;\n      }\n\n      if (\n        !f.disabled &&\n        (canBeReadOnly || !f.readonly) &&\n        (withoutForm || f.form === passwordField.form) &&\n        (canBeHidden || f.viewable) &&\n        (f.type === \"text\" || f.type === \"email\" || f.type === \"tel\")\n      ) {\n        usernameField = f;\n\n        if (this.findMatchingFieldIndex(f, AutoFillConstants.UsernameFieldNames) > -1) {\n          // We found an exact match. No need to keep looking.\n          break;\n        }\n      }\n    }\n\n    return usernameField;\n  }\n\n  private findMatchingFieldIndex(field: AutofillField, names: string[]): number {\n    for (let i = 0; i < names.length; i++) {\n      if (names[i].indexOf(\"=\") > -1) {\n        if (this.fieldPropertyIsPrefixMatch(field, \"htmlID\", names[i], \"id\")) {\n          return i;\n        }\n        if (this.fieldPropertyIsPrefixMatch(field, \"htmlName\", names[i], \"name\")) {\n          return i;\n        }\n        if (this.fieldPropertyIsPrefixMatch(field, \"label-tag\", names[i], \"label\")) {\n          return i;\n        }\n        if (this.fieldPropertyIsPrefixMatch(field, \"label-aria\", names[i], \"label\")) {\n          return i;\n        }\n        if (this.fieldPropertyIsPrefixMatch(field, \"placeholder\", names[i], \"placeholder\")) {\n          return i;\n        }\n      }\n\n      if (this.fieldPropertyIsMatch(field, \"htmlID\", names[i])) {\n        return i;\n      }\n      if (this.fieldPropertyIsMatch(field, \"htmlName\", names[i])) {\n        return i;\n      }\n      if (this.fieldPropertyIsMatch(field, \"label-tag\", names[i])) {\n        return i;\n      }\n      if (this.fieldPropertyIsMatch(field, \"label-aria\", names[i])) {\n        return i;\n      }\n      if (this.fieldPropertyIsMatch(field, \"placeholder\", names[i])) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  private fieldPropertyIsPrefixMatch(\n    field: any,\n    property: string,\n    name: string,\n    prefix: string,\n    separator = \"=\"\n  ): boolean {\n    if (name.indexOf(prefix + separator) === 0) {\n      const sepIndex = name.indexOf(separator);\n      const val = name.substring(sepIndex + 1);\n      return val != null && this.fieldPropertyIsMatch(field, property, val);\n    }\n    return false;\n  }\n\n  private fieldPropertyIsMatch(field: any, property: string, name: string): boolean {\n    let fieldVal = field[property] as string;\n    if (!AutofillService.hasValue(fieldVal)) {\n      return false;\n    }\n\n    fieldVal = fieldVal.trim().replace(/(?:\\r\\n|\\r|\\n)/g, \"\");\n    if (name.startsWith(\"regex=\")) {\n      try {\n        const regexParts = name.split(\"=\", 2);\n        if (regexParts.length === 2) {\n          const regex = new RegExp(regexParts[1], \"i\");\n          return regex.test(fieldVal);\n        }\n      } catch (e) {\n        this.logService.error(e);\n      }\n    } else if (name.startsWith(\"csv=\")) {\n      const csvParts = name.split(\"=\", 2);\n      if (csvParts.length === 2) {\n        const csvVals = csvParts[1].split(\",\");\n        for (let i = 0; i < csvVals.length; i++) {\n          const val = csvVals[i];\n          if (val != null && val.trim().toLowerCase() === fieldVal.toLowerCase()) {\n            return true;\n          }\n        }\n        return false;\n      }\n    }\n\n    return fieldVal.toLowerCase() === name;\n  }\n\n  static fieldIsFuzzyMatch(field: AutofillField, names: string[]): boolean {\n    if (AutofillService.hasValue(field.htmlID) && this.fuzzyMatch(names, field.htmlID)) {\n      return true;\n    }\n    if (AutofillService.hasValue(field.htmlName) && this.fuzzyMatch(names, field.htmlName)) {\n      return true;\n    }\n    if (\n      AutofillService.hasValue(field[\"label-tag\"]) &&\n      this.fuzzyMatch(names, field[\"label-tag\"])\n    ) {\n      return true;\n    }\n    if (AutofillService.hasValue(field.placeholder) && this.fuzzyMatch(names, field.placeholder)) {\n      return true;\n    }\n    if (\n      AutofillService.hasValue(field[\"label-left\"]) &&\n      this.fuzzyMatch(names, field[\"label-left\"])\n    ) {\n      return true;\n    }\n    if (\n      AutofillService.hasValue(field[\"label-top\"]) &&\n      this.fuzzyMatch(names, field[\"label-top\"])\n    ) {\n      return true;\n    }\n    if (\n      AutofillService.hasValue(field[\"label-aria\"]) &&\n      this.fuzzyMatch(names, field[\"label-aria\"])\n    ) {\n      return true;\n    }\n\n    return false;\n  }\n\n  private static fuzzyMatch(options: string[], value: string): boolean {\n    if (options == null || options.length === 0 || value == null || value === \"\") {\n      return false;\n    }\n\n    value = value\n      .replace(/(?:\\r\\n|\\r|\\n)/g, \"\")\n      .trim()\n      .toLowerCase();\n\n    for (let i = 0; i < options.length; i++) {\n      if (value.indexOf(options[i]) > -1) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  static hasValue(str: string): boolean {\n    return str && str !== \"\";\n  }\n\n  static setFillScriptForFocus(\n    filledFields: { [id: string]: AutofillField },\n    fillScript: AutofillScript\n  ): AutofillScript {\n    let lastField: AutofillField = null;\n    let lastPasswordField: AutofillField = null;\n\n    for (const opid in filledFields) {\n      // eslint-disable-next-line\n      if (filledFields.hasOwnProperty(opid) && filledFields[opid].viewable) {\n        lastField = filledFields[opid];\n\n        if (filledFields[opid].type === \"password\") {\n          lastPasswordField = filledFields[opid];\n        }\n      }\n    }\n\n    // Prioritize password field over others.\n    if (lastPasswordField) {\n      fillScript.script.push([\"focus_by_opid\", lastPasswordField.opid]);\n    } else if (lastField) {\n      fillScript.script.push([\"focus_by_opid\", lastField.opid]);\n    }\n\n    return fillScript;\n  }\n\n  static fillByOpid(fillScript: AutofillScript, field: AutofillField, value: string): void {\n    if (field.maxLength && value && value.length > field.maxLength) {\n      value = value.substr(0, value.length);\n    }\n    if (field.tagName !== \"span\") {\n      fillScript.script.push([\"click_on_opid\", field.opid]);\n      fillScript.script.push([\"focus_by_opid\", field.opid]);\n    }\n    fillScript.script.push([\"fill_by_opid\", field.opid, value]);\n  }\n\n  static forCustomFieldsOnly(field: AutofillField): boolean {\n    return field.tagName === \"span\";\n  }\n}\n","import { CryptoService } from \"../../abstractions/crypto.service\";\nimport { EncryptedOrganizationKeyData } from \"../../models/data/encryptedOrganizationKeyData\";\n\nimport { EncString } from \"./encString\";\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport abstract class BaseEncryptedOrganizationKey {\n  decrypt: (cryptoService: CryptoService) => Promise<SymmetricCryptoKey>;\n\n  static fromData(data: EncryptedOrganizationKeyData) {\n    switch (data.type) {\n      case \"organization\":\n        return new EncryptedOrganizationKey(data.key);\n\n      case \"provider\":\n        return new ProviderEncryptedOrganizationKey(data.key, data.providerId);\n\n      default:\n        return null;\n    }\n  }\n}\n\nexport class EncryptedOrganizationKey implements BaseEncryptedOrganizationKey {\n  constructor(private key: string) {}\n\n  async decrypt(cryptoService: CryptoService) {\n    const decValue = await cryptoService.rsaDecrypt(this.key);\n    return new SymmetricCryptoKey(decValue);\n  }\n\n  toData(): EncryptedOrganizationKeyData {\n    return {\n      type: \"organization\",\n      key: this.key,\n    };\n  }\n}\n\nexport class ProviderEncryptedOrganizationKey implements BaseEncryptedOrganizationKey {\n  constructor(private key: string, private providerId: string) {}\n\n  async decrypt(cryptoService: CryptoService) {\n    const providerKey = await cryptoService.getProviderKey(this.providerId);\n    const decValue = await cryptoService.decryptToBytes(new EncString(this.key), providerKey);\n    return new SymmetricCryptoKey(decValue);\n  }\n\n  toData(): EncryptedOrganizationKeyData {\n    return {\n      type: \"provider\",\n      key: this.key,\n      providerId: this.providerId,\n    };\n  }\n}\n","import * as bigInt from \"big-integer\";\n\nimport { AbstractEncryptService } from \"../abstractions/abstractEncrypt.service\";\nimport { CryptoService as CryptoServiceAbstraction } from \"../abstractions/crypto.service\";\nimport { CryptoFunctionService } from \"../abstractions/cryptoFunction.service\";\nimport { LogService } from \"../abstractions/log.service\";\nimport { PlatformUtilsService } from \"../abstractions/platformUtils.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { EncryptionType } from \"../enums/encryptionType\";\nimport { HashPurpose } from \"../enums/hashPurpose\";\nimport { KdfType } from \"../enums/kdfType\";\nimport { KeySuffixOptions } from \"../enums/keySuffixOptions\";\nimport { sequentialize } from \"../misc/sequentialize\";\nimport { Utils } from \"../misc/utils\";\nimport { EEFLongWordList } from \"../misc/wordlist\";\nimport { EncryptedOrganizationKeyData } from \"../models/data/encryptedOrganizationKeyData\";\nimport { EncArrayBuffer } from \"../models/domain/encArrayBuffer\";\nimport { EncString } from \"../models/domain/encString\";\nimport { BaseEncryptedOrganizationKey } from \"../models/domain/encryptedOrganizationKey\";\nimport { SymmetricCryptoKey } from \"../models/domain/symmetricCryptoKey\";\nimport { ProfileOrganizationResponse } from \"../models/response/profileOrganizationResponse\";\nimport { ProfileProviderOrganizationResponse } from \"../models/response/profileProviderOrganizationResponse\";\nimport { ProfileProviderResponse } from \"../models/response/profileProviderResponse\";\n\nexport class CryptoService implements CryptoServiceAbstraction {\n  constructor(\n    private cryptoFunctionService: CryptoFunctionService,\n    private encryptService: AbstractEncryptService,\n    protected platformUtilService: PlatformUtilsService,\n    protected logService: LogService,\n    protected stateService: StateService\n  ) {}\n\n  async setKey(key: SymmetricCryptoKey, userId?: string): Promise<any> {\n    await this.stateService.setCryptoMasterKey(key, { userId: userId });\n    await this.storeKey(key, userId);\n  }\n\n  async setKeyHash(keyHash: string): Promise<void> {\n    await this.stateService.setKeyHash(keyHash);\n  }\n\n  async setEncKey(encKey: string): Promise<void> {\n    if (encKey == null) {\n      return;\n    }\n\n    await this.stateService.setDecryptedCryptoSymmetricKey(null);\n    await this.stateService.setEncryptedCryptoSymmetricKey(encKey);\n  }\n\n  async setEncPrivateKey(encPrivateKey: string): Promise<void> {\n    if (encPrivateKey == null) {\n      return;\n    }\n\n    await this.stateService.setDecryptedPrivateKey(null);\n    await this.stateService.setEncryptedPrivateKey(encPrivateKey);\n  }\n\n  async setOrgKeys(\n    orgs: ProfileOrganizationResponse[] = [],\n    providerOrgs: ProfileProviderOrganizationResponse[] = []\n  ): Promise<void> {\n    const encOrgKeyData: { [orgId: string]: EncryptedOrganizationKeyData } = {};\n\n    orgs.forEach((org) => {\n      encOrgKeyData[org.id] = {\n        type: \"organization\",\n        key: org.key,\n      };\n    });\n\n    providerOrgs.forEach((org) => {\n      encOrgKeyData[org.id] = {\n        type: \"provider\",\n        providerId: org.providerId,\n        key: org.key,\n      };\n    });\n\n    await this.stateService.setDecryptedOrganizationKeys(null);\n    return await this.stateService.setEncryptedOrganizationKeys(encOrgKeyData);\n  }\n\n  async setProviderKeys(providers: ProfileProviderResponse[]): Promise<void> {\n    const providerKeys: any = {};\n    providers.forEach((provider) => {\n      providerKeys[provider.id] = provider.key;\n    });\n\n    await this.stateService.setDecryptedProviderKeys(null);\n    return await this.stateService.setEncryptedProviderKeys(providerKeys);\n  }\n\n  async getKey(keySuffix?: KeySuffixOptions, userId?: string): Promise<SymmetricCryptoKey> {\n    const inMemoryKey = await this.stateService.getCryptoMasterKey({ userId: userId });\n\n    if (inMemoryKey != null) {\n      return inMemoryKey;\n    }\n\n    keySuffix ||= KeySuffixOptions.Auto;\n    const symmetricKey = await this.getKeyFromStorage(keySuffix, userId);\n\n    if (symmetricKey != null) {\n      // TODO: Refactor here so get key doesn't also set key\n      this.setKey(symmetricKey, userId);\n    }\n\n    return symmetricKey;\n  }\n\n  async getKeyFromStorage(\n    keySuffix: KeySuffixOptions,\n    userId?: string\n  ): Promise<SymmetricCryptoKey> {\n    const key = await this.retrieveKeyFromStorage(keySuffix, userId);\n    if (key != null) {\n      const symmetricKey = new SymmetricCryptoKey(Utils.fromB64ToArray(key).buffer);\n\n      if (!(await this.validateKey(symmetricKey))) {\n        this.logService.warning(\"Wrong key, throwing away stored key\");\n        await this.clearSecretKeyStore(userId);\n        return null;\n      }\n\n      return symmetricKey;\n    }\n    return null;\n  }\n\n  async getKeyHash(): Promise<string> {\n    return await this.stateService.getKeyHash();\n  }\n\n  async compareAndUpdateKeyHash(masterPassword: string, key: SymmetricCryptoKey): Promise<boolean> {\n    const storedKeyHash = await this.getKeyHash();\n    if (masterPassword != null && storedKeyHash != null) {\n      const localKeyHash = await this.hashPassword(\n        masterPassword,\n        key,\n        HashPurpose.LocalAuthorization\n      );\n      if (localKeyHash != null && storedKeyHash === localKeyHash) {\n        return true;\n      }\n\n      // TODO: remove serverKeyHash check in 1-2 releases after everyone's keyHash has been updated\n      const serverKeyHash = await this.hashPassword(\n        masterPassword,\n        key,\n        HashPurpose.ServerAuthorization\n      );\n      if (serverKeyHash != null && storedKeyHash === serverKeyHash) {\n        await this.setKeyHash(localKeyHash);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  @sequentialize(() => \"getEncKey\")\n  getEncKey(key: SymmetricCryptoKey = null): Promise<SymmetricCryptoKey> {\n    return this.getEncKeyHelper(key);\n  }\n\n  async getPublicKey(): Promise<ArrayBuffer> {\n    const inMemoryPublicKey = await this.stateService.getPublicKey();\n    if (inMemoryPublicKey != null) {\n      return inMemoryPublicKey;\n    }\n\n    const privateKey = await this.getPrivateKey();\n    if (privateKey == null) {\n      return null;\n    }\n\n    const publicKey = await this.cryptoFunctionService.rsaExtractPublicKey(privateKey);\n    await this.stateService.setPublicKey(publicKey);\n    return publicKey;\n  }\n\n  async getPrivateKey(): Promise<ArrayBuffer> {\n    const decryptedPrivateKey = await this.stateService.getDecryptedPrivateKey();\n    if (decryptedPrivateKey != null) {\n      return decryptedPrivateKey;\n    }\n\n    const encPrivateKey = await this.stateService.getEncryptedPrivateKey();\n    if (encPrivateKey == null) {\n      return null;\n    }\n\n    const privateKey = await this.decryptToBytes(new EncString(encPrivateKey), null);\n    await this.stateService.setDecryptedPrivateKey(privateKey);\n    return privateKey;\n  }\n\n  async getFingerprint(userId: string, publicKey?: ArrayBuffer): Promise<string[]> {\n    if (publicKey == null) {\n      publicKey = await this.getPublicKey();\n    }\n    if (publicKey === null) {\n      throw new Error(\"No public key available.\");\n    }\n    const keyFingerprint = await this.cryptoFunctionService.hash(publicKey, \"sha256\");\n    const userFingerprint = await this.cryptoFunctionService.hkdfExpand(\n      keyFingerprint,\n      userId,\n      32,\n      \"sha256\"\n    );\n    return this.hashPhrase(userFingerprint);\n  }\n\n  @sequentialize(() => \"getOrgKeys\")\n  async getOrgKeys(): Promise<Map<string, SymmetricCryptoKey>> {\n    const result: Map<string, SymmetricCryptoKey> = new Map<string, SymmetricCryptoKey>();\n    const decryptedOrganizationKeys = await this.stateService.getDecryptedOrganizationKeys();\n    if (decryptedOrganizationKeys != null && decryptedOrganizationKeys.size > 0) {\n      return decryptedOrganizationKeys;\n    }\n\n    const encOrgKeyData = await this.stateService.getEncryptedOrganizationKeys();\n    if (encOrgKeyData == null) {\n      return null;\n    }\n\n    let setKey = false;\n\n    for (const orgId of Object.keys(encOrgKeyData)) {\n      if (result.has(orgId)) {\n        continue;\n      }\n\n      const encOrgKey = BaseEncryptedOrganizationKey.fromData(encOrgKeyData[orgId]);\n      const decOrgKey = await encOrgKey.decrypt(this);\n      result.set(orgId, decOrgKey);\n\n      setKey = true;\n    }\n\n    if (setKey) {\n      await this.stateService.setDecryptedOrganizationKeys(result);\n    }\n\n    return result;\n  }\n\n  async getOrgKey(orgId: string): Promise<SymmetricCryptoKey> {\n    if (orgId == null) {\n      return null;\n    }\n\n    const orgKeys = await this.getOrgKeys();\n    if (orgKeys == null || !orgKeys.has(orgId)) {\n      return null;\n    }\n\n    return orgKeys.get(orgId);\n  }\n\n  @sequentialize(() => \"getProviderKeys\")\n  async getProviderKeys(): Promise<Map<string, SymmetricCryptoKey>> {\n    const providerKeys: Map<string, SymmetricCryptoKey> = new Map<string, SymmetricCryptoKey>();\n    const decryptedProviderKeys = await this.stateService.getDecryptedProviderKeys();\n    if (decryptedProviderKeys != null && decryptedProviderKeys.size > 0) {\n      return decryptedProviderKeys;\n    }\n\n    const encProviderKeys = await this.stateService.getEncryptedProviderKeys();\n    if (encProviderKeys == null) {\n      return null;\n    }\n\n    let setKey = false;\n\n    for (const orgId in encProviderKeys) {\n      // eslint-disable-next-line\n      if (!encProviderKeys.hasOwnProperty(orgId)) {\n        continue;\n      }\n\n      const decValue = await this.rsaDecrypt(encProviderKeys[orgId]);\n      providerKeys.set(orgId, new SymmetricCryptoKey(decValue));\n      setKey = true;\n    }\n\n    if (setKey) {\n      await this.stateService.setDecryptedProviderKeys(providerKeys);\n    }\n\n    return providerKeys;\n  }\n\n  async getProviderKey(providerId: string): Promise<SymmetricCryptoKey> {\n    if (providerId == null) {\n      return null;\n    }\n\n    const providerKeys = await this.getProviderKeys();\n    if (providerKeys == null || !providerKeys.has(providerId)) {\n      return null;\n    }\n\n    return providerKeys.get(providerId);\n  }\n\n  async hasKey(): Promise<boolean> {\n    return (\n      (await this.hasKeyInMemory()) ||\n      (await this.hasKeyStored(KeySuffixOptions.Auto)) ||\n      (await this.hasKeyStored(KeySuffixOptions.Biometric))\n    );\n  }\n\n  async hasKeyInMemory(userId?: string): Promise<boolean> {\n    return (await this.stateService.getCryptoMasterKey({ userId: userId })) != null;\n  }\n\n  async hasKeyStored(keySuffix: KeySuffixOptions, userId?: string): Promise<boolean> {\n    switch (keySuffix) {\n      case KeySuffixOptions.Auto:\n        return (await this.stateService.getCryptoMasterKeyAuto({ userId: userId })) != null;\n      case KeySuffixOptions.Biometric:\n        return (await this.stateService.hasCryptoMasterKeyBiometric({ userId: userId })) === true;\n      default:\n        return false;\n    }\n  }\n\n  async hasEncKey(): Promise<boolean> {\n    return (await this.stateService.getEncryptedCryptoSymmetricKey()) != null;\n  }\n\n  async clearKey(clearSecretStorage = true, userId?: string): Promise<any> {\n    await this.stateService.setCryptoMasterKey(null, { userId: userId });\n    if (clearSecretStorage) {\n      await this.clearSecretKeyStore(userId);\n    }\n  }\n\n  async clearStoredKey(keySuffix: KeySuffixOptions) {\n    keySuffix === KeySuffixOptions.Auto\n      ? await this.stateService.setCryptoMasterKeyAuto(null)\n      : await this.stateService.setCryptoMasterKeyBiometric(null);\n  }\n\n  async clearKeyHash(userId?: string): Promise<any> {\n    return await this.stateService.setKeyHash(null, { userId: userId });\n  }\n\n  async clearEncKey(memoryOnly?: boolean, userId?: string): Promise<void> {\n    await this.stateService.setDecryptedCryptoSymmetricKey(null, { userId: userId });\n    if (!memoryOnly) {\n      await this.stateService.setEncryptedCryptoSymmetricKey(null, { userId: userId });\n    }\n  }\n\n  async clearKeyPair(memoryOnly?: boolean, userId?: string): Promise<any> {\n    const keysToClear: Promise<void>[] = [\n      this.stateService.setDecryptedPrivateKey(null, { userId: userId }),\n      this.stateService.setPublicKey(null, { userId: userId }),\n    ];\n    if (!memoryOnly) {\n      keysToClear.push(this.stateService.setEncryptedPrivateKey(null, { userId: userId }));\n    }\n    return Promise.all(keysToClear);\n  }\n\n  async clearOrgKeys(memoryOnly?: boolean, userId?: string): Promise<void> {\n    await this.stateService.setDecryptedOrganizationKeys(null, { userId: userId });\n    if (!memoryOnly) {\n      await this.stateService.setEncryptedOrganizationKeys(null, { userId: userId });\n    }\n  }\n\n  async clearProviderKeys(memoryOnly?: boolean, userId?: string): Promise<void> {\n    await this.stateService.setDecryptedProviderKeys(null, { userId: userId });\n    if (!memoryOnly) {\n      await this.stateService.setEncryptedProviderKeys(null, { userId: userId });\n    }\n  }\n\n  async clearPinProtectedKey(userId?: string): Promise<any> {\n    return await this.stateService.setEncryptedPinProtected(null, { userId: userId });\n  }\n\n  async clearKeys(userId?: string): Promise<any> {\n    await this.clearKey(true, userId);\n    await this.clearKeyHash(userId);\n    await this.clearOrgKeys(false, userId);\n    await this.clearProviderKeys(false, userId);\n    await this.clearEncKey(false, userId);\n    await this.clearKeyPair(false, userId);\n    await this.clearPinProtectedKey(userId);\n  }\n\n  async toggleKey(): Promise<any> {\n    const key = await this.getKey();\n\n    await this.setKey(key);\n  }\n\n  async makeKey(\n    password: string,\n    salt: string,\n    kdf: KdfType,\n    kdfIterations: number\n  ): Promise<SymmetricCryptoKey> {\n    let key: ArrayBuffer = null;\n    if (kdf == null || kdf === KdfType.PBKDF2_SHA256) {\n      if (kdfIterations == null) {\n        kdfIterations = 5000;\n      } else if (kdfIterations < 5000) {\n        throw new Error(\"PBKDF2 iteration minimum is 5000.\");\n      }\n      key = await this.cryptoFunctionService.pbkdf2(password, salt, \"sha256\", kdfIterations);\n    } else {\n      throw new Error(\"Unknown Kdf.\");\n    }\n    return new SymmetricCryptoKey(key);\n  }\n\n  async makeKeyFromPin(\n    pin: string,\n    salt: string,\n    kdf: KdfType,\n    kdfIterations: number,\n    protectedKeyCs: EncString = null\n  ): Promise<SymmetricCryptoKey> {\n    if (protectedKeyCs == null) {\n      const pinProtectedKey = await this.stateService.getEncryptedPinProtected();\n      if (pinProtectedKey == null) {\n        throw new Error(\"No PIN protected key found.\");\n      }\n      protectedKeyCs = new EncString(pinProtectedKey);\n    }\n    const pinKey = await this.makePinKey(pin, salt, kdf, kdfIterations);\n    const decKey = await this.decryptToBytes(protectedKeyCs, pinKey);\n    return new SymmetricCryptoKey(decKey);\n  }\n\n  async makeShareKey(): Promise<[EncString, SymmetricCryptoKey]> {\n    const shareKey = await this.cryptoFunctionService.randomBytes(64);\n    const publicKey = await this.getPublicKey();\n    const encShareKey = await this.rsaEncrypt(shareKey, publicKey);\n    return [encShareKey, new SymmetricCryptoKey(shareKey)];\n  }\n\n  async makeKeyPair(key?: SymmetricCryptoKey): Promise<[string, EncString]> {\n    const keyPair = await this.cryptoFunctionService.rsaGenerateKeyPair(2048);\n    const publicB64 = Utils.fromBufferToB64(keyPair[0]);\n    const privateEnc = await this.encrypt(keyPair[1], key);\n    return [publicB64, privateEnc];\n  }\n\n  async makePinKey(\n    pin: string,\n    salt: string,\n    kdf: KdfType,\n    kdfIterations: number\n  ): Promise<SymmetricCryptoKey> {\n    const pinKey = await this.makeKey(pin, salt, kdf, kdfIterations);\n    return await this.stretchKey(pinKey);\n  }\n\n  async makeSendKey(keyMaterial: ArrayBuffer): Promise<SymmetricCryptoKey> {\n    const sendKey = await this.cryptoFunctionService.hkdf(\n      keyMaterial,\n      \"bitwarden-send\",\n      \"send\",\n      64,\n      \"sha256\"\n    );\n    return new SymmetricCryptoKey(sendKey);\n  }\n\n  async hashPassword(\n    password: string,\n    key: SymmetricCryptoKey,\n    hashPurpose?: HashPurpose\n  ): Promise<string> {\n    if (key == null) {\n      key = await this.getKey();\n    }\n    if (password == null || key == null) {\n      throw new Error(\"Invalid parameters.\");\n    }\n\n    const iterations = hashPurpose === HashPurpose.LocalAuthorization ? 2 : 1;\n    const hash = await this.cryptoFunctionService.pbkdf2(key.key, password, \"sha256\", iterations);\n    return Utils.fromBufferToB64(hash);\n  }\n\n  async makeEncKey(key: SymmetricCryptoKey): Promise<[SymmetricCryptoKey, EncString]> {\n    const theKey = await this.getKeyForUserEncryption(key);\n    const encKey = await this.cryptoFunctionService.randomBytes(64);\n    return this.buildEncKey(theKey, encKey);\n  }\n\n  async remakeEncKey(\n    key: SymmetricCryptoKey,\n    encKey?: SymmetricCryptoKey\n  ): Promise<[SymmetricCryptoKey, EncString]> {\n    if (encKey == null) {\n      encKey = await this.getEncKey();\n    }\n    return this.buildEncKey(key, encKey.key);\n  }\n\n  /**\n   * @deprecated July 25 2022: Get the key you need from CryptoService (getKeyForUserEncryption or getOrgKey)\n   * and then call encryptService.encrypt\n   */\n  async encrypt(plainValue: string | ArrayBuffer, key?: SymmetricCryptoKey): Promise<EncString> {\n    key = await this.getKeyForUserEncryption(key);\n    return await this.encryptService.encrypt(plainValue, key);\n  }\n\n  /**\n   * @deprecated July 25 2022: Get the key you need from CryptoService (getKeyForUserEncryption or getOrgKey)\n   * and then call encryptService.encryptToBytes\n   */\n  async encryptToBytes(plainValue: ArrayBuffer, key?: SymmetricCryptoKey): Promise<EncArrayBuffer> {\n    key = await this.getKeyForUserEncryption(key);\n    return this.encryptService.encryptToBytes(plainValue, key);\n  }\n\n  async rsaEncrypt(data: ArrayBuffer, publicKey?: ArrayBuffer): Promise<EncString> {\n    if (publicKey == null) {\n      publicKey = await this.getPublicKey();\n    }\n    if (publicKey == null) {\n      throw new Error(\"Public key unavailable.\");\n    }\n\n    const encBytes = await this.cryptoFunctionService.rsaEncrypt(data, publicKey, \"sha1\");\n    return new EncString(EncryptionType.Rsa2048_OaepSha1_B64, Utils.fromBufferToB64(encBytes));\n  }\n\n  async rsaDecrypt(encValue: string, privateKeyValue?: ArrayBuffer): Promise<ArrayBuffer> {\n    const headerPieces = encValue.split(\".\");\n    let encType: EncryptionType = null;\n    let encPieces: string[];\n\n    if (headerPieces.length === 1) {\n      encType = EncryptionType.Rsa2048_OaepSha256_B64;\n      encPieces = [headerPieces[0]];\n    } else if (headerPieces.length === 2) {\n      try {\n        encType = parseInt(headerPieces[0], null);\n        encPieces = headerPieces[1].split(\"|\");\n      } catch (e) {\n        this.logService.error(e);\n      }\n    }\n\n    switch (encType) {\n      case EncryptionType.Rsa2048_OaepSha256_B64:\n      case EncryptionType.Rsa2048_OaepSha1_B64:\n      case EncryptionType.Rsa2048_OaepSha256_HmacSha256_B64: // HmacSha256 types are deprecated\n      case EncryptionType.Rsa2048_OaepSha1_HmacSha256_B64:\n        break;\n      default:\n        throw new Error(\"encType unavailable.\");\n    }\n\n    if (encPieces == null || encPieces.length <= 0) {\n      throw new Error(\"encPieces unavailable.\");\n    }\n\n    const data = Utils.fromB64ToArray(encPieces[0]).buffer;\n    const privateKey = privateKeyValue ?? (await this.getPrivateKey());\n    if (privateKey == null) {\n      throw new Error(\"No private key.\");\n    }\n\n    let alg: \"sha1\" | \"sha256\" = \"sha1\";\n    switch (encType) {\n      case EncryptionType.Rsa2048_OaepSha256_B64:\n      case EncryptionType.Rsa2048_OaepSha256_HmacSha256_B64:\n        alg = \"sha256\";\n        break;\n      case EncryptionType.Rsa2048_OaepSha1_B64:\n      case EncryptionType.Rsa2048_OaepSha1_HmacSha256_B64:\n        break;\n      default:\n        throw new Error(\"encType unavailable.\");\n    }\n\n    return this.cryptoFunctionService.rsaDecrypt(data, privateKey, alg);\n  }\n\n  /**\n   * @deprecated July 25 2022: Get the key you need from CryptoService (getKeyForUserEncryption or getOrgKey)\n   * and then call encryptService.decryptToBytes\n   */\n  async decryptToBytes(encString: EncString, key?: SymmetricCryptoKey): Promise<ArrayBuffer> {\n    const keyForEnc = await this.getKeyForUserEncryption(key);\n    return this.encryptService.decryptToBytes(encString, keyForEnc);\n  }\n\n  /**\n   * @deprecated July 25 2022: Get the key you need from CryptoService (getKeyForUserEncryption or getOrgKey)\n   * and then call encryptService.decryptToUtf8\n   */\n  async decryptToUtf8(encString: EncString, key?: SymmetricCryptoKey): Promise<string> {\n    key = await this.getKeyForUserEncryption(key);\n    return await this.encryptService.decryptToUtf8(encString, key);\n  }\n\n  /**\n   * @deprecated July 25 2022: Get the key you need from CryptoService (getKeyForUserEncryption or getOrgKey)\n   * and then call encryptService.decryptToBytes\n   */\n  async decryptFromBytes(encBuffer: EncArrayBuffer, key: SymmetricCryptoKey): Promise<ArrayBuffer> {\n    if (encBuffer == null) {\n      throw new Error(\"No buffer provided for decryption.\");\n    }\n\n    key = await this.getKeyForUserEncryption(key);\n\n    return this.encryptService.decryptToBytes(encBuffer, key);\n  }\n\n  // EFForg/OpenWireless\n  // ref https://github.com/EFForg/OpenWireless/blob/master/app/js/diceware.js\n  async randomNumber(min: number, max: number): Promise<number> {\n    let rval = 0;\n    const range = max - min + 1;\n    const bitsNeeded = Math.ceil(Math.log2(range));\n    if (bitsNeeded > 53) {\n      throw new Error(\"We cannot generate numbers larger than 53 bits.\");\n    }\n\n    const bytesNeeded = Math.ceil(bitsNeeded / 8);\n    const mask = Math.pow(2, bitsNeeded) - 1;\n    // 7776 -> (2^13 = 8192) -1 == 8191 or 0x00001111 11111111\n\n    // Fill a byte array with N random numbers\n    const byteArray = new Uint8Array(await this.cryptoFunctionService.randomBytes(bytesNeeded));\n\n    let p = (bytesNeeded - 1) * 8;\n    for (let i = 0; i < bytesNeeded; i++) {\n      rval += byteArray[i] * Math.pow(2, p);\n      p -= 8;\n    }\n\n    // Use & to apply the mask and reduce the number of recursive lookups\n    rval = rval & mask;\n\n    if (rval >= range) {\n      // Integer out of acceptable range\n      return this.randomNumber(min, max);\n    }\n\n    // Return an integer that falls within the range\n    return min + rval;\n  }\n\n  async validateKey(key: SymmetricCryptoKey) {\n    try {\n      const encPrivateKey = await this.stateService.getEncryptedPrivateKey();\n      const encKey = await this.getEncKeyHelper(key);\n      if (encPrivateKey == null || encKey == null) {\n        return false;\n      }\n\n      const privateKey = await this.decryptToBytes(new EncString(encPrivateKey), encKey);\n      await this.cryptoFunctionService.rsaExtractPublicKey(privateKey);\n    } catch (e) {\n      return false;\n    }\n\n    return true;\n  }\n\n  // ---HELPERS---\n\n  protected async storeKey(key: SymmetricCryptoKey, userId?: string) {\n    if (await this.shouldStoreKey(KeySuffixOptions.Auto, userId)) {\n      await this.stateService.setCryptoMasterKeyAuto(key.keyB64, { userId: userId });\n    } else if (await this.shouldStoreKey(KeySuffixOptions.Biometric, userId)) {\n      await this.stateService.setCryptoMasterKeyBiometric(key.keyB64, { userId: userId });\n    } else {\n      await this.stateService.setCryptoMasterKeyAuto(null, { userId: userId });\n      await this.stateService.setCryptoMasterKeyBiometric(null, { userId: userId });\n    }\n  }\n\n  protected async shouldStoreKey(keySuffix: KeySuffixOptions, userId?: string) {\n    let shouldStoreKey = false;\n    if (keySuffix === KeySuffixOptions.Auto) {\n      const vaultTimeout = await this.stateService.getVaultTimeout({ userId: userId });\n      shouldStoreKey = vaultTimeout == null;\n    } else if (keySuffix === KeySuffixOptions.Biometric) {\n      const biometricUnlock = await this.stateService.getBiometricUnlock({ userId: userId });\n      shouldStoreKey = biometricUnlock && this.platformUtilService.supportsSecureStorage();\n    }\n    return shouldStoreKey;\n  }\n\n  protected async retrieveKeyFromStorage(keySuffix: KeySuffixOptions, userId?: string) {\n    return keySuffix === KeySuffixOptions.Auto\n      ? await this.stateService.getCryptoMasterKeyAuto({ userId: userId })\n      : await this.stateService.getCryptoMasterKeyBiometric({ userId: userId });\n  }\n\n  async getKeyForUserEncryption(key?: SymmetricCryptoKey): Promise<SymmetricCryptoKey> {\n    if (key != null) {\n      return key;\n    }\n\n    const encKey = await this.getEncKey();\n    if (encKey != null) {\n      return encKey;\n    }\n\n    // Legacy support: encryption used to be done with the user key (derived from master password).\n    // Users who have not migrated will have a null encKey and must use the user key instead.\n    return await this.getKey();\n  }\n\n  private async stretchKey(key: SymmetricCryptoKey): Promise<SymmetricCryptoKey> {\n    const newKey = new Uint8Array(64);\n    const encKey = await this.cryptoFunctionService.hkdfExpand(key.key, \"enc\", 32, \"sha256\");\n    const macKey = await this.cryptoFunctionService.hkdfExpand(key.key, \"mac\", 32, \"sha256\");\n    newKey.set(new Uint8Array(encKey));\n    newKey.set(new Uint8Array(macKey), 32);\n    return new SymmetricCryptoKey(newKey.buffer);\n  }\n\n  private async hashPhrase(hash: ArrayBuffer, minimumEntropy = 64) {\n    const entropyPerWord = Math.log(EEFLongWordList.length) / Math.log(2);\n    let numWords = Math.ceil(minimumEntropy / entropyPerWord);\n\n    const hashArr = Array.from(new Uint8Array(hash));\n    const entropyAvailable = hashArr.length * 4;\n    if (numWords * entropyPerWord > entropyAvailable) {\n      throw new Error(\"Output entropy of hash function is too small\");\n    }\n\n    const phrase: string[] = [];\n    let hashNumber = bigInt.fromArray(hashArr, 256);\n    while (numWords--) {\n      const remainder = hashNumber.mod(EEFLongWordList.length);\n      hashNumber = hashNumber.divide(EEFLongWordList.length);\n      phrase.push(EEFLongWordList[remainder as any]);\n    }\n    return phrase;\n  }\n\n  private async buildEncKey(\n    key: SymmetricCryptoKey,\n    encKey: ArrayBuffer\n  ): Promise<[SymmetricCryptoKey, EncString]> {\n    let encKeyEnc: EncString = null;\n    if (key.key.byteLength === 32) {\n      const newKey = await this.stretchKey(key);\n      encKeyEnc = await this.encrypt(encKey, newKey);\n    } else if (key.key.byteLength === 64) {\n      encKeyEnc = await this.encrypt(encKey, key);\n    } else {\n      throw new Error(\"Invalid key size.\");\n    }\n    return [new SymmetricCryptoKey(encKey), encKeyEnc];\n  }\n\n  private async clearSecretKeyStore(userId?: string): Promise<void> {\n    await this.stateService.setCryptoMasterKeyAuto(null, { userId: userId });\n    await this.stateService.setCryptoMasterKeyBiometric(null, { userId: userId });\n  }\n\n  private async getEncKeyHelper(key: SymmetricCryptoKey = null): Promise<SymmetricCryptoKey> {\n    const inMemoryKey = await this.stateService.getDecryptedCryptoSymmetricKey();\n    if (inMemoryKey != null) {\n      return inMemoryKey;\n    }\n\n    const encKey = await this.stateService.getEncryptedCryptoSymmetricKey();\n    if (encKey == null) {\n      return null;\n    }\n\n    if (key == null) {\n      key = await this.getKey();\n    }\n    if (key == null) {\n      return null;\n    }\n\n    let decEncKey: ArrayBuffer;\n    const encKeyCipher = new EncString(encKey);\n    if (encKeyCipher.encryptionType === EncryptionType.AesCbc256_B64) {\n      decEncKey = await this.decryptToBytes(encKeyCipher, key);\n    } else if (encKeyCipher.encryptionType === EncryptionType.AesCbc256_HmacSha256_B64) {\n      const newKey = await this.stretchKey(key);\n      decEncKey = await this.decryptToBytes(encKeyCipher, newKey);\n    } else {\n      throw new Error(\"Unsupported encKey type.\");\n    }\n    if (decEncKey == null) {\n      return null;\n    }\n    const symmetricCryptoKey = new SymmetricCryptoKey(decEncKey);\n    await this.stateService.setDecryptedCryptoSymmetricKey(symmetricCryptoKey);\n    return symmetricCryptoKey;\n  }\n}\n","export enum ClientType {\n  Web = \"web\",\n  Browser = \"browser\",\n  Desktop = \"desktop\",\n  Mobile = \"mobile\",\n  Cli = \"cli\",\n  DirectoryConnector = \"connector\",\n}\n","import { KeySuffixOptions } from \"@bitwarden/common/enums/keySuffixOptions\";\nimport { CryptoService } from \"@bitwarden/common/services/crypto.service\";\n\nexport class BrowserCryptoService extends CryptoService {\n  protected async retrieveKeyFromStorage(keySuffix: KeySuffixOptions) {\n    if (keySuffix === \"biometric\") {\n      await this.platformUtilService.authenticateBiometric();\n      return (await this.getKey())?.keyB64;\n    }\n\n    return await super.retrieveKeyFromStorage(keySuffix);\n  }\n}\n","import { MessagingService } from \"@bitwarden/common/abstractions/messaging.service\";\n\nimport { BrowserApi } from \"../browser/browserApi\";\n\nexport default class BrowserMessagingService implements MessagingService {\n  send(subscriber: string, arg: any = {}) {\n    return BrowserApi.sendMessage(subscriber, arg);\n  }\n}\n","import { MessagingService } from \"@bitwarden/common/abstractions/messaging.service\";\n\nexport default class BrowserMessagingPrivateModeBackgroundService implements MessagingService {\n  send(subscriber: string, arg: any = {}) {\n    const message = Object.assign({}, { command: subscriber }, arg);\n    (window as any).bitwardenPopupMainMessageListener(message);\n  }\n}\n","import { MessagingService } from \"@bitwarden/common/abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { ClientType } from \"@bitwarden/common/enums/clientType\";\nimport { DeviceType } from \"@bitwarden/common/enums/deviceType\";\n\nimport { BrowserApi } from \"../browser/browserApi\";\nimport { SafariApp } from \"../browser/safariApp\";\nimport { StateService } from \"../services/abstractions/state.service\";\n\nconst DialogPromiseExpiration = 600000; // 10 minutes\n\nexport default class BrowserPlatformUtilsService implements PlatformUtilsService {\n  private showDialogResolves = new Map<number, { resolve: (value: boolean) => void; date: Date }>();\n  private passwordDialogResolves = new Map<\n    number,\n    { tryResolve: (canceled: boolean, password: string) => Promise<boolean>; date: Date }\n  >();\n  private deviceCache: DeviceType = null;\n\n  constructor(\n    private messagingService: MessagingService,\n    private stateService: StateService,\n    private clipboardWriteCallback: (clipboardValue: string, clearMs: number) => void,\n    private biometricCallback: () => Promise<boolean>\n  ) {}\n\n  getDevice(): DeviceType {\n    if (this.deviceCache) {\n      return this.deviceCache;\n    }\n\n    if (\n      navigator.userAgent.indexOf(\" Firefox/\") !== -1 ||\n      navigator.userAgent.indexOf(\" Gecko/\") !== -1\n    ) {\n      this.deviceCache = DeviceType.FirefoxExtension;\n    } else if (\n      (!!(window as any).opr && !!opr.addons) ||\n      !!(window as any).opera ||\n      navigator.userAgent.indexOf(\" OPR/\") >= 0\n    ) {\n      this.deviceCache = DeviceType.OperaExtension;\n    } else if (navigator.userAgent.indexOf(\" Edg/\") !== -1) {\n      this.deviceCache = DeviceType.EdgeExtension;\n    } else if (navigator.userAgent.indexOf(\" Vivaldi/\") !== -1) {\n      this.deviceCache = DeviceType.VivaldiExtension;\n    } else if ((window as any).chrome && navigator.userAgent.indexOf(\" Chrome/\") !== -1) {\n      this.deviceCache = DeviceType.ChromeExtension;\n    } else if (navigator.userAgent.indexOf(\" Safari/\") !== -1) {\n      this.deviceCache = DeviceType.SafariExtension;\n    }\n\n    return this.deviceCache;\n  }\n\n  getDeviceString(): string {\n    const device = DeviceType[this.getDevice()].toLowerCase();\n    return device.replace(\"extension\", \"\");\n  }\n\n  getClientType(): ClientType {\n    return ClientType.Browser;\n  }\n\n  isFirefox(): boolean {\n    return this.getDevice() === DeviceType.FirefoxExtension;\n  }\n\n  isChrome(): boolean {\n    return this.getDevice() === DeviceType.ChromeExtension;\n  }\n\n  isEdge(): boolean {\n    return this.getDevice() === DeviceType.EdgeExtension;\n  }\n\n  isOpera(): boolean {\n    return this.getDevice() === DeviceType.OperaExtension;\n  }\n\n  isVivaldi(): boolean {\n    return this.getDevice() === DeviceType.VivaldiExtension;\n  }\n\n  isSafari(): boolean {\n    return this.getDevice() === DeviceType.SafariExtension;\n  }\n\n  isIE(): boolean {\n    return false;\n  }\n\n  isMacAppStore(): boolean {\n    return false;\n  }\n\n  async isViewOpen(): Promise<boolean> {\n    if (await BrowserApi.isPopupOpen()) {\n      return true;\n    }\n\n    if (this.isSafari()) {\n      return false;\n    }\n\n    const sidebarView = this.sidebarViewName();\n    const sidebarOpen =\n      sidebarView != null && chrome.extension.getViews({ type: sidebarView }).length > 0;\n    if (sidebarOpen) {\n      return true;\n    }\n\n    const tabOpen = chrome.extension.getViews({ type: \"tab\" }).length > 0;\n    return tabOpen;\n  }\n\n  lockTimeout(): number {\n    return null;\n  }\n\n  launchUri(uri: string, options?: any): void {\n    BrowserApi.createNewTab(uri, options && options.extensionPage === true);\n  }\n\n  getApplicationVersion(): Promise<string> {\n    return Promise.resolve(BrowserApi.getApplicationVersion());\n  }\n\n  supportsWebAuthn(win: Window): boolean {\n    return typeof PublicKeyCredential !== \"undefined\";\n  }\n\n  supportsDuo(): boolean {\n    return true;\n  }\n\n  showToast(\n    type: \"error\" | \"success\" | \"warning\" | \"info\",\n    title: string,\n    text: string | string[],\n    options?: any\n  ): void {\n    this.messagingService.send(\"showToast\", {\n      text: text,\n      title: title,\n      type: type,\n      options: options,\n    });\n  }\n\n  showDialog(\n    body: string,\n    title?: string,\n    confirmText?: string,\n    cancelText?: string,\n    type?: string,\n    bodyIsHtml = false\n  ) {\n    const dialogId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n    this.messagingService.send(\"showDialog\", {\n      text: bodyIsHtml ? null : body,\n      html: bodyIsHtml ? body : null,\n      title: title,\n      confirmText: confirmText,\n      cancelText: cancelText,\n      type: type,\n      dialogId: dialogId,\n    });\n    return new Promise<boolean>((resolve) => {\n      this.showDialogResolves.set(dialogId, { resolve: resolve, date: new Date() });\n    });\n  }\n\n  isDev(): boolean {\n    return process.env.ENV === \"development\";\n  }\n\n  isSelfHost(): boolean {\n    return false;\n  }\n\n  copyToClipboard(text: string, options?: any): void {\n    let win = window;\n    let doc = window.document;\n    if (options && (options.window || options.win)) {\n      win = options.window || options.win;\n      doc = win.document;\n    } else if (options && options.doc) {\n      doc = options.doc;\n    }\n    const clearing = options ? !!options.clearing : false;\n    const clearMs: number = options && options.clearMs ? options.clearMs : null;\n\n    if (this.isSafari()) {\n      SafariApp.sendMessageToApp(\"copyToClipboard\", text).then(() => {\n        if (!clearing && this.clipboardWriteCallback != null) {\n          this.clipboardWriteCallback(text, clearMs);\n        }\n      });\n    } else if (\n      this.isFirefox() &&\n      (win as any).navigator.clipboard &&\n      (win as any).navigator.clipboard.writeText\n    ) {\n      (win as any).navigator.clipboard.writeText(text).then(() => {\n        if (!clearing && this.clipboardWriteCallback != null) {\n          this.clipboardWriteCallback(text, clearMs);\n        }\n      });\n    } else if ((win as any).clipboardData && (win as any).clipboardData.setData) {\n      // IE specific code path to prevent textarea being shown while dialog is visible.\n      (win as any).clipboardData.setData(\"Text\", text);\n      if (!clearing && this.clipboardWriteCallback != null) {\n        this.clipboardWriteCallback(text, clearMs);\n      }\n    } else if (doc.queryCommandSupported && doc.queryCommandSupported(\"copy\")) {\n      if (this.isChrome() && text === \"\") {\n        text = \"\\u0000\";\n      }\n\n      const textarea = doc.createElement(\"textarea\");\n      textarea.textContent = text == null || text === \"\" ? \" \" : text;\n      // Prevent scrolling to bottom of page in MS Edge.\n      textarea.style.position = \"fixed\";\n      doc.body.appendChild(textarea);\n      textarea.select();\n\n      try {\n        // Security exception may be thrown by some browsers.\n        if (doc.execCommand(\"copy\") && !clearing && this.clipboardWriteCallback != null) {\n          this.clipboardWriteCallback(text, clearMs);\n        }\n      } catch (e) {\n        // eslint-disable-next-line\n        console.warn(\"Copy to clipboard failed.\", e);\n      } finally {\n        doc.body.removeChild(textarea);\n      }\n    }\n  }\n\n  async readFromClipboard(options?: any): Promise<string> {\n    let win = window;\n    let doc = window.document;\n    if (options && (options.window || options.win)) {\n      win = options.window || options.win;\n      doc = win.document;\n    } else if (options && options.doc) {\n      doc = options.doc;\n    }\n\n    if (this.isSafari()) {\n      return await SafariApp.sendMessageToApp(\"readFromClipboard\");\n    } else if (\n      this.isFirefox() &&\n      (win as any).navigator.clipboard &&\n      (win as any).navigator.clipboard.readText\n    ) {\n      return await (win as any).navigator.clipboard.readText();\n    } else if (doc.queryCommandSupported && doc.queryCommandSupported(\"paste\")) {\n      const textarea = doc.createElement(\"textarea\");\n      // Prevent scrolling to bottom of page in MS Edge.\n      textarea.style.position = \"fixed\";\n      doc.body.appendChild(textarea);\n      textarea.focus();\n      try {\n        // Security exception may be thrown by some browsers.\n        if (doc.execCommand(\"paste\")) {\n          return textarea.value;\n        }\n      } catch (e) {\n        // eslint-disable-next-line\n        console.warn(\"Read from clipboard failed.\", e);\n      } finally {\n        doc.body.removeChild(textarea);\n      }\n    }\n    return null;\n  }\n\n  resolveDialogPromise(dialogId: number, confirmed: boolean) {\n    if (this.showDialogResolves.has(dialogId)) {\n      const resolveObj = this.showDialogResolves.get(dialogId);\n      resolveObj.resolve(confirmed);\n      this.showDialogResolves.delete(dialogId);\n    }\n\n    // Clean up old promises\n    this.showDialogResolves.forEach((val, key) => {\n      const age = new Date().getTime() - val.date.getTime();\n      if (age > DialogPromiseExpiration) {\n        this.showDialogResolves.delete(key);\n      }\n    });\n  }\n\n  async resolvePasswordDialogPromise(\n    dialogId: number,\n    canceled: boolean,\n    password: string\n  ): Promise<boolean> {\n    let result = false;\n    if (this.passwordDialogResolves.has(dialogId)) {\n      const resolveObj = this.passwordDialogResolves.get(dialogId);\n      if (await resolveObj.tryResolve(canceled, password)) {\n        this.passwordDialogResolves.delete(dialogId);\n        result = true;\n      }\n    }\n\n    // Clean up old promises\n    this.passwordDialogResolves.forEach((val, key) => {\n      const age = new Date().getTime() - val.date.getTime();\n      if (age > DialogPromiseExpiration) {\n        this.passwordDialogResolves.delete(key);\n      }\n    });\n\n    return result;\n  }\n\n  async supportsBiometric() {\n    const platformInfo = await BrowserApi.getPlatformInfo();\n    if (platformInfo.os === \"android\") {\n      return false;\n    }\n\n    if (this.isFirefox()) {\n      return parseInt((await browser.runtime.getBrowserInfo()).version.split(\".\")[0], 10) >= 87;\n    }\n\n    return true;\n  }\n\n  authenticateBiometric() {\n    return this.biometricCallback();\n  }\n\n  sidebarViewName(): string {\n    if ((window as any).chrome.sidebarAction && this.isFirefox()) {\n      return \"sidebar\";\n    } else if (this.isOpera() && typeof opr !== \"undefined\" && opr.sidebarAction) {\n      return \"sidebar_panel\";\n    }\n\n    return null;\n  }\n\n  supportsSecureStorage(): boolean {\n    return false;\n  }\n}\n","export enum StorageLocation {\n  Both = \"both\",\n  Disk = \"disk\",\n  Memory = \"memory\",\n}\n","import { StorageOptions } from \"../models/domain/storageOptions\";\n\nexport abstract class AbstractStorageService {\n  abstract get<T>(key: string, options?: StorageOptions): Promise<T>;\n  abstract has(key: string, options?: StorageOptions): Promise<boolean>;\n  abstract save<T>(key: string, obj: T, options?: StorageOptions): Promise<void>;\n  abstract remove(key: string, options?: StorageOptions): Promise<void>;\n}\n\nexport abstract class AbstractCachedStorageService extends AbstractStorageService {\n  abstract getBypassCache<T>(key: string, options?: StorageOptions): Promise<T>;\n}\n","import { Account } from \"./account\";\nimport { GlobalState } from \"./globalState\";\n\nexport class State<\n  TGlobalState extends GlobalState = GlobalState,\n  TAccount extends Account = Account\n> {\n  accounts: { [userId: string]: TAccount } = {};\n  globals: TGlobalState;\n  activeUserId: string;\n  authenticatedAccounts: string[] = [];\n  accountActivity: { [userId: string]: number } = {};\n\n  constructor(globals: TGlobalState) {\n    this.globals = globals;\n  }\n}\n","import { BehaviorSubject } from \"rxjs\";\n\nimport { LogService } from \"../abstractions/log.service\";\nimport { StateService as StateServiceAbstraction } from \"../abstractions/state.service\";\nimport { StateMigrationService } from \"../abstractions/stateMigration.service\";\nimport { AbstractStorageService } from \"../abstractions/storage.service\";\nimport { HtmlStorageLocation } from \"../enums/htmlStorageLocation\";\nimport { KdfType } from \"../enums/kdfType\";\nimport { StorageLocation } from \"../enums/storageLocation\";\nimport { ThemeType } from \"../enums/themeType\";\nimport { UriMatchType } from \"../enums/uriMatchType\";\nimport { StateFactory } from \"../factories/stateFactory\";\nimport { Utils } from \"../misc/utils\";\nimport { CipherData } from \"../models/data/cipherData\";\nimport { CollectionData } from \"../models/data/collectionData\";\nimport { EncryptedOrganizationKeyData } from \"../models/data/encryptedOrganizationKeyData\";\nimport { EventData } from \"../models/data/eventData\";\nimport { FolderData } from \"../models/data/folderData\";\nimport { OrganizationData } from \"../models/data/organizationData\";\nimport { PolicyData } from \"../models/data/policyData\";\nimport { ProviderData } from \"../models/data/providerData\";\nimport { SendData } from \"../models/data/sendData\";\nimport { Account, AccountData, AccountSettings } from \"../models/domain/account\";\nimport { EncString } from \"../models/domain/encString\";\nimport { EnvironmentUrls } from \"../models/domain/environmentUrls\";\nimport { GeneratedPasswordHistory } from \"../models/domain/generatedPasswordHistory\";\nimport { GlobalState } from \"../models/domain/globalState\";\nimport { Policy } from \"../models/domain/policy\";\nimport { State } from \"../models/domain/state\";\nimport { StorageOptions } from \"../models/domain/storageOptions\";\nimport { SymmetricCryptoKey } from \"../models/domain/symmetricCryptoKey\";\nimport { WindowState } from \"../models/domain/windowState\";\nimport { CipherView } from \"../models/view/cipherView\";\nimport { CollectionView } from \"../models/view/collectionView\";\nimport { SendView } from \"../models/view/sendView\";\n\nconst keys = {\n  state: \"state\",\n  global: \"global\",\n  authenticatedAccounts: \"authenticatedAccounts\",\n  activeUserId: \"activeUserId\",\n  tempAccountSettings: \"tempAccountSettings\", // used to hold account specific settings (i.e clear clipboard) between initial migration and first account authentication\n  accountActivity: \"accountActivity\",\n};\n\nconst partialKeys = {\n  autoKey: \"_masterkey_auto\",\n  biometricKey: \"_masterkey_biometric\",\n  masterKey: \"_masterkey\",\n};\n\nexport class StateService<\n  TGlobalState extends GlobalState = GlobalState,\n  TAccount extends Account = Account\n> implements StateServiceAbstraction<TAccount>\n{\n  accounts = new BehaviorSubject<{ [userId: string]: TAccount }>({});\n  private activeAccountSubject = new BehaviorSubject<string>(null);\n  activeAccount$ = this.activeAccountSubject.asObservable();\n\n  private activeAccountUnlockedSubject = new BehaviorSubject<boolean>(false);\n  activeAccountUnlocked$ = this.activeAccountUnlockedSubject.asObservable();\n\n  private hasBeenInited = false;\n  private isRecoveredSession = false;\n\n  private accountDiskCache = new Map<string, TAccount>();\n\n  constructor(\n    protected storageService: AbstractStorageService,\n    protected secureStorageService: AbstractStorageService,\n    protected memoryStorageService: AbstractStorageService,\n    protected logService: LogService,\n    protected stateMigrationService: StateMigrationService,\n    protected stateFactory: StateFactory<TGlobalState, TAccount>,\n    protected useAccountCache: boolean = true\n  ) {\n    // If the account gets changed, verify the new account is unlocked\n    this.activeAccountSubject.subscribe(async (userId) => {\n      if (userId == null && this.activeAccountUnlockedSubject.getValue() == false) {\n        return;\n      } else if (userId == null) {\n        this.activeAccountUnlockedSubject.next(false);\n      }\n\n      // FIXME: This should be refactored into AuthService or a similar service,\n      //  as checking for the existance of the crypto key is a low level\n      //  implementation detail.\n      this.activeAccountUnlockedSubject.next((await this.getCryptoMasterKey()) != null);\n    });\n  }\n\n  async init(): Promise<void> {\n    if (this.hasBeenInited) {\n      return;\n    }\n\n    if (await this.stateMigrationService.needsMigration()) {\n      await this.stateMigrationService.migrate();\n    }\n\n    await this.state().then(async (state) => {\n      if (state == null) {\n        await this.setState(new State<TGlobalState, TAccount>(this.createGlobals()));\n      } else {\n        this.isRecoveredSession = true;\n      }\n    });\n    await this.initAccountState();\n    this.hasBeenInited = true;\n  }\n\n  async initAccountState() {\n    if (this.isRecoveredSession) {\n      return;\n    }\n\n    await this.updateState(async (state) => {\n      state.authenticatedAccounts =\n        (await this.storageService.get<string[]>(keys.authenticatedAccounts)) ?? [];\n      for (const i in state.authenticatedAccounts) {\n        if (i != null) {\n          await this.syncAccountFromDisk(state.authenticatedAccounts[i]);\n        }\n      }\n      const storedActiveUser = await this.storageService.get<string>(keys.activeUserId);\n      if (storedActiveUser != null) {\n        state.activeUserId = storedActiveUser;\n      }\n      await this.pushAccounts();\n      this.activeAccountSubject.next(state.activeUserId);\n\n      return state;\n    });\n  }\n\n  async syncAccountFromDisk(userId: string) {\n    if (userId == null) {\n      return;\n    }\n    await this.updateState(async (state) => {\n      state.accounts[userId] = this.createAccount();\n      const diskAccount = await this.getAccountFromDisk({ userId: userId });\n      state.accounts[userId].profile = diskAccount.profile;\n      return state;\n    });\n  }\n\n  async addAccount(account: TAccount) {\n    account = await this.setAccountEnvironmentUrls(account);\n    await this.updateState(async (state) => {\n      state.authenticatedAccounts.push(account.profile.userId);\n      await this.storageService.save(keys.authenticatedAccounts, state.authenticatedAccounts);\n      state.accounts[account.profile.userId] = account;\n      return state;\n    });\n    await this.scaffoldNewAccountStorage(account);\n    await this.setLastActive(new Date().getTime(), { userId: account.profile.userId });\n    await this.setActiveUser(account.profile.userId);\n    this.activeAccountSubject.next(account.profile.userId);\n  }\n\n  async setActiveUser(userId: string): Promise<void> {\n    this.clearDecryptedDataForActiveUser();\n    await this.updateState(async (state) => {\n      state.activeUserId = userId;\n      await this.storageService.save(keys.activeUserId, userId);\n      this.activeAccountSubject.next(state.activeUserId);\n      return state;\n    });\n\n    await this.pushAccounts();\n  }\n\n  async clean(options?: StorageOptions): Promise<void> {\n    options = this.reconcileOptions(options, await this.defaultInMemoryOptions());\n    await this.deAuthenticateAccount(options.userId);\n    if (options.userId === (await this.state())?.activeUserId) {\n      await this.dynamicallySetActiveUser();\n    }\n\n    await this.removeAccountFromDisk(options?.userId);\n    this.removeAccountFromMemory(options?.userId);\n    await this.pushAccounts();\n  }\n\n  async getAccessToken(options?: StorageOptions): Promise<string> {\n    options = await this.getTimeoutBasedStorageOptions(options);\n    return (await this.getAccount(options))?.tokens?.accessToken;\n  }\n\n  async setAccessToken(value: string, options?: StorageOptions): Promise<void> {\n    options = await this.getTimeoutBasedStorageOptions(options);\n    const account = await this.getAccount(options);\n    account.tokens.accessToken = value;\n    await this.saveAccount(account, options);\n  }\n\n  async getAddEditCipherInfo(options?: StorageOptions): Promise<any> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.data?.addEditCipherInfo;\n  }\n\n  async setAddEditCipherInfo(value: any, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.data.addEditCipherInfo = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  async getAlwaysShowDock(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.alwaysShowDock ?? false\n    );\n  }\n\n  async setAlwaysShowDock(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.alwaysShowDock = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getApiKeyClientId(options?: StorageOptions): Promise<string> {\n    options = await this.getTimeoutBasedStorageOptions(options);\n    return (await this.getAccount(options))?.profile?.apiKeyClientId;\n  }\n\n  async setApiKeyClientId(value: string, options?: StorageOptions): Promise<void> {\n    options = await this.getTimeoutBasedStorageOptions(options);\n    const account = await this.getAccount(options);\n    account.profile.apiKeyClientId = value;\n    await this.saveAccount(account, options);\n  }\n\n  async getApiKeyClientSecret(options?: StorageOptions): Promise<string> {\n    options = await this.getTimeoutBasedStorageOptions(options);\n    return (await this.getAccount(options))?.keys?.apiKeyClientSecret;\n  }\n\n  async setApiKeyClientSecret(value: string, options?: StorageOptions): Promise<void> {\n    options = await this.getTimeoutBasedStorageOptions(options);\n    const account = await this.getAccount(options);\n    account.keys.apiKeyClientSecret = value;\n    await this.saveAccount(account, options);\n  }\n\n  async getAutoConfirmFingerPrints(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.autoConfirmFingerPrints ?? false\n    );\n  }\n\n  async setAutoConfirmFingerprints(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.autoConfirmFingerPrints = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getAutoFillOnPageLoadDefault(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.autoFillOnPageLoadDefault ?? true\n    );\n  }\n\n  async setAutoFillOnPageLoadDefault(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.autoFillOnPageLoadDefault = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getBiometricAwaitingAcceptance(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.biometricAwaitingAcceptance ?? false\n    );\n  }\n\n  async setBiometricAwaitingAcceptance(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.biometricAwaitingAcceptance = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getBiometricFingerprintValidated(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.biometricFingerprintValidated ?? false\n    );\n  }\n\n  async setBiometricFingerprintValidated(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.biometricFingerprintValidated = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getBiometricText(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.biometricText;\n  }\n\n  async setBiometricText(value: string, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.biometricText = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getBiometricUnlock(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.biometricUnlock ?? false\n    );\n  }\n\n  async setBiometricUnlock(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.biometricUnlock = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getCanAccessPremium(options?: StorageOptions): Promise<boolean> {\n    if (!(await this.getIsAuthenticated(options))) {\n      return false;\n    }\n\n    return (\n      (await this.getHasPremiumPersonally(options)) ||\n      (await this.getHasPremiumFromOrganization(options))\n    );\n  }\n\n  async getHasPremiumPersonally(options?: StorageOptions): Promise<boolean> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    return account?.profile?.hasPremiumPersonally;\n  }\n\n  async setHasPremiumPersonally(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.profile.hasPremiumPersonally = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getHasPremiumFromOrganization(options?: StorageOptions): Promise<boolean> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n\n    if (account.profile?.hasPremiumFromOrganization) {\n      return true;\n    }\n\n    // TODO: older server versions won't send the hasPremiumFromOrganization flag, so we're keeping the old logic\n    // for backwards compatibility. It can be removed after everyone has upgraded.\n    const organizations = await this.getOrganizations(options);\n    if (organizations == null) {\n      return false;\n    }\n\n    for (const id of Object.keys(organizations)) {\n      const o = organizations[id];\n      if (o.enabled && o.usersGetPremium && !o.isProviderUser) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  async setHasPremiumFromOrganization(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.profile.hasPremiumFromOrganization = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getClearClipboard(options?: StorageOptions): Promise<number> {\n    return (\n      (\n        await this.getAccount(\n          this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n        )\n      )?.settings?.clearClipboard ?? null\n    );\n  }\n\n  async setClearClipboard(value: number, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.settings.clearClipboard = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getCollapsedGroupings(options?: StorageOptions): Promise<string[]> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.settings?.collapsedGroupings;\n  }\n\n  async setCollapsedGroupings(value: string[], options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.settings.collapsedGroupings = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getConvertAccountToKeyConnector(options?: StorageOptions): Promise<boolean> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.profile?.convertAccountToKeyConnector;\n  }\n\n  async setConvertAccountToKeyConnector(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.profile.convertAccountToKeyConnector = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  @withPrototype(SymmetricCryptoKey, SymmetricCryptoKey.fromJSON)\n  async getCryptoMasterKey(options?: StorageOptions): Promise<SymmetricCryptoKey> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.keys?.cryptoMasterKey;\n  }\n\n  async setCryptoMasterKey(value: SymmetricCryptoKey, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.keys.cryptoMasterKey = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n\n    if (options.userId == this.activeAccountSubject.getValue()) {\n      const nextValue = value != null;\n\n      // Avoid emitting if we are already unlocked\n      if (this.activeAccountUnlockedSubject.getValue() != nextValue) {\n        this.activeAccountUnlockedSubject.next(nextValue);\n      }\n    }\n  }\n\n  async getCryptoMasterKeyAuto(options?: StorageOptions): Promise<string> {\n    options = this.reconcileOptions(\n      this.reconcileOptions(options, { keySuffix: \"auto\" }),\n      await this.defaultSecureStorageOptions()\n    );\n    if (options?.userId == null) {\n      return null;\n    }\n    return await this.secureStorageService.get<string>(\n      `${options.userId}${partialKeys.autoKey}`,\n      options\n    );\n  }\n\n  async setCryptoMasterKeyAuto(value: string, options?: StorageOptions): Promise<void> {\n    options = this.reconcileOptions(\n      this.reconcileOptions(options, { keySuffix: \"auto\" }),\n      await this.defaultSecureStorageOptions()\n    );\n    if (options?.userId == null) {\n      return;\n    }\n    await this.saveSecureStorageKey(partialKeys.autoKey, value, options);\n  }\n\n  async getCryptoMasterKeyB64(options?: StorageOptions): Promise<string> {\n    options = this.reconcileOptions(options, await this.defaultSecureStorageOptions());\n    if (options?.userId == null) {\n      return null;\n    }\n    return await this.secureStorageService.get<string>(\n      `${options?.userId}${partialKeys.masterKey}`,\n      options\n    );\n  }\n\n  async setCryptoMasterKeyB64(value: string, options?: StorageOptions): Promise<void> {\n    options = this.reconcileOptions(options, await this.defaultSecureStorageOptions());\n    if (options?.userId == null) {\n      return;\n    }\n    await this.saveSecureStorageKey(partialKeys.masterKey, value, options);\n  }\n\n  async getCryptoMasterKeyBiometric(options?: StorageOptions): Promise<string> {\n    options = this.reconcileOptions(\n      this.reconcileOptions(options, { keySuffix: \"biometric\" }),\n      await this.defaultSecureStorageOptions()\n    );\n    if (options?.userId == null) {\n      return null;\n    }\n    return await this.secureStorageService.get<string>(\n      `${options.userId}${partialKeys.biometricKey}`,\n      options\n    );\n  }\n\n  async hasCryptoMasterKeyBiometric(options?: StorageOptions): Promise<boolean> {\n    options = this.reconcileOptions(\n      this.reconcileOptions(options, { keySuffix: \"biometric\" }),\n      await this.defaultSecureStorageOptions()\n    );\n    if (options?.userId == null) {\n      return false;\n    }\n    return await this.secureStorageService.has(\n      `${options.userId}${partialKeys.biometricKey}`,\n      options\n    );\n  }\n\n  async setCryptoMasterKeyBiometric(value: string, options?: StorageOptions): Promise<void> {\n    options = this.reconcileOptions(\n      this.reconcileOptions(options, { keySuffix: \"biometric\" }),\n      await this.defaultSecureStorageOptions()\n    );\n    if (options?.userId == null) {\n      return;\n    }\n    await this.saveSecureStorageKey(partialKeys.biometricKey, value, options);\n  }\n\n  async getDecodedToken(options?: StorageOptions): Promise<any> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.tokens?.decodedToken;\n  }\n\n  async setDecodedToken(value: any, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.tokens.decodedToken = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  @withPrototypeForArrayMembers(CipherView, CipherView.fromJSON)\n  async getDecryptedCiphers(options?: StorageOptions): Promise<CipherView[]> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.data?.ciphers?.decrypted;\n  }\n\n  async setDecryptedCiphers(value: CipherView[], options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.data.ciphers.decrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  @withPrototypeForArrayMembers(CollectionView)\n  async getDecryptedCollections(options?: StorageOptions): Promise<CollectionView[]> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.data?.collections?.decrypted;\n  }\n\n  async setDecryptedCollections(value: CollectionView[], options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.data.collections.decrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  @withPrototype(SymmetricCryptoKey, SymmetricCryptoKey.fromJSON)\n  async getDecryptedCryptoSymmetricKey(options?: StorageOptions): Promise<SymmetricCryptoKey> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.keys?.cryptoSymmetricKey?.decrypted;\n  }\n\n  async setDecryptedCryptoSymmetricKey(\n    value: SymmetricCryptoKey,\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.keys.cryptoSymmetricKey.decrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  @withPrototypeForMap(SymmetricCryptoKey, SymmetricCryptoKey.fromJSON)\n  async getDecryptedOrganizationKeys(\n    options?: StorageOptions\n  ): Promise<Map<string, SymmetricCryptoKey>> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    return account?.keys?.organizationKeys?.decrypted;\n  }\n\n  async setDecryptedOrganizationKeys(\n    value: Map<string, SymmetricCryptoKey>,\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.keys.organizationKeys.decrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  @withPrototypeForArrayMembers(GeneratedPasswordHistory)\n  async getDecryptedPasswordGenerationHistory(\n    options?: StorageOptions\n  ): Promise<GeneratedPasswordHistory[]> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.data?.passwordGenerationHistory?.decrypted;\n  }\n\n  async setDecryptedPasswordGenerationHistory(\n    value: GeneratedPasswordHistory[],\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.data.passwordGenerationHistory.decrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  @withPrototype(EncString)\n  async getDecryptedPinProtected(options?: StorageOptions): Promise<EncString> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.settings?.pinProtected?.decrypted;\n  }\n\n  async setDecryptedPinProtected(value: EncString, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.settings.pinProtected.decrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  @withPrototypeForArrayMembers(Policy)\n  async getDecryptedPolicies(options?: StorageOptions): Promise<Policy[]> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.data?.policies?.decrypted;\n  }\n\n  async setDecryptedPolicies(value: Policy[], options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.data.policies.decrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  async getDecryptedPrivateKey(options?: StorageOptions): Promise<ArrayBuffer> {\n    const privateKey = (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.keys?.privateKey;\n    let result = privateKey?.decrypted;\n    if (result == null && privateKey?.decryptedSerialized != null) {\n      result = Utils.fromByteStringToArray(privateKey.decryptedSerialized);\n    }\n    return result;\n  }\n\n  async setDecryptedPrivateKey(value: ArrayBuffer, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.keys.privateKey.decrypted = value;\n    account.keys.privateKey.decryptedSerialized =\n      value == null ? null : Utils.fromBufferToByteString(value);\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  @withPrototypeForMap(SymmetricCryptoKey, SymmetricCryptoKey.fromJSON)\n  async getDecryptedProviderKeys(\n    options?: StorageOptions\n  ): Promise<Map<string, SymmetricCryptoKey>> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.keys?.providerKeys?.decrypted;\n  }\n\n  async setDecryptedProviderKeys(\n    value: Map<string, SymmetricCryptoKey>,\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.keys.providerKeys.decrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  @withPrototypeForArrayMembers(SendView)\n  async getDecryptedSends(options?: StorageOptions): Promise<SendView[]> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.data?.sends?.decrypted;\n  }\n\n  async setDecryptedSends(value: SendView[], options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.data.sends.decrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  async getDefaultUriMatch(options?: StorageOptions): Promise<UriMatchType> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.settings?.defaultUriMatch;\n  }\n\n  async setDefaultUriMatch(value: UriMatchType, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.defaultUriMatch = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getDisableAddLoginNotification(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.disableAddLoginNotification ?? false\n    );\n  }\n\n  async setDisableAddLoginNotification(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.disableAddLoginNotification = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getDisableAutoBiometricsPrompt(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.disableAutoBiometricsPrompt ?? false\n    );\n  }\n\n  async setDisableAutoBiometricsPrompt(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.disableAutoBiometricsPrompt = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getDisableAutoTotpCopy(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.disableAutoTotpCopy ?? false\n    );\n  }\n\n  async setDisableAutoTotpCopy(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.disableAutoTotpCopy = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getDisableBadgeCounter(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.disableBadgeCounter ?? false\n    );\n  }\n\n  async setDisableBadgeCounter(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.disableBadgeCounter = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getDisableChangedPasswordNotification(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.disableChangedPasswordNotification ?? false\n    );\n  }\n\n  async setDisableChangedPasswordNotification(\n    value: boolean,\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.disableChangedPasswordNotification = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getDisableContextMenuItem(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.disableContextMenuItem ?? false\n    );\n  }\n\n  async setDisableContextMenuItem(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.disableContextMenuItem = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getDisableFavicon(options?: StorageOptions): Promise<boolean> {\n    return (\n      (\n        await this.getGlobals(\n          this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n        )\n      )?.disableFavicon ?? false\n    );\n  }\n\n  async setDisableFavicon(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    globals.disableFavicon = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getDisableGa(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.disableGa ?? false\n    );\n  }\n\n  async setDisableGa(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.disableGa = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getDontShowCardsCurrentTab(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.dontShowCardsCurrentTab ?? false\n    );\n  }\n\n  async setDontShowCardsCurrentTab(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.dontShowCardsCurrentTab = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getDontShowIdentitiesCurrentTab(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.dontShowIdentitiesCurrentTab ?? false\n    );\n  }\n\n  async setDontShowIdentitiesCurrentTab(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.dontShowIdentitiesCurrentTab = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEmail(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.profile?.email;\n  }\n\n  async setEmail(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.profile.email = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  async getEmailVerified(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.profile.emailVerified ?? false\n    );\n  }\n\n  async setEmailVerified(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.profile.emailVerified = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEnableAlwaysOnTop(options?: StorageOptions): Promise<boolean> {\n    const accountPreference = (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.settings?.enableAlwaysOnTop;\n    const globalPreference = (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.enableAlwaysOnTop;\n    return accountPreference ?? globalPreference ?? false;\n  }\n\n  async setEnableAlwaysOnTop(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.enableAlwaysOnTop = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.enableAlwaysOnTop = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEnableAutoFillOnPageLoad(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.enableAutoFillOnPageLoad ?? false\n    );\n  }\n\n  async setEnableAutoFillOnPageLoad(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.enableAutoFillOnPageLoad = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEnableBiometric(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.enableBiometrics ?? false\n    );\n  }\n\n  async setEnableBiometric(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.enableBiometrics = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEnableBrowserIntegration(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.enableBrowserIntegration ?? false\n    );\n  }\n\n  async setEnableBrowserIntegration(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.enableBrowserIntegration = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEnableBrowserIntegrationFingerprint(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.enableBrowserIntegrationFingerprint ?? false\n    );\n  }\n\n  async setEnableBrowserIntegrationFingerprint(\n    value: boolean,\n    options?: StorageOptions\n  ): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.enableBrowserIntegrationFingerprint = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEnableCloseToTray(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.enableCloseToTray ?? false\n    );\n  }\n\n  async setEnableCloseToTray(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.enableCloseToTray = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEnableFullWidth(options?: StorageOptions): Promise<boolean> {\n    return (\n      (\n        await this.getAccount(\n          this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n        )\n      )?.settings?.enableFullWidth ?? false\n    );\n  }\n\n  async setEnableFullWidth(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.settings.enableFullWidth = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getEnableGravitars(options?: StorageOptions): Promise<boolean> {\n    return (\n      (\n        await this.getAccount(\n          this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n        )\n      )?.settings?.enableGravitars ?? false\n    );\n  }\n\n  async setEnableGravitars(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.settings.enableGravitars = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getEnableMinimizeToTray(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.enableMinimizeToTray ?? false\n    );\n  }\n\n  async setEnableMinimizeToTray(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.enableMinimizeToTray = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEnableStartToTray(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.enableStartToTray ?? false\n    );\n  }\n\n  async setEnableStartToTray(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.enableStartToTray = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEnableTray(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.enableTray ?? false\n    );\n  }\n\n  async setEnableTray(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.enableTray = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  @withPrototypeForObjectValues(CipherData)\n  async getEncryptedCiphers(options?: StorageOptions): Promise<{ [id: string]: CipherData }> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions()))\n    )?.data?.ciphers?.encrypted;\n  }\n\n  async setEncryptedCiphers(\n    value: { [id: string]: CipherData },\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n    account.data.ciphers.encrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n  }\n\n  @withPrototypeForObjectValues(CollectionData)\n  async getEncryptedCollections(\n    options?: StorageOptions\n  ): Promise<{ [id: string]: CollectionData }> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions()))\n    )?.data?.collections?.encrypted;\n  }\n\n  async setEncryptedCollections(\n    value: { [id: string]: CollectionData },\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n    account.data.collections.encrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n  }\n\n  async getEncryptedCryptoSymmetricKey(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.keys.cryptoSymmetricKey.encrypted;\n  }\n\n  async setEncryptedCryptoSymmetricKey(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.keys.cryptoSymmetricKey.encrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  @withPrototypeForObjectValues(FolderData)\n  async getEncryptedFolders(options?: StorageOptions): Promise<{ [id: string]: FolderData }> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions()))\n    )?.data?.folders?.encrypted;\n  }\n\n  async setEncryptedFolders(\n    value: { [id: string]: FolderData },\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n    account.data.folders.encrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n  }\n\n  async getEncryptedOrganizationKeys(\n    options?: StorageOptions\n  ): Promise<{ [orgId: string]: EncryptedOrganizationKeyData }> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.keys?.organizationKeys.encrypted;\n  }\n\n  async setEncryptedOrganizationKeys(\n    value: { [orgId: string]: EncryptedOrganizationKeyData },\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.keys.organizationKeys.encrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  @withPrototypeForArrayMembers(GeneratedPasswordHistory)\n  async getEncryptedPasswordGenerationHistory(\n    options?: StorageOptions\n  ): Promise<GeneratedPasswordHistory[]> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.data?.passwordGenerationHistory?.encrypted;\n  }\n\n  async setEncryptedPasswordGenerationHistory(\n    value: GeneratedPasswordHistory[],\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.data.passwordGenerationHistory.encrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEncryptedPinProtected(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.settings?.pinProtected?.encrypted;\n  }\n\n  async setEncryptedPinProtected(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.pinProtected.encrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  @withPrototypeForObjectValues(PolicyData)\n  async getEncryptedPolicies(options?: StorageOptions): Promise<{ [id: string]: PolicyData }> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.data?.policies?.encrypted;\n  }\n\n  async setEncryptedPolicies(\n    value: { [id: string]: PolicyData },\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.data.policies.encrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEncryptedPrivateKey(options?: StorageOptions): Promise<string> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    return account?.keys?.privateKey?.encrypted;\n  }\n\n  async setEncryptedPrivateKey(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.keys.privateKey.encrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEncryptedProviderKeys(options?: StorageOptions): Promise<any> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.keys?.providerKeys?.encrypted;\n  }\n\n  async setEncryptedProviderKeys(value: any, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.keys.providerKeys.encrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  @withPrototypeForObjectValues(SendData)\n  async getEncryptedSends(options?: StorageOptions): Promise<{ [id: string]: SendData }> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions()))\n    )?.data?.sends.encrypted;\n  }\n\n  async setEncryptedSends(\n    value: { [id: string]: SendData },\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n    account.data.sends.encrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n  }\n\n  async getEntityId(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.profile?.entityId;\n  }\n\n  async setEntityId(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.profile.entityId = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getEntityType(options?: StorageOptions): Promise<any> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.profile?.entityType;\n  }\n\n  async setEntityType(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.profile.entityType = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  @withPrototype(EnvironmentUrls)\n  async getEnvironmentUrls(options?: StorageOptions): Promise<EnvironmentUrls> {\n    if ((await this.state())?.activeUserId == null) {\n      return await this.getGlobalEnvironmentUrls(options);\n    }\n    options = this.reconcileOptions(options, await this.defaultOnDiskOptions());\n    return (await this.getAccount(options))?.settings?.environmentUrls ?? new EnvironmentUrls();\n  }\n\n  async setEnvironmentUrls(value: EnvironmentUrls, options?: StorageOptions): Promise<void> {\n    // Global values are set on each change and the current global settings are passed to any newly authed accounts.\n    // This is to allow setting environement values before an account is active, while still allowing individual accounts to have their own environments.\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.environmentUrls = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEquivalentDomains(options?: StorageOptions): Promise<any> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.settings?.equivalentDomains;\n  }\n\n  async setEquivalentDomains(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.equivalentDomains = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  @withPrototypeForArrayMembers(EventData)\n  async getEventCollection(options?: StorageOptions): Promise<EventData[]> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.data?.eventCollection;\n  }\n\n  async setEventCollection(value: EventData[], options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.data.eventCollection = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEverBeenUnlocked(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions())))\n        ?.profile?.everBeenUnlocked ?? false\n    );\n  }\n\n  async setEverBeenUnlocked(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.profile.everBeenUnlocked = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  async getForcePasswordReset(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions())))\n        ?.profile?.forcePasswordReset ?? false\n    );\n  }\n\n  async setForcePasswordReset(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.profile.forcePasswordReset = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  async getInstalledVersion(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.installedVersion;\n  }\n\n  async setInstalledVersion(value: string, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.installedVersion = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getIsAuthenticated(options?: StorageOptions): Promise<boolean> {\n    return (await this.getAccessToken(options)) != null && (await this.getUserId(options)) != null;\n  }\n\n  async getKdfIterations(options?: StorageOptions): Promise<number> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.profile?.kdfIterations;\n  }\n\n  async setKdfIterations(value: number, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.profile.kdfIterations = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getKdfType(options?: StorageOptions): Promise<KdfType> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.profile?.kdfType;\n  }\n\n  async setKdfType(value: KdfType, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.profile.kdfType = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getKeyHash(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.profile?.keyHash;\n  }\n\n  async setKeyHash(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.profile.keyHash = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getLastActive(options?: StorageOptions): Promise<number> {\n    options = this.reconcileOptions(options, await this.defaultOnDiskOptions());\n\n    const accountActivity = await this.storageService.get<{ [userId: string]: number }>(\n      keys.accountActivity,\n      options\n    );\n\n    if (accountActivity == null || Object.keys(accountActivity).length < 1) {\n      return null;\n    }\n\n    return accountActivity[options.userId];\n  }\n\n  async setLastActive(value: number, options?: StorageOptions): Promise<void> {\n    options = this.reconcileOptions(options, await this.defaultOnDiskOptions());\n    if (options.userId == null) {\n      return;\n    }\n    const accountActivity =\n      (await this.storageService.get<{ [userId: string]: number }>(\n        keys.accountActivity,\n        options\n      )) ?? {};\n    accountActivity[options.userId] = value;\n    await this.storageService.save(keys.accountActivity, accountActivity, options);\n  }\n\n  async getLastSync(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions()))\n    )?.profile?.lastSync;\n  }\n\n  async setLastSync(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n    account.profile.lastSync = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n  }\n\n  async getLocalData(options?: StorageOptions): Promise<any> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.data?.localData;\n  }\n  async setLocalData(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.data.localData = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getLocale(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.locale;\n  }\n\n  async setLocale(value: string, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    globals.locale = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getMainWindowSize(options?: StorageOptions): Promise<number> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.mainWindowSize;\n  }\n\n  async setMainWindowSize(value: number, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    globals.mainWindowSize = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  async getMinimizeOnCopyToClipboard(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.minimizeOnCopyToClipboard ?? false\n    );\n  }\n\n  async setMinimizeOnCopyToClipboard(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.minimizeOnCopyToClipboard = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getNeverDomains(options?: StorageOptions): Promise<{ [id: string]: any }> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.settings?.neverDomains;\n  }\n\n  async setNeverDomains(value: { [id: string]: any }, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.neverDomains = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getNoAutoPromptBiometrics(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.noAutoPromptBiometrics ?? false\n    );\n  }\n\n  async setNoAutoPromptBiometrics(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.noAutoPromptBiometrics = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getNoAutoPromptBiometricsText(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.noAutoPromptBiometricsText;\n  }\n\n  async setNoAutoPromptBiometricsText(value: string, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.noAutoPromptBiometricsText = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getOpenAtLogin(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.openAtLogin ?? false\n    );\n  }\n\n  async setOpenAtLogin(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.openAtLogin = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getOrganizationInvitation(options?: StorageOptions): Promise<any> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.organizationInvitation;\n  }\n\n  async setOrganizationInvitation(value: any, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    globals.organizationInvitation = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  async getOrganizations(options?: StorageOptions): Promise<{ [id: string]: OrganizationData }> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.data?.organizations;\n  }\n\n  async setOrganizations(\n    value: { [id: string]: OrganizationData },\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.data.organizations = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getPasswordGenerationOptions(options?: StorageOptions): Promise<any> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.settings?.passwordGenerationOptions;\n  }\n\n  async setPasswordGenerationOptions(value: any, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.settings.passwordGenerationOptions = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getUsernameGenerationOptions(options?: StorageOptions): Promise<any> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.settings?.usernameGenerationOptions;\n  }\n\n  async setUsernameGenerationOptions(value: any, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.settings.usernameGenerationOptions = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getGeneratorOptions(options?: StorageOptions): Promise<any> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.settings?.generatorOptions;\n  }\n\n  async setGeneratorOptions(value: any, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.settings.generatorOptions = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getProtectedPin(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.settings?.protectedPin;\n  }\n\n  async setProtectedPin(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.protectedPin = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  @withPrototypeForObjectValues(ProviderData)\n  async getProviders(options?: StorageOptions): Promise<{ [id: string]: ProviderData }> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.data?.providers;\n  }\n\n  async setProviders(\n    value: { [id: string]: ProviderData },\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.data.providers = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getPublicKey(options?: StorageOptions): Promise<ArrayBuffer> {\n    const keys = (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.keys;\n    let result = keys?.publicKey;\n    if (result == null && keys?.publicKeySerialized != null) {\n      result = Utils.fromByteStringToArray(keys.publicKeySerialized);\n    }\n    return result;\n  }\n\n  async setPublicKey(value: ArrayBuffer, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.keys.publicKey = value;\n    account.keys.publicKeySerialized = value == null ? null : Utils.fromBufferToByteString(value);\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  async getRefreshToken(options?: StorageOptions): Promise<string> {\n    options = await this.getTimeoutBasedStorageOptions(options);\n    return (await this.getAccount(options))?.tokens?.refreshToken;\n  }\n\n  async setRefreshToken(value: string, options?: StorageOptions): Promise<void> {\n    options = await this.getTimeoutBasedStorageOptions(options);\n    const account = await this.getAccount(options);\n    account.tokens.refreshToken = value;\n    await this.saveAccount(account, options);\n  }\n\n  async getRememberedEmail(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.rememberedEmail;\n  }\n\n  async setRememberedEmail(value: string, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    globals.rememberedEmail = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getSecurityStamp(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.tokens?.securityStamp;\n  }\n\n  async setSecurityStamp(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.tokens.securityStamp = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  async getSettings(options?: StorageOptions): Promise<any> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions()))\n    )?.settings?.settings;\n  }\n\n  async setSettings(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n    account.settings.settings = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n  }\n\n  async getSsoCodeVerifier(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.ssoCodeVerifier;\n  }\n\n  async setSsoCodeVerifier(value: string, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.ssoCodeVerifier = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getSsoOrgIdentifier(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.ssoOrganizationIdentifier;\n  }\n\n  async setSsoOrganizationIdentifier(value: string, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    globals.ssoOrganizationIdentifier = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getSsoState(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.ssoState;\n  }\n\n  async setSsoState(value: string, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.ssoState = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getTheme(options?: StorageOptions): Promise<ThemeType> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.theme;\n  }\n\n  async setTheme(value: ThemeType, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    globals.theme = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getTwoFactorToken(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.twoFactorToken;\n  }\n\n  async setTwoFactorToken(value: string, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    globals.twoFactorToken = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getUserId(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.profile?.userId;\n  }\n\n  async getUsesKeyConnector(options?: StorageOptions): Promise<boolean> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.profile?.usesKeyConnector;\n  }\n\n  async setUsesKeyConnector(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.profile.usesKeyConnector = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getVaultTimeout(options?: StorageOptions): Promise<number> {\n    const accountVaultTimeout = (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.settings?.vaultTimeout;\n    return accountVaultTimeout;\n  }\n\n  async setVaultTimeout(value: number, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.settings.vaultTimeout = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getVaultTimeoutAction(options?: StorageOptions): Promise<string> {\n    const accountVaultTimeoutAction = (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.settings?.vaultTimeoutAction;\n    const globalVaultTimeoutAction = (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.vaultTimeoutAction;\n    return accountVaultTimeoutAction ?? globalVaultTimeoutAction;\n  }\n\n  async setVaultTimeoutAction(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.settings.vaultTimeoutAction = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getStateVersion(): Promise<number> {\n    return (await this.getGlobals(await this.defaultOnDiskLocalOptions())).stateVersion ?? 1;\n  }\n\n  async setStateVersion(value: number): Promise<void> {\n    const globals = await this.getGlobals(await this.defaultOnDiskOptions());\n    globals.stateVersion = value;\n    await this.saveGlobals(globals, await this.defaultOnDiskOptions());\n  }\n\n  async getWindow(): Promise<WindowState> {\n    const globals = await this.getGlobals(await this.defaultOnDiskOptions());\n    return globals?.window != null && Object.keys(globals.window).length > 0\n      ? globals.window\n      : new WindowState();\n  }\n\n  async setWindow(value: WindowState, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.window = value;\n    return await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  protected async getGlobals(options: StorageOptions): Promise<TGlobalState> {\n    let globals: TGlobalState;\n    if (this.useMemory(options.storageLocation)) {\n      globals = await this.getGlobalsFromMemory();\n    }\n\n    if (this.useDisk && globals == null) {\n      globals = await this.getGlobalsFromDisk(options);\n    }\n\n    return globals ?? this.createGlobals();\n  }\n\n  protected async saveGlobals(globals: TGlobalState, options: StorageOptions) {\n    return this.useMemory(options.storageLocation)\n      ? this.saveGlobalsToMemory(globals)\n      : await this.saveGlobalsToDisk(globals, options);\n  }\n\n  protected async getGlobalsFromMemory(): Promise<TGlobalState> {\n    return (await this.state()).globals;\n  }\n\n  protected async getGlobalsFromDisk(options: StorageOptions): Promise<TGlobalState> {\n    return await this.storageService.get<TGlobalState>(keys.global, options);\n  }\n\n  protected async saveGlobalsToMemory(globals: TGlobalState): Promise<void> {\n    await this.updateState(async (state) => {\n      state.globals = globals;\n      return state;\n    });\n  }\n\n  protected async saveGlobalsToDisk(globals: TGlobalState, options: StorageOptions): Promise<void> {\n    if (options.useSecureStorage) {\n      await this.secureStorageService.save(keys.global, globals, options);\n    } else {\n      await this.storageService.save(keys.global, globals, options);\n    }\n  }\n\n  protected async getAccount(options: StorageOptions): Promise<TAccount> {\n    try {\n      let account: TAccount;\n      if (this.useMemory(options.storageLocation)) {\n        account = await this.getAccountFromMemory(options);\n      }\n\n      if (this.useDisk(options.storageLocation) && account == null) {\n        account = await this.getAccountFromDisk(options);\n      }\n\n      return account;\n    } catch (e) {\n      this.logService.error(e);\n    }\n  }\n\n  protected async getAccountFromMemory(options: StorageOptions): Promise<TAccount> {\n    return await this.state().then(async (state) => {\n      if (state.accounts == null) {\n        return null;\n      }\n      return state.accounts[await this.getUserIdFromMemory(options)];\n    });\n  }\n\n  protected async getUserIdFromMemory(options: StorageOptions): Promise<string> {\n    return await this.state().then((state) => {\n      return options?.userId != null\n        ? state.accounts[options.userId]?.profile?.userId\n        : state.activeUserId;\n    });\n  }\n\n  protected async getAccountFromDisk(options: StorageOptions): Promise<TAccount> {\n    if (options?.userId == null && (await this.state())?.activeUserId == null) {\n      return null;\n    }\n\n    if (this.useAccountCache) {\n      const cachedAccount = this.accountDiskCache.get(options.userId);\n      if (cachedAccount != null) {\n        return cachedAccount;\n      }\n    }\n\n    const account = options?.useSecureStorage\n      ? (await this.secureStorageService.get<TAccount>(options.userId, options)) ??\n        (await this.storageService.get<TAccount>(\n          options.userId,\n          this.reconcileOptions(options, { htmlStorageLocation: HtmlStorageLocation.Local })\n        ))\n      : await this.storageService.get<TAccount>(options.userId, options);\n\n    if (this.useAccountCache) {\n      this.accountDiskCache.set(options.userId, account);\n    }\n    return account;\n  }\n\n  protected useMemory(storageLocation: StorageLocation) {\n    return storageLocation === StorageLocation.Memory || storageLocation === StorageLocation.Both;\n  }\n\n  protected useDisk(storageLocation: StorageLocation) {\n    return storageLocation === StorageLocation.Disk || storageLocation === StorageLocation.Both;\n  }\n\n  protected async saveAccount(\n    account: TAccount,\n    options: StorageOptions = {\n      storageLocation: StorageLocation.Both,\n      useSecureStorage: false,\n    }\n  ) {\n    return this.useMemory(options.storageLocation)\n      ? await this.saveAccountToMemory(account)\n      : await this.saveAccountToDisk(account, options);\n  }\n\n  protected async saveAccountToDisk(account: TAccount, options: StorageOptions): Promise<void> {\n    const storageLocation = options.useSecureStorage\n      ? this.secureStorageService\n      : this.storageService;\n\n    await storageLocation.save(`${options.userId}`, account, options);\n\n    if (this.useAccountCache) {\n      this.accountDiskCache.delete(options.userId);\n    }\n  }\n\n  protected async saveAccountToMemory(account: TAccount): Promise<void> {\n    if (this.getAccountFromMemory({ userId: account.profile.userId }) !== null) {\n      await this.updateState((state) => {\n        return new Promise((resolve) => {\n          state.accounts[account.profile.userId] = account;\n          resolve(state);\n        });\n      });\n    }\n    await this.pushAccounts();\n  }\n\n  protected async scaffoldNewAccountStorage(account: TAccount): Promise<void> {\n    // We don't want to manipulate the referenced in memory account\n    const deepClone = JSON.parse(JSON.stringify(account));\n    await this.scaffoldNewAccountLocalStorage(deepClone);\n    await this.scaffoldNewAccountSessionStorage(deepClone);\n    await this.scaffoldNewAccountMemoryStorage(deepClone);\n  }\n\n  // TODO: There is a tech debt item for splitting up these methods - only Web uses multiple storage locations in its storageService.\n  // For now these methods exist with some redundancy to facilitate this special web requirement.\n  protected async scaffoldNewAccountLocalStorage(account: TAccount): Promise<void> {\n    const storedAccount = await this.getAccount(\n      this.reconcileOptions(\n        { userId: account.profile.userId },\n        await this.defaultOnDiskLocalOptions()\n      )\n    );\n    // EnvironmentUrls are set before authenticating and should override whatever is stored from any previous session\n    const environmentUrls = account.settings.environmentUrls;\n    if (storedAccount?.settings != null) {\n      account.settings = storedAccount.settings;\n    } else if (await this.storageService.has(keys.tempAccountSettings)) {\n      account.settings = await this.storageService.get<AccountSettings>(keys.tempAccountSettings);\n      await this.storageService.remove(keys.tempAccountSettings);\n    }\n    account.settings.environmentUrls = environmentUrls;\n    if (account.settings.vaultTimeoutAction === \"logOut\" && account.settings.vaultTimeout != null) {\n      account.tokens.accessToken = null;\n      account.tokens.refreshToken = null;\n      account.profile.apiKeyClientId = null;\n      account.keys.apiKeyClientSecret = null;\n    }\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(\n        { userId: account.profile.userId },\n        await this.defaultOnDiskLocalOptions()\n      )\n    );\n  }\n\n  protected async scaffoldNewAccountMemoryStorage(account: TAccount): Promise<void> {\n    const storedAccount = await this.getAccount(\n      this.reconcileOptions(\n        { userId: account.profile.userId },\n        await this.defaultOnDiskMemoryOptions()\n      )\n    );\n    if (storedAccount?.settings != null) {\n      storedAccount.settings.environmentUrls = account.settings.environmentUrls;\n      account.settings = storedAccount.settings;\n    }\n    await this.storageService.save(\n      account.profile.userId,\n      account,\n      await this.defaultOnDiskMemoryOptions()\n    );\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(\n        { userId: account.profile.userId },\n        await this.defaultOnDiskMemoryOptions()\n      )\n    );\n  }\n\n  protected async scaffoldNewAccountSessionStorage(account: TAccount): Promise<void> {\n    const storedAccount = await this.getAccount(\n      this.reconcileOptions({ userId: account.profile.userId }, await this.defaultOnDiskOptions())\n    );\n    if (storedAccount?.settings != null) {\n      storedAccount.settings.environmentUrls = account.settings.environmentUrls;\n      account.settings = storedAccount.settings;\n    }\n    await this.storageService.save(\n      account.profile.userId,\n      account,\n      await this.defaultOnDiskMemoryOptions()\n    );\n    await this.saveAccount(\n      account,\n      this.reconcileOptions({ userId: account.profile.userId }, await this.defaultOnDiskOptions())\n    );\n  }\n  //\n\n  protected async pushAccounts(): Promise<void> {\n    await this.pruneInMemoryAccounts();\n    await this.state().then((state) => {\n      if (state.accounts == null || Object.keys(state.accounts).length < 1) {\n        this.accounts.next(null);\n        return;\n      }\n\n      this.accounts.next(state.accounts);\n    });\n  }\n\n  protected reconcileOptions(\n    requestedOptions: StorageOptions,\n    defaultOptions: StorageOptions\n  ): StorageOptions {\n    if (requestedOptions == null) {\n      return defaultOptions;\n    }\n    requestedOptions.userId = requestedOptions?.userId ?? defaultOptions.userId;\n    requestedOptions.storageLocation =\n      requestedOptions?.storageLocation ?? defaultOptions.storageLocation;\n    requestedOptions.useSecureStorage =\n      requestedOptions?.useSecureStorage ?? defaultOptions.useSecureStorage;\n    requestedOptions.htmlStorageLocation =\n      requestedOptions?.htmlStorageLocation ?? defaultOptions.htmlStorageLocation;\n    requestedOptions.keySuffix = requestedOptions?.keySuffix ?? defaultOptions.keySuffix;\n    return requestedOptions;\n  }\n\n  protected async defaultInMemoryOptions(): Promise<StorageOptions> {\n    return {\n      storageLocation: StorageLocation.Memory,\n      userId: (await this.state()).activeUserId,\n    };\n  }\n\n  protected async defaultOnDiskOptions(): Promise<StorageOptions> {\n    return {\n      storageLocation: StorageLocation.Disk,\n      htmlStorageLocation: HtmlStorageLocation.Session,\n      userId: (await this.state())?.activeUserId ?? (await this.getActiveUserIdFromStorage()),\n      useSecureStorage: false,\n    };\n  }\n\n  protected async defaultOnDiskLocalOptions(): Promise<StorageOptions> {\n    return {\n      storageLocation: StorageLocation.Disk,\n      htmlStorageLocation: HtmlStorageLocation.Local,\n      userId: (await this.state())?.activeUserId ?? (await this.getActiveUserIdFromStorage()),\n      useSecureStorage: false,\n    };\n  }\n\n  protected async defaultOnDiskMemoryOptions(): Promise<StorageOptions> {\n    return {\n      storageLocation: StorageLocation.Disk,\n      htmlStorageLocation: HtmlStorageLocation.Memory,\n      userId: (await this.state())?.activeUserId ?? (await this.getUserId()),\n      useSecureStorage: false,\n    };\n  }\n\n  protected async defaultSecureStorageOptions(): Promise<StorageOptions> {\n    return {\n      storageLocation: StorageLocation.Disk,\n      useSecureStorage: true,\n      userId: (await this.state())?.activeUserId ?? (await this.getActiveUserIdFromStorage()),\n    };\n  }\n\n  protected async getActiveUserIdFromStorage(): Promise<string> {\n    return await this.storageService.get<string>(keys.activeUserId);\n  }\n\n  protected async removeAccountFromLocalStorage(userId: string = null): Promise<void> {\n    userId = userId ?? (await this.state())?.activeUserId;\n    const storedAccount = await this.getAccount(\n      this.reconcileOptions({ userId: userId }, await this.defaultOnDiskLocalOptions())\n    );\n    await this.saveAccount(\n      this.resetAccount(storedAccount),\n      this.reconcileOptions({ userId: userId }, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  protected async removeAccountFromSessionStorage(userId: string = null): Promise<void> {\n    userId = userId ?? (await this.state())?.activeUserId;\n    const storedAccount = await this.getAccount(\n      this.reconcileOptions({ userId: userId }, await this.defaultOnDiskOptions())\n    );\n    await this.saveAccount(\n      this.resetAccount(storedAccount),\n      this.reconcileOptions({ userId: userId }, await this.defaultOnDiskOptions())\n    );\n  }\n\n  protected async removeAccountFromSecureStorage(userId: string = null): Promise<void> {\n    userId = userId ?? (await this.state())?.activeUserId;\n    await this.setCryptoMasterKeyAuto(null, { userId: userId });\n    await this.setCryptoMasterKeyBiometric(null, { userId: userId });\n    await this.setCryptoMasterKeyB64(null, { userId: userId });\n  }\n\n  protected async removeAccountFromMemory(userId: string = null): Promise<void> {\n    await this.updateState(async (state) => {\n      userId = userId ?? state.activeUserId;\n      delete state.accounts[userId];\n\n      if (this.useAccountCache) {\n        this.accountDiskCache.delete(userId);\n      }\n\n      return state;\n    });\n  }\n\n  protected async pruneInMemoryAccounts() {\n    // We preserve settings for logged out accounts, but we don't want to consider them when thinking about active account state\n    for (const userId in (await this.state())?.accounts) {\n      if (!(await this.getIsAuthenticated({ userId: userId }))) {\n        await this.removeAccountFromMemory(userId);\n      }\n    }\n  }\n\n  // settings persist even on reset, and are not effected by this method\n  protected resetAccount(account: TAccount) {\n    const persistentAccountInformation = { settings: account.settings };\n    return Object.assign(this.createAccount(), persistentAccountInformation);\n  }\n\n  protected async setAccountEnvironmentUrls(account: TAccount): Promise<TAccount> {\n    account.settings.environmentUrls = await this.getGlobalEnvironmentUrls();\n    return account;\n  }\n\n  protected async getGlobalEnvironmentUrls(options?: StorageOptions): Promise<EnvironmentUrls> {\n    options = this.reconcileOptions(options, await this.defaultOnDiskOptions());\n    return (await this.getGlobals(options)).environmentUrls ?? new EnvironmentUrls();\n  }\n\n  protected async clearDecryptedDataForActiveUser(): Promise<void> {\n    await this.updateState(async (state) => {\n      const userId = state?.activeUserId;\n      if (userId != null && state?.accounts[userId]?.data != null) {\n        state.accounts[userId].data = new AccountData();\n      }\n\n      return state;\n    });\n  }\n\n  protected createAccount(init: Partial<TAccount> = null): TAccount {\n    return this.stateFactory.createAccount(init);\n  }\n\n  protected createGlobals(init: Partial<TGlobalState> = null): TGlobalState {\n    return this.stateFactory.createGlobal(init);\n  }\n\n  protected async deAuthenticateAccount(userId: string): Promise<void> {\n    await this.setAccessToken(null, { userId: userId });\n    await this.setLastActive(null, { userId: userId });\n    await this.updateState(async (state) => {\n      state.authenticatedAccounts = state.authenticatedAccounts.filter((id) => id !== userId);\n\n      await this.storageService.save(keys.authenticatedAccounts, state.authenticatedAccounts);\n\n      return state;\n    });\n  }\n\n  protected async removeAccountFromDisk(userId: string) {\n    await this.removeAccountFromSessionStorage(userId);\n    await this.removeAccountFromLocalStorage(userId);\n    await this.removeAccountFromSecureStorage(userId);\n  }\n\n  protected async dynamicallySetActiveUser() {\n    const accounts = (await this.state())?.accounts;\n    if (accounts == null || Object.keys(accounts).length < 1) {\n      await this.setActiveUser(null);\n      return;\n    }\n    for (const userId in accounts) {\n      if (userId == null) {\n        continue;\n      }\n      if (await this.getIsAuthenticated({ userId: userId })) {\n        await this.setActiveUser(userId);\n        break;\n      }\n      await this.setActiveUser(null);\n    }\n  }\n\n  private async getTimeoutBasedStorageOptions(options?: StorageOptions): Promise<StorageOptions> {\n    const timeoutAction = await this.getVaultTimeoutAction({ userId: options?.userId });\n    const timeout = await this.getVaultTimeout({ userId: options?.userId });\n    const defaultOptions =\n      timeoutAction === \"logOut\" && timeout != null\n        ? await this.defaultInMemoryOptions()\n        : await this.defaultOnDiskOptions();\n    return this.reconcileOptions(options, defaultOptions);\n  }\n\n  private async saveSecureStorageKey(key: string, value: string, options?: StorageOptions) {\n    return value == null\n      ? await this.secureStorageService.remove(`${options.userId}${key}`, options)\n      : await this.secureStorageService.save(`${options.userId}${key}`, value, options);\n  }\n\n  protected state(): Promise<State<TGlobalState, TAccount>> {\n    return this.memoryStorageService.get<State<TGlobalState, TAccount>>(keys.state);\n  }\n\n  private async setState(state: State<TGlobalState, TAccount>): Promise<void> {\n    await this.memoryStorageService.save(keys.state, state);\n  }\n\n  protected async updateState(\n    stateUpdater: (state: State<TGlobalState, TAccount>) => Promise<State<TGlobalState, TAccount>>\n  ) {\n    await this.state().then(async (state) => {\n      const updatedState = await stateUpdater(state);\n      if (updatedState == null) {\n        throw new Error(\"Attempted to update state to null value\");\n      }\n\n      await this.setState(updatedState);\n    });\n  }\n}\n\nexport function withPrototype<T>(\n  constructor: new (...args: any[]) => T,\n  converter: (input: any) => T = (i) => i\n): (\n  target: any,\n  propertyKey: string | symbol,\n  descriptor: PropertyDescriptor\n) => { value: (...args: any[]) => Promise<T> } {\n  return (target: any, propertyKey: string | symbol, descriptor: PropertyDescriptor) => {\n    const originalMethod = descriptor.value;\n\n    return {\n      value: function (...args: any[]) {\n        const originalResult: Promise<T> = originalMethod.apply(this, args);\n\n        if (!(originalResult instanceof Promise)) {\n          throw new Error(\n            `Error applying prototype to stored value -- result is not a promise for method ${String(\n              propertyKey\n            )}`\n          );\n        }\n\n        return originalResult.then((result) => {\n          return result == null ||\n            result.constructor.name === constructor.prototype.constructor.name\n            ? converter(result as T)\n            : converter(\n                Object.create(constructor.prototype, Object.getOwnPropertyDescriptors(result)) as T\n              );\n        });\n      },\n    };\n  };\n}\n\nfunction withPrototypeForArrayMembers<T>(\n  memberConstructor: new (...args: any[]) => T,\n  memberConverter: (input: any) => T = (i) => i\n): (\n  target: any,\n  propertyKey: string | symbol,\n  descriptor: PropertyDescriptor\n) => { value: (...args: any[]) => Promise<T[]> } {\n  return (target: any, propertyKey: string | symbol, descriptor: PropertyDescriptor) => {\n    const originalMethod = descriptor.value;\n\n    return {\n      value: function (...args: any[]) {\n        const originalResult: Promise<any[]> = originalMethod.apply(this, args);\n\n        if (!(originalResult instanceof Promise)) {\n          throw new Error(\n            `Error applying prototype to stored value -- result is not a promise for method ${String(\n              propertyKey\n            )}`\n          );\n        }\n\n        return originalResult.then((result) => {\n          if (result == null) {\n            return null;\n          } else if (!(result instanceof Array)) {\n            throw new Error(\n              `Attempted to retrieve non array type from state as an array for method ${String(\n                propertyKey\n              )}`\n            );\n          } else {\n            return result.map((r) => {\n              return r == null ||\n                r.constructor.name === memberConstructor.prototype.constructor.name\n                ? memberConverter(r)\n                : memberConverter(\n                    Object.create(memberConstructor.prototype, Object.getOwnPropertyDescriptors(r))\n                  );\n            });\n          }\n        });\n      },\n    };\n  };\n}\n\nfunction withPrototypeForObjectValues<T>(\n  valuesConstructor: new (...args: any[]) => T,\n  valuesConverter: (input: any) => T = (i) => i\n): (\n  target: any,\n  propertyKey: string | symbol,\n  descriptor: PropertyDescriptor\n) => { value: (...args: any[]) => Promise<{ [key: string]: T }> } {\n  return (target: any, propertyKey: string | symbol, descriptor: PropertyDescriptor) => {\n    const originalMethod = descriptor.value;\n\n    return {\n      value: function (...args: any[]) {\n        const originalResult: Promise<{ [key: string]: T }> = originalMethod.apply(this, args);\n\n        if (!(originalResult instanceof Promise)) {\n          throw new Error(\n            `Error applying prototype to stored value -- result is not a promise for method ${String(\n              propertyKey\n            )}`\n          );\n        }\n\n        return originalResult.then((result) => {\n          if (result == null) {\n            return null;\n          } else {\n            for (const [key, val] of Object.entries(result)) {\n              result[key] =\n                val == null || val.constructor.name === valuesConstructor.prototype.constructor.name\n                  ? valuesConverter(val)\n                  : valuesConverter(\n                      Object.create(\n                        valuesConstructor.prototype,\n                        Object.getOwnPropertyDescriptors(val)\n                      )\n                    );\n            }\n\n            return result as { [key: string]: T };\n          }\n        });\n      },\n    };\n  };\n}\n\nfunction withPrototypeForMap<T>(\n  valuesConstructor: new (...args: any[]) => T,\n  valuesConverter: (input: any) => T = (i) => i\n): (\n  target: any,\n  propertyKey: string | symbol,\n  descriptor: PropertyDescriptor\n) => { value: (...args: any[]) => Promise<Map<string, T>> } {\n  return (target: any, propertyKey: string | symbol, descriptor: PropertyDescriptor) => {\n    const originalMethod = descriptor.value;\n\n    return {\n      value: function (...args: any[]) {\n        const originalResult: Promise<any> = originalMethod.apply(this, args);\n\n        if (!(originalResult instanceof Promise)) {\n          throw new Error(\n            `Error applying prototype to stored value -- result is not a promise for method ${String(\n              propertyKey\n            )}`\n          );\n        }\n\n        return originalResult.then((result) => {\n          if (result == null) {\n            return null;\n          } else if (result instanceof Map) {\n            return result;\n          } else {\n            for (const key in Object.keys(result)) {\n              result[key] =\n                result[key] == null ||\n                result[key].constructor.name === valuesConstructor.prototype.constructor.name\n                  ? valuesConverter(result[key])\n                  : valuesConverter(\n                      Object.create(\n                        valuesConstructor.prototype,\n                        Object.getOwnPropertyDescriptors(result[key])\n                      )\n                    );\n            }\n            return new Map<string, T>(Object.entries(result));\n          }\n        });\n      },\n    };\n  };\n}\n","import { AbstractCachedStorageService } from \"@bitwarden/common/abstractions/storage.service\";\nimport { GlobalState } from \"@bitwarden/common/models/domain/globalState\";\nimport { StorageOptions } from \"@bitwarden/common/models/domain/storageOptions\";\nimport {\n  StateService as BaseStateService,\n  withPrototype,\n} from \"@bitwarden/common/services/state.service\";\n\nimport { Account } from \"../models/account\";\nimport { BrowserComponentState } from \"../models/browserComponentState\";\nimport { BrowserGroupingsComponentState } from \"../models/browserGroupingsComponentState\";\nimport { BrowserSendComponentState } from \"../models/browserSendComponentState\";\n\nimport { StateService as StateServiceAbstraction } from \"./abstractions/state.service\";\n\nexport class StateService\n  extends BaseStateService<GlobalState, Account>\n  implements StateServiceAbstraction\n{\n  async getFromSessionMemory<T>(key: string): Promise<T> {\n    return this.memoryStorageService instanceof AbstractCachedStorageService\n      ? await this.memoryStorageService.getBypassCache<T>(key)\n      : await this.memoryStorageService.get<T>(key);\n  }\n\n  async setInSessionMemory(key: string, value: any): Promise<void> {\n    await this.memoryStorageService.save(key, value);\n  }\n\n  async addAccount(account: Account) {\n    // Apply browser overrides to default account values\n    account = new Account(account);\n    await super.addAccount(account);\n  }\n\n  async getIsAuthenticated(options?: StorageOptions): Promise<boolean> {\n    // Firefox Private Mode can clash with non-Private Mode because they both read from the same onDiskOptions\n    // Check that there is an account in memory before considering the user authenticated\n    return (\n      (await super.getIsAuthenticated(options)) &&\n      (await this.getAccount(await this.defaultInMemoryOptions())) != null\n    );\n  }\n\n  @withPrototype(BrowserGroupingsComponentState)\n  async getBrowserGroupingComponentState(\n    options?: StorageOptions\n  ): Promise<BrowserGroupingsComponentState> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.groupings;\n  }\n\n  async setBrowserGroupingComponentState(\n    value: BrowserGroupingsComponentState,\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.groupings = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  @withPrototype(BrowserComponentState)\n  async getBrowserCipherComponentState(options?: StorageOptions): Promise<BrowserComponentState> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.ciphers;\n  }\n\n  async setBrowserCipherComponentState(\n    value: BrowserComponentState,\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.ciphers = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  @withPrototype(BrowserSendComponentState)\n  async getBrowserSendComponentState(options?: StorageOptions): Promise<BrowserSendComponentState> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.send;\n  }\n\n  async setBrowserSendComponentState(\n    value: BrowserSendComponentState,\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.send = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  @withPrototype(BrowserComponentState)\n  async getBrowserSendTypeComponentState(options?: StorageOptions): Promise<BrowserComponentState> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.sendType;\n  }\n\n  async setBrowserSendTypeComponentState(\n    value: BrowserComponentState,\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.sendType = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n}\n","export class SyncedItemMetadata {\n  propertyKey: string;\n  sessionKey: string;\n  ctor?: new () => any;\n  initializer?: (keyValuePair: any) => any;\n  initializeAsArray?: boolean;\n\n  static buildFromKeyValuePair(keyValuePair: any, metadata: SyncedItemMetadata): any {\n    const builder = SyncedItemMetadata.getBuilder(metadata);\n\n    if (metadata.initializeAsArray) {\n      return keyValuePair.map((o: any) => builder(o));\n    } else {\n      return builder(keyValuePair);\n    }\n  }\n\n  private static getBuilder(metadata: SyncedItemMetadata): (o: any) => any {\n    return metadata.initializer != null\n      ? metadata.initializer\n      : (o: any) => Object.assign(new metadata.ctor(), o);\n  }\n}\n","import { BehaviorSubject, Subscription } from \"rxjs\";\n\nimport { Utils } from \"@bitwarden/common/misc/utils\";\n\nimport { BrowserApi } from \"../../browser/browserApi\";\nimport { StateService } from \"../../services/abstractions/state.service\";\n\nimport { SyncedItemMetadata } from \"./sync-item-metadata\";\n\nexport class SessionSyncer {\n  subscription: Subscription;\n  id = Utils.newGuid();\n\n  // everyone gets the same initial values\n  private ignoreNextUpdate = true;\n\n  constructor(\n    private behaviorSubject: BehaviorSubject<any>,\n    private stateService: StateService,\n    private metaData: SyncedItemMetadata\n  ) {\n    if (!(behaviorSubject instanceof BehaviorSubject)) {\n      throw new Error(\"behaviorSubject must be an instance of BehaviorSubject\");\n    }\n\n    if (metaData.ctor == null && metaData.initializer == null) {\n      throw new Error(\"ctor or initializer must be provided\");\n    }\n  }\n\n  init() {\n    if (chrome.runtime.getManifest().manifest_version != 3) {\n      return;\n    }\n\n    this.observe();\n    this.listenForUpdates();\n  }\n\n  private observe() {\n    // This may be a memory leak.\n    // There is no good time to unsubscribe from this observable. Hopefully Manifest V3 clears memory from temporary\n    // contexts. If so, this is handled by destruction of the context.\n    this.subscription = this.behaviorSubject.subscribe(async (next) => {\n      if (this.ignoreNextUpdate) {\n        this.ignoreNextUpdate = false;\n        return;\n      }\n      await this.updateSession(next);\n    });\n  }\n\n  private listenForUpdates() {\n    // This is an unawaited promise, but it will be executed asynchronously in the background.\n    BrowserApi.messageListener(\n      this.updateMessageCommand,\n      async (message) => await this.updateFromMessage(message)\n    );\n  }\n\n  async updateFromMessage(message: any) {\n    if (message.command != this.updateMessageCommand || message.id === this.id) {\n      return;\n    }\n    const keyValuePair = await this.stateService.getFromSessionMemory(this.metaData.sessionKey);\n    const value = SyncedItemMetadata.buildFromKeyValuePair(keyValuePair, this.metaData);\n    this.ignoreNextUpdate = true;\n    this.behaviorSubject.next(value);\n  }\n\n  private async updateSession(value: any) {\n    await this.stateService.setInSessionMemory(this.metaData.sessionKey, value);\n    await BrowserApi.sendMessage(this.updateMessageCommand, { id: this.id });\n  }\n\n  private get updateMessageCommand() {\n    return `${this.metaData.sessionKey}_update`;\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { SessionStorable } from \"./session-storable\";\n\nclass BuildOptions<T> {\n  ctor?: new () => T;\n  initializer?: (keyValuePair: Jsonify<T>) => T;\n  initializeAsArray? = false;\n}\n\n/**\n * A decorator used to indicate the BehaviorSubject should be synced for this browser session across all contexts.\n *\n * >**Note** This decorator does nothing if the enclosing class is not decorated with @browserSession.\n *\n * >**Note** The Behavior subject must be initialized with a default or in the constructor of the class. If it is not, an error will be thrown.\n *\n * >**!!Warning!!** If the property is overwritten at any time, the new value will not be synced across the browser session.\n *\n * @param buildOptions\n * Builders for the value, requires either a constructor (ctor) for your BehaviorSubject type or an\n * initializer function that takes a key value pair representation of the BehaviorSubject data\n * and returns your instantiated BehaviorSubject value. `initializeAsArray can optionally be used to indicate\n * the provided initializer function should be used to build an array of values. For example,\n * ```ts\n * \\@sessionSync({ initializer: Foo.fromJSON, initializeAsArray: true })\n * ```\n * is equivalent to\n * ```\n * \\@sessionSync({ initializer: (obj: any[]) => obj.map((f) => Foo.fromJSON })\n * ```\n *\n * @returns decorator function\n */\nexport function sessionSync<T>(buildOptions: BuildOptions<T>) {\n  return (prototype: unknown, propertyKey: string) => {\n    // Force prototype into SessionStorable and implement it.\n    const p = prototype as SessionStorable;\n\n    if (p.__syncedItemMetadata == null) {\n      p.__syncedItemMetadata = [];\n    }\n\n    p.__syncedItemMetadata.push({\n      propertyKey,\n      sessionKey: `${prototype.constructor.name}_${propertyKey}`,\n      ctor: buildOptions.ctor,\n      initializer: buildOptions.initializer,\n      initializeAsArray: buildOptions.initializeAsArray,\n    });\n  };\n}\n","import { BehaviorSubject } from \"rxjs/internal/BehaviorSubject\";\n\nimport { Folder } from \"@bitwarden/common/models/domain/folder\";\nimport { FolderView } from \"@bitwarden/common/models/view/folderView\";\nimport { FolderService as BaseFolderService } from \"@bitwarden/common/services/folder/folder.service\";\n\nimport { browserSession, sessionSync } from \"../../decorators/session-sync-observable\";\n\n@browserSession\nexport class FolderService extends BaseFolderService {\n  @sessionSync({ initializer: Folder.fromJSON, initializeAsArray: true })\n  protected _folders: BehaviorSubject<Folder[]>;\n  @sessionSync({ initializer: FolderView.fromJSON, initializeAsArray: true })\n  protected _folderViews: BehaviorSubject<FolderView[]>;\n}\n","import { BehaviorSubject } from \"rxjs\";\n\nimport { CipherService } from \"../../abstractions/cipher.service\";\nimport { CryptoService } from \"../../abstractions/crypto.service\";\nimport { InternalFolderService as InternalFolderServiceAbstraction } from \"../../abstractions/folder/folder.service.abstraction\";\nimport { I18nService } from \"../../abstractions/i18n.service\";\nimport { StateService } from \"../../abstractions/state.service\";\nimport { Utils } from \"../../misc/utils\";\nimport { CipherData } from \"../../models/data/cipherData\";\nimport { FolderData } from \"../../models/data/folderData\";\nimport { Folder } from \"../../models/domain/folder\";\nimport { SymmetricCryptoKey } from \"../../models/domain/symmetricCryptoKey\";\nimport { FolderView } from \"../../models/view/folderView\";\n\nexport class FolderService implements InternalFolderServiceAbstraction {\n  protected _folders: BehaviorSubject<Folder[]> = new BehaviorSubject([]);\n  protected _folderViews: BehaviorSubject<FolderView[]> = new BehaviorSubject([]);\n\n  folders$ = this._folders.asObservable();\n  folderViews$ = this._folderViews.asObservable();\n\n  constructor(\n    private cryptoService: CryptoService,\n    private i18nService: I18nService,\n    private cipherService: CipherService,\n    private stateService: StateService\n  ) {\n    this.stateService.activeAccountUnlocked$.subscribe(async (unlocked) => {\n      if ((Utils.global as any).bitwardenContainerService == null) {\n        return;\n      }\n\n      if (!unlocked) {\n        this._folders.next([]);\n        this._folderViews.next([]);\n        return;\n      }\n\n      const data = await this.stateService.getEncryptedFolders();\n\n      await this.updateObservables(data);\n    });\n  }\n\n  async clearCache(): Promise<void> {\n    this._folderViews.next([]);\n  }\n\n  // TODO: This should be moved to EncryptService or something\n  async encrypt(model: FolderView, key?: SymmetricCryptoKey): Promise<Folder> {\n    const folder = new Folder();\n    folder.id = model.id;\n    folder.name = await this.cryptoService.encrypt(model.name, key);\n    return folder;\n  }\n\n  async get(id: string): Promise<Folder> {\n    const folders = this._folders.getValue();\n\n    return folders.find((folder) => folder.id === id);\n  }\n\n  /**\n   * @deprecated Only use in CLI!\n   */\n  async getAllDecryptedFromState(): Promise<FolderView[]> {\n    const data = await this.stateService.getEncryptedFolders();\n    const folders = Object.values(data || {}).map((f) => new Folder(f));\n\n    return this.decryptFolders(folders);\n  }\n\n  async upsert(folder: FolderData | FolderData[]): Promise<void> {\n    let folders = await this.stateService.getEncryptedFolders();\n    if (folders == null) {\n      folders = {};\n    }\n\n    if (folder instanceof FolderData) {\n      const f = folder as FolderData;\n      folders[f.id] = f;\n    } else {\n      (folder as FolderData[]).forEach((f) => {\n        folders[f.id] = f;\n      });\n    }\n\n    await this.updateObservables(folders);\n    await this.stateService.setEncryptedFolders(folders);\n  }\n\n  async replace(folders: { [id: string]: FolderData }): Promise<void> {\n    await this.updateObservables(folders);\n    await this.stateService.setEncryptedFolders(folders);\n  }\n\n  async clear(userId?: string): Promise<any> {\n    if (userId == null || userId == (await this.stateService.getUserId())) {\n      this._folders.next([]);\n      this._folderViews.next([]);\n    }\n    await this.stateService.setEncryptedFolders(null, { userId: userId });\n  }\n\n  async delete(id: string | string[]): Promise<any> {\n    const folders = await this.stateService.getEncryptedFolders();\n    if (folders == null) {\n      return;\n    }\n\n    if (typeof id === \"string\") {\n      if (folders[id] == null) {\n        return;\n      }\n      delete folders[id];\n    } else {\n      (id as string[]).forEach((i) => {\n        delete folders[i];\n      });\n    }\n\n    await this.updateObservables(folders);\n    await this.stateService.setEncryptedFolders(folders);\n\n    // Items in a deleted folder are re-assigned to \"No Folder\"\n    const ciphers = await this.stateService.getEncryptedCiphers();\n    if (ciphers != null) {\n      const updates: CipherData[] = [];\n      for (const cId in ciphers) {\n        if (ciphers[cId].folderId === id) {\n          ciphers[cId].folderId = null;\n          updates.push(ciphers[cId]);\n        }\n      }\n      if (updates.length > 0) {\n        this.cipherService.upsert(updates);\n      }\n    }\n  }\n\n  private async updateObservables(foldersMap: { [id: string]: FolderData }) {\n    const folders = Object.values(foldersMap || {}).map((f) => new Folder(f));\n\n    this._folders.next(folders);\n\n    if (await this.cryptoService.hasKey()) {\n      this._folderViews.next(await this.decryptFolders(folders));\n    }\n  }\n\n  private async decryptFolders(folders: Folder[]) {\n    const decryptFolderPromises = folders.map((f) => f.decrypt());\n    const decryptedFolders = await Promise.all(decryptFolderPromises);\n\n    decryptedFolders.sort(Utils.getSortFunction(this.i18nService, \"name\"));\n\n    const noneFolder = new FolderView();\n    noneFolder.name = this.i18nService.t(\"noneFolder\");\n    decryptedFolders.push(noneFolder);\n\n    return decryptedFolders;\n  }\n}\n","import { Constructor } from \"type-fest\";\n\nimport { StateService } from \"../../services/state.service\";\n\nimport { SessionStorable } from \"./session-storable\";\nimport { SessionSyncer } from \"./session-syncer\";\nimport { SyncedItemMetadata } from \"./sync-item-metadata\";\n\n/**\n * Mark the class as syncing state across the browser session. This decorator finds rxjs BehaviorSubject properties\n * marked with @sessionSync and syncs these values across the browser session.\n *\n * @param constructor\n * @returns A new constructor that extends the original one to add session syncing.\n */\nexport function browserSession<TCtor extends Constructor<any>>(constructor: TCtor) {\n  return class extends constructor implements SessionStorable {\n    __syncedItemMetadata: SyncedItemMetadata[];\n    __sessionSyncers: SessionSyncer[];\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Require state service to be injected\n      const stateService = args.find((arg) => arg instanceof StateService);\n      if (!stateService) {\n        throw new Error(\n          `Cannot decorate ${constructor.name} with browserSession, Browser's StateService must be injected`\n        );\n      }\n\n      if (this.__syncedItemMetadata == null || !(this.__syncedItemMetadata instanceof Array)) {\n        return;\n      }\n\n      this.__sessionSyncers = this.__syncedItemMetadata.map((metadata) =>\n        this.buildSyncer(metadata, stateService)\n      );\n    }\n\n    buildSyncer(metadata: SyncedItemMetadata, stateService: StateService) {\n      const syncer = new SessionSyncer((this as any)[metadata.propertyKey], stateService, metadata);\n      syncer.init();\n      return syncer;\n    }\n  };\n}\n","import { I18nService as BaseI18nService } from \"@bitwarden/common/services/i18n.service\";\n\nexport default class I18nService extends BaseI18nService {\n  constructor(systemLanguage: string) {\n    super(systemLanguage, null, async (formattedLocale: string) => {\n      // Deprecated\n      const file = await fetch(this.localesDirectory + formattedLocale + \"/messages.json\");\n      return await file.json();\n    });\n\n    // Please leave 'en' where it is, as it's our fallback language in case no translation can be found\n    this.supportedTranslationLocales = [\n      \"en\",\n      \"az\",\n      \"be\",\n      \"bg\",\n      \"bn\",\n      \"bs\",\n      \"ca\",\n      \"cs\",\n      \"da\",\n      \"de\",\n      \"el\",\n      \"en-GB\",\n      \"en-IN\",\n      \"es\",\n      \"et\",\n      \"eu\",\n      \"fa\",\n      \"fi\",\n      \"fil\",\n      \"fr\",\n      \"he\",\n      \"hi\",\n      \"hr\",\n      \"hu\",\n      \"id\",\n      \"it\",\n      \"ja\",\n      \"ka\",\n      \"km\",\n      \"kn\",\n      \"ko\",\n      \"lt\",\n      \"lv\",\n      \"ml\",\n      \"nb\",\n      \"nl\",\n      \"nn\",\n      \"pl\",\n      \"pt-BR\",\n      \"pt-PT\",\n      \"ro\",\n      \"ru\",\n      \"si\",\n      \"sk\",\n      \"sl\",\n      \"sr\",\n      \"sv\",\n      \"th\",\n      \"tr\",\n      \"uk\",\n      \"vi\",\n      \"zh-CN\",\n      \"zh-TW\",\n    ];\n  }\n\n  t(id: string, p1?: string, p2?: string, p3?: string): string {\n    return this.translate(id, p1, p2, p3);\n  }\n\n  translate(id: string, p1?: string, p2?: string, p3?: string): string {\n    if (this.localesDirectory == null) {\n      const placeholders: string[] = [];\n      if (p1 != null) {\n        placeholders.push(p1);\n      }\n      if (p2 != null) {\n        placeholders.push(p2);\n      }\n      if (p3 != null) {\n        placeholders.push(p3);\n      }\n\n      if (placeholders.length) {\n        return chrome.i18n.getMessage(id, placeholders);\n      } else {\n        return chrome.i18n.getMessage(id);\n      }\n    }\n\n    return super.translate(id, p1, p2, p3);\n  }\n}\n","import { Observable, ReplaySubject } from \"rxjs\";\n\nimport { I18nService as I18nServiceAbstraction } from \"../abstractions/i18n.service\";\n\nexport class I18nService implements I18nServiceAbstraction {\n  private _locale = new ReplaySubject<string>(1);\n  locale$: Observable<string> = this._locale.asObservable();\n  // First locale is the default (English)\n  supportedTranslationLocales: string[] = [\"en\"];\n  translationLocale: string;\n  collator: Intl.Collator;\n  localeNames = new Map<string, string>([\n    [\"af\", \"Afrikaans\"],\n    [\"az\", \"Azərbaycanca\"],\n    [\"be\", \"Беларуская\"],\n    [\"bg\", \"български\"],\n    [\"bn\", \"বাংলা\"],\n    [\"bs\", \"bosanski jezik\"],\n    [\"ca\", \"català\"],\n    [\"cs\", \"čeština\"],\n    [\"da\", \"dansk\"],\n    [\"de\", \"Deutsch\"],\n    [\"el\", \"Ελληνικά\"],\n    [\"en\", \"English\"],\n    [\"en-GB\", \"English (British)\"],\n    [\"en-IN\", \"English (India)\"],\n    [\"eo\", \"Esperanto\"],\n    [\"es\", \"español\"],\n    [\"et\", \"eesti\"],\n    [\"eu\", \"euskara\"],\n    [\"fa\", \"فارسی\"],\n    [\"fi\", \"suomi\"],\n    [\"fil\", \"Wikang Filipino\"],\n    [\"fr\", \"français\"],\n    [\"he\", \"עברית\"],\n    [\"hi\", \"हिन्दी\"],\n    [\"hr\", \"hrvatski\"],\n    [\"hu\", \"magyar\"],\n    [\"id\", \"Bahasa Indonesia\"],\n    [\"it\", \"italiano\"],\n    [\"ja\", \"日本語\"],\n    [\"ka\", \"ქართული\"],\n    [\"km\", \"ខ្មែរ, ខេមរភាសា, ភាសាខ្មែរ\"],\n    [\"kn\", \"ಕನ್ನಡ\"],\n    [\"ko\", \"한국어\"],\n    [\"lt\", \"lietuvių kalba\"],\n    [\"lv\", \"Latvietis\"],\n    [\"me\", \"црногорски\"],\n    [\"ml\", \"മലയാളം\"],\n    [\"nb\", \"norsk (bokmål)\"],\n    [\"nl\", \"Nederlands\"],\n    [\"nn\", \"Norsk Nynorsk\"],\n    [\"pl\", \"polski\"],\n    [\"pt-BR\", \"português do Brasil\"],\n    [\"pt-PT\", \"português\"],\n    [\"ro\", \"română\"],\n    [\"ru\", \"русский\"],\n    [\"si\", \"සිංහල\"],\n    [\"sk\", \"slovenčina\"],\n    [\"sl\", \"Slovenski jezik, Slovenščina\"],\n    [\"sr\", \"Српски\"],\n    [\"sv\", \"svenska\"],\n    [\"th\", \"ไทย\"],\n    [\"tr\", \"Türkçe\"],\n    [\"uk\", \"українська\"],\n    [\"vi\", \"Tiếng Việt\"],\n    [\"zh-CN\", \"中文（中国大陆）\"],\n    [\"zh-TW\", \"中文（台灣）\"],\n  ]);\n\n  protected inited: boolean;\n  protected defaultMessages: any = {};\n  protected localeMessages: any = {};\n\n  constructor(\n    protected systemLanguage: string,\n    protected localesDirectory: string,\n    protected getLocalesJson: (formattedLocale: string) => Promise<any>\n  ) {\n    this.systemLanguage = systemLanguage.replace(\"_\", \"-\");\n  }\n\n  async init(locale?: string) {\n    if (this.inited) {\n      throw new Error(\"i18n already initialized.\");\n    }\n    if (this.supportedTranslationLocales == null || this.supportedTranslationLocales.length === 0) {\n      throw new Error(\"supportedTranslationLocales not set.\");\n    }\n\n    this.inited = true;\n    this.translationLocale = locale != null ? locale : this.systemLanguage;\n    this._locale.next(this.translationLocale);\n\n    try {\n      this.collator = new Intl.Collator(this.translationLocale, {\n        numeric: true,\n        sensitivity: \"base\",\n      });\n    } catch {\n      this.collator = null;\n    }\n\n    if (this.supportedTranslationLocales.indexOf(this.translationLocale) === -1) {\n      this.translationLocale = this.translationLocale.slice(0, 2);\n\n      if (this.supportedTranslationLocales.indexOf(this.translationLocale) === -1) {\n        this.translationLocale = this.supportedTranslationLocales[0];\n      }\n    }\n\n    if (this.localesDirectory != null) {\n      await this.loadMessages(this.translationLocale, this.localeMessages);\n      if (this.translationLocale !== this.supportedTranslationLocales[0]) {\n        await this.loadMessages(this.supportedTranslationLocales[0], this.defaultMessages);\n      }\n    }\n  }\n\n  t(id: string, p1?: string, p2?: string, p3?: string): string {\n    return this.translate(id, p1, p2, p3);\n  }\n\n  translate(id: string, p1?: string, p2?: string, p3?: string): string {\n    let result: string;\n    // eslint-disable-next-line\n    if (this.localeMessages.hasOwnProperty(id) && this.localeMessages[id]) {\n      result = this.localeMessages[id];\n      // eslint-disable-next-line\n    } else if (this.defaultMessages.hasOwnProperty(id) && this.defaultMessages[id]) {\n      result = this.defaultMessages[id];\n    } else {\n      result = \"\";\n    }\n\n    if (result !== \"\") {\n      if (p1 != null) {\n        result = result.split(\"__$1__\").join(p1);\n      }\n      if (p2 != null) {\n        result = result.split(\"__$2__\").join(p2);\n      }\n      if (p3 != null) {\n        result = result.split(\"__$3__\").join(p3);\n      }\n    }\n\n    return result;\n  }\n\n  private async loadMessages(locale: string, messagesObj: any): Promise<any> {\n    const formattedLocale = locale.replace(\"-\", \"_\");\n    const locales = await this.getLocalesJson(formattedLocale);\n    for (const prop in locales) {\n      // eslint-disable-next-line\n      if (!locales.hasOwnProperty(prop)) {\n        continue;\n      }\n      messagesObj[prop] = locales[prop].message;\n\n      if (locales[prop].placeholders) {\n        for (const placeProp in locales[prop].placeholders) {\n          if (\n            !locales[prop].placeholders.hasOwnProperty(placeProp) || // eslint-disable-line\n            !locales[prop].placeholders[placeProp].content\n          ) {\n            continue;\n          }\n\n          const replaceToken = \"\\\\$\" + placeProp.toUpperCase() + \"\\\\$\";\n          let replaceContent = locales[prop].placeholders[placeProp].content;\n          if (replaceContent === \"$1\" || replaceContent === \"$2\" || replaceContent === \"$3\") {\n            replaceContent = \"__$\" + replaceContent + \"__\";\n          }\n          messagesObj[prop] = messagesObj[prop].replace(\n            new RegExp(replaceToken, \"g\"),\n            replaceContent\n          );\n        }\n      }\n    }\n  }\n}\n","import { CipherType } from \"@bitwarden/common/enums/cipherType\";\nimport { CipherView } from \"@bitwarden/common/models/view/cipherView\";\n\nimport { CipherStatus } from \"./cipher-status.model\";\n\nexport type VaultFilterFunction = (cipher: CipherView) => boolean;\n\nexport class VaultFilter {\n  cipherType?: CipherType;\n  selectedCollection = false; // This is needed because of how the \"Unassigned\" collection works. It has a null id.\n  selectedCollectionId?: string;\n  status?: CipherStatus;\n  selectedFolder = false; // This is needed because of how the \"No Folder\" folder works. It has a null id.\n  selectedFolderId?: string;\n  selectedOrganizationId?: string;\n  myVaultOnly = false;\n  refreshCollectionsAndFolders = false;\n\n  constructor(init?: Partial<VaultFilter>) {\n    Object.assign(this, init);\n  }\n\n  resetFilter() {\n    this.cipherType = null;\n    this.status = null;\n    this.selectedCollection = false;\n    this.selectedCollectionId = null;\n    this.selectedFolder = false;\n    this.selectedFolderId = null;\n  }\n\n  resetOrganization() {\n    this.myVaultOnly = false;\n    this.selectedOrganizationId = null;\n    this.resetFilter();\n  }\n\n  buildFilter(): VaultFilterFunction {\n    return (cipher) => {\n      let cipherPassesFilter = true;\n      if (this.status === \"favorites\" && cipherPassesFilter) {\n        cipherPassesFilter = cipher.favorite;\n      }\n      if (this.status === \"trash\" && cipherPassesFilter) {\n        cipherPassesFilter = cipher.isDeleted;\n      }\n      if (this.cipherType != null && cipherPassesFilter) {\n        cipherPassesFilter = cipher.type === this.cipherType;\n      }\n      if (this.selectedFolder && this.selectedFolderId == null && cipherPassesFilter) {\n        cipherPassesFilter = cipher.folderId == null;\n      }\n      if (this.selectedFolder && this.selectedFolderId != null && cipherPassesFilter) {\n        cipherPassesFilter = cipher.folderId === this.selectedFolderId;\n      }\n      if (this.selectedCollection && this.selectedCollectionId == null && cipherPassesFilter) {\n        cipherPassesFilter =\n          cipher.organizationId != null &&\n          (cipher.collectionIds == null || cipher.collectionIds.length === 0);\n      }\n      if (this.selectedCollection && this.selectedCollectionId != null && cipherPassesFilter) {\n        cipherPassesFilter =\n          cipher.collectionIds != null && cipher.collectionIds.includes(this.selectedCollectionId);\n      }\n      if (this.selectedOrganizationId != null && cipherPassesFilter) {\n        cipherPassesFilter = cipher.organizationId === this.selectedOrganizationId;\n      }\n      if (this.myVaultOnly && cipherPassesFilter) {\n        cipherPassesFilter = cipher.organizationId === null;\n      }\n      return cipherPassesFilter;\n    };\n  }\n}\n","import { TreeNode } from \"@bitwarden/common/models/domain/treeNode\";\nimport { CollectionView } from \"@bitwarden/common/models/view/collectionView\";\nimport { FolderView } from \"@bitwarden/common/models/view/folderView\";\n\nexport class DynamicTreeNode<T extends CollectionView | FolderView> {\n  fullList: T[];\n  nestedList: TreeNode<T>[];\n\n  hasId(id: string): boolean {\n    return this.fullList != null && this.fullList.filter((i: T) => i.id === id).length > 0;\n  }\n\n  constructor(init?: Partial<DynamicTreeNode<T>>) {\n    Object.assign(this, init);\n  }\n}\n","import { BehaviorSubject, Observable } from \"rxjs\";\n\nimport { KdfType } from \"../enums/kdfType\";\nimport { ThemeType } from \"../enums/themeType\";\nimport { UriMatchType } from \"../enums/uriMatchType\";\nimport { CipherData } from \"../models/data/cipherData\";\nimport { CollectionData } from \"../models/data/collectionData\";\nimport { EncryptedOrganizationKeyData } from \"../models/data/encryptedOrganizationKeyData\";\nimport { EventData } from \"../models/data/eventData\";\nimport { FolderData } from \"../models/data/folderData\";\nimport { OrganizationData } from \"../models/data/organizationData\";\nimport { PolicyData } from \"../models/data/policyData\";\nimport { ProviderData } from \"../models/data/providerData\";\nimport { SendData } from \"../models/data/sendData\";\nimport { Account } from \"../models/domain/account\";\nimport { EncString } from \"../models/domain/encString\";\nimport { EnvironmentUrls } from \"../models/domain/environmentUrls\";\nimport { GeneratedPasswordHistory } from \"../models/domain/generatedPasswordHistory\";\nimport { Policy } from \"../models/domain/policy\";\nimport { StorageOptions } from \"../models/domain/storageOptions\";\nimport { SymmetricCryptoKey } from \"../models/domain/symmetricCryptoKey\";\nimport { WindowState } from \"../models/domain/windowState\";\nimport { CipherView } from \"../models/view/cipherView\";\nimport { CollectionView } from \"../models/view/collectionView\";\nimport { SendView } from \"../models/view/sendView\";\n\nexport abstract class StateService<T extends Account = Account> {\n  accounts: BehaviorSubject<{ [userId: string]: T }>;\n  activeAccount$: Observable<string>;\n  activeAccountUnlocked$: Observable<boolean>;\n\n  addAccount: (account: T) => Promise<void>;\n  setActiveUser: (userId: string) => Promise<void>;\n  clean: (options?: StorageOptions) => Promise<void>;\n  init: () => Promise<void>;\n\n  getAccessToken: (options?: StorageOptions) => Promise<string>;\n  setAccessToken: (value: string, options?: StorageOptions) => Promise<void>;\n  getAddEditCipherInfo: (options?: StorageOptions) => Promise<any>;\n  setAddEditCipherInfo: (value: any, options?: StorageOptions) => Promise<void>;\n  getAlwaysShowDock: (options?: StorageOptions) => Promise<boolean>;\n  setAlwaysShowDock: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getApiKeyClientId: (options?: StorageOptions) => Promise<string>;\n  setApiKeyClientId: (value: string, options?: StorageOptions) => Promise<void>;\n  getApiKeyClientSecret: (options?: StorageOptions) => Promise<string>;\n  setApiKeyClientSecret: (value: string, options?: StorageOptions) => Promise<void>;\n  getAutoConfirmFingerPrints: (options?: StorageOptions) => Promise<boolean>;\n  setAutoConfirmFingerprints: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getAutoFillOnPageLoadDefault: (options?: StorageOptions) => Promise<boolean>;\n  setAutoFillOnPageLoadDefault: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getBiometricAwaitingAcceptance: (options?: StorageOptions) => Promise<boolean>;\n  setBiometricAwaitingAcceptance: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getBiometricFingerprintValidated: (options?: StorageOptions) => Promise<boolean>;\n  setBiometricFingerprintValidated: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getBiometricText: (options?: StorageOptions) => Promise<string>;\n  setBiometricText: (value: string, options?: StorageOptions) => Promise<void>;\n  getBiometricUnlock: (options?: StorageOptions) => Promise<boolean>;\n  setBiometricUnlock: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getCanAccessPremium: (options?: StorageOptions) => Promise<boolean>;\n  getHasPremiumPersonally: (options?: StorageOptions) => Promise<boolean>;\n  setHasPremiumPersonally: (value: boolean, options?: StorageOptions) => Promise<void>;\n  setHasPremiumFromOrganization: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getHasPremiumFromOrganization: (options?: StorageOptions) => Promise<boolean>;\n  getClearClipboard: (options?: StorageOptions) => Promise<number>;\n  setClearClipboard: (value: number, options?: StorageOptions) => Promise<void>;\n  getCollapsedGroupings: (options?: StorageOptions) => Promise<string[]>;\n  setCollapsedGroupings: (value: string[], options?: StorageOptions) => Promise<void>;\n  getConvertAccountToKeyConnector: (options?: StorageOptions) => Promise<boolean>;\n  setConvertAccountToKeyConnector: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getCryptoMasterKey: (options?: StorageOptions) => Promise<SymmetricCryptoKey>;\n  setCryptoMasterKey: (value: SymmetricCryptoKey, options?: StorageOptions) => Promise<void>;\n  getCryptoMasterKeyAuto: (options?: StorageOptions) => Promise<string>;\n  setCryptoMasterKeyAuto: (value: string, options?: StorageOptions) => Promise<void>;\n  getCryptoMasterKeyB64: (options?: StorageOptions) => Promise<string>;\n  setCryptoMasterKeyB64: (value: string, options?: StorageOptions) => Promise<void>;\n  getCryptoMasterKeyBiometric: (options?: StorageOptions) => Promise<string>;\n  hasCryptoMasterKeyBiometric: (options?: StorageOptions) => Promise<boolean>;\n  setCryptoMasterKeyBiometric: (value: string, options?: StorageOptions) => Promise<void>;\n  getDecodedToken: (options?: StorageOptions) => Promise<any>;\n  setDecodedToken: (value: any, options?: StorageOptions) => Promise<void>;\n  getDecryptedCiphers: (options?: StorageOptions) => Promise<CipherView[]>;\n  setDecryptedCiphers: (value: CipherView[], options?: StorageOptions) => Promise<void>;\n  getDecryptedCollections: (options?: StorageOptions) => Promise<CollectionView[]>;\n  setDecryptedCollections: (value: CollectionView[], options?: StorageOptions) => Promise<void>;\n  getDecryptedCryptoSymmetricKey: (options?: StorageOptions) => Promise<SymmetricCryptoKey>;\n  setDecryptedCryptoSymmetricKey: (\n    value: SymmetricCryptoKey,\n    options?: StorageOptions\n  ) => Promise<void>;\n  getDecryptedOrganizationKeys: (\n    options?: StorageOptions\n  ) => Promise<Map<string, SymmetricCryptoKey>>;\n  setDecryptedOrganizationKeys: (\n    value: Map<string, SymmetricCryptoKey>,\n    options?: StorageOptions\n  ) => Promise<void>;\n  getDecryptedPasswordGenerationHistory: (\n    options?: StorageOptions\n  ) => Promise<GeneratedPasswordHistory[]>;\n  setDecryptedPasswordGenerationHistory: (\n    value: GeneratedPasswordHistory[],\n    options?: StorageOptions\n  ) => Promise<void>;\n  getDecryptedPinProtected: (options?: StorageOptions) => Promise<EncString>;\n  setDecryptedPinProtected: (value: EncString, options?: StorageOptions) => Promise<void>;\n  getDecryptedPolicies: (options?: StorageOptions) => Promise<Policy[]>;\n  setDecryptedPolicies: (value: Policy[], options?: StorageOptions) => Promise<void>;\n  getDecryptedPrivateKey: (options?: StorageOptions) => Promise<ArrayBuffer>;\n  setDecryptedPrivateKey: (value: ArrayBuffer, options?: StorageOptions) => Promise<void>;\n  getDecryptedProviderKeys: (options?: StorageOptions) => Promise<Map<string, SymmetricCryptoKey>>;\n  setDecryptedProviderKeys: (\n    value: Map<string, SymmetricCryptoKey>,\n    options?: StorageOptions\n  ) => Promise<void>;\n  getDecryptedSends: (options?: StorageOptions) => Promise<SendView[]>;\n  setDecryptedSends: (value: SendView[], options?: StorageOptions) => Promise<void>;\n  getDefaultUriMatch: (options?: StorageOptions) => Promise<UriMatchType>;\n  setDefaultUriMatch: (value: UriMatchType, options?: StorageOptions) => Promise<void>;\n  getDisableAddLoginNotification: (options?: StorageOptions) => Promise<boolean>;\n  setDisableAddLoginNotification: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getDisableAutoBiometricsPrompt: (options?: StorageOptions) => Promise<boolean>;\n  setDisableAutoBiometricsPrompt: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getDisableAutoTotpCopy: (options?: StorageOptions) => Promise<boolean>;\n  setDisableAutoTotpCopy: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getDisableBadgeCounter: (options?: StorageOptions) => Promise<boolean>;\n  setDisableBadgeCounter: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getDisableChangedPasswordNotification: (options?: StorageOptions) => Promise<boolean>;\n  setDisableChangedPasswordNotification: (\n    value: boolean,\n    options?: StorageOptions\n  ) => Promise<void>;\n  getDisableContextMenuItem: (options?: StorageOptions) => Promise<boolean>;\n  setDisableContextMenuItem: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getDisableFavicon: (options?: StorageOptions) => Promise<boolean>;\n  setDisableFavicon: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getDisableGa: (options?: StorageOptions) => Promise<boolean>;\n  setDisableGa: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getDontShowCardsCurrentTab: (options?: StorageOptions) => Promise<boolean>;\n  setDontShowCardsCurrentTab: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getDontShowIdentitiesCurrentTab: (options?: StorageOptions) => Promise<boolean>;\n  setDontShowIdentitiesCurrentTab: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEmail: (options?: StorageOptions) => Promise<string>;\n  setEmail: (value: string, options?: StorageOptions) => Promise<void>;\n  getEmailVerified: (options?: StorageOptions) => Promise<boolean>;\n  setEmailVerified: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEnableAlwaysOnTop: (options?: StorageOptions) => Promise<boolean>;\n  setEnableAlwaysOnTop: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEnableAutoFillOnPageLoad: (options?: StorageOptions) => Promise<boolean>;\n  setEnableAutoFillOnPageLoad: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEnableBiometric: (options?: StorageOptions) => Promise<boolean>;\n  setEnableBiometric: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEnableBrowserIntegration: (options?: StorageOptions) => Promise<boolean>;\n  setEnableBrowserIntegration: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEnableBrowserIntegrationFingerprint: (options?: StorageOptions) => Promise<boolean>;\n  setEnableBrowserIntegrationFingerprint: (\n    value: boolean,\n    options?: StorageOptions\n  ) => Promise<void>;\n  getEnableCloseToTray: (options?: StorageOptions) => Promise<boolean>;\n  setEnableCloseToTray: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEnableFullWidth: (options?: StorageOptions) => Promise<boolean>;\n  setEnableFullWidth: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEnableGravitars: (options?: StorageOptions) => Promise<boolean>;\n  setEnableGravitars: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEnableMinimizeToTray: (options?: StorageOptions) => Promise<boolean>;\n  setEnableMinimizeToTray: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEnableStartToTray: (options?: StorageOptions) => Promise<boolean>;\n  setEnableStartToTray: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEnableTray: (options?: StorageOptions) => Promise<boolean>;\n  setEnableTray: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEncryptedCiphers: (options?: StorageOptions) => Promise<{ [id: string]: CipherData }>;\n  setEncryptedCiphers: (\n    value: { [id: string]: CipherData },\n    options?: StorageOptions\n  ) => Promise<void>;\n  getEncryptedCollections: (options?: StorageOptions) => Promise<{ [id: string]: CollectionData }>;\n  setEncryptedCollections: (\n    value: { [id: string]: CollectionData },\n    options?: StorageOptions\n  ) => Promise<void>;\n  getEncryptedCryptoSymmetricKey: (options?: StorageOptions) => Promise<string>;\n  setEncryptedCryptoSymmetricKey: (value: string, options?: StorageOptions) => Promise<void>;\n  /**\n   * @deprecated Do not call this directly, use FolderService\n   */\n  getEncryptedFolders: (options?: StorageOptions) => Promise<{ [id: string]: FolderData }>;\n  /**\n   * @deprecated Do not call this directly, use FolderService\n   */\n  setEncryptedFolders: (\n    value: { [id: string]: FolderData },\n    options?: StorageOptions\n  ) => Promise<void>;\n  getEncryptedOrganizationKeys: (\n    options?: StorageOptions\n  ) => Promise<{ [orgId: string]: EncryptedOrganizationKeyData }>;\n  setEncryptedOrganizationKeys: (\n    value: { [orgId: string]: EncryptedOrganizationKeyData },\n    options?: StorageOptions\n  ) => Promise<void>;\n  getEncryptedPasswordGenerationHistory: (\n    options?: StorageOptions\n  ) => Promise<GeneratedPasswordHistory[]>;\n  setEncryptedPasswordGenerationHistory: (\n    value: GeneratedPasswordHistory[],\n    options?: StorageOptions\n  ) => Promise<void>;\n  getEncryptedPinProtected: (options?: StorageOptions) => Promise<string>;\n  setEncryptedPinProtected: (value: string, options?: StorageOptions) => Promise<void>;\n  getEncryptedPolicies: (options?: StorageOptions) => Promise<{ [id: string]: PolicyData }>;\n  setEncryptedPolicies: (\n    value: { [id: string]: PolicyData },\n    options?: StorageOptions\n  ) => Promise<void>;\n  getEncryptedPrivateKey: (options?: StorageOptions) => Promise<string>;\n  setEncryptedPrivateKey: (value: string, options?: StorageOptions) => Promise<void>;\n  getEncryptedProviderKeys: (options?: StorageOptions) => Promise<any>;\n  setEncryptedProviderKeys: (value: any, options?: StorageOptions) => Promise<void>;\n  getEncryptedSends: (options?: StorageOptions) => Promise<{ [id: string]: SendData }>;\n  setEncryptedSends: (value: { [id: string]: SendData }, options?: StorageOptions) => Promise<void>;\n  getEntityId: (options?: StorageOptions) => Promise<string>;\n  setEntityId: (value: string, options?: StorageOptions) => Promise<void>;\n  getEntityType: (options?: StorageOptions) => Promise<any>;\n  setEntityType: (value: string, options?: StorageOptions) => Promise<void>;\n  getEnvironmentUrls: (options?: StorageOptions) => Promise<EnvironmentUrls>;\n  setEnvironmentUrls: (value: EnvironmentUrls, options?: StorageOptions) => Promise<void>;\n  getEquivalentDomains: (options?: StorageOptions) => Promise<any>;\n  setEquivalentDomains: (value: string, options?: StorageOptions) => Promise<void>;\n  getEventCollection: (options?: StorageOptions) => Promise<EventData[]>;\n  setEventCollection: (value: EventData[], options?: StorageOptions) => Promise<void>;\n  getEverBeenUnlocked: (options?: StorageOptions) => Promise<boolean>;\n  setEverBeenUnlocked: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getForcePasswordReset: (options?: StorageOptions) => Promise<boolean>;\n  setForcePasswordReset: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getInstalledVersion: (options?: StorageOptions) => Promise<string>;\n  setInstalledVersion: (value: string, options?: StorageOptions) => Promise<void>;\n  getIsAuthenticated: (options?: StorageOptions) => Promise<boolean>;\n  getKdfIterations: (options?: StorageOptions) => Promise<number>;\n  setKdfIterations: (value: number, options?: StorageOptions) => Promise<void>;\n  getKdfType: (options?: StorageOptions) => Promise<KdfType>;\n  setKdfType: (value: KdfType, options?: StorageOptions) => Promise<void>;\n  getKeyHash: (options?: StorageOptions) => Promise<string>;\n  setKeyHash: (value: string, options?: StorageOptions) => Promise<void>;\n  getLastActive: (options?: StorageOptions) => Promise<number>;\n  setLastActive: (value: number, options?: StorageOptions) => Promise<void>;\n  getLastSync: (options?: StorageOptions) => Promise<string>;\n  setLastSync: (value: string, options?: StorageOptions) => Promise<void>;\n  getLocalData: (options?: StorageOptions) => Promise<any>;\n  setLocalData: (value: string, options?: StorageOptions) => Promise<void>;\n  getLocale: (options?: StorageOptions) => Promise<string>;\n  setLocale: (value: string, options?: StorageOptions) => Promise<void>;\n  getMainWindowSize: (options?: StorageOptions) => Promise<number>;\n  setMainWindowSize: (value: number, options?: StorageOptions) => Promise<void>;\n  getMinimizeOnCopyToClipboard: (options?: StorageOptions) => Promise<boolean>;\n  setMinimizeOnCopyToClipboard: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getNeverDomains: (options?: StorageOptions) => Promise<{ [id: string]: any }>;\n  setNeverDomains: (value: { [id: string]: any }, options?: StorageOptions) => Promise<void>;\n  getNoAutoPromptBiometrics: (options?: StorageOptions) => Promise<boolean>;\n  setNoAutoPromptBiometrics: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getNoAutoPromptBiometricsText: (options?: StorageOptions) => Promise<string>;\n  setNoAutoPromptBiometricsText: (value: string, options?: StorageOptions) => Promise<void>;\n  getOpenAtLogin: (options?: StorageOptions) => Promise<boolean>;\n  setOpenAtLogin: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getOrganizationInvitation: (options?: StorageOptions) => Promise<any>;\n  setOrganizationInvitation: (value: any, options?: StorageOptions) => Promise<void>;\n  getOrganizations: (options?: StorageOptions) => Promise<{ [id: string]: OrganizationData }>;\n  setOrganizations: (\n    value: { [id: string]: OrganizationData },\n    options?: StorageOptions\n  ) => Promise<void>;\n  getPasswordGenerationOptions: (options?: StorageOptions) => Promise<any>;\n  setPasswordGenerationOptions: (value: any, options?: StorageOptions) => Promise<void>;\n  getUsernameGenerationOptions: (options?: StorageOptions) => Promise<any>;\n  setUsernameGenerationOptions: (value: any, options?: StorageOptions) => Promise<void>;\n  getGeneratorOptions: (options?: StorageOptions) => Promise<any>;\n  setGeneratorOptions: (value: any, options?: StorageOptions) => Promise<void>;\n  getProtectedPin: (options?: StorageOptions) => Promise<string>;\n  setProtectedPin: (value: string, options?: StorageOptions) => Promise<void>;\n  getProviders: (options?: StorageOptions) => Promise<{ [id: string]: ProviderData }>;\n  setProviders: (value: { [id: string]: ProviderData }, options?: StorageOptions) => Promise<void>;\n  getPublicKey: (options?: StorageOptions) => Promise<ArrayBuffer>;\n  setPublicKey: (value: ArrayBuffer, options?: StorageOptions) => Promise<void>;\n  getRefreshToken: (options?: StorageOptions) => Promise<string>;\n  setRefreshToken: (value: string, options?: StorageOptions) => Promise<void>;\n  getRememberedEmail: (options?: StorageOptions) => Promise<string>;\n  setRememberedEmail: (value: string, options?: StorageOptions) => Promise<void>;\n  getSecurityStamp: (options?: StorageOptions) => Promise<string>;\n  setSecurityStamp: (value: string, options?: StorageOptions) => Promise<void>;\n  getSettings: (options?: StorageOptions) => Promise<any>;\n  setSettings: (value: string, options?: StorageOptions) => Promise<void>;\n  getSsoCodeVerifier: (options?: StorageOptions) => Promise<string>;\n  setSsoCodeVerifier: (value: string, options?: StorageOptions) => Promise<void>;\n  getSsoOrgIdentifier: (options?: StorageOptions) => Promise<string>;\n  setSsoOrganizationIdentifier: (value: string, options?: StorageOptions) => Promise<void>;\n  getSsoState: (options?: StorageOptions) => Promise<string>;\n  setSsoState: (value: string, options?: StorageOptions) => Promise<void>;\n  getTheme: (options?: StorageOptions) => Promise<ThemeType>;\n  setTheme: (value: ThemeType, options?: StorageOptions) => Promise<void>;\n  getTwoFactorToken: (options?: StorageOptions) => Promise<string>;\n  setTwoFactorToken: (value: string, options?: StorageOptions) => Promise<void>;\n  getUserId: (options?: StorageOptions) => Promise<string>;\n  getUsesKeyConnector: (options?: StorageOptions) => Promise<boolean>;\n  setUsesKeyConnector: (vaule: boolean, options?: StorageOptions) => Promise<void>;\n  getVaultTimeout: (options?: StorageOptions) => Promise<number>;\n  setVaultTimeout: (value: number, options?: StorageOptions) => Promise<void>;\n  getVaultTimeoutAction: (options?: StorageOptions) => Promise<string>;\n  setVaultTimeoutAction: (value: string, options?: StorageOptions) => Promise<void>;\n  getStateVersion: () => Promise<number>;\n  setStateVersion: (value: number) => Promise<void>;\n  getWindow: () => Promise<WindowState>;\n  setWindow: (value: WindowState) => Promise<void>;\n}\n","import { OrganizationData } from \"../models/data/organizationData\";\nimport { Organization } from \"../models/domain/organization\";\n\nexport abstract class OrganizationService {\n  get: (id: string) => Promise<Organization>;\n  getByIdentifier: (identifier: string) => Promise<Organization>;\n  getAll: (userId?: string) => Promise<Organization[]>;\n  save: (orgs: { [id: string]: OrganizationData }) => Promise<any>;\n  canManageSponsorships: () => Promise<boolean>;\n  hasOrganizations: (userId?: string) => Promise<boolean>;\n}\n","import { Observable } from \"rxjs\";\n\nimport { FolderData } from \"../../models/data/folderData\";\nimport { Folder } from \"../../models/domain/folder\";\nimport { SymmetricCryptoKey } from \"../../models/domain/symmetricCryptoKey\";\nimport { FolderView } from \"../../models/view/folderView\";\n\nexport abstract class FolderService {\n  folders$: Observable<Folder[]>;\n  folderViews$: Observable<FolderView[]>;\n\n  clearCache: () => Promise<void>;\n  encrypt: (model: FolderView, key?: SymmetricCryptoKey) => Promise<Folder>;\n  get: (id: string) => Promise<Folder>;\n  /**\n   * @deprecated Only use in CLI!\n   */\n  getAllDecryptedFromState: () => Promise<FolderView[]>;\n}\n\nexport abstract class InternalFolderService extends FolderService {\n  upsert: (folder: FolderData | FolderData[]) => Promise<void>;\n  replace: (folders: { [id: string]: FolderData }) => Promise<void>;\n  clear: (userId: string) => Promise<any>;\n  delete: (id: string | string[]) => Promise<any>;\n}\n","import { CipherType } from \"../enums/cipherType\";\nimport { UriMatchType } from \"../enums/uriMatchType\";\nimport { CipherData } from \"../models/data/cipherData\";\nimport { Cipher } from \"../models/domain/cipher\";\nimport { Field } from \"../models/domain/field\";\nimport { SymmetricCryptoKey } from \"../models/domain/symmetricCryptoKey\";\nimport { CipherView } from \"../models/view/cipherView\";\nimport { FieldView } from \"../models/view/fieldView\";\n\nexport abstract class CipherService {\n  clearCache: (userId?: string) => Promise<void>;\n  encrypt: (\n    model: CipherView,\n    key?: SymmetricCryptoKey,\n    originalCipher?: Cipher\n  ) => Promise<Cipher>;\n  encryptFields: (fieldsModel: FieldView[], key: SymmetricCryptoKey) => Promise<Field[]>;\n  encryptField: (fieldModel: FieldView, key: SymmetricCryptoKey) => Promise<Field>;\n  get: (id: string) => Promise<Cipher>;\n  getAll: () => Promise<Cipher[]>;\n  getAllDecrypted: () => Promise<CipherView[]>;\n  getAllDecryptedForGrouping: (groupingId: string, folder?: boolean) => Promise<CipherView[]>;\n  getAllDecryptedForUrl: (\n    url: string,\n    includeOtherTypes?: CipherType[],\n    defaultMatch?: UriMatchType\n  ) => Promise<CipherView[]>;\n  getAllFromApiForOrganization: (organizationId: string) => Promise<CipherView[]>;\n  getLastUsedForUrl: (url: string, autofillOnPageLoad: boolean) => Promise<CipherView>;\n  getLastLaunchedForUrl: (url: string, autofillOnPageLoad: boolean) => Promise<CipherView>;\n  getNextCipherForUrl: (url: string) => Promise<CipherView>;\n  updateLastUsedIndexForUrl: (url: string) => void;\n  updateLastUsedDate: (id: string) => Promise<void>;\n  updateLastLaunchedDate: (id: string) => Promise<void>;\n  saveNeverDomain: (domain: string) => Promise<void>;\n  saveWithServer: (cipher: Cipher) => Promise<any>;\n  shareWithServer: (\n    cipher: CipherView,\n    organizationId: string,\n    collectionIds: string[]\n  ) => Promise<any>;\n  shareManyWithServer: (\n    ciphers: CipherView[],\n    organizationId: string,\n    collectionIds: string[]\n  ) => Promise<any>;\n  saveAttachmentWithServer: (\n    cipher: Cipher,\n    unencryptedFile: any,\n    admin?: boolean\n  ) => Promise<Cipher>;\n  saveAttachmentRawWithServer: (\n    cipher: Cipher,\n    filename: string,\n    data: ArrayBuffer,\n    admin?: boolean\n  ) => Promise<Cipher>;\n  saveCollectionsWithServer: (cipher: Cipher) => Promise<any>;\n  upsert: (cipher: CipherData | CipherData[]) => Promise<any>;\n  replace: (ciphers: { [id: string]: CipherData }) => Promise<any>;\n  clear: (userId: string) => Promise<any>;\n  moveManyWithServer: (ids: string[], folderId: string) => Promise<any>;\n  delete: (id: string | string[]) => Promise<any>;\n  deleteWithServer: (id: string) => Promise<any>;\n  deleteManyWithServer: (ids: string[]) => Promise<any>;\n  deleteAttachment: (id: string, attachmentId: string) => Promise<void>;\n  deleteAttachmentWithServer: (id: string, attachmentId: string) => Promise<void>;\n  sortCiphersByLastUsed: (a: any, b: any) => number;\n  sortCiphersByLastUsedThenName: (a: any, b: any) => number;\n  getLocaleSortingFunction: () => (a: CipherView, b: CipherView) => number;\n  softDelete: (id: string | string[]) => Promise<any>;\n  softDeleteWithServer: (id: string) => Promise<any>;\n  softDeleteManyWithServer: (ids: string[]) => Promise<any>;\n  restore: (\n    cipher: { id: string; revisionDate: string } | { id: string; revisionDate: string }[]\n  ) => Promise<any>;\n  restoreWithServer: (id: string) => Promise<any>;\n  restoreManyWithServer: (ids: string[]) => Promise<any>;\n}\n","import { CollectionData } from \"../models/data/collectionData\";\nimport { Collection } from \"../models/domain/collection\";\nimport { TreeNode } from \"../models/domain/treeNode\";\nimport { CollectionView } from \"../models/view/collectionView\";\n\nexport abstract class CollectionService {\n  clearCache: (userId?: string) => Promise<void>;\n  encrypt: (model: CollectionView) => Promise<Collection>;\n  decryptMany: (collections: Collection[]) => Promise<CollectionView[]>;\n  get: (id: string) => Promise<Collection>;\n  getAll: () => Promise<Collection[]>;\n  getAllDecrypted: () => Promise<CollectionView[]>;\n  getAllNested: (collections?: CollectionView[]) => Promise<TreeNode<CollectionView>[]>;\n  getNested: (id: string) => Promise<TreeNode<CollectionView>>;\n  upsert: (collection: CollectionData | CollectionData[]) => Promise<any>;\n  replace: (collections: { [id: string]: CollectionData }) => Promise<any>;\n  clear: (userId: string) => Promise<any>;\n  delete: (id: string | string[]) => Promise<any>;\n}\n","import { PolicyType } from \"../../enums/policyType\";\nimport { PolicyData } from \"../../models/data/policyData\";\nimport { MasterPasswordPolicyOptions } from \"../../models/domain/masterPasswordPolicyOptions\";\nimport { Policy } from \"../../models/domain/policy\";\nimport { ResetPasswordPolicyOptions } from \"../../models/domain/resetPasswordPolicyOptions\";\nimport { ListResponse } from \"../../models/response/listResponse\";\nimport { PolicyResponse } from \"../../models/response/policyResponse\";\n\nexport abstract class PolicyService {\n  getAll: (type?: PolicyType, userId?: string) => Promise<Policy[]>;\n\n  getMasterPasswordPolicyOptions: (policies?: Policy[]) => Promise<MasterPasswordPolicyOptions>;\n  evaluateMasterPassword: (\n    passwordStrength: number,\n    newPassword: string,\n    enforcedPolicyOptions?: MasterPasswordPolicyOptions\n  ) => boolean;\n  getResetPasswordPolicyOptions: (\n    policies: Policy[],\n    orgId: string\n  ) => [ResetPasswordPolicyOptions, boolean];\n  mapPoliciesFromToken: (policiesResponse: ListResponse<PolicyResponse>) => Policy[];\n  policyAppliesToUser: (\n    policyType: PolicyType,\n    policyFilter?: (policy: Policy) => boolean,\n    userId?: string\n  ) => Promise<boolean>;\n}\n\nexport abstract class InternalPolicyService extends PolicyService {\n  upsert: (policy: PolicyData) => Promise<any>;\n  replace: (policies: { [id: string]: PolicyData }) => Promise<any>;\n  clear: (userId?: string) => Promise<any>;\n}\n","import { Injectable } from \"@angular/core\";\nimport { firstValueFrom, from, mergeMap, Observable } from \"rxjs\";\n\nimport { CipherService } from \"@bitwarden/common/abstractions/cipher.service\";\nimport { CollectionService } from \"@bitwarden/common/abstractions/collection.service\";\nimport { FolderService } from \"@bitwarden/common/abstractions/folder/folder.service.abstraction\";\nimport { OrganizationService } from \"@bitwarden/common/abstractions/organization.service\";\nimport { PolicyService } from \"@bitwarden/common/abstractions/policy/policy.service.abstraction\";\nimport { StateService } from \"@bitwarden/common/abstractions/state.service\";\nimport { PolicyType } from \"@bitwarden/common/enums/policyType\";\nimport { ServiceUtils } from \"@bitwarden/common/misc/serviceUtils\";\nimport { Organization } from \"@bitwarden/common/models/domain/organization\";\nimport { TreeNode } from \"@bitwarden/common/models/domain/treeNode\";\nimport { CollectionView } from \"@bitwarden/common/models/view/collectionView\";\nimport { FolderView } from \"@bitwarden/common/models/view/folderView\";\n\nimport { DynamicTreeNode } from \"../models/dynamic-tree-node.model\";\n\nconst NestingDelimiter = \"/\";\n\n@Injectable()\nexport class VaultFilterService {\n  constructor(\n    protected stateService: StateService,\n    protected organizationService: OrganizationService,\n    protected folderService: FolderService,\n    protected cipherService: CipherService,\n    protected collectionService: CollectionService,\n    protected policyService: PolicyService\n  ) {}\n\n  async storeCollapsedFilterNodes(collapsedFilterNodes: Set<string>): Promise<void> {\n    await this.stateService.setCollapsedGroupings(Array.from(collapsedFilterNodes));\n  }\n\n  async buildCollapsedFilterNodes(): Promise<Set<string>> {\n    return new Set(await this.stateService.getCollapsedGroupings());\n  }\n\n  async buildOrganizations(): Promise<Organization[]> {\n    return await this.organizationService.getAll();\n  }\n\n  buildNestedFolders(organizationId?: string): Observable<DynamicTreeNode<FolderView>> {\n    const transformation = async (storedFolders: FolderView[]) => {\n      let folders: FolderView[];\n      if (organizationId != null) {\n        const ciphers = await this.cipherService.getAllDecrypted();\n        const orgCiphers = ciphers.filter((c) => c.organizationId == organizationId);\n        folders = storedFolders.filter(\n          (f) =>\n            orgCiphers.filter((oc) => oc.folderId == f.id).length > 0 ||\n            ciphers.filter((c) => c.folderId == f.id).length < 1\n        );\n      } else {\n        folders = storedFolders;\n      }\n      const nestedFolders = await this.getAllFoldersNested(folders);\n      return new DynamicTreeNode<FolderView>({\n        fullList: folders,\n        nestedList: nestedFolders,\n      });\n    };\n\n    return this.folderService.folderViews$.pipe(\n      mergeMap((folders) => from(transformation(folders)))\n    );\n  }\n\n  async buildCollections(organizationId?: string): Promise<DynamicTreeNode<CollectionView>> {\n    const storedCollections = await this.collectionService.getAllDecrypted();\n    let collections: CollectionView[];\n    if (organizationId != null) {\n      collections = storedCollections.filter((c) => c.organizationId === organizationId);\n    } else {\n      collections = storedCollections;\n    }\n    const nestedCollections = await this.collectionService.getAllNested(collections);\n    return new DynamicTreeNode<CollectionView>({\n      fullList: collections,\n      nestedList: nestedCollections,\n    });\n  }\n\n  async checkForSingleOrganizationPolicy(): Promise<boolean> {\n    return await this.policyService.policyAppliesToUser(PolicyType.SingleOrg);\n  }\n\n  async checkForPersonalOwnershipPolicy(): Promise<boolean> {\n    return await this.policyService.policyAppliesToUser(PolicyType.PersonalOwnership);\n  }\n\n  protected async getAllFoldersNested(folders: FolderView[]): Promise<TreeNode<FolderView>[]> {\n    const nodes: TreeNode<FolderView>[] = [];\n    folders.forEach((f) => {\n      const folderCopy = new FolderView();\n      folderCopy.id = f.id;\n      folderCopy.revisionDate = f.revisionDate;\n      const parts = f.name != null ? f.name.replace(/^\\/+|\\/+$/g, \"\").split(NestingDelimiter) : [];\n      ServiceUtils.nestedTraverse(nodes, 0, parts, folderCopy, null, NestingDelimiter);\n    });\n    return nodes;\n  }\n\n  async getFolderNested(id: string): Promise<TreeNode<FolderView>> {\n    const folders = await this.getAllFoldersNested(\n      await firstValueFrom(this.folderService.folderViews$)\n    );\n    return ServiceUtils.getTreeNodeObject(folders, id) as TreeNode<FolderView>;\n  }\n}\n","import { VaultFilter } from \"@bitwarden/angular/vault/vault-filter/models/vault-filter.model\";\nimport { VaultFilterService as BaseVaultFilterService } from \"@bitwarden/angular/vault/vault-filter/services/vault-filter.service\";\nimport { CipherService } from \"@bitwarden/common/abstractions/cipher.service\";\nimport { CollectionService } from \"@bitwarden/common/abstractions/collection.service\";\nimport { FolderService } from \"@bitwarden/common/abstractions/folder/folder.service.abstraction\";\nimport { OrganizationService } from \"@bitwarden/common/abstractions/organization.service\";\nimport { PolicyService } from \"@bitwarden/common/abstractions/policy/policy.service.abstraction\";\nimport { StateService } from \"@bitwarden/common/abstractions/state.service\";\nimport { CipherView } from \"@bitwarden/common/models/view/cipherView\";\n\nexport class VaultFilterService extends BaseVaultFilterService {\n  vaultFilter: VaultFilter = new VaultFilter();\n\n  allVaults = \"allVaults\";\n  myVault = \"myVault\";\n\n  constructor(\n    stateService: StateService,\n    organizationService: OrganizationService,\n    folderService: FolderService,\n    cipherService: CipherService,\n    collectionService: CollectionService,\n    policyService: PolicyService\n  ) {\n    super(\n      stateService,\n      organizationService,\n      folderService,\n      cipherService,\n      collectionService,\n      policyService\n    );\n    this.vaultFilter.myVaultOnly = false;\n    this.vaultFilter.selectedOrganizationId = null;\n  }\n\n  getVaultFilter() {\n    return this.vaultFilter;\n  }\n\n  setVaultFilter(filter: string) {\n    if (filter === this.allVaults) {\n      this.vaultFilter.myVaultOnly = false;\n      this.vaultFilter.selectedOrganizationId = null;\n    } else if (filter === this.myVault) {\n      this.vaultFilter.myVaultOnly = true;\n      this.vaultFilter.selectedOrganizationId = null;\n    } else {\n      this.vaultFilter.myVaultOnly = false;\n      this.vaultFilter.selectedOrganizationId = filter;\n    }\n  }\n\n  clear() {\n    this.setVaultFilter(this.allVaults);\n  }\n\n  filterCipherForSelectedVault(cipher: CipherView) {\n    if (!this.vaultFilter.selectedOrganizationId && !this.vaultFilter.myVaultOnly) {\n      return false;\n    }\n    if (this.vaultFilter.selectedOrganizationId) {\n      if (cipher.organizationId === this.vaultFilter.selectedOrganizationId) {\n        return false;\n      }\n    } else if (this.vaultFilter.myVaultOnly) {\n      if (!cipher.organizationId) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n","import { VaultTimeoutService as BaseVaultTimeoutService } from \"@bitwarden/common/services/vaultTimeout.service\";\n\nimport { SafariApp } from \"../browser/safariApp\";\n\nexport default class VaultTimeoutService extends BaseVaultTimeoutService {\n  startCheck() {\n    this.checkVaultTimeout();\n    if (this.platformUtilsService.isSafari()) {\n      this.checkSafari();\n    } else {\n      setInterval(() => this.checkVaultTimeout(), 10 * 1000); // check every 10 seconds\n    }\n  }\n\n  // This is a work-around to safari adding an arbitary delay to setTimeout and\n  //  setIntervals. It works by calling the native extension which sleeps for 10s,\n  //  efficiently replicating setInterval.\n  async checkSafari() {\n    // eslint-disable-next-line\n    while (true) {\n      try {\n        await SafariApp.sendMessageToApp(\"sleep\");\n        this.checkVaultTimeout();\n      } catch (e) {\n        // eslint-disable-next-line\n        console.log(\"Exception Safari VaultTimeout\", e);\n      }\n    }\n  }\n}\n","import { AuthService } from \"../abstractions/auth.service\";\nimport { CipherService } from \"../abstractions/cipher.service\";\nimport { CollectionService } from \"../abstractions/collection.service\";\nimport { CryptoService } from \"../abstractions/crypto.service\";\nimport { FolderService } from \"../abstractions/folder/folder.service.abstraction\";\nimport { KeyConnectorService } from \"../abstractions/keyConnector.service\";\nimport { MessagingService } from \"../abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"../abstractions/platformUtils.service\";\nimport { PolicyService } from \"../abstractions/policy/policy.service.abstraction\";\nimport { SearchService } from \"../abstractions/search.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { TokenService } from \"../abstractions/token.service\";\nimport { VaultTimeoutService as VaultTimeoutServiceAbstraction } from \"../abstractions/vaultTimeout.service\";\nimport { AuthenticationStatus } from \"../enums/authenticationStatus\";\nimport { PolicyType } from \"../enums/policyType\";\n\nexport class VaultTimeoutService implements VaultTimeoutServiceAbstraction {\n  private inited = false;\n\n  constructor(\n    private cipherService: CipherService,\n    private folderService: FolderService,\n    private collectionService: CollectionService,\n    private cryptoService: CryptoService,\n    protected platformUtilsService: PlatformUtilsService,\n    private messagingService: MessagingService,\n    private searchService: SearchService,\n    private tokenService: TokenService,\n    private policyService: PolicyService,\n    private keyConnectorService: KeyConnectorService,\n    private stateService: StateService,\n    private authService: AuthService,\n    private lockedCallback: (userId?: string) => Promise<void> = null,\n    private loggedOutCallback: (expired: boolean, userId?: string) => Promise<void> = null\n  ) {}\n\n  init(checkOnInterval: boolean) {\n    if (this.inited) {\n      return;\n    }\n\n    this.inited = true;\n    if (checkOnInterval) {\n      this.startCheck();\n    }\n  }\n\n  startCheck() {\n    this.checkVaultTimeout();\n    setInterval(() => this.checkVaultTimeout(), 10 * 1000); // check every 10 seconds\n  }\n\n  async checkVaultTimeout(): Promise<void> {\n    if (await this.platformUtilsService.isViewOpen()) {\n      return;\n    }\n\n    for (const userId in this.stateService.accounts.getValue()) {\n      if (userId != null && (await this.shouldLock(userId))) {\n        await this.executeTimeoutAction(userId);\n      }\n    }\n  }\n\n  async lock(allowSoftLock = false, userId?: string): Promise<void> {\n    const authed = await this.stateService.getIsAuthenticated({ userId: userId });\n    if (!authed) {\n      return;\n    }\n\n    if (await this.keyConnectorService.getUsesKeyConnector()) {\n      const pinSet = await this.isPinLockSet();\n      const pinLock =\n        (pinSet[0] && (await this.stateService.getDecryptedPinProtected()) != null) || pinSet[1];\n\n      if (!pinLock && !(await this.isBiometricLockSet())) {\n        await this.logOut(userId);\n      }\n    }\n\n    if (userId == null || userId === (await this.stateService.getUserId())) {\n      this.searchService.clearIndex();\n      await this.folderService.clearCache();\n    }\n\n    await this.stateService.setEverBeenUnlocked(true, { userId: userId });\n    await this.stateService.setCryptoMasterKeyAuto(null, { userId: userId });\n\n    await this.cryptoService.clearKey(false, userId);\n    await this.cryptoService.clearOrgKeys(true, userId);\n    await this.cryptoService.clearKeyPair(true, userId);\n    await this.cryptoService.clearEncKey(true, userId);\n\n    await this.cipherService.clearCache(userId);\n    await this.collectionService.clearCache(userId);\n\n    this.messagingService.send(\"locked\", { userId: userId });\n\n    if (this.lockedCallback != null) {\n      await this.lockedCallback(userId);\n    }\n  }\n\n  async logOut(userId?: string): Promise<void> {\n    if (this.loggedOutCallback != null) {\n      await this.loggedOutCallback(false, userId);\n    }\n  }\n\n  async setVaultTimeoutOptions(timeout: number, action: string): Promise<void> {\n    await this.stateService.setVaultTimeout(timeout);\n\n    // We swap these tokens from being on disk for lock actions, and in memory for logout actions\n    // Get them here to set them to their new location after changing the timeout action and clearing if needed\n    const token = await this.tokenService.getToken();\n    const refreshToken = await this.tokenService.getRefreshToken();\n    const clientId = await this.tokenService.getClientId();\n    const clientSecret = await this.tokenService.getClientSecret();\n\n    const currentAction = await this.stateService.getVaultTimeoutAction();\n    if ((timeout != null || timeout === 0) && action === \"logOut\" && action !== currentAction) {\n      // if we have a vault timeout and the action is log out, reset tokens\n      await this.tokenService.clearToken();\n    }\n\n    await this.stateService.setVaultTimeoutAction(action);\n\n    await this.tokenService.setToken(token);\n    await this.tokenService.setRefreshToken(refreshToken);\n    await this.tokenService.setClientId(clientId);\n    await this.tokenService.setClientSecret(clientSecret);\n\n    await this.cryptoService.toggleKey();\n  }\n\n  async isPinLockSet(): Promise<[boolean, boolean]> {\n    const protectedPin = await this.stateService.getProtectedPin();\n    const pinProtectedKey = await this.stateService.getEncryptedPinProtected();\n    return [protectedPin != null, pinProtectedKey != null];\n  }\n\n  async isBiometricLockSet(): Promise<boolean> {\n    return await this.stateService.getBiometricUnlock();\n  }\n\n  async getVaultTimeout(userId?: string): Promise<number> {\n    const vaultTimeout = await this.stateService.getVaultTimeout({ userId: userId });\n\n    if (\n      await this.policyService.policyAppliesToUser(PolicyType.MaximumVaultTimeout, null, userId)\n    ) {\n      const policy = await this.policyService.getAll(PolicyType.MaximumVaultTimeout, userId);\n      // Remove negative values, and ensure it's smaller than maximum allowed value according to policy\n      let timeout = Math.min(vaultTimeout, policy[0].data.minutes);\n\n      if (vaultTimeout == null || timeout < 0) {\n        timeout = policy[0].data.minutes;\n      }\n\n      // We really shouldn't need to set the value here, but multiple services relies on this value being correct.\n      if (vaultTimeout !== timeout) {\n        await this.stateService.setVaultTimeout(timeout, { userId: userId });\n      }\n\n      return timeout;\n    }\n\n    return vaultTimeout;\n  }\n\n  async clear(userId?: string): Promise<void> {\n    await this.stateService.setEverBeenUnlocked(false, { userId: userId });\n    await this.stateService.setDecryptedPinProtected(null, { userId: userId });\n    await this.stateService.setProtectedPin(null, { userId: userId });\n  }\n\n  private async shouldLock(userId: string): Promise<boolean> {\n    const authStatus = await this.authService.getAuthStatus(userId);\n    if (\n      authStatus === AuthenticationStatus.Locked ||\n      authStatus === AuthenticationStatus.LoggedOut\n    ) {\n      return false;\n    }\n\n    const vaultTimeout = await this.getVaultTimeout(userId);\n    if (vaultTimeout == null || vaultTimeout < 0) {\n      return false;\n    }\n\n    const lastActive = await this.stateService.getLastActive({ userId: userId });\n    if (lastActive == null) {\n      return false;\n    }\n\n    const vaultTimeoutSeconds = vaultTimeout * 60;\n    const diffSeconds = (new Date().getTime() - lastActive) / 1000;\n    return diffSeconds >= vaultTimeoutSeconds;\n  }\n\n  private async executeTimeoutAction(userId: string): Promise<void> {\n    const timeoutAction = await this.stateService.getVaultTimeoutAction({ userId: userId });\n    timeoutAction === \"logOut\" ? await this.logOut(userId) : await this.lock(true, userId);\n  }\n}\n","import { AuthService } from \"@bitwarden/common/abstractions/auth.service\";\nimport { PasswordGenerationService } from \"@bitwarden/common/abstractions/passwordGeneration.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { VaultTimeoutService } from \"@bitwarden/common/abstractions/vaultTimeout.service\";\nimport { AuthenticationStatus } from \"@bitwarden/common/enums/authenticationStatus\";\n\nimport { BrowserApi } from \"../browser/browserApi\";\n\nimport MainBackground from \"./main.background\";\nimport LockedVaultPendingNotificationsItem from \"./models/lockedVaultPendingNotificationsItem\";\n\nexport default class CommandsBackground {\n  private isSafari: boolean;\n  private isVivaldi: boolean;\n\n  constructor(\n    private main: MainBackground,\n    private passwordGenerationService: PasswordGenerationService,\n    private platformUtilsService: PlatformUtilsService,\n    private vaultTimeoutService: VaultTimeoutService,\n    private authService: AuthService\n  ) {\n    this.isSafari = this.platformUtilsService.isSafari();\n    this.isVivaldi = this.platformUtilsService.isVivaldi();\n  }\n\n  async init() {\n    BrowserApi.messageListener(\n      \"commands.background\",\n      async (msg: any, sender: chrome.runtime.MessageSender, sendResponse: any) => {\n        if (msg.command === \"unlockCompleted\" && msg.data.target === \"commands.background\") {\n          await this.processCommand(\n            msg.data.commandToRetry.msg.command,\n            msg.data.commandToRetry.sender\n          );\n        }\n\n        if (this.isVivaldi && msg.command === \"keyboardShortcutTriggered\" && msg.shortcut) {\n          await this.processCommand(msg.shortcut, sender);\n        }\n      }\n    );\n\n    if (!this.isVivaldi && chrome && chrome.commands) {\n      chrome.commands.onCommand.addListener(async (command: string) => {\n        await this.processCommand(command);\n      });\n    }\n  }\n\n  private async processCommand(command: string, sender?: chrome.runtime.MessageSender) {\n    switch (command) {\n      case \"generate_password\":\n        await this.generatePasswordToClipboard();\n        break;\n      case \"autofill_login\":\n        await this.autoFillLogin(sender ? sender.tab : null);\n        break;\n      case \"open_popup\":\n        await this.openPopup();\n        break;\n      case \"lock_vault\":\n        await this.vaultTimeoutService.lock(true);\n        break;\n      default:\n        break;\n    }\n  }\n\n  private async generatePasswordToClipboard() {\n    const options = (await this.passwordGenerationService.getOptions())[0];\n    const password = await this.passwordGenerationService.generatePassword(options);\n    this.platformUtilsService.copyToClipboard(password, { window: window });\n    this.passwordGenerationService.addHistory(password);\n  }\n\n  private async autoFillLogin(tab?: chrome.tabs.Tab) {\n    if (!tab) {\n      tab = await BrowserApi.getTabFromCurrentWindowId();\n    }\n\n    if (tab == null) {\n      return;\n    }\n\n    if ((await this.authService.getAuthStatus()) < AuthenticationStatus.Unlocked) {\n      const retryMessage: LockedVaultPendingNotificationsItem = {\n        commandToRetry: {\n          msg: { command: \"autofill_login\" },\n          sender: { tab: tab },\n        },\n        target: \"commands.background\",\n      };\n      await BrowserApi.tabSendMessageData(\n        tab,\n        \"addToLockedVaultPendingNotifications\",\n        retryMessage\n      );\n\n      BrowserApi.tabSendMessageData(tab, \"promptForLogin\");\n      return;\n    }\n\n    await this.main.collectPageDetailsForContentScript(tab, \"autofill_cmd\");\n  }\n\n  private async openPopup() {\n    // Chrome APIs cannot open popup\n    if (!this.isSafari) {\n      return;\n    }\n\n    this.main.openPopup();\n  }\n}\n","import { AuthService } from \"@bitwarden/common/abstractions/auth.service\";\nimport { CipherService } from \"@bitwarden/common/abstractions/cipher.service\";\nimport { EventService } from \"@bitwarden/common/abstractions/event.service\";\nimport { PasswordGenerationService } from \"@bitwarden/common/abstractions/passwordGeneration.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { TotpService } from \"@bitwarden/common/abstractions/totp.service\";\nimport { AuthenticationStatus } from \"@bitwarden/common/enums/authenticationStatus\";\nimport { CipherRepromptType } from \"@bitwarden/common/enums/cipherRepromptType\";\nimport { EventType } from \"@bitwarden/common/enums/eventType\";\nimport { CipherView } from \"@bitwarden/common/models/view/cipherView\";\n\nimport { BrowserApi } from \"../browser/browserApi\";\n\nimport MainBackground from \"./main.background\";\nimport LockedVaultPendingNotificationsItem from \"./models/lockedVaultPendingNotificationsItem\";\n\nexport default class ContextMenusBackground {\n  private readonly noopCommandSuffix = \"noop\";\n  private contextMenus: any;\n\n  constructor(\n    private main: MainBackground,\n    private cipherService: CipherService,\n    private passwordGenerationService: PasswordGenerationService,\n    private platformUtilsService: PlatformUtilsService,\n    private authService: AuthService,\n    private eventService: EventService,\n    private totpService: TotpService\n  ) {\n    this.contextMenus = chrome.contextMenus;\n  }\n\n  async init() {\n    if (!this.contextMenus) {\n      return;\n    }\n\n    this.contextMenus.onClicked.addListener(\n      async (info: chrome.contextMenus.OnClickData, tab: chrome.tabs.Tab) => {\n        if (info.menuItemId === \"generate-password\") {\n          await this.generatePasswordToClipboard();\n        } else if (info.menuItemId === \"copy-identifier\") {\n          await this.getClickedElement(tab, info.frameId);\n        } else if (\n          info.parentMenuItemId === \"autofill\" ||\n          info.parentMenuItemId === \"copy-username\" ||\n          info.parentMenuItemId === \"copy-password\" ||\n          info.parentMenuItemId === \"copy-totp\"\n        ) {\n          await this.cipherAction(tab, info);\n        }\n      }\n    );\n\n    BrowserApi.messageListener(\n      \"contextmenus.background\",\n      async (msg: any, sender: chrome.runtime.MessageSender, sendResponse: any) => {\n        if (msg.command === \"unlockCompleted\" && msg.data.target === \"contextmenus.background\") {\n          await this.cipherAction(\n            msg.data.commandToRetry.sender.tab,\n            msg.data.commandToRetry.msg.data\n          );\n        }\n      }\n    );\n  }\n\n  private async generatePasswordToClipboard() {\n    const options = (await this.passwordGenerationService.getOptions())[0];\n    const password = await this.passwordGenerationService.generatePassword(options);\n    this.platformUtilsService.copyToClipboard(password, { window: window });\n    this.passwordGenerationService.addHistory(password);\n  }\n\n  private async getClickedElement(tab: chrome.tabs.Tab, frameId: number) {\n    if (tab == null) {\n      return;\n    }\n\n    BrowserApi.tabSendMessage(tab, { command: \"getClickedElement\" }, { frameId: frameId });\n  }\n\n  private async cipherAction(tab: chrome.tabs.Tab, info: chrome.contextMenus.OnClickData) {\n    if (typeof info.menuItemId !== \"string\") {\n      return;\n    }\n\n    const id = info.menuItemId.split(\"_\")[1];\n\n    if ((await this.authService.getAuthStatus()) < AuthenticationStatus.Unlocked) {\n      const retryMessage: LockedVaultPendingNotificationsItem = {\n        commandToRetry: {\n          msg: { command: this.noopCommandSuffix, data: info },\n          sender: { tab: tab },\n        },\n        target: \"contextmenus.background\",\n      };\n      await BrowserApi.tabSendMessageData(\n        tab,\n        \"addToLockedVaultPendingNotifications\",\n        retryMessage\n      );\n\n      BrowserApi.tabSendMessageData(tab, \"promptForLogin\");\n      return;\n    }\n\n    let cipher: CipherView;\n    if (id === this.noopCommandSuffix) {\n      const ciphers = await this.cipherService.getAllDecryptedForUrl(tab.url);\n      cipher = ciphers.find((c) => c.reprompt === CipherRepromptType.None);\n    } else {\n      const ciphers = await this.cipherService.getAllDecrypted();\n      cipher = ciphers.find((c) => c.id === id);\n    }\n\n    if (cipher == null) {\n      return;\n    }\n\n    if (info.parentMenuItemId === \"autofill\") {\n      await this.startAutofillPage(tab, cipher);\n    } else if (info.parentMenuItemId === \"copy-username\") {\n      this.platformUtilsService.copyToClipboard(cipher.login.username, { window: window });\n    } else if (info.parentMenuItemId === \"copy-password\") {\n      this.platformUtilsService.copyToClipboard(cipher.login.password, { window: window });\n      this.eventService.collect(EventType.Cipher_ClientCopiedPassword, cipher.id);\n    } else if (info.parentMenuItemId === \"copy-totp\") {\n      const totpValue = await this.totpService.getCode(cipher.login.totp);\n      this.platformUtilsService.copyToClipboard(totpValue, { window: window });\n    }\n  }\n\n  private async startAutofillPage(tab: chrome.tabs.Tab, cipher: CipherView) {\n    this.main.loginToAutoFill = cipher;\n    if (tab == null) {\n      return;\n    }\n\n    BrowserApi.tabSendMessage(tab, {\n      command: \"collectPageDetails\",\n      tab: tab,\n      sender: \"contextMenu\",\n    });\n  }\n}\n","import { NotificationsService } from \"@bitwarden/common/abstractions/notifications.service\";\nimport { VaultTimeoutService } from \"@bitwarden/common/abstractions/vaultTimeout.service\";\n\nimport { StateService } from \"../services/abstractions/state.service\";\n\nconst IdleInterval = 60 * 5; // 5 minutes\n\nexport default class IdleBackground {\n  private idle: any;\n  private idleTimer: number = null;\n  private idleState = \"active\";\n\n  constructor(\n    private vaultTimeoutService: VaultTimeoutService,\n    private stateService: StateService,\n    private notificationsService: NotificationsService\n  ) {\n    this.idle = chrome.idle || (browser != null ? browser.idle : null);\n  }\n\n  async init() {\n    if (!this.idle) {\n      return;\n    }\n\n    const idleHandler = (newState: string) => {\n      if (newState === \"active\") {\n        this.notificationsService.reconnectFromActivity();\n      } else {\n        this.notificationsService.disconnectFromInactivity();\n      }\n    };\n    if (this.idle.onStateChanged && this.idle.setDetectionInterval) {\n      this.idle.setDetectionInterval(IdleInterval);\n      this.idle.onStateChanged.addListener(idleHandler);\n    } else {\n      this.pollIdle(idleHandler);\n    }\n\n    if (this.idle.onStateChanged) {\n      this.idle.onStateChanged.addListener(async (newState: string) => {\n        if (newState === \"locked\") {\n          // If the screen is locked or the screensaver activates\n          const timeout = await this.stateService.getVaultTimeout();\n          if (timeout === -2) {\n            // On System Lock vault timeout option\n            const action = await this.stateService.getVaultTimeoutAction();\n            if (action === \"logOut\") {\n              await this.vaultTimeoutService.logOut();\n            } else {\n              await this.vaultTimeoutService.lock(true);\n            }\n          }\n        }\n      });\n    }\n  }\n\n  private pollIdle(handler: (newState: string) => void) {\n    if (this.idleTimer != null) {\n      window.clearTimeout(this.idleTimer);\n      this.idleTimer = null;\n    }\n    this.idle.queryState(IdleInterval, (state: string) => {\n      if (state !== this.idleState) {\n        this.idleState = state;\n        handler(state);\n      }\n      this.idleTimer = window.setTimeout(() => this.pollIdle(handler), 5000);\n    });\n  }\n}\n","import { AppIdService } from \"@bitwarden/common/abstractions/appId.service\";\nimport { AuthService } from \"@bitwarden/common/abstractions/auth.service\";\nimport { CryptoService } from \"@bitwarden/common/abstractions/crypto.service\";\nimport { CryptoFunctionService } from \"@bitwarden/common/abstractions/cryptoFunction.service\";\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/abstractions/log.service\";\nimport { MessagingService } from \"@bitwarden/common/abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { StateService } from \"@bitwarden/common/abstractions/state.service\";\nimport { AuthenticationStatus } from \"@bitwarden/common/enums/authenticationStatus\";\nimport { Utils } from \"@bitwarden/common/misc/utils\";\nimport { EncString } from \"@bitwarden/common/models/domain/encString\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/models/domain/symmetricCryptoKey\";\n\nimport { BrowserApi } from \"../browser/browserApi\";\n\nimport RuntimeBackground from \"./runtime.background\";\n\nconst MessageValidTimeout = 10 * 1000;\nconst EncryptionAlgorithm = \"sha1\";\n\ntype Message = {\n  command: string;\n\n  // Filled in by this service\n  userId?: string;\n  timestamp?: number;\n\n  // Used for sharing secret\n  publicKey?: string;\n};\n\ntype OuterMessage = {\n  message: Message | EncString;\n  appId: string;\n};\n\ntype ReceiveMessage = {\n  timestamp: number;\n  command: string;\n  response?: any;\n\n  // Unlock key\n  keyB64?: string;\n};\n\ntype ReceiveMessageOuter = {\n  command: string;\n  appId: string;\n\n  // Should only have one of these.\n  message?: EncString;\n  sharedSecret?: string;\n};\n\nexport class NativeMessagingBackground {\n  private connected = false;\n  private connecting: boolean;\n  private port: browser.runtime.Port | chrome.runtime.Port;\n\n  private resolver: any = null;\n  private privateKey: ArrayBuffer = null;\n  private publicKey: ArrayBuffer = null;\n  private secureSetupResolve: any = null;\n  private sharedSecret: SymmetricCryptoKey;\n  private appId: string;\n  private validatingFingerprint: boolean;\n\n  constructor(\n    private cryptoService: CryptoService,\n    private cryptoFunctionService: CryptoFunctionService,\n    private runtimeBackground: RuntimeBackground,\n    private i18nService: I18nService,\n    private messagingService: MessagingService,\n    private appIdService: AppIdService,\n    private platformUtilsService: PlatformUtilsService,\n    private stateService: StateService,\n    private logService: LogService,\n    private authService: AuthService\n  ) {\n    this.stateService.setBiometricFingerprintValidated(false);\n\n    if (chrome?.permissions?.onAdded) {\n      // Reload extension to activate nativeMessaging\n      chrome.permissions.onAdded.addListener((permissions) => {\n        BrowserApi.reloadExtension(null);\n      });\n    }\n  }\n\n  async connect() {\n    this.appId = await this.appIdService.getAppId();\n    this.stateService.setBiometricFingerprintValidated(false);\n\n    return new Promise<void>((resolve, reject) => {\n      this.port = BrowserApi.connectNative(\"com.8bit.bitwarden\");\n\n      this.connecting = true;\n\n      const connectedCallback = () => {\n        this.connected = true;\n        this.connecting = false;\n        resolve();\n      };\n\n      // Safari has a bundled native component which is always available, no need to\n      // check if the desktop app is running.\n      if (this.platformUtilsService.isSafari()) {\n        connectedCallback();\n      }\n\n      this.port.onMessage.addListener(async (message: ReceiveMessageOuter) => {\n        switch (message.command) {\n          case \"connected\":\n            connectedCallback();\n            break;\n          case \"disconnected\":\n            if (this.connecting) {\n              reject(\"startDesktop\");\n            }\n            this.connected = false;\n            this.port.disconnect();\n            break;\n          case \"setupEncryption\": {\n            // Ignore since it belongs to another device\n            if (message.appId !== this.appId) {\n              return;\n            }\n\n            const encrypted = Utils.fromB64ToArray(message.sharedSecret);\n            const decrypted = await this.cryptoFunctionService.rsaDecrypt(\n              encrypted.buffer,\n              this.privateKey,\n              EncryptionAlgorithm\n            );\n\n            if (this.validatingFingerprint) {\n              this.validatingFingerprint = false;\n              this.stateService.setBiometricFingerprintValidated(true);\n            }\n            this.sharedSecret = new SymmetricCryptoKey(decrypted);\n            this.secureSetupResolve();\n            break;\n          }\n          case \"invalidateEncryption\":\n            // Ignore since it belongs to another device\n            if (message.appId !== this.appId) {\n              return;\n            }\n\n            this.sharedSecret = null;\n            this.privateKey = null;\n            this.connected = false;\n\n            this.messagingService.send(\"showDialog\", {\n              text: this.i18nService.t(\"nativeMessagingInvalidEncryptionDesc\"),\n              title: this.i18nService.t(\"nativeMessagingInvalidEncryptionTitle\"),\n              confirmText: this.i18nService.t(\"ok\"),\n              type: \"error\",\n            });\n            break;\n          case \"verifyFingerprint\": {\n            if (this.sharedSecret == null) {\n              this.validatingFingerprint = true;\n              this.showFingerprintDialog();\n            }\n            break;\n          }\n          case \"wrongUserId\":\n            this.showWrongUserDialog();\n            break;\n          default:\n            // Ignore since it belongs to another device\n            if (!this.platformUtilsService.isSafari() && message.appId !== this.appId) {\n              return;\n            }\n\n            this.onMessage(message.message);\n        }\n      });\n\n      this.port.onDisconnect.addListener((p: any) => {\n        let error;\n        if (BrowserApi.isWebExtensionsApi) {\n          error = p.error.message;\n        } else {\n          error = chrome.runtime.lastError.message;\n        }\n\n        this.sharedSecret = null;\n        this.privateKey = null;\n        this.connected = false;\n\n        const reason = error != null ? \"desktopIntegrationDisabled\" : null;\n        reject(reason);\n      });\n    });\n  }\n\n  showWrongUserDialog() {\n    this.messagingService.send(\"showDialog\", {\n      text: this.i18nService.t(\"nativeMessagingWrongUserDesc\"),\n      title: this.i18nService.t(\"nativeMessagingWrongUserTitle\"),\n      confirmText: this.i18nService.t(\"ok\"),\n      type: \"error\",\n    });\n  }\n\n  async send(message: Message) {\n    if (!this.connected) {\n      await this.connect();\n    }\n\n    message.userId = await this.stateService.getUserId();\n    message.timestamp = Date.now();\n\n    if (this.platformUtilsService.isSafari()) {\n      this.postMessage(message as any);\n    } else {\n      this.postMessage({ appId: this.appId, message: await this.encryptMessage(message) });\n    }\n  }\n\n  async encryptMessage(message: Message) {\n    if (this.sharedSecret == null) {\n      await this.secureCommunication();\n    }\n\n    return await this.cryptoService.encrypt(JSON.stringify(message), this.sharedSecret);\n  }\n\n  getResponse(): Promise<any> {\n    return new Promise((resolve, reject) => {\n      this.resolver = resolve;\n    });\n  }\n\n  private postMessage(message: OuterMessage) {\n    // Wrap in try-catch to when the port disconnected without triggering `onDisconnect`.\n    try {\n      const msg: any = message;\n      if (message.message instanceof EncString) {\n        // Alternative, backwards-compatible serialization of EncString\n        msg.message = {\n          encryptedString: message.message.encryptedString,\n          encryptionType: message.message.encryptionType,\n          data: message.message.data,\n          iv: message.message.iv,\n          mac: message.message.mac,\n        };\n      }\n      this.port.postMessage(msg);\n    } catch (e) {\n      this.logService.error(\"NativeMessaging port disconnected, disconnecting.\");\n\n      this.sharedSecret = null;\n      this.privateKey = null;\n      this.connected = false;\n\n      this.messagingService.send(\"showDialog\", {\n        text: this.i18nService.t(\"nativeMessagingInvalidEncryptionDesc\"),\n        title: this.i18nService.t(\"nativeMessagingInvalidEncryptionTitle\"),\n        confirmText: this.i18nService.t(\"ok\"),\n        type: \"error\",\n      });\n    }\n  }\n\n  private async onMessage(rawMessage: ReceiveMessage | EncString) {\n    let message = rawMessage as ReceiveMessage;\n    if (!this.platformUtilsService.isSafari()) {\n      message = JSON.parse(\n        await this.cryptoService.decryptToUtf8(rawMessage as EncString, this.sharedSecret)\n      );\n    }\n\n    if (Math.abs(message.timestamp - Date.now()) > MessageValidTimeout) {\n      this.logService.error(\"NativeMessage is to old, ignoring.\");\n      return;\n    }\n\n    switch (message.command) {\n      case \"biometricUnlock\": {\n        await this.stateService.setBiometricAwaitingAcceptance(null);\n\n        if (message.response === \"not enabled\") {\n          this.messagingService.send(\"showDialog\", {\n            text: this.i18nService.t(\"biometricsNotEnabledDesc\"),\n            title: this.i18nService.t(\"biometricsNotEnabledTitle\"),\n            confirmText: this.i18nService.t(\"ok\"),\n            type: \"error\",\n          });\n          break;\n        } else if (message.response === \"not supported\") {\n          this.messagingService.send(\"showDialog\", {\n            text: this.i18nService.t(\"biometricsNotSupportedDesc\"),\n            title: this.i18nService.t(\"biometricsNotSupportedTitle\"),\n            confirmText: this.i18nService.t(\"ok\"),\n            type: \"error\",\n          });\n          break;\n        }\n\n        const enabled = await this.stateService.getBiometricUnlock();\n        if (enabled === null || enabled === false) {\n          if (message.response === \"unlocked\") {\n            await this.stateService.setBiometricUnlock(true);\n          }\n          break;\n        }\n\n        // Ignore unlock if already unlocked\n        if ((await this.authService.getAuthStatus()) === AuthenticationStatus.Unlocked) {\n          break;\n        }\n\n        if (message.response === \"unlocked\") {\n          await this.cryptoService.setKey(\n            new SymmetricCryptoKey(Utils.fromB64ToArray(message.keyB64).buffer)\n          );\n\n          // Verify key is correct by attempting to decrypt a secret\n          try {\n            await this.cryptoService.getFingerprint(await this.stateService.getUserId());\n          } catch (e) {\n            this.logService.error(\"Unable to verify key: \" + e);\n            await this.cryptoService.clearKey();\n            this.showWrongUserDialog();\n\n            // Exit early\n            if (this.resolver) {\n              this.resolver(message);\n            }\n            return;\n          }\n\n          this.runtimeBackground.processMessage({ command: \"unlocked\" }, null, null);\n        }\n        break;\n      }\n      default:\n        this.logService.error(\"NativeMessage, got unknown command: \" + message.command);\n        break;\n    }\n\n    if (this.resolver) {\n      this.resolver(message);\n    }\n  }\n\n  private async secureCommunication() {\n    const [publicKey, privateKey] = await this.cryptoFunctionService.rsaGenerateKeyPair(2048);\n    this.publicKey = publicKey;\n    this.privateKey = privateKey;\n\n    this.sendUnencrypted({\n      command: \"setupEncryption\",\n      publicKey: Utils.fromBufferToB64(publicKey),\n      userId: await this.stateService.getUserId(),\n    });\n\n    return new Promise((resolve, reject) => (this.secureSetupResolve = resolve));\n  }\n\n  private async sendUnencrypted(message: Message) {\n    if (!this.connected) {\n      await this.connect();\n    }\n\n    message.timestamp = Date.now();\n\n    this.postMessage({ appId: this.appId, message: message });\n  }\n\n  private async showFingerprintDialog() {\n    const fingerprint = (\n      await this.cryptoService.getFingerprint(await this.stateService.getUserId(), this.publicKey)\n    ).join(\" \");\n\n    this.messagingService.send(\"showDialog\", {\n      html: `${this.i18nService.t(\n        \"desktopIntegrationVerificationText\"\n      )}<br><br><strong>${fingerprint}</strong>`,\n      title: this.i18nService.t(\"desktopSyncVerificationTitle\"),\n      confirmText: this.i18nService.t(\"ok\"),\n      type: \"warning\",\n    });\n  }\n}\n","export enum NotificationQueueMessageType {\n  AddLogin = 0,\n  ChangePassword = 1,\n}\n","import { firstValueFrom } from \"rxjs\";\n\nimport { AuthService } from \"@bitwarden/common/abstractions/auth.service\";\nimport { CipherService } from \"@bitwarden/common/abstractions/cipher.service\";\nimport { FolderService } from \"@bitwarden/common/abstractions/folder/folder.service.abstraction\";\nimport { PolicyService } from \"@bitwarden/common/abstractions/policy/policy.service.abstraction\";\nimport { AuthenticationStatus } from \"@bitwarden/common/enums/authenticationStatus\";\nimport { CipherType } from \"@bitwarden/common/enums/cipherType\";\nimport { PolicyType } from \"@bitwarden/common/enums/policyType\";\nimport { Utils } from \"@bitwarden/common/misc/utils\";\nimport { CipherView } from \"@bitwarden/common/models/view/cipherView\";\nimport { LoginUriView } from \"@bitwarden/common/models/view/loginUriView\";\nimport { LoginView } from \"@bitwarden/common/models/view/loginView\";\n\nimport { BrowserApi } from \"../browser/browserApi\";\nimport { AutofillService } from \"../services/abstractions/autofill.service\";\nimport { StateService } from \"../services/abstractions/state.service\";\n\nimport AddChangePasswordQueueMessage from \"./models/addChangePasswordQueueMessage\";\nimport AddLoginQueueMessage from \"./models/addLoginQueueMessage\";\nimport AddLoginRuntimeMessage from \"./models/addLoginRuntimeMessage\";\nimport ChangePasswordRuntimeMessage from \"./models/changePasswordRuntimeMessage\";\nimport LockedVaultPendingNotificationsItem from \"./models/lockedVaultPendingNotificationsItem\";\nimport { NotificationQueueMessageType } from \"./models/notificationQueueMessageType\";\n\nexport default class NotificationBackground {\n  private notificationQueue: (AddLoginQueueMessage | AddChangePasswordQueueMessage)[] = [];\n\n  constructor(\n    private autofillService: AutofillService,\n    private cipherService: CipherService,\n    private authService: AuthService,\n    private policyService: PolicyService,\n    private folderService: FolderService,\n    private stateService: StateService\n  ) {}\n\n  async init() {\n    if (chrome.runtime == null) {\n      return;\n    }\n\n    BrowserApi.messageListener(\n      \"notification.background\",\n      async (msg: any, sender: chrome.runtime.MessageSender) => {\n        await this.processMessage(msg, sender);\n      }\n    );\n\n    this.cleanupNotificationQueue();\n  }\n\n  async processMessage(msg: any, sender: chrome.runtime.MessageSender) {\n    switch (msg.command) {\n      case \"unlockCompleted\":\n        if (msg.data.target !== \"notification.background\") {\n          return;\n        }\n        await this.processMessage(msg.data.commandToRetry.msg, msg.data.commandToRetry.sender);\n        break;\n      case \"bgGetDataForTab\":\n        await this.getDataForTab(sender.tab, msg.responseCommand);\n        break;\n      case \"bgCloseNotificationBar\":\n        await BrowserApi.tabSendMessageData(sender.tab, \"closeNotificationBar\");\n        break;\n      case \"bgAdjustNotificationBar\":\n        await BrowserApi.tabSendMessageData(sender.tab, \"adjustNotificationBar\", msg.data);\n        break;\n      case \"bgAddLogin\":\n        await this.addLogin(msg.login, sender.tab);\n        break;\n      case \"bgChangedPassword\":\n        await this.changedPassword(msg.data, sender.tab);\n        break;\n      case \"bgAddClose\":\n      case \"bgChangeClose\":\n        this.removeTabFromNotificationQueue(sender.tab);\n        break;\n      case \"bgAddSave\":\n      case \"bgChangeSave\":\n        if ((await this.authService.getAuthStatus()) < AuthenticationStatus.Unlocked) {\n          const retryMessage: LockedVaultPendingNotificationsItem = {\n            commandToRetry: {\n              msg: msg,\n              sender: sender,\n            },\n            target: \"notification.background\",\n          };\n          await BrowserApi.tabSendMessageData(\n            sender.tab,\n            \"addToLockedVaultPendingNotifications\",\n            retryMessage\n          );\n          await BrowserApi.tabSendMessageData(sender.tab, \"promptForLogin\");\n          return;\n        }\n        await this.saveOrUpdateCredentials(sender.tab, msg.folder);\n        break;\n      case \"bgNeverSave\":\n        await this.saveNever(sender.tab);\n        break;\n      case \"collectPageDetailsResponse\":\n        switch (msg.sender) {\n          case \"notificationBar\": {\n            const forms = this.autofillService.getFormsWithPasswordFields(msg.details);\n            await BrowserApi.tabSendMessageData(msg.tab, \"notificationBarPageDetails\", {\n              details: msg.details,\n              forms: forms,\n            });\n            break;\n          }\n          default:\n            break;\n        }\n        break;\n      default:\n        break;\n    }\n  }\n\n  async checkNotificationQueue(tab: chrome.tabs.Tab = null): Promise<void> {\n    if (this.notificationQueue.length === 0) {\n      return;\n    }\n\n    if (tab != null) {\n      this.doNotificationQueueCheck(tab);\n      return;\n    }\n\n    const currentTab = await BrowserApi.getTabFromCurrentWindow();\n    if (currentTab != null) {\n      this.doNotificationQueueCheck(currentTab);\n    }\n  }\n\n  private cleanupNotificationQueue() {\n    for (let i = this.notificationQueue.length - 1; i >= 0; i--) {\n      if (this.notificationQueue[i].expires < new Date()) {\n        this.notificationQueue.splice(i, 1);\n      }\n    }\n    setTimeout(() => this.cleanupNotificationQueue(), 2 * 60 * 1000); // check every 2 minutes\n  }\n\n  private doNotificationQueueCheck(tab: chrome.tabs.Tab): void {\n    if (tab == null) {\n      return;\n    }\n\n    const tabDomain = Utils.getDomain(tab.url);\n    if (tabDomain == null) {\n      return;\n    }\n\n    for (let i = 0; i < this.notificationQueue.length; i++) {\n      if (\n        this.notificationQueue[i].tabId !== tab.id ||\n        this.notificationQueue[i].domain !== tabDomain\n      ) {\n        continue;\n      }\n\n      if (this.notificationQueue[i].type === NotificationQueueMessageType.AddLogin) {\n        BrowserApi.tabSendMessageData(tab, \"openNotificationBar\", {\n          type: \"add\",\n          typeData: {\n            isVaultLocked: this.notificationQueue[i].wasVaultLocked,\n          },\n        });\n      } else if (this.notificationQueue[i].type === NotificationQueueMessageType.ChangePassword) {\n        BrowserApi.tabSendMessageData(tab, \"openNotificationBar\", {\n          type: \"change\",\n          typeData: {\n            isVaultLocked: this.notificationQueue[i].wasVaultLocked,\n          },\n        });\n      }\n      break;\n    }\n  }\n\n  private removeTabFromNotificationQueue(tab: chrome.tabs.Tab) {\n    for (let i = this.notificationQueue.length - 1; i >= 0; i--) {\n      if (this.notificationQueue[i].tabId === tab.id) {\n        this.notificationQueue.splice(i, 1);\n      }\n    }\n  }\n\n  private async addLogin(loginInfo: AddLoginRuntimeMessage, tab: chrome.tabs.Tab) {\n    const authStatus = await this.authService.getAuthStatus();\n    if (authStatus === AuthenticationStatus.LoggedOut) {\n      return;\n    }\n\n    const loginDomain = Utils.getDomain(loginInfo.url);\n    if (loginDomain == null) {\n      return;\n    }\n\n    let normalizedUsername = loginInfo.username;\n    if (normalizedUsername != null) {\n      normalizedUsername = normalizedUsername.toLowerCase();\n    }\n\n    const disabledAddLogin = await this.stateService.getDisableAddLoginNotification();\n    if (authStatus === AuthenticationStatus.Locked) {\n      if (disabledAddLogin) {\n        return;\n      }\n\n      if (!(await this.allowPersonalOwnership())) {\n        return;\n      }\n\n      this.pushAddLoginToQueue(loginDomain, loginInfo, tab, true);\n      return;\n    }\n\n    const ciphers = await this.cipherService.getAllDecryptedForUrl(loginInfo.url);\n    const usernameMatches = ciphers.filter(\n      (c) => c.login.username != null && c.login.username.toLowerCase() === normalizedUsername\n    );\n    if (usernameMatches.length === 0) {\n      if (disabledAddLogin) {\n        return;\n      }\n\n      if (!(await this.allowPersonalOwnership())) {\n        return;\n      }\n\n      this.pushAddLoginToQueue(loginDomain, loginInfo, tab);\n    } else if (\n      usernameMatches.length === 1 &&\n      usernameMatches[0].login.password !== loginInfo.password\n    ) {\n      const disabledChangePassword =\n        await this.stateService.getDisableChangedPasswordNotification();\n      if (disabledChangePassword) {\n        return;\n      }\n      this.pushChangePasswordToQueue(usernameMatches[0].id, loginDomain, loginInfo.password, tab);\n    }\n  }\n\n  private async pushAddLoginToQueue(\n    loginDomain: string,\n    loginInfo: AddLoginRuntimeMessage,\n    tab: chrome.tabs.Tab,\n    isVaultLocked = false\n  ) {\n    // remove any old messages for this tab\n    this.removeTabFromNotificationQueue(tab);\n    const message: AddLoginQueueMessage = {\n      type: NotificationQueueMessageType.AddLogin,\n      username: loginInfo.username,\n      password: loginInfo.password,\n      domain: loginDomain,\n      uri: loginInfo.url,\n      tabId: tab.id,\n      expires: new Date(new Date().getTime() + 5 * 60000), // 5 minutes\n      wasVaultLocked: isVaultLocked,\n    };\n    this.notificationQueue.push(message);\n    await this.checkNotificationQueue(tab);\n  }\n\n  private async changedPassword(changeData: ChangePasswordRuntimeMessage, tab: chrome.tabs.Tab) {\n    const loginDomain = Utils.getDomain(changeData.url);\n    if (loginDomain == null) {\n      return;\n    }\n\n    if ((await this.authService.getAuthStatus()) < AuthenticationStatus.Unlocked) {\n      this.pushChangePasswordToQueue(null, loginDomain, changeData.newPassword, tab, true);\n      return;\n    }\n\n    let id: string = null;\n    const ciphers = await this.cipherService.getAllDecryptedForUrl(changeData.url);\n    if (changeData.currentPassword != null) {\n      const passwordMatches = ciphers.filter(\n        (c) => c.login.password === changeData.currentPassword\n      );\n      if (passwordMatches.length === 1) {\n        id = passwordMatches[0].id;\n      }\n    } else if (ciphers.length === 1) {\n      id = ciphers[0].id;\n    }\n    if (id != null) {\n      this.pushChangePasswordToQueue(id, loginDomain, changeData.newPassword, tab);\n    }\n  }\n\n  private async pushChangePasswordToQueue(\n    cipherId: string,\n    loginDomain: string,\n    newPassword: string,\n    tab: chrome.tabs.Tab,\n    isVaultLocked = false\n  ) {\n    // remove any old messages for this tab\n    this.removeTabFromNotificationQueue(tab);\n    const message: AddChangePasswordQueueMessage = {\n      type: NotificationQueueMessageType.ChangePassword,\n      cipherId: cipherId,\n      newPassword: newPassword,\n      domain: loginDomain,\n      tabId: tab.id,\n      expires: new Date(new Date().getTime() + 5 * 60000), // 5 minutes\n      wasVaultLocked: isVaultLocked,\n    };\n    this.notificationQueue.push(message);\n    await this.checkNotificationQueue(tab);\n  }\n\n  private async saveOrUpdateCredentials(tab: chrome.tabs.Tab, folderId?: string) {\n    for (let i = this.notificationQueue.length - 1; i >= 0; i--) {\n      const queueMessage = this.notificationQueue[i];\n      if (\n        queueMessage.tabId !== tab.id ||\n        (queueMessage.type !== NotificationQueueMessageType.AddLogin &&\n          queueMessage.type !== NotificationQueueMessageType.ChangePassword)\n      ) {\n        continue;\n      }\n\n      const tabDomain = Utils.getDomain(tab.url);\n      if (tabDomain != null && tabDomain !== queueMessage.domain) {\n        continue;\n      }\n\n      this.notificationQueue.splice(i, 1);\n      BrowserApi.tabSendMessageData(tab, \"closeNotificationBar\");\n\n      if (queueMessage.type === NotificationQueueMessageType.ChangePassword) {\n        const changePasswordMessage = queueMessage as AddChangePasswordQueueMessage;\n        const cipher = await this.getDecryptedCipherById(changePasswordMessage.cipherId);\n        if (cipher == null) {\n          return;\n        }\n        await this.updateCipher(cipher, changePasswordMessage.newPassword);\n        return;\n      }\n\n      if (queueMessage.type === NotificationQueueMessageType.AddLogin) {\n        if (!queueMessage.wasVaultLocked) {\n          await this.createNewCipher(queueMessage as AddLoginQueueMessage, folderId);\n          BrowserApi.tabSendMessageData(tab, \"addedCipher\");\n          return;\n        }\n\n        // If the vault was locked, check if a cipher needs updating instead of creating a new one\n        const addLoginMessage = queueMessage as AddLoginQueueMessage;\n        const ciphers = await this.cipherService.getAllDecryptedForUrl(addLoginMessage.uri);\n        const usernameMatches = ciphers.filter(\n          (c) =>\n            c.login.username != null && c.login.username.toLowerCase() === addLoginMessage.username\n        );\n\n        if (usernameMatches.length >= 1) {\n          await this.updateCipher(usernameMatches[0], addLoginMessage.password);\n          return;\n        }\n\n        await this.createNewCipher(addLoginMessage, folderId);\n        BrowserApi.tabSendMessageData(tab, \"addedCipher\");\n      }\n    }\n  }\n\n  private async createNewCipher(queueMessage: AddLoginQueueMessage, folderId: string) {\n    const loginModel = new LoginView();\n    const loginUri = new LoginUriView();\n    loginUri.uri = queueMessage.uri;\n    loginModel.uris = [loginUri];\n    loginModel.username = queueMessage.username;\n    loginModel.password = queueMessage.password;\n    const model = new CipherView();\n    model.name = Utils.getHostname(queueMessage.uri) || queueMessage.domain;\n    model.name = model.name.replace(/^www\\./, \"\");\n    model.type = CipherType.Login;\n    model.login = loginModel;\n\n    if (!Utils.isNullOrWhitespace(folderId)) {\n      const folders = await firstValueFrom(this.folderService.folderViews$);\n      if (folders.some((x) => x.id === folderId)) {\n        model.folderId = folderId;\n      }\n    }\n\n    const cipher = await this.cipherService.encrypt(model);\n    await this.cipherService.saveWithServer(cipher);\n  }\n\n  private async getDecryptedCipherById(cipherId: string) {\n    const cipher = await this.cipherService.get(cipherId);\n    if (cipher != null && cipher.type === CipherType.Login) {\n      return await cipher.decrypt();\n    }\n    return null;\n  }\n\n  private async updateCipher(cipher: CipherView, newPassword: string) {\n    if (cipher != null && cipher.type === CipherType.Login) {\n      cipher.login.password = newPassword;\n      const newCipher = await this.cipherService.encrypt(cipher);\n      await this.cipherService.saveWithServer(newCipher);\n    }\n  }\n\n  private async saveNever(tab: chrome.tabs.Tab) {\n    for (let i = this.notificationQueue.length - 1; i >= 0; i--) {\n      const queueMessage = this.notificationQueue[i];\n      if (\n        queueMessage.tabId !== tab.id ||\n        queueMessage.type !== NotificationQueueMessageType.AddLogin\n      ) {\n        continue;\n      }\n\n      const tabDomain = Utils.getDomain(tab.url);\n      if (tabDomain != null && tabDomain !== queueMessage.domain) {\n        continue;\n      }\n\n      this.notificationQueue.splice(i, 1);\n      BrowserApi.tabSendMessageData(tab, \"closeNotificationBar\");\n\n      const hostname = Utils.getHostname(tab.url);\n      await this.cipherService.saveNeverDomain(hostname);\n    }\n  }\n\n  private async getDataForTab(tab: chrome.tabs.Tab, responseCommand: string) {\n    const responseData: any = {};\n    if (responseCommand === \"notificationBarGetFoldersList\") {\n      responseData.folders = await firstValueFrom(this.folderService.folderViews$);\n    }\n\n    await BrowserApi.tabSendMessageData(tab, responseCommand, responseData);\n  }\n\n  private async allowPersonalOwnership(): Promise<boolean> {\n    return !(await this.policyService.policyAppliesToUser(PolicyType.PersonalOwnership));\n  }\n}\n","import { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/abstractions/log.service\";\nimport { MessagingService } from \"@bitwarden/common/abstractions/messaging.service\";\nimport { NotificationsService } from \"@bitwarden/common/abstractions/notifications.service\";\nimport { SystemService } from \"@bitwarden/common/abstractions/system.service\";\nimport { Utils } from \"@bitwarden/common/misc/utils\";\n\nimport { BrowserEnvironmentService } from \"src/services/browser-environment.service\";\n\nimport { BrowserApi } from \"../browser/browserApi\";\nimport { AutofillService } from \"../services/abstractions/autofill.service\";\nimport BrowserPlatformUtilsService from \"../services/browserPlatformUtils.service\";\n\nimport MainBackground from \"./main.background\";\nimport LockedVaultPendingNotificationsItem from \"./models/lockedVaultPendingNotificationsItem\";\n\nexport default class RuntimeBackground {\n  private autofillTimeout: any;\n  private pageDetailsToAutoFill: any[] = [];\n  private onInstalledReason: string = null;\n  private lockedVaultPendingNotifications: LockedVaultPendingNotificationsItem[] = [];\n\n  constructor(\n    private main: MainBackground,\n    private autofillService: AutofillService,\n    private platformUtilsService: BrowserPlatformUtilsService,\n    private i18nService: I18nService,\n    private notificationsService: NotificationsService,\n    private systemService: SystemService,\n    private environmentService: BrowserEnvironmentService,\n    private messagingService: MessagingService,\n    private logService: LogService\n  ) {\n    // onInstalled listener must be wired up before anything else, so we do it in the ctor\n    chrome.runtime.onInstalled.addListener((details: any) => {\n      this.onInstalledReason = details.reason;\n    });\n  }\n\n  async init() {\n    if (!chrome.runtime) {\n      return;\n    }\n\n    await this.checkOnInstalled();\n    const backgroundMessageListener = async (\n      msg: any,\n      sender: chrome.runtime.MessageSender,\n      sendResponse: any\n    ) => {\n      await this.processMessage(msg, sender, sendResponse);\n    };\n\n    BrowserApi.messageListener(\"runtime.background\", backgroundMessageListener);\n    if (this.main.isPrivateMode) {\n      (window as any).bitwardenBackgroundMessageListener = backgroundMessageListener;\n    }\n  }\n\n  async processMessage(msg: any, sender: any, sendResponse: any) {\n    switch (msg.command) {\n      case \"loggedIn\":\n      case \"unlocked\": {\n        let item: LockedVaultPendingNotificationsItem;\n\n        if (this.lockedVaultPendingNotifications?.length > 0) {\n          await BrowserApi.closeLoginTab();\n\n          item = this.lockedVaultPendingNotifications.pop();\n          if (item.commandToRetry.sender?.tab?.id) {\n            await BrowserApi.focusSpecifiedTab(item.commandToRetry.sender.tab.id);\n          }\n        }\n\n        await this.main.setIcon();\n        await this.main.refreshBadgeAndMenu(false);\n        this.notificationsService.updateConnection(msg.command === \"unlocked\");\n        this.systemService.cancelProcessReload();\n\n        if (item) {\n          await BrowserApi.tabSendMessageData(\n            item.commandToRetry.sender.tab,\n            \"unlockCompleted\",\n            item\n          );\n        }\n        break;\n      }\n      case \"addToLockedVaultPendingNotifications\":\n        this.lockedVaultPendingNotifications.push(msg.data);\n        break;\n      case \"logout\":\n        await this.main.logout(msg.expired, msg.userId);\n        break;\n      case \"syncCompleted\":\n        if (msg.successfully) {\n          setTimeout(async () => await this.main.refreshBadgeAndMenu(), 2000);\n        }\n        break;\n      case \"openPopup\":\n        await this.main.openPopup();\n        break;\n      case \"promptForLogin\":\n        await BrowserApi.createNewTab(\"popup/index.html?uilocation=popout\", true, true);\n        break;\n      case \"showDialogResolve\":\n        this.platformUtilsService.resolveDialogPromise(msg.dialogId, msg.confirmed);\n        break;\n      case \"bgCollectPageDetails\":\n        await this.main.collectPageDetailsForContentScript(sender.tab, msg.sender, sender.frameId);\n        break;\n      case \"bgUpdateContextMenu\":\n      case \"editedCipher\":\n      case \"addedCipher\":\n      case \"deletedCipher\":\n        await this.main.refreshBadgeAndMenu();\n        break;\n      case \"bgReseedStorage\":\n        await this.main.reseedStorage();\n        break;\n      case \"collectPageDetailsResponse\":\n        switch (msg.sender) {\n          case \"autofiller\":\n          case \"autofill_cmd\": {\n            const totpCode = await this.autofillService.doAutoFillActiveTab(\n              [\n                {\n                  frameId: sender.frameId,\n                  tab: msg.tab,\n                  details: msg.details,\n                },\n              ],\n              msg.sender === \"autofill_cmd\"\n            );\n            if (totpCode != null) {\n              this.platformUtilsService.copyToClipboard(totpCode, { window: window });\n            }\n            break;\n          }\n          case \"contextMenu\":\n            clearTimeout(this.autofillTimeout);\n            this.pageDetailsToAutoFill.push({\n              frameId: sender.frameId,\n              tab: msg.tab,\n              details: msg.details,\n            });\n            this.autofillTimeout = setTimeout(async () => await this.autofillPage(msg.tab), 300);\n            break;\n          default:\n            break;\n        }\n        break;\n      case \"authResult\": {\n        const vaultUrl = this.environmentService.getWebVaultUrl();\n\n        if (msg.referrer == null || Utils.getHostname(vaultUrl) !== msg.referrer) {\n          return;\n        }\n\n        try {\n          BrowserApi.createNewTab(\n            \"popup/index.html?uilocation=popout#/sso?code=\" +\n              encodeURIComponent(msg.code) +\n              \"&state=\" +\n              encodeURIComponent(msg.state)\n          );\n        } catch {\n          this.logService.error(\"Unable to open sso popout tab\");\n        }\n        break;\n      }\n      case \"webAuthnResult\": {\n        const vaultUrl = this.environmentService.getWebVaultUrl();\n\n        if (msg.referrer == null || Utils.getHostname(vaultUrl) !== msg.referrer) {\n          return;\n        }\n\n        const params =\n          `webAuthnResponse=${encodeURIComponent(msg.data)};` +\n          `remember=${encodeURIComponent(msg.remember)}`;\n        BrowserApi.createNewTab(\n          `popup/index.html?uilocation=popout#/2fa;${params}`,\n          undefined,\n          false\n        );\n        break;\n      }\n      case \"reloadPopup\":\n        this.messagingService.send(\"reloadPopup\");\n        break;\n      case \"emailVerificationRequired\":\n        this.messagingService.send(\"showDialog\", {\n          dialogId: \"emailVerificationRequired\",\n          title: this.i18nService.t(\"emailVerificationRequired\"),\n          text: this.i18nService.t(\"emailVerificationRequiredDesc\"),\n          confirmText: this.i18nService.t(\"ok\"),\n          type: \"info\",\n        });\n        break;\n      case \"getClickedElementResponse\":\n        this.platformUtilsService.copyToClipboard(msg.identifier, { window: window });\n        break;\n      default:\n        break;\n    }\n  }\n\n  private async autofillPage(tabToAutoFill: chrome.tabs.Tab) {\n    const totpCode = await this.autofillService.doAutoFill({\n      tab: tabToAutoFill,\n      cipher: this.main.loginToAutoFill,\n      pageDetails: this.pageDetailsToAutoFill,\n      fillNewPassword: true,\n    });\n\n    if (totpCode != null) {\n      this.platformUtilsService.copyToClipboard(totpCode, { window: window });\n    }\n\n    // reset\n    this.main.loginToAutoFill = null;\n    this.pageDetailsToAutoFill = [];\n  }\n\n  private async checkOnInstalled() {\n    setTimeout(async () => {\n      if (this.onInstalledReason != null) {\n        if (this.onInstalledReason === \"install\") {\n          BrowserApi.createNewTab(\"https://bitwarden.com/browser-start/\");\n\n          if (await this.environmentService.hasManagedEnvironment()) {\n            await this.environmentService.setUrlsToManagedEnvironment();\n          }\n        }\n\n        this.onInstalledReason = null;\n      }\n    }, 100);\n  }\n}\n","export class DecryptParameters<T> {\n  encKey: T;\n  data: T;\n  iv: T;\n  macKey: T;\n  mac: T;\n  macData: T;\n}\n","import * as forge from \"node-forge\";\n\nimport { CryptoFunctionService } from \"../abstractions/cryptoFunction.service\";\nimport { Utils } from \"../misc/utils\";\nimport { DecryptParameters } from \"../models/domain/decryptParameters\";\nimport { SymmetricCryptoKey } from \"../models/domain/symmetricCryptoKey\";\n\nexport class WebCryptoFunctionService implements CryptoFunctionService {\n  private crypto: Crypto;\n  private subtle: SubtleCrypto;\n\n  constructor(win: Window | typeof global) {\n    this.crypto = typeof win.crypto !== \"undefined\" ? win.crypto : null;\n    this.subtle =\n      !!this.crypto && typeof win.crypto.subtle !== \"undefined\" ? win.crypto.subtle : null;\n  }\n\n  async pbkdf2(\n    password: string | ArrayBuffer,\n    salt: string | ArrayBuffer,\n    algorithm: \"sha256\" | \"sha512\",\n    iterations: number\n  ): Promise<ArrayBuffer> {\n    const wcLen = algorithm === \"sha256\" ? 256 : 512;\n    const passwordBuf = this.toBuf(password);\n    const saltBuf = this.toBuf(salt);\n\n    const pbkdf2Params: Pbkdf2Params = {\n      name: \"PBKDF2\",\n      salt: saltBuf,\n      iterations: iterations,\n      hash: { name: this.toWebCryptoAlgorithm(algorithm) },\n    };\n\n    const impKey = await this.subtle.importKey(\n      \"raw\",\n      passwordBuf,\n      { name: \"PBKDF2\" } as any,\n      false,\n      [\"deriveBits\"]\n    );\n    return await this.subtle.deriveBits(pbkdf2Params, impKey, wcLen);\n  }\n\n  async hkdf(\n    ikm: ArrayBuffer,\n    salt: string | ArrayBuffer,\n    info: string | ArrayBuffer,\n    outputByteSize: number,\n    algorithm: \"sha256\" | \"sha512\"\n  ): Promise<ArrayBuffer> {\n    const saltBuf = this.toBuf(salt);\n    const infoBuf = this.toBuf(info);\n\n    const hkdfParams: HkdfParams = {\n      name: \"HKDF\",\n      salt: saltBuf,\n      info: infoBuf,\n      hash: { name: this.toWebCryptoAlgorithm(algorithm) },\n    };\n\n    const impKey = await this.subtle.importKey(\"raw\", ikm, { name: \"HKDF\" } as any, false, [\n      \"deriveBits\",\n    ]);\n    return await this.subtle.deriveBits(hkdfParams as any, impKey, outputByteSize * 8);\n  }\n\n  // ref: https://tools.ietf.org/html/rfc5869\n  async hkdfExpand(\n    prk: ArrayBuffer,\n    info: string | ArrayBuffer,\n    outputByteSize: number,\n    algorithm: \"sha256\" | \"sha512\"\n  ): Promise<ArrayBuffer> {\n    const hashLen = algorithm === \"sha256\" ? 32 : 64;\n    if (outputByteSize > 255 * hashLen) {\n      throw new Error(\"outputByteSize is too large.\");\n    }\n    const prkArr = new Uint8Array(prk);\n    if (prkArr.length < hashLen) {\n      throw new Error(\"prk is too small.\");\n    }\n    const infoBuf = this.toBuf(info);\n    const infoArr = new Uint8Array(infoBuf);\n    let runningOkmLength = 0;\n    let previousT = new Uint8Array(0);\n    const n = Math.ceil(outputByteSize / hashLen);\n    const okm = new Uint8Array(n * hashLen);\n    for (let i = 0; i < n; i++) {\n      const t = new Uint8Array(previousT.length + infoArr.length + 1);\n      t.set(previousT);\n      t.set(infoArr, previousT.length);\n      t.set([i + 1], t.length - 1);\n      previousT = new Uint8Array(await this.hmac(t.buffer, prk, algorithm));\n      okm.set(previousT, runningOkmLength);\n      runningOkmLength += previousT.length;\n      if (runningOkmLength >= outputByteSize) {\n        break;\n      }\n    }\n    return okm.slice(0, outputByteSize).buffer;\n  }\n\n  async hash(\n    value: string | ArrayBuffer,\n    algorithm: \"sha1\" | \"sha256\" | \"sha512\" | \"md5\"\n  ): Promise<ArrayBuffer> {\n    if (algorithm === \"md5\") {\n      const md = algorithm === \"md5\" ? forge.md.md5.create() : forge.md.sha1.create();\n      const valueBytes = this.toByteString(value);\n      md.update(valueBytes, \"raw\");\n      return Utils.fromByteStringToArray(md.digest().data).buffer;\n    }\n\n    const valueBuf = this.toBuf(value);\n    return await this.subtle.digest({ name: this.toWebCryptoAlgorithm(algorithm) }, valueBuf);\n  }\n\n  async hmac(\n    value: ArrayBuffer,\n    key: ArrayBuffer,\n    algorithm: \"sha1\" | \"sha256\" | \"sha512\"\n  ): Promise<ArrayBuffer> {\n    const signingAlgorithm = {\n      name: \"HMAC\",\n      hash: { name: this.toWebCryptoAlgorithm(algorithm) },\n    };\n\n    const impKey = await this.subtle.importKey(\"raw\", key, signingAlgorithm, false, [\"sign\"]);\n    return await this.subtle.sign(signingAlgorithm, impKey, value);\n  }\n\n  // Safely compare two values in a way that protects against timing attacks (Double HMAC Verification).\n  // ref: https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2011/february/double-hmac-verification/\n  // ref: https://paragonie.com/blog/2015/11/preventing-timing-attacks-on-string-comparison-with-double-hmac-strategy\n  async compare(a: ArrayBuffer, b: ArrayBuffer): Promise<boolean> {\n    const macKey = await this.randomBytes(32);\n    const signingAlgorithm = {\n      name: \"HMAC\",\n      hash: { name: \"SHA-256\" },\n    };\n    const impKey = await this.subtle.importKey(\"raw\", macKey, signingAlgorithm, false, [\"sign\"]);\n    const mac1 = await this.subtle.sign(signingAlgorithm, impKey, a);\n    const mac2 = await this.subtle.sign(signingAlgorithm, impKey, b);\n\n    if (mac1.byteLength !== mac2.byteLength) {\n      return false;\n    }\n\n    const arr1 = new Uint8Array(mac1);\n    const arr2 = new Uint8Array(mac2);\n    for (let i = 0; i < arr2.length; i++) {\n      if (arr1[i] !== arr2[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  hmacFast(value: string, key: string, algorithm: \"sha1\" | \"sha256\" | \"sha512\"): Promise<string> {\n    const hmac = forge.hmac.create();\n    hmac.start(algorithm, key);\n    hmac.update(value);\n    const bytes = hmac.digest().getBytes();\n    return Promise.resolve(bytes);\n  }\n\n  async compareFast(a: string, b: string): Promise<boolean> {\n    const rand = await this.randomBytes(32);\n    const bytes = new Uint32Array(rand);\n    const buffer = forge.util.createBuffer();\n    for (let i = 0; i < bytes.length; i++) {\n      buffer.putInt32(bytes[i]);\n    }\n    const macKey = buffer.getBytes();\n\n    const hmac = forge.hmac.create();\n    hmac.start(\"sha256\", macKey);\n    hmac.update(a);\n    const mac1 = hmac.digest().getBytes();\n\n    hmac.start(null, null);\n    hmac.update(b);\n    const mac2 = hmac.digest().getBytes();\n\n    const equals = mac1 === mac2;\n    return equals;\n  }\n\n  async aesEncrypt(data: ArrayBuffer, iv: ArrayBuffer, key: ArrayBuffer): Promise<ArrayBuffer> {\n    const impKey = await this.subtle.importKey(\"raw\", key, { name: \"AES-CBC\" } as any, false, [\n      \"encrypt\",\n    ]);\n    return await this.subtle.encrypt({ name: \"AES-CBC\", iv: iv }, impKey, data);\n  }\n\n  aesDecryptFastParameters(\n    data: string,\n    iv: string,\n    mac: string,\n    key: SymmetricCryptoKey\n  ): DecryptParameters<string> {\n    const p = new DecryptParameters<string>();\n    if (key.meta != null) {\n      p.encKey = key.meta.encKeyByteString;\n      p.macKey = key.meta.macKeyByteString;\n    }\n\n    if (p.encKey == null) {\n      p.encKey = forge.util.decode64(key.encKeyB64);\n    }\n    p.data = forge.util.decode64(data);\n    p.iv = forge.util.decode64(iv);\n    p.macData = p.iv + p.data;\n    if (p.macKey == null && key.macKeyB64 != null) {\n      p.macKey = forge.util.decode64(key.macKeyB64);\n    }\n    if (mac != null) {\n      p.mac = forge.util.decode64(mac);\n    }\n\n    // cache byte string keys for later\n    if (key.meta == null) {\n      key.meta = {};\n    }\n    if (key.meta.encKeyByteString == null) {\n      key.meta.encKeyByteString = p.encKey;\n    }\n    if (p.macKey != null && key.meta.macKeyByteString == null) {\n      key.meta.macKeyByteString = p.macKey;\n    }\n\n    return p;\n  }\n\n  aesDecryptFast(parameters: DecryptParameters<string>): Promise<string> {\n    const dataBuffer = forge.util.createBuffer(parameters.data);\n    const decipher = forge.cipher.createDecipher(\"AES-CBC\", parameters.encKey);\n    decipher.start({ iv: parameters.iv });\n    decipher.update(dataBuffer);\n    decipher.finish();\n    const val = decipher.output.toString();\n    return Promise.resolve(val);\n  }\n\n  async aesDecrypt(data: ArrayBuffer, iv: ArrayBuffer, key: ArrayBuffer): Promise<ArrayBuffer> {\n    const impKey = await this.subtle.importKey(\"raw\", key, { name: \"AES-CBC\" } as any, false, [\n      \"decrypt\",\n    ]);\n    return await this.subtle.decrypt({ name: \"AES-CBC\", iv: iv }, impKey, data);\n  }\n\n  async rsaEncrypt(\n    data: ArrayBuffer,\n    publicKey: ArrayBuffer,\n    algorithm: \"sha1\" | \"sha256\"\n  ): Promise<ArrayBuffer> {\n    // Note: Edge browser requires that we specify name and hash for both key import and decrypt.\n    // We cannot use the proper types here.\n    const rsaParams = {\n      name: \"RSA-OAEP\",\n      hash: { name: this.toWebCryptoAlgorithm(algorithm) },\n    };\n    const impKey = await this.subtle.importKey(\"spki\", publicKey, rsaParams, false, [\"encrypt\"]);\n    return await this.subtle.encrypt(rsaParams, impKey, data);\n  }\n\n  async rsaDecrypt(\n    data: ArrayBuffer,\n    privateKey: ArrayBuffer,\n    algorithm: \"sha1\" | \"sha256\"\n  ): Promise<ArrayBuffer> {\n    // Note: Edge browser requires that we specify name and hash for both key import and decrypt.\n    // We cannot use the proper types here.\n    const rsaParams = {\n      name: \"RSA-OAEP\",\n      hash: { name: this.toWebCryptoAlgorithm(algorithm) },\n    };\n    const impKey = await this.subtle.importKey(\"pkcs8\", privateKey, rsaParams, false, [\"decrypt\"]);\n    return await this.subtle.decrypt(rsaParams, impKey, data);\n  }\n\n  async rsaExtractPublicKey(privateKey: ArrayBuffer): Promise<ArrayBuffer> {\n    const rsaParams = {\n      name: \"RSA-OAEP\",\n      // Have to specify some algorithm\n      hash: { name: this.toWebCryptoAlgorithm(\"sha1\") },\n    };\n    const impPrivateKey = await this.subtle.importKey(\"pkcs8\", privateKey, rsaParams, true, [\n      \"decrypt\",\n    ]);\n    const jwkPrivateKey = await this.subtle.exportKey(\"jwk\", impPrivateKey);\n    const jwkPublicKeyParams = {\n      kty: \"RSA\",\n      e: jwkPrivateKey.e,\n      n: jwkPrivateKey.n,\n      alg: \"RSA-OAEP\",\n      ext: true,\n    };\n    const impPublicKey = await this.subtle.importKey(\"jwk\", jwkPublicKeyParams, rsaParams, true, [\n      \"encrypt\",\n    ]);\n    return await this.subtle.exportKey(\"spki\", impPublicKey);\n  }\n\n  async rsaGenerateKeyPair(length: 1024 | 2048 | 4096): Promise<[ArrayBuffer, ArrayBuffer]> {\n    const rsaParams = {\n      name: \"RSA-OAEP\",\n      modulusLength: length,\n      publicExponent: new Uint8Array([0x01, 0x00, 0x01]), // 65537\n      // Have to specify some algorithm\n      hash: { name: this.toWebCryptoAlgorithm(\"sha1\") },\n    };\n    const keyPair = (await this.subtle.generateKey(rsaParams, true, [\n      \"encrypt\",\n      \"decrypt\",\n    ])) as CryptoKeyPair;\n    const publicKey = await this.subtle.exportKey(\"spki\", keyPair.publicKey);\n    const privateKey = await this.subtle.exportKey(\"pkcs8\", keyPair.privateKey);\n    return [publicKey, privateKey];\n  }\n\n  randomBytes(length: number): Promise<ArrayBuffer> {\n    const arr = new Uint8Array(length);\n    this.crypto.getRandomValues(arr);\n    return Promise.resolve(arr.buffer);\n  }\n\n  private toBuf(value: string | ArrayBuffer): ArrayBuffer {\n    let buf: ArrayBuffer;\n    if (typeof value === \"string\") {\n      buf = Utils.fromUtf8ToArray(value).buffer;\n    } else {\n      buf = value;\n    }\n    return buf;\n  }\n\n  private toByteString(value: string | ArrayBuffer): string {\n    let bytes: string;\n    if (typeof value === \"string\") {\n      bytes = forge.util.encodeUtf8(value);\n    } else {\n      bytes = Utils.fromBufferToByteString(value);\n    }\n    return bytes;\n  }\n\n  private toWebCryptoAlgorithm(algorithm: \"sha1\" | \"sha256\" | \"sha512\" | \"md5\"): string {\n    if (algorithm === \"md5\") {\n      throw new Error(\"MD5 is not supported in WebCrypto.\");\n    }\n    return algorithm === \"sha1\" ? \"SHA-1\" : algorithm === \"sha256\" ? \"SHA-256\" : \"SHA-512\";\n  }\n}\n","export type CachedServices = Record<string, any>;\n\nexport type FactoryOptions = {\n  alwaysInitializeNewService?: boolean;\n  doNotStoreInitializedService?: boolean;\n  [optionsKey: string]: unknown;\n};\n\nexport function factory<\n  TCache extends CachedServices,\n  TName extends keyof TCache,\n  TOpts extends FactoryOptions\n>(cachedServices: TCache, name: TName, opts: TOpts, factory: () => TCache[TName]): TCache[TName] {\n  let instance = cachedServices[name];\n  if (opts.alwaysInitializeNewService || !instance) {\n    instance = factory();\n  }\n\n  if (!opts.doNotStoreInitializedService) {\n    cachedServices[name] = instance;\n  }\n\n  return instance as TCache[TName];\n}\n","import { CryptoFunctionService } from \"@bitwarden/common/abstractions/cryptoFunction.service\";\nimport { WebCryptoFunctionService } from \"@bitwarden/common/services/webCryptoFunction.service\";\n\nimport { CachedServices, factory, FactoryOptions } from \"./factory-options\";\n\ntype CryptoFunctionServiceFactoryOptions = FactoryOptions & {\n  cryptoFunctionServiceOptions: {\n    win: Window | typeof global;\n  };\n};\n\nexport type CryptoFunctionServiceInitOptions = CryptoFunctionServiceFactoryOptions;\n\nexport function cryptoFunctionServiceFactory(\n  cache: { cryptoFunctionService?: CryptoFunctionService } & CachedServices,\n  opts: CryptoFunctionServiceFactoryOptions\n): CryptoFunctionService {\n  return factory(\n    cache,\n    \"cryptoFunctionService\",\n    opts,\n    () => new WebCryptoFunctionService(opts.cryptoFunctionServiceOptions.win)\n  );\n}\n","import { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport class EncryptedObject {\n  iv: ArrayBuffer;\n  data: ArrayBuffer;\n  mac: ArrayBuffer;\n  key: SymmetricCryptoKey;\n}\n","export enum LogLevelType {\n  Debug,\n  Info,\n  Warning,\n  Error,\n}\n","import { CryptoFunctionService } from \"@bitwarden/common/abstractions/cryptoFunction.service\";\nimport { LogService } from \"@bitwarden/common/abstractions/log.service\";\nimport { Utils } from \"@bitwarden/common/misc/utils\";\nimport { EncString } from \"@bitwarden/common/models/domain/encString\";\nimport { EncryptedObject } from \"@bitwarden/common/models/domain/encryptedObject\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/models/domain/symmetricCryptoKey\";\n\nimport { AbstractEncryptService } from \"../abstractions/abstractEncrypt.service\";\nimport { EncryptionType } from \"../enums/encryptionType\";\nimport { IEncrypted } from \"../interfaces/IEncrypted\";\nimport { EncArrayBuffer } from \"../models/domain/encArrayBuffer\";\n\nexport class EncryptService implements AbstractEncryptService {\n  constructor(\n    private cryptoFunctionService: CryptoFunctionService,\n    private logService: LogService,\n    private logMacFailures: boolean\n  ) {}\n\n  async encrypt(plainValue: string | ArrayBuffer, key: SymmetricCryptoKey): Promise<EncString> {\n    if (key == null) {\n      throw new Error(\"No encryption key provided.\");\n    }\n\n    if (plainValue == null) {\n      return Promise.resolve(null);\n    }\n\n    let plainBuf: ArrayBuffer;\n    if (typeof plainValue === \"string\") {\n      plainBuf = Utils.fromUtf8ToArray(plainValue).buffer;\n    } else {\n      plainBuf = plainValue;\n    }\n\n    const encObj = await this.aesEncrypt(plainBuf, key);\n    const iv = Utils.fromBufferToB64(encObj.iv);\n    const data = Utils.fromBufferToB64(encObj.data);\n    const mac = encObj.mac != null ? Utils.fromBufferToB64(encObj.mac) : null;\n    return new EncString(encObj.key.encType, data, iv, mac);\n  }\n\n  async encryptToBytes(plainValue: ArrayBuffer, key: SymmetricCryptoKey): Promise<EncArrayBuffer> {\n    if (key == null) {\n      throw new Error(\"No encryption key provided.\");\n    }\n\n    const encValue = await this.aesEncrypt(plainValue, key);\n    let macLen = 0;\n    if (encValue.mac != null) {\n      macLen = encValue.mac.byteLength;\n    }\n\n    const encBytes = new Uint8Array(1 + encValue.iv.byteLength + macLen + encValue.data.byteLength);\n    encBytes.set([encValue.key.encType]);\n    encBytes.set(new Uint8Array(encValue.iv), 1);\n    if (encValue.mac != null) {\n      encBytes.set(new Uint8Array(encValue.mac), 1 + encValue.iv.byteLength);\n    }\n\n    encBytes.set(new Uint8Array(encValue.data), 1 + encValue.iv.byteLength + macLen);\n    return new EncArrayBuffer(encBytes.buffer);\n  }\n\n  async decryptToUtf8(encString: EncString, key: SymmetricCryptoKey): Promise<string> {\n    if (key == null) {\n      throw new Error(\"No key provided for decryption.\");\n    }\n\n    key = this.resolveLegacyKey(key, encString);\n\n    if (key.macKey != null && encString?.mac == null) {\n      this.logService.error(\"mac required.\");\n      return null;\n    }\n\n    if (key.encType !== encString.encryptionType) {\n      this.logService.error(\"encType unavailable.\");\n      return null;\n    }\n\n    const fastParams = this.cryptoFunctionService.aesDecryptFastParameters(\n      encString.data,\n      encString.iv,\n      encString.mac,\n      key\n    );\n    if (fastParams.macKey != null && fastParams.mac != null) {\n      const computedMac = await this.cryptoFunctionService.hmacFast(\n        fastParams.macData,\n        fastParams.macKey,\n        \"sha256\"\n      );\n      const macsEqual = await this.cryptoFunctionService.compareFast(fastParams.mac, computedMac);\n      if (!macsEqual) {\n        this.logMacFailed(\"mac failed.\");\n        return null;\n      }\n    }\n\n    return this.cryptoFunctionService.aesDecryptFast(fastParams);\n  }\n\n  async decryptToBytes(encThing: IEncrypted, key: SymmetricCryptoKey): Promise<ArrayBuffer> {\n    if (key == null) {\n      throw new Error(\"No encryption key provided.\");\n    }\n\n    if (encThing == null) {\n      throw new Error(\"Nothing provided for decryption.\");\n    }\n\n    key = this.resolveLegacyKey(key, encThing);\n\n    if (key.macKey != null && encThing.macBytes == null) {\n      return null;\n    }\n\n    if (key.encType !== encThing.encryptionType) {\n      return null;\n    }\n\n    if (key.macKey != null && encThing.macBytes != null) {\n      const macData = new Uint8Array(encThing.ivBytes.byteLength + encThing.dataBytes.byteLength);\n      macData.set(new Uint8Array(encThing.ivBytes), 0);\n      macData.set(new Uint8Array(encThing.dataBytes), encThing.ivBytes.byteLength);\n      const computedMac = await this.cryptoFunctionService.hmac(\n        macData.buffer,\n        key.macKey,\n        \"sha256\"\n      );\n      if (computedMac === null) {\n        return null;\n      }\n\n      const macsMatch = await this.cryptoFunctionService.compare(encThing.macBytes, computedMac);\n      if (!macsMatch) {\n        this.logMacFailed(\"mac failed.\");\n        return null;\n      }\n    }\n\n    const result = await this.cryptoFunctionService.aesDecrypt(\n      encThing.dataBytes,\n      encThing.ivBytes,\n      key.encKey\n    );\n\n    return result ?? null;\n  }\n\n  private async aesEncrypt(data: ArrayBuffer, key: SymmetricCryptoKey): Promise<EncryptedObject> {\n    const obj = new EncryptedObject();\n    obj.key = key;\n    obj.iv = await this.cryptoFunctionService.randomBytes(16);\n    obj.data = await this.cryptoFunctionService.aesEncrypt(data, obj.iv, obj.key.encKey);\n\n    if (obj.key.macKey != null) {\n      const macData = new Uint8Array(obj.iv.byteLength + obj.data.byteLength);\n      macData.set(new Uint8Array(obj.iv), 0);\n      macData.set(new Uint8Array(obj.data), obj.iv.byteLength);\n      obj.mac = await this.cryptoFunctionService.hmac(macData.buffer, obj.key.macKey, \"sha256\");\n    }\n\n    return obj;\n  }\n\n  private logMacFailed(msg: string) {\n    if (this.logMacFailures) {\n      this.logService.error(msg);\n    }\n  }\n\n  /**\n   * Transform into new key for the old encrypt-then-mac scheme if required, otherwise return the current key unchanged\n   * @param encThing The encrypted object (e.g. encString or encArrayBuffer) that you want to decrypt\n   */\n  resolveLegacyKey(key: SymmetricCryptoKey, encThing: IEncrypted): SymmetricCryptoKey {\n    if (\n      encThing.encryptionType === EncryptionType.AesCbc128_HmacSha256_B64 &&\n      key.encType === EncryptionType.AesCbc256_B64\n    ) {\n      return new SymmetricCryptoKey(key.key, EncryptionType.AesCbc128_HmacSha256_B64);\n    }\n\n    return key;\n  }\n}\n","import { LogService as LogServiceAbstraction } from \"../abstractions/log.service\";\nimport { LogLevelType } from \"../enums/logLevelType\";\n\nexport class ConsoleLogService implements LogServiceAbstraction {\n  protected timersMap: Map<string, [number, number]> = new Map();\n\n  constructor(\n    protected isDev: boolean,\n    protected filter: (level: LogLevelType) => boolean = null\n  ) {}\n\n  debug(message: string) {\n    if (!this.isDev) {\n      return;\n    }\n    this.write(LogLevelType.Debug, message);\n  }\n\n  info(message: string) {\n    this.write(LogLevelType.Info, message);\n  }\n\n  warning(message: string) {\n    this.write(LogLevelType.Warning, message);\n  }\n\n  error(message: string) {\n    this.write(LogLevelType.Error, message);\n  }\n\n  write(level: LogLevelType, message: string) {\n    if (this.filter != null && this.filter(level)) {\n      return;\n    }\n\n    switch (level) {\n      case LogLevelType.Debug:\n        // eslint-disable-next-line\n        console.log(message);\n        break;\n      case LogLevelType.Info:\n        // eslint-disable-next-line\n        console.log(message);\n        break;\n      case LogLevelType.Warning:\n        // eslint-disable-next-line\n        console.warn(message);\n        break;\n      case LogLevelType.Error:\n        // eslint-disable-next-line\n        console.error(message);\n        break;\n      default:\n        break;\n    }\n  }\n}\n","import { LogService } from \"@bitwarden/common/abstractions/log.service\";\nimport { LogLevelType } from \"@bitwarden/common/enums/logLevelType\";\nimport { ConsoleLogService } from \"@bitwarden/common/services/consoleLog.service\";\n\nimport { CachedServices, factory, FactoryOptions } from \"./factory-options\";\n\ntype LogServiceFactoryOptions = FactoryOptions & {\n  logServiceOptions: {\n    isDev: boolean;\n    filter?: (level: LogLevelType) => boolean;\n  };\n};\n\nexport type LogServiceInitOptions = LogServiceFactoryOptions;\n\nexport function logServiceFactory(\n  cache: { logService?: LogService } & CachedServices,\n  opts: LogServiceInitOptions\n): LogService {\n  return factory(\n    cache,\n    \"logService\",\n    opts,\n    () => new ConsoleLogService(opts.logServiceOptions.isDev, opts.logServiceOptions.filter)\n  );\n}\n","import { EncryptService } from \"@bitwarden/common/services/encrypt.service\";\n\nimport {\n  cryptoFunctionServiceFactory,\n  CryptoFunctionServiceInitOptions,\n} from \"./crypto-function-service.factory\";\nimport { CachedServices, factory, FactoryOptions } from \"./factory-options\";\nimport { LogServiceInitOptions, logServiceFactory } from \"./log-service.factory\";\n\ntype EncryptServiceFactoryOptions = FactoryOptions & {\n  encryptServiceOptions: {\n    logMacFailures: boolean;\n  };\n};\n\nexport type EncryptServiceInitOptions = EncryptServiceFactoryOptions &\n  CryptoFunctionServiceInitOptions &\n  LogServiceInitOptions;\n\nexport function encryptServiceFactory(\n  cache: { encryptService?: EncryptService } & CachedServices,\n  opts: EncryptServiceInitOptions\n): EncryptService {\n  return factory(\n    cache,\n    \"encryptService\",\n    opts,\n    () =>\n      new EncryptService(\n        cryptoFunctionServiceFactory(cache, opts),\n        logServiceFactory(cache, opts),\n        opts.encryptServiceOptions.logMacFailures\n      )\n  );\n}\n","import { LogService } from \"@bitwarden/common/abstractions/log.service\";\nimport { StateService } from \"@bitwarden/common/abstractions/state.service\";\nimport { EnvironmentService } from \"@bitwarden/common/services/environment.service\";\n\nimport { devFlagEnabled, devFlagValue } from \"../flags\";\nimport { GroupPolicyEnvironment } from \"../types/group-policy-environment\";\n\nexport class BrowserEnvironmentService extends EnvironmentService {\n  constructor(stateService: StateService, private logService: LogService) {\n    super(stateService);\n  }\n\n  async hasManagedEnvironment(): Promise<boolean> {\n    try {\n      return (await this.getManagedEnvironment()) != null;\n    } catch (e) {\n      this.logService.error(e);\n      return false;\n    }\n  }\n\n  async settingsHaveChanged() {\n    const env = await this.getManagedEnvironment();\n\n    return (\n      env.base != this.baseUrl ||\n      env.webVault != this.webVaultUrl ||\n      env.api != this.webVaultUrl ||\n      env.identity != this.identityUrl ||\n      env.icons != this.iconsUrl ||\n      env.notifications != this.notificationsUrl ||\n      env.events != this.eventsUrl\n    );\n  }\n\n  getManagedEnvironment(): Promise<GroupPolicyEnvironment> {\n    return devFlagEnabled(\"managedEnvironment\")\n      ? new Promise((resolve) => resolve(devFlagValue(\"managedEnvironment\")))\n      : new Promise((resolve, reject) => {\n          chrome.storage.managed.get(\"environment\", (result) => {\n            if (chrome.runtime.lastError) {\n              return reject(chrome.runtime.lastError);\n            }\n\n            resolve(result.environment);\n          });\n        });\n  }\n\n  async setUrlsToManagedEnvironment() {\n    const env = await this.getManagedEnvironment();\n    await this.setUrls({\n      base: env.base,\n      webVault: env.webVault,\n      api: env.api,\n      identity: env.identity,\n      icons: env.icons,\n      notifications: env.notifications,\n      events: env.events,\n    });\n  }\n}\n","import { Observable, Subject } from \"rxjs\";\n\nimport {\n  EnvironmentService as EnvironmentServiceAbstraction,\n  Urls,\n} from \"../abstractions/environment.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { EnvironmentUrls } from \"../models/domain/environmentUrls\";\n\nexport class EnvironmentService implements EnvironmentServiceAbstraction {\n  private readonly urlsSubject = new Subject<Urls>();\n  urls: Observable<Urls> = this.urlsSubject;\n\n  protected baseUrl: string;\n  protected webVaultUrl: string;\n  protected apiUrl: string;\n  protected identityUrl: string;\n  protected iconsUrl: string;\n  protected notificationsUrl: string;\n  protected eventsUrl: string;\n  private keyConnectorUrl: string;\n  private scimUrl: string = null;\n\n  constructor(private stateService: StateService) {\n    this.stateService.activeAccount$.subscribe(async () => {\n      await this.setUrlsFromStorage();\n    });\n  }\n\n  hasBaseUrl() {\n    return this.baseUrl != null;\n  }\n\n  getNotificationsUrl() {\n    if (this.notificationsUrl != null) {\n      return this.notificationsUrl;\n    }\n\n    if (this.baseUrl != null) {\n      return this.baseUrl + \"/notifications\";\n    }\n\n    return \"https://notifications.bitwarden.com\";\n  }\n\n  getWebVaultUrl() {\n    if (this.webVaultUrl != null) {\n      return this.webVaultUrl;\n    }\n\n    if (this.baseUrl) {\n      return this.baseUrl;\n    }\n    return \"https://vault.bitwarden.com\";\n  }\n\n  getSendUrl() {\n    return this.getWebVaultUrl() === \"https://vault.bitwarden.com\"\n      ? \"https://send.bitwarden.com/#\"\n      : this.getWebVaultUrl() + \"/#/send/\";\n  }\n\n  getIconsUrl() {\n    if (this.iconsUrl != null) {\n      return this.iconsUrl;\n    }\n\n    if (this.baseUrl) {\n      return this.baseUrl + \"/icons\";\n    }\n\n    return \"https://icons.bitwarden.net\";\n  }\n\n  getApiUrl() {\n    if (this.apiUrl != null) {\n      return this.apiUrl;\n    }\n\n    if (this.baseUrl) {\n      return this.baseUrl + \"/api\";\n    }\n\n    return \"https://api.bitwarden.com\";\n  }\n\n  getIdentityUrl() {\n    if (this.identityUrl != null) {\n      return this.identityUrl;\n    }\n\n    if (this.baseUrl) {\n      return this.baseUrl + \"/identity\";\n    }\n\n    return \"https://identity.bitwarden.com\";\n  }\n\n  getEventsUrl() {\n    if (this.eventsUrl != null) {\n      return this.eventsUrl;\n    }\n\n    if (this.baseUrl) {\n      return this.baseUrl + \"/events\";\n    }\n\n    return \"https://events.bitwarden.com\";\n  }\n\n  getKeyConnectorUrl() {\n    return this.keyConnectorUrl;\n  }\n\n  getScimUrl() {\n    if (this.scimUrl != null) {\n      return this.scimUrl + \"/v2\";\n    }\n\n    return this.getWebVaultUrl() === \"https://vault.bitwarden.com\"\n      ? \"https://scim.bitwarden.com/v2\"\n      : this.getWebVaultUrl() + \"/scim/v2\";\n  }\n\n  async setUrlsFromStorage(): Promise<void> {\n    const urls: any = await this.stateService.getEnvironmentUrls();\n    const envUrls = new EnvironmentUrls();\n\n    this.baseUrl = envUrls.base = urls.base;\n    this.webVaultUrl = urls.webVault;\n    this.apiUrl = envUrls.api = urls.api;\n    this.identityUrl = envUrls.identity = urls.identity;\n    this.iconsUrl = urls.icons;\n    this.notificationsUrl = urls.notifications;\n    this.eventsUrl = envUrls.events = urls.events;\n    this.keyConnectorUrl = urls.keyConnector;\n    // scimUrl is not saved to storage\n  }\n\n  async setUrls(urls: Urls): Promise<Urls> {\n    urls.base = this.formatUrl(urls.base);\n    urls.webVault = this.formatUrl(urls.webVault);\n    urls.api = this.formatUrl(urls.api);\n    urls.identity = this.formatUrl(urls.identity);\n    urls.icons = this.formatUrl(urls.icons);\n    urls.notifications = this.formatUrl(urls.notifications);\n    urls.events = this.formatUrl(urls.events);\n    urls.keyConnector = this.formatUrl(urls.keyConnector);\n\n    // scimUrl cannot be cleared\n    urls.scim = this.formatUrl(urls.scim) ?? this.scimUrl;\n\n    await this.stateService.setEnvironmentUrls({\n      base: urls.base,\n      api: urls.api,\n      identity: urls.identity,\n      webVault: urls.webVault,\n      icons: urls.icons,\n      notifications: urls.notifications,\n      events: urls.events,\n      keyConnector: urls.keyConnector,\n      // scimUrl is not saved to storage\n    });\n\n    this.baseUrl = urls.base;\n    this.webVaultUrl = urls.webVault;\n    this.apiUrl = urls.api;\n    this.identityUrl = urls.identity;\n    this.iconsUrl = urls.icons;\n    this.notificationsUrl = urls.notifications;\n    this.eventsUrl = urls.events;\n    this.keyConnectorUrl = urls.keyConnector;\n    this.scimUrl = urls.scim;\n\n    this.urlsSubject.next(urls);\n\n    return urls;\n  }\n\n  getUrls() {\n    return {\n      base: this.baseUrl,\n      webVault: this.webVaultUrl,\n      api: this.apiUrl,\n      identity: this.identityUrl,\n      icons: this.iconsUrl,\n      notifications: this.notificationsUrl,\n      events: this.eventsUrl,\n      keyConnector: this.keyConnectorUrl,\n      scim: this.scimUrl,\n    };\n  }\n\n  private formatUrl(url: string): string {\n    if (url == null || url === \"\") {\n      return null;\n    }\n\n    url = url.replace(/\\/+$/g, \"\");\n    if (!url.startsWith(\"http://\") && !url.startsWith(\"https://\")) {\n      url = \"https://\" + url;\n    }\n\n    return url.trim();\n  }\n}\n","import { AbstractStorageService } from \"../abstractions/storage.service\";\nimport { HtmlStorageLocation } from \"../enums/htmlStorageLocation\";\nimport { KdfType } from \"../enums/kdfType\";\nimport { StateVersion } from \"../enums/stateVersion\";\nimport { ThemeType } from \"../enums/themeType\";\nimport { StateFactory } from \"../factories/stateFactory\";\nimport { CipherData } from \"../models/data/cipherData\";\nimport { CollectionData } from \"../models/data/collectionData\";\nimport { EventData } from \"../models/data/eventData\";\nimport { FolderData } from \"../models/data/folderData\";\nimport { OrganizationData } from \"../models/data/organizationData\";\nimport { PolicyData } from \"../models/data/policyData\";\nimport { ProviderData } from \"../models/data/providerData\";\nimport { SendData } from \"../models/data/sendData\";\nimport { Account, AccountSettings } from \"../models/domain/account\";\nimport { EnvironmentUrls } from \"../models/domain/environmentUrls\";\nimport { GeneratedPasswordHistory } from \"../models/domain/generatedPasswordHistory\";\nimport { GlobalState } from \"../models/domain/globalState\";\nimport { StorageOptions } from \"../models/domain/storageOptions\";\n\nimport { TokenService } from \"./token.service\";\n\n// Originally (before January 2022) storage was handled as a flat key/value pair store.\n// With the move to a typed object for state storage these keys should no longer be in use anywhere outside of this migration.\nconst v1Keys: { [key: string]: string } = {\n  accessToken: \"accessToken\",\n  alwaysShowDock: \"alwaysShowDock\",\n  autoConfirmFingerprints: \"autoConfirmFingerprints\",\n  autoFillOnPageLoadDefault: \"autoFillOnPageLoadDefault\",\n  biometricAwaitingAcceptance: \"biometricAwaitingAcceptance\",\n  biometricFingerprintValidated: \"biometricFingerprintValidated\",\n  biometricText: \"biometricText\",\n  biometricUnlock: \"biometric\",\n  clearClipboard: \"clearClipboardKey\",\n  clientId: \"apikey_clientId\",\n  clientSecret: \"apikey_clientSecret\",\n  collapsedGroupings: \"collapsedGroupings\",\n  convertAccountToKeyConnector: \"convertAccountToKeyConnector\",\n  defaultUriMatch: \"defaultUriMatch\",\n  disableAddLoginNotification: \"disableAddLoginNotification\",\n  disableAutoBiometricsPrompt: \"noAutoPromptBiometrics\",\n  disableAutoTotpCopy: \"disableAutoTotpCopy\",\n  disableBadgeCounter: \"disableBadgeCounter\",\n  disableChangedPasswordNotification: \"disableChangedPasswordNotification\",\n  disableContextMenuItem: \"disableContextMenuItem\",\n  disableFavicon: \"disableFavicon\",\n  disableGa: \"disableGa\",\n  dontShowCardsCurrentTab: \"dontShowCardsCurrentTab\",\n  dontShowIdentitiesCurrentTab: \"dontShowIdentitiesCurrentTab\",\n  emailVerified: \"emailVerified\",\n  enableAlwaysOnTop: \"enableAlwaysOnTopKey\",\n  enableAutoFillOnPageLoad: \"enableAutoFillOnPageLoad\",\n  enableBiometric: \"enabledBiometric\",\n  enableBrowserIntegration: \"enableBrowserIntegration\",\n  enableBrowserIntegrationFingerprint: \"enableBrowserIntegrationFingerprint\",\n  enableCloseToTray: \"enableCloseToTray\",\n  enableFullWidth: \"enableFullWidth\",\n  enableGravatars: \"enableGravatars\",\n  enableMinimizeToTray: \"enableMinimizeToTray\",\n  enableStartToTray: \"enableStartToTrayKey\",\n  enableTray: \"enableTray\",\n  encKey: \"encKey\", // Generated Symmetric Key\n  encOrgKeys: \"encOrgKeys\",\n  encPrivate: \"encPrivateKey\",\n  encProviderKeys: \"encProviderKeys\",\n  entityId: \"entityId\",\n  entityType: \"entityType\",\n  environmentUrls: \"environmentUrls\",\n  equivalentDomains: \"equivalentDomains\",\n  eventCollection: \"eventCollection\",\n  forcePasswordReset: \"forcePasswordReset\",\n  history: \"generatedPasswordHistory\",\n  installedVersion: \"installedVersion\",\n  kdf: \"kdf\",\n  kdfIterations: \"kdfIterations\",\n  key: \"key\", // Master Key\n  keyHash: \"keyHash\",\n  lastActive: \"lastActive\",\n  localData: \"sitesLocalData\",\n  locale: \"locale\",\n  mainWindowSize: \"mainWindowSize\",\n  minimizeOnCopyToClipboard: \"minimizeOnCopyToClipboardKey\",\n  neverDomains: \"neverDomains\",\n  noAutoPromptBiometricsText: \"noAutoPromptBiometricsText\",\n  openAtLogin: \"openAtLogin\",\n  passwordGenerationOptions: \"passwordGenerationOptions\",\n  pinProtected: \"pinProtectedKey\",\n  protectedPin: \"protectedPin\",\n  refreshToken: \"refreshToken\",\n  ssoCodeVerifier: \"ssoCodeVerifier\",\n  ssoIdentifier: \"ssoOrgIdentifier\",\n  ssoState: \"ssoState\",\n  stamp: \"securityStamp\",\n  theme: \"theme\",\n  userEmail: \"userEmail\",\n  userId: \"userId\",\n  usesConnector: \"usesKeyConnector\",\n  vaultTimeoutAction: \"vaultTimeoutAction\",\n  vaultTimeout: \"lockOption\",\n  rememberedEmail: \"rememberedEmail\",\n};\n\nconst v1KeyPrefixes: { [key: string]: string } = {\n  ciphers: \"ciphers_\",\n  collections: \"collections_\",\n  folders: \"folders_\",\n  lastSync: \"lastSync_\",\n  policies: \"policies_\",\n  twoFactorToken: \"twoFactorToken_\",\n  organizations: \"organizations_\",\n  providers: \"providers_\",\n  sends: \"sends_\",\n  settings: \"settings_\",\n};\n\nconst keys = {\n  global: \"global\",\n  authenticatedAccounts: \"authenticatedAccounts\",\n  activeUserId: \"activeUserId\",\n  tempAccountSettings: \"tempAccountSettings\", // used to hold account specific settings (i.e clear clipboard) between initial migration and first account authentication\n  accountActivity: \"accountActivity\",\n};\n\nconst partialKeys = {\n  autoKey: \"_masterkey_auto\",\n  biometricKey: \"_masterkey_biometric\",\n  masterKey: \"_masterkey\",\n};\n\nexport class StateMigrationService<\n  TGlobalState extends GlobalState = GlobalState,\n  TAccount extends Account = Account\n> {\n  constructor(\n    protected storageService: AbstractStorageService,\n    protected secureStorageService: AbstractStorageService,\n    protected stateFactory: StateFactory<TGlobalState, TAccount>\n  ) {}\n\n  async needsMigration(): Promise<boolean> {\n    const currentStateVersion = await this.getCurrentStateVersion();\n    return currentStateVersion == null || currentStateVersion < StateVersion.Latest;\n  }\n\n  async migrate(): Promise<void> {\n    let currentStateVersion = await this.getCurrentStateVersion();\n    while (currentStateVersion < StateVersion.Latest) {\n      switch (currentStateVersion) {\n        case StateVersion.One:\n          await this.migrateStateFrom1To2();\n          break;\n        case StateVersion.Two:\n          await this.migrateStateFrom2To3();\n          break;\n        case StateVersion.Three:\n          await this.migrateStateFrom3To4();\n          break;\n        case StateVersion.Four: {\n          const authenticatedAccounts = await this.getAuthenticatedAccounts();\n          for (const account of authenticatedAccounts) {\n            const migratedAccount = await this.migrateAccountFrom4To5(account);\n            await this.set(account.profile.userId, migratedAccount);\n          }\n          await this.setCurrentStateVersion(StateVersion.Five);\n          break;\n        }\n        case StateVersion.Five: {\n          const authenticatedAccounts = await this.getAuthenticatedAccounts();\n          for (const account of authenticatedAccounts) {\n            const migratedAccount = await this.migrateAccountFrom5To6(account);\n            await this.set(account.profile.userId, migratedAccount);\n          }\n          await this.setCurrentStateVersion(StateVersion.Six);\n          break;\n        }\n      }\n\n      currentStateVersion += 1;\n    }\n  }\n\n  protected async migrateStateFrom1To2(): Promise<void> {\n    const clearV1Keys = async (clearingUserId?: string) => {\n      for (const key in v1Keys) {\n        if (key == null) {\n          continue;\n        }\n        await this.set(v1Keys[key], null);\n      }\n      if (clearingUserId != null) {\n        for (const keyPrefix in v1KeyPrefixes) {\n          if (keyPrefix == null) {\n            continue;\n          }\n          await this.set(v1KeyPrefixes[keyPrefix] + userId, null);\n        }\n      }\n    };\n\n    // Some processes, like biometrics, may have already defined a value before migrations are run.\n    // We don't want to null out those values if they don't exist in the old storage scheme (like for new installs)\n    // So, the OOO for migration is that we:\n    // 1. Check for an existing storage value from the old storage structure OR\n    // 2. Check for a value already set by processes that run before migration OR\n    // 3. Assign the default value\n    const globals =\n      (await this.get<GlobalState>(keys.global)) ?? this.stateFactory.createGlobal(null);\n    globals.stateVersion = StateVersion.Two;\n    globals.environmentUrls =\n      (await this.get<EnvironmentUrls>(v1Keys.environmentUrls)) ?? globals.environmentUrls;\n    globals.locale = (await this.get<string>(v1Keys.locale)) ?? globals.locale;\n    globals.noAutoPromptBiometrics =\n      (await this.get<boolean>(v1Keys.disableAutoBiometricsPrompt)) ??\n      globals.noAutoPromptBiometrics;\n    globals.noAutoPromptBiometricsText =\n      (await this.get<string>(v1Keys.noAutoPromptBiometricsText)) ??\n      globals.noAutoPromptBiometricsText;\n    globals.ssoCodeVerifier =\n      (await this.get<string>(v1Keys.ssoCodeVerifier)) ?? globals.ssoCodeVerifier;\n    globals.ssoOrganizationIdentifier =\n      (await this.get<string>(v1Keys.ssoIdentifier)) ?? globals.ssoOrganizationIdentifier;\n    globals.ssoState = (await this.get<any>(v1Keys.ssoState)) ?? globals.ssoState;\n    globals.rememberedEmail =\n      (await this.get<string>(v1Keys.rememberedEmail)) ?? globals.rememberedEmail;\n    globals.theme = (await this.get<ThemeType>(v1Keys.theme)) ?? globals.theme;\n    globals.vaultTimeout = (await this.get<number>(v1Keys.vaultTimeout)) ?? globals.vaultTimeout;\n    globals.vaultTimeoutAction =\n      (await this.get<string>(v1Keys.vaultTimeoutAction)) ?? globals.vaultTimeoutAction;\n    globals.window = (await this.get<any>(v1Keys.mainWindowSize)) ?? globals.window;\n    globals.enableTray = (await this.get<boolean>(v1Keys.enableTray)) ?? globals.enableTray;\n    globals.enableMinimizeToTray =\n      (await this.get<boolean>(v1Keys.enableMinimizeToTray)) ?? globals.enableMinimizeToTray;\n    globals.enableCloseToTray =\n      (await this.get<boolean>(v1Keys.enableCloseToTray)) ?? globals.enableCloseToTray;\n    globals.enableStartToTray =\n      (await this.get<boolean>(v1Keys.enableStartToTray)) ?? globals.enableStartToTray;\n    globals.openAtLogin = (await this.get<boolean>(v1Keys.openAtLogin)) ?? globals.openAtLogin;\n    globals.alwaysShowDock =\n      (await this.get<boolean>(v1Keys.alwaysShowDock)) ?? globals.alwaysShowDock;\n    globals.enableBrowserIntegration =\n      (await this.get<boolean>(v1Keys.enableBrowserIntegration)) ??\n      globals.enableBrowserIntegration;\n    globals.enableBrowserIntegrationFingerprint =\n      (await this.get<boolean>(v1Keys.enableBrowserIntegrationFingerprint)) ??\n      globals.enableBrowserIntegrationFingerprint;\n\n    const userId =\n      (await this.get<string>(v1Keys.userId)) ?? (await this.get<string>(v1Keys.entityId));\n\n    const defaultAccount = this.stateFactory.createAccount(null);\n    const accountSettings: AccountSettings = {\n      autoConfirmFingerPrints:\n        (await this.get<boolean>(v1Keys.autoConfirmFingerprints)) ??\n        defaultAccount.settings.autoConfirmFingerPrints,\n      autoFillOnPageLoadDefault:\n        (await this.get<boolean>(v1Keys.autoFillOnPageLoadDefault)) ??\n        defaultAccount.settings.autoFillOnPageLoadDefault,\n      biometricUnlock:\n        (await this.get<boolean>(v1Keys.biometricUnlock)) ??\n        defaultAccount.settings.biometricUnlock,\n      clearClipboard:\n        (await this.get<number>(v1Keys.clearClipboard)) ?? defaultAccount.settings.clearClipboard,\n      defaultUriMatch:\n        (await this.get<any>(v1Keys.defaultUriMatch)) ?? defaultAccount.settings.defaultUriMatch,\n      disableAddLoginNotification:\n        (await this.get<boolean>(v1Keys.disableAddLoginNotification)) ??\n        defaultAccount.settings.disableAddLoginNotification,\n      disableAutoBiometricsPrompt:\n        (await this.get<boolean>(v1Keys.disableAutoBiometricsPrompt)) ??\n        defaultAccount.settings.disableAutoBiometricsPrompt,\n      disableAutoTotpCopy:\n        (await this.get<boolean>(v1Keys.disableAutoTotpCopy)) ??\n        defaultAccount.settings.disableAutoTotpCopy,\n      disableBadgeCounter:\n        (await this.get<boolean>(v1Keys.disableBadgeCounter)) ??\n        defaultAccount.settings.disableBadgeCounter,\n      disableChangedPasswordNotification:\n        (await this.get<boolean>(v1Keys.disableChangedPasswordNotification)) ??\n        defaultAccount.settings.disableChangedPasswordNotification,\n      disableContextMenuItem:\n        (await this.get<boolean>(v1Keys.disableContextMenuItem)) ??\n        defaultAccount.settings.disableContextMenuItem,\n      disableGa: (await this.get<boolean>(v1Keys.disableGa)) ?? defaultAccount.settings.disableGa,\n      dontShowCardsCurrentTab:\n        (await this.get<boolean>(v1Keys.dontShowCardsCurrentTab)) ??\n        defaultAccount.settings.dontShowCardsCurrentTab,\n      dontShowIdentitiesCurrentTab:\n        (await this.get<boolean>(v1Keys.dontShowIdentitiesCurrentTab)) ??\n        defaultAccount.settings.dontShowIdentitiesCurrentTab,\n      enableAlwaysOnTop:\n        (await this.get<boolean>(v1Keys.enableAlwaysOnTop)) ??\n        defaultAccount.settings.enableAlwaysOnTop,\n      enableAutoFillOnPageLoad:\n        (await this.get<boolean>(v1Keys.enableAutoFillOnPageLoad)) ??\n        defaultAccount.settings.enableAutoFillOnPageLoad,\n      enableBiometric:\n        (await this.get<boolean>(v1Keys.enableBiometric)) ??\n        defaultAccount.settings.enableBiometric,\n      enableFullWidth:\n        (await this.get<boolean>(v1Keys.enableFullWidth)) ??\n        defaultAccount.settings.enableFullWidth,\n      enableGravitars:\n        (await this.get<boolean>(v1Keys.enableGravatars)) ??\n        defaultAccount.settings.enableGravitars,\n      environmentUrls: globals.environmentUrls ?? defaultAccount.settings.environmentUrls,\n      equivalentDomains:\n        (await this.get<any>(v1Keys.equivalentDomains)) ??\n        defaultAccount.settings.equivalentDomains,\n      minimizeOnCopyToClipboard:\n        (await this.get<boolean>(v1Keys.minimizeOnCopyToClipboard)) ??\n        defaultAccount.settings.minimizeOnCopyToClipboard,\n      neverDomains:\n        (await this.get<any>(v1Keys.neverDomains)) ?? defaultAccount.settings.neverDomains,\n      passwordGenerationOptions:\n        (await this.get<any>(v1Keys.passwordGenerationOptions)) ??\n        defaultAccount.settings.passwordGenerationOptions,\n      pinProtected: {\n        decrypted: null,\n        encrypted: await this.get<string>(v1Keys.pinProtected),\n      },\n      protectedPin: await this.get<string>(v1Keys.protectedPin),\n      settings: userId == null ? null : await this.get<any>(v1KeyPrefixes.settings + userId),\n      vaultTimeout:\n        (await this.get<number>(v1Keys.vaultTimeout)) ?? defaultAccount.settings.vaultTimeout,\n      vaultTimeoutAction:\n        (await this.get<string>(v1Keys.vaultTimeoutAction)) ??\n        defaultAccount.settings.vaultTimeoutAction,\n    };\n\n    // (userId == null) = no logged in user (so no known userId) and we need to temporarily store account specific settings in state to migrate on first auth\n    // (userId != null) = we have a currently authed user (so known userId) with encrypted data and other key settings we can move, no need to temporarily store account settings\n    if (userId == null) {\n      await this.set(keys.tempAccountSettings, accountSettings);\n      await this.set(keys.global, globals);\n      await this.set(keys.authenticatedAccounts, []);\n      await this.set(keys.activeUserId, null);\n      await clearV1Keys();\n      return;\n    }\n\n    globals.twoFactorToken = await this.get<string>(v1KeyPrefixes.twoFactorToken + userId);\n    await this.set(keys.global, globals);\n    await this.set(userId, {\n      data: {\n        addEditCipherInfo: null,\n        ciphers: {\n          decrypted: null,\n          encrypted: await this.get<{ [id: string]: CipherData }>(v1KeyPrefixes.ciphers + userId),\n        },\n        collapsedGroupings: null,\n        collections: {\n          decrypted: null,\n          encrypted: await this.get<{ [id: string]: CollectionData }>(\n            v1KeyPrefixes.collections + userId\n          ),\n        },\n        eventCollection: await this.get<EventData[]>(v1Keys.eventCollection),\n        folders: {\n          decrypted: null,\n          encrypted: await this.get<{ [id: string]: FolderData }>(v1KeyPrefixes.folders + userId),\n        },\n        localData: null,\n        organizations: await this.get<{ [id: string]: OrganizationData }>(\n          v1KeyPrefixes.organizations + userId\n        ),\n        passwordGenerationHistory: {\n          decrypted: null,\n          encrypted: await this.get<GeneratedPasswordHistory[]>(v1Keys.history),\n        },\n        policies: {\n          decrypted: null,\n          encrypted: await this.get<{ [id: string]: PolicyData }>(v1KeyPrefixes.policies + userId),\n        },\n        providers: await this.get<{ [id: string]: ProviderData }>(v1KeyPrefixes.providers + userId),\n        sends: {\n          decrypted: null,\n          encrypted: await this.get<{ [id: string]: SendData }>(v1KeyPrefixes.sends + userId),\n        },\n      },\n      keys: {\n        apiKeyClientSecret: await this.get<string>(v1Keys.clientSecret),\n        cryptoMasterKey: null,\n        cryptoMasterKeyAuto: null,\n        cryptoMasterKeyB64: null,\n        cryptoMasterKeyBiometric: null,\n        cryptoSymmetricKey: {\n          encrypted: await this.get<string>(v1Keys.encKey),\n          decrypted: null,\n        },\n        legacyEtmKey: null,\n        organizationKeys: {\n          decrypted: null,\n          encrypted: await this.get<any>(v1Keys.encOrgKeys),\n        },\n        privateKey: {\n          decrypted: null,\n          encrypted: await this.get<string>(v1Keys.encPrivate),\n        },\n        providerKeys: {\n          decrypted: null,\n          encrypted: await this.get<any>(v1Keys.encProviderKeys),\n        },\n        publicKey: null,\n      },\n      profile: {\n        apiKeyClientId: await this.get<string>(v1Keys.clientId),\n        authenticationStatus: null,\n        convertAccountToKeyConnector: await this.get<boolean>(v1Keys.convertAccountToKeyConnector),\n        email: await this.get<string>(v1Keys.userEmail),\n        emailVerified: await this.get<boolean>(v1Keys.emailVerified),\n        entityId: null,\n        entityType: null,\n        everBeenUnlocked: null,\n        forcePasswordReset: null,\n        hasPremiumPersonally: null,\n        kdfIterations: await this.get<number>(v1Keys.kdfIterations),\n        kdfType: await this.get<KdfType>(v1Keys.kdf),\n        keyHash: await this.get<string>(v1Keys.keyHash),\n        lastSync: null,\n        userId: userId,\n        usesKeyConnector: null,\n      },\n      settings: accountSettings,\n      tokens: {\n        accessToken: await this.get<string>(v1Keys.accessToken),\n        decodedToken: null,\n        refreshToken: await this.get<string>(v1Keys.refreshToken),\n        securityStamp: null,\n      },\n    });\n\n    await this.set(keys.authenticatedAccounts, [userId]);\n    await this.set(keys.activeUserId, userId);\n\n    const accountActivity: { [userId: string]: number } = {\n      [userId]: await this.get<number>(v1Keys.lastActive),\n    };\n    accountActivity[userId] = await this.get<number>(v1Keys.lastActive);\n    await this.set(keys.accountActivity, accountActivity);\n\n    await clearV1Keys(userId);\n\n    if (await this.secureStorageService.has(v1Keys.key, { keySuffix: \"biometric\" })) {\n      await this.secureStorageService.save(\n        `${userId}${partialKeys.biometricKey}`,\n        await this.secureStorageService.get(v1Keys.key, { keySuffix: \"biometric\" }),\n        { keySuffix: \"biometric\" }\n      );\n      await this.secureStorageService.remove(v1Keys.key, { keySuffix: \"biometric\" });\n    }\n\n    if (await this.secureStorageService.has(v1Keys.key, { keySuffix: \"auto\" })) {\n      await this.secureStorageService.save(\n        `${userId}${partialKeys.autoKey}`,\n        await this.secureStorageService.get(v1Keys.key, { keySuffix: \"auto\" }),\n        { keySuffix: \"auto\" }\n      );\n      await this.secureStorageService.remove(v1Keys.key, { keySuffix: \"auto\" });\n    }\n\n    if (await this.secureStorageService.has(v1Keys.key)) {\n      await this.secureStorageService.save(\n        `${userId}${partialKeys.masterKey}`,\n        await this.secureStorageService.get(v1Keys.key)\n      );\n      await this.secureStorageService.remove(v1Keys.key);\n    }\n  }\n\n  protected async migrateStateFrom2To3(): Promise<void> {\n    const authenticatedUserIds = await this.get<string[]>(keys.authenticatedAccounts);\n    await Promise.all(\n      authenticatedUserIds.map(async (userId) => {\n        const account = await this.get<TAccount>(userId);\n        if (\n          account?.profile?.hasPremiumPersonally === null &&\n          account.tokens?.accessToken != null\n        ) {\n          const decodedToken = await TokenService.decodeToken(account.tokens.accessToken);\n          account.profile.hasPremiumPersonally = decodedToken.premium;\n          await this.set(userId, account);\n        }\n      })\n    );\n\n    const globals = await this.getGlobals();\n    globals.stateVersion = StateVersion.Three;\n    await this.set(keys.global, globals);\n  }\n\n  protected async migrateStateFrom3To4(): Promise<void> {\n    const authenticatedUserIds = await this.get<string[]>(keys.authenticatedAccounts);\n    await Promise.all(\n      authenticatedUserIds.map(async (userId) => {\n        const account = await this.get<TAccount>(userId);\n        if (account?.profile?.everBeenUnlocked != null) {\n          delete account.profile.everBeenUnlocked;\n          return this.set(userId, account);\n        }\n      })\n    );\n\n    const globals = await this.getGlobals();\n    globals.stateVersion = StateVersion.Four;\n    await this.set(keys.global, globals);\n  }\n\n  protected async migrateAccountFrom4To5(account: TAccount): Promise<TAccount> {\n    const encryptedOrgKeys = account.keys?.organizationKeys?.encrypted;\n    if (encryptedOrgKeys != null) {\n      for (const [orgId, encKey] of Object.entries(encryptedOrgKeys)) {\n        encryptedOrgKeys[orgId] = {\n          type: \"organization\",\n          key: encKey as unknown as string, // Account v4 does not reflect the current account model so we have to cast\n        };\n      }\n    }\n\n    return account;\n  }\n\n  protected async migrateAccountFrom5To6(account: TAccount): Promise<TAccount> {\n    delete (account as any).keys?.legacyEtmKey;\n    return account;\n  }\n\n  protected get options(): StorageOptions {\n    return { htmlStorageLocation: HtmlStorageLocation.Local };\n  }\n\n  protected get<T>(key: string): Promise<T> {\n    return this.storageService.get<T>(key, this.options);\n  }\n\n  protected set(key: string, value: any): Promise<any> {\n    if (value == null) {\n      return this.storageService.remove(key, this.options);\n    }\n    return this.storageService.save(key, value, this.options);\n  }\n\n  protected async getGlobals(): Promise<TGlobalState> {\n    return await this.get<TGlobalState>(keys.global);\n  }\n\n  protected async getCurrentStateVersion(): Promise<StateVersion> {\n    return (await this.getGlobals())?.stateVersion ?? StateVersion.One;\n  }\n\n  protected async setCurrentStateVersion(newVersion: StateVersion): Promise<void> {\n    const globals = await this.getGlobals();\n    globals.stateVersion = newVersion;\n    await this.set(keys.global, globals);\n  }\n\n  protected async getAuthenticatedAccounts(): Promise<TAccount[]> {\n    const authenticatedUserIds = await this.get<string[]>(keys.authenticatedAccounts);\n    return Promise.all(authenticatedUserIds.map((id) => this.get<TAccount>(id)));\n  }\n}\n","import { AbstractStorageService } from \"@bitwarden/common/abstractions/storage.service\";\n\nexport class MemoryStorageService implements AbstractStorageService {\n  private store = new Map<string, any>();\n\n  get<T>(key: string): Promise<T> {\n    if (this.store.has(key)) {\n      const obj = this.store.get(key);\n      return Promise.resolve(obj as T);\n    }\n    return Promise.resolve(null);\n  }\n\n  async has(key: string): Promise<boolean> {\n    return this.get(key) != null;\n  }\n\n  save(key: string, obj: any): Promise<any> {\n    if (obj == null) {\n      return this.remove(key);\n    }\n    this.store.set(key, obj);\n    return Promise.resolve();\n  }\n\n  remove(key: string): Promise<any> {\n    this.store.delete(key);\n    return Promise.resolve();\n  }\n}\n","import { AbstractStorageService } from \"@bitwarden/common/abstractions/storage.service\";\n\nexport default abstract class AbstractChromeStorageService implements AbstractStorageService {\n  protected abstract chromeStorageApi: chrome.storage.StorageArea;\n\n  async get<T>(key: string): Promise<T> {\n    return new Promise((resolve) => {\n      this.chromeStorageApi.get(key, (obj: any) => {\n        if (obj != null && obj[key] != null) {\n          resolve(obj[key] as T);\n          return;\n        }\n        resolve(null);\n      });\n    });\n  }\n\n  async has(key: string): Promise<boolean> {\n    return (await this.get(key)) != null;\n  }\n\n  async save(key: string, obj: any): Promise<void> {\n    if (obj == null) {\n      // Fix safari not liking null in set\n      return new Promise<void>((resolve) => {\n        this.chromeStorageApi.remove(key, () => {\n          resolve();\n        });\n      });\n    }\n\n    if (obj instanceof Set) {\n      obj = Array.from(obj);\n    }\n\n    const keyedObj = { [key]: obj };\n    return new Promise<void>((resolve) => {\n      this.chromeStorageApi.set(keyedObj, () => {\n        resolve();\n      });\n    });\n  }\n\n  async remove(key: string): Promise<void> {\n    return new Promise<void>((resolve) => {\n      this.chromeStorageApi.remove(key, () => {\n        resolve();\n      });\n    });\n  }\n}\n","import AbstractChromeStorageService from \"./abstractChromeStorageApi.service\";\n\nexport default class BrowserLocalStorageService extends AbstractChromeStorageService {\n  protected chromeStorageApi = chrome.storage.local;\n}\n","import AbstractChromeStorageService from \"./abstractChromeStorageApi.service\";\n\nexport default class BrowserMemoryStorageService extends AbstractChromeStorageService {\n  protected chromeStorageApi = chrome.storage.session;\n}\n","import { AbstractEncryptService } from \"@bitwarden/common/abstractions/abstractEncrypt.service\";\nimport { AbstractCachedStorageService } from \"@bitwarden/common/abstractions/storage.service\";\nimport { EncString } from \"@bitwarden/common/models/domain/encString\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/models/domain/symmetricCryptoKey\";\n\nimport { devFlag } from \"../decorators/dev-flag.decorator\";\nimport { devFlagEnabled } from \"../flags\";\n\nimport { AbstractKeyGenerationService } from \"./abstractions/abstractKeyGeneration.service\";\nimport BrowserLocalStorageService from \"./browserLocalStorage.service\";\nimport BrowserMemoryStorageService from \"./browserMemoryStorage.service\";\n\nconst keys = {\n  encKey: \"localEncryptionKey\",\n  sessionKey: \"session\",\n};\n\nexport class LocalBackedSessionStorageService extends AbstractCachedStorageService {\n  private cache = new Map<string, unknown>();\n  private localStorage = new BrowserLocalStorageService();\n  private sessionStorage = new BrowserMemoryStorageService();\n\n  constructor(\n    private encryptService: AbstractEncryptService,\n    private keyGenerationService: AbstractKeyGenerationService\n  ) {\n    super();\n  }\n\n  async get<T>(key: string): Promise<T> {\n    if (this.cache.has(key)) {\n      return this.cache.get(key) as T;\n    }\n\n    return await this.getBypassCache(key);\n  }\n\n  async getBypassCache<T>(key: string): Promise<T> {\n    const session = await this.getLocalSession(await this.getSessionEncKey());\n    if (session == null || !Object.keys(session).includes(key)) {\n      return null;\n    }\n\n    this.cache.set(key, session[key]);\n    return this.cache.get(key) as T;\n  }\n\n  async has(key: string): Promise<boolean> {\n    return (await this.get(key)) != null;\n  }\n\n  async save<T>(key: string, obj: T): Promise<void> {\n    if (obj == null) {\n      this.cache.delete(key);\n    } else {\n      this.cache.set(key, obj);\n    }\n\n    const sessionEncKey = await this.getSessionEncKey();\n    const localSession = (await this.getLocalSession(sessionEncKey)) ?? {};\n    localSession[key] = obj;\n    await this.setLocalSession(localSession, sessionEncKey);\n  }\n\n  async remove(key: string): Promise<void> {\n    await this.save(key, null);\n  }\n\n  async getLocalSession(encKey: SymmetricCryptoKey): Promise<Record<string, unknown>> {\n    const local = await this.localStorage.get<string>(keys.sessionKey);\n\n    if (local == null) {\n      return null;\n    }\n\n    if (devFlagEnabled(\"storeSessionDecrypted\")) {\n      return local as any as Record<string, unknown>;\n    }\n\n    const sessionJson = await this.encryptService.decryptToUtf8(new EncString(local), encKey);\n    if (sessionJson == null) {\n      // Error with decryption -- session is lost, delete state and key and start over\n      await this.setSessionEncKey(null);\n      await this.localStorage.remove(keys.sessionKey);\n      return null;\n    }\n    return JSON.parse(sessionJson);\n  }\n\n  async setLocalSession(session: Record<string, unknown>, key: SymmetricCryptoKey) {\n    if (devFlagEnabled(\"storeSessionDecrypted\")) {\n      await this.setDecryptedLocalSession(session);\n    } else {\n      await this.setEncryptedLocalSession(session, key);\n    }\n  }\n\n  @devFlag(\"storeSessionDecrypted\")\n  async setDecryptedLocalSession(session: Record<string, unknown>): Promise<void> {\n    // Make sure we're storing the jsonified version of the session\n    const jsonSession = JSON.parse(JSON.stringify(session));\n    if (session == null) {\n      await this.localStorage.remove(keys.sessionKey);\n    } else {\n      await this.localStorage.save(keys.sessionKey, jsonSession);\n    }\n  }\n\n  async setEncryptedLocalSession(session: Record<string, unknown>, key: SymmetricCryptoKey) {\n    const jsonSession = JSON.stringify(session);\n    const encSession = await this.encryptService.encrypt(jsonSession, key);\n\n    if (encSession == null) {\n      return await this.localStorage.remove(keys.sessionKey);\n    }\n    await this.localStorage.save(keys.sessionKey, encSession.encryptedString);\n  }\n\n  async getSessionEncKey(): Promise<SymmetricCryptoKey> {\n    let storedKey = await this.sessionStorage.get<SymmetricCryptoKey>(keys.encKey);\n    if (storedKey == null || Object.keys(storedKey).length == 0) {\n      storedKey = await this.keyGenerationService.makeEphemeralKey();\n      await this.setSessionEncKey(storedKey);\n    }\n    return SymmetricCryptoKey.fromJSON(storedKey);\n  }\n\n  async setSessionEncKey(input: SymmetricCryptoKey): Promise<void> {\n    if (input == null) {\n      await this.sessionStorage.remove(keys.encKey);\n    } else {\n      await this.sessionStorage.save(keys.encKey, input);\n    }\n  }\n}\n","import { devFlagEnabled, DevFlagName } from \"../flags\";\n\nexport function devFlag(flag: DevFlagName) {\n  return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n    const originalMethod = descriptor.value;\n    descriptor.value = function (...args: any[]) {\n      if (!devFlagEnabled(flag)) {\n        throw new Error(\n          `This method should not be called, it is protected by a disabled dev flag.`\n        );\n      }\n      return originalMethod.apply(this, args);\n    };\n  };\n}\n","import { CryptoFunctionService } from \"@bitwarden/common/abstractions/cryptoFunction.service\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/models/domain/symmetricCryptoKey\";\n\nimport { AbstractKeyGenerationService } from \"./abstractions/abstractKeyGeneration.service\";\n\nexport class KeyGenerationService implements AbstractKeyGenerationService {\n  constructor(private cryptoFunctionService: CryptoFunctionService) {}\n\n  async makeEphemeralKey(numBytes = 16): Promise<SymmetricCryptoKey> {\n    const keyMaterial = await this.cryptoFunctionService.randomBytes(numBytes);\n    const key = await this.cryptoFunctionService.hkdf(\n      keyMaterial,\n      \"bitwarden-ephemeral\",\n      \"ephemeral\",\n      64,\n      \"sha256\"\n    );\n    return new SymmetricCryptoKey(key);\n  }\n}\n","import { AbstractStorageService } from \"@bitwarden/common/abstractions/storage.service\";\nimport { MemoryStorageService } from \"@bitwarden/common/services/memoryStorage.service\";\n\nimport BrowserLocalStorageService from \"../../services/browserLocalStorage.service\";\nimport { LocalBackedSessionStorageService } from \"../../services/localBackedSessionStorage.service\";\n\nimport { encryptServiceFactory, EncryptServiceInitOptions } from \"./encrypt-service.factory\";\nimport { CachedServices, factory, FactoryOptions } from \"./factory-options\";\nimport {\n  keyGenerationServiceFactory,\n  KeyGenerationServiceInitOptions,\n} from \"./key-generation-service.factory\";\n\ntype StorageServiceFactoryOptions = FactoryOptions;\n\nexport type DiskStorageServiceInitOptions = StorageServiceFactoryOptions;\nexport type SecureStorageServiceInitOptions = StorageServiceFactoryOptions;\nexport type MemoryStorageServiceInitOptions = StorageServiceFactoryOptions &\n  EncryptServiceInitOptions &\n  KeyGenerationServiceInitOptions;\n\nexport function diskStorageServiceFactory(\n  cache: { diskStorageService?: AbstractStorageService } & CachedServices,\n  opts: DiskStorageServiceInitOptions\n): AbstractStorageService {\n  return factory(cache, \"diskStorageService\", opts, () => new BrowserLocalStorageService());\n}\n\nexport function secureStorageServiceFactory(\n  cache: { secureStorageService?: AbstractStorageService } & CachedServices,\n  opts: SecureStorageServiceInitOptions\n): AbstractStorageService {\n  return factory(cache, \"secureStorageService\", opts, () => new BrowserLocalStorageService());\n}\n\nexport function memoryStorageServiceFactory(\n  cache: { memoryStorageService?: AbstractStorageService } & CachedServices,\n  opts: MemoryStorageServiceInitOptions\n): AbstractStorageService {\n  return factory(cache, \"memoryStorageService\", opts, () => {\n    if (chrome.runtime.getManifest().manifest_version == 3) {\n      return new LocalBackedSessionStorageService(\n        encryptServiceFactory(cache, opts),\n        keyGenerationServiceFactory(cache, opts)\n      );\n    }\n    return new MemoryStorageService();\n  });\n}\n","import { KeyGenerationService } from \"../../services/keyGeneration.service\";\n\nimport {\n  cryptoFunctionServiceFactory,\n  CryptoFunctionServiceInitOptions,\n} from \"./crypto-function-service.factory\";\nimport { CachedServices, factory, FactoryOptions } from \"./factory-options\";\n\ntype KeyGenerationServiceFactoryOptions = FactoryOptions;\n\nexport type KeyGenerationServiceInitOptions = KeyGenerationServiceFactoryOptions &\n  CryptoFunctionServiceInitOptions;\n\nexport function keyGenerationServiceFactory(\n  cache: { keyGenerationService?: KeyGenerationService } & CachedServices,\n  opts: KeyGenerationServiceInitOptions\n): KeyGenerationService {\n  return factory(\n    cache,\n    \"keyGenerationService\",\n    opts,\n    () => new KeyGenerationService(cryptoFunctionServiceFactory(cache, opts))\n  );\n}\n","import { StateFactory } from \"@bitwarden/common/factories/stateFactory\";\nimport { GlobalState } from \"@bitwarden/common/models/domain/globalState\";\nimport { StateMigrationService } from \"@bitwarden/common/services/stateMigration.service\";\n\nimport { Account } from \"../../models/account\";\n\nimport { CachedServices, factory, FactoryOptions } from \"./factory-options\";\nimport {\n  diskStorageServiceFactory,\n  DiskStorageServiceInitOptions,\n  secureStorageServiceFactory,\n  SecureStorageServiceInitOptions,\n} from \"./storage-service.factory\";\n\ntype StateMigrationServiceFactoryOptions = FactoryOptions & {\n  stateMigrationServiceOptions: {\n    stateFactory: StateFactory<GlobalState, Account>;\n  };\n};\n\nexport type StateMigrationServiceInitOptions = StateMigrationServiceFactoryOptions &\n  DiskStorageServiceInitOptions &\n  SecureStorageServiceInitOptions;\n\nexport function stateMigrationServiceFactory(\n  cache: { stateMigrationService?: StateMigrationService } & CachedServices,\n  opts: StateMigrationServiceInitOptions\n): StateMigrationService {\n  return factory(\n    cache,\n    \"stateMigrationService\",\n    opts,\n    () =>\n      new StateMigrationService(\n        diskStorageServiceFactory(cache, opts),\n        secureStorageServiceFactory(cache, opts),\n        opts.stateMigrationServiceOptions.stateFactory\n      )\n  );\n}\n","import { StateFactory } from \"@bitwarden/common/factories/stateFactory\";\nimport { GlobalState } from \"@bitwarden/common/models/domain/globalState\";\n\nimport { Account } from \"../../models/account\";\nimport { StateService } from \"../../services/state.service\";\n\nimport { CachedServices, factory, FactoryOptions } from \"./factory-options\";\nimport { logServiceFactory, LogServiceInitOptions } from \"./log-service.factory\";\nimport {\n  stateMigrationServiceFactory,\n  StateMigrationServiceInitOptions,\n} from \"./state-migration-service.factory\";\nimport {\n  diskStorageServiceFactory,\n  secureStorageServiceFactory,\n  memoryStorageServiceFactory,\n  DiskStorageServiceInitOptions,\n  SecureStorageServiceInitOptions,\n  MemoryStorageServiceInitOptions,\n} from \"./storage-service.factory\";\n\ntype StateServiceFactoryOptions = FactoryOptions & {\n  stateServiceOptions: {\n    useAccountCache?: boolean;\n    stateFactory: StateFactory<GlobalState, Account>;\n  };\n};\n\nexport type StateServiceInitOptions = StateServiceFactoryOptions &\n  DiskStorageServiceInitOptions &\n  SecureStorageServiceInitOptions &\n  MemoryStorageServiceInitOptions &\n  LogServiceInitOptions &\n  StateMigrationServiceInitOptions;\n\nexport function stateServiceFactory(\n  cache: { stateService?: StateService } & CachedServices,\n  opts: StateServiceInitOptions\n): StateService {\n  return factory(\n    cache,\n    \"stateService\",\n    opts,\n    () =>\n      new StateService(\n        diskStorageServiceFactory(cache, opts),\n        secureStorageServiceFactory(cache, opts),\n        memoryStorageServiceFactory(cache, opts),\n        logServiceFactory(cache, opts),\n        stateMigrationServiceFactory(cache, opts),\n        opts.stateServiceOptions.stateFactory,\n        opts.stateServiceOptions.useAccountCache\n      )\n  );\n}\n","import { BrowserEnvironmentService } from \"../../services/browser-environment.service\";\n\nimport { CachedServices, factory, FactoryOptions } from \"./factory-options\";\nimport { logServiceFactory, LogServiceInitOptions } from \"./log-service.factory\";\nimport {\n  stateServiceFactory as stateServiceFactory,\n  StateServiceInitOptions,\n} from \"./state-service.factory\";\n\ntype EnvironmentServiceFactoryOptions = FactoryOptions;\n\nexport type EnvironmentServiceInitOptions = EnvironmentServiceFactoryOptions &\n  StateServiceInitOptions &\n  LogServiceInitOptions;\n\nexport function environmentServiceFactory(\n  cache: { environmentService?: BrowserEnvironmentService } & CachedServices,\n  opts: EnvironmentServiceInitOptions\n): BrowserEnvironmentService {\n  return factory(\n    cache,\n    \"environmentService\",\n    opts,\n    () =>\n      new BrowserEnvironmentService(\n        stateServiceFactory(cache, opts),\n        logServiceFactory(cache, opts)\n      )\n  );\n}\n","import MainBackground from \"./main.background\";\nimport NotificationBackground from \"./notification.background\";\n\nexport default class TabsBackground {\n  constructor(\n    private main: MainBackground,\n    private notificationBackground: NotificationBackground\n  ) {}\n\n  private focusedWindowId: number;\n\n  async init() {\n    if (!chrome.tabs || !chrome.windows) {\n      return;\n    }\n\n    chrome.windows.onFocusChanged.addListener(async (windowId: number) => {\n      if (windowId === null || windowId < 0) {\n        return;\n      }\n\n      this.focusedWindowId = windowId;\n      this.main.messagingService.send(\"windowChanged\");\n    });\n\n    chrome.tabs.onActivated.addListener(async (activeInfo: chrome.tabs.TabActiveInfo) => {\n      await this.main.refreshBadgeAndMenu();\n      this.main.messagingService.send(\"tabChanged\");\n    });\n\n    chrome.tabs.onReplaced.addListener(async (addedTabId: number, removedTabId: number) => {\n      if (this.main.onReplacedRan) {\n        return;\n      }\n      this.main.onReplacedRan = true;\n\n      await this.notificationBackground.checkNotificationQueue();\n      await this.main.refreshBadgeAndMenu();\n      this.main.messagingService.send(\"tabChanged\");\n    });\n\n    chrome.tabs.onUpdated.addListener(\n      async (tabId: number, changeInfo: chrome.tabs.TabChangeInfo, tab: chrome.tabs.Tab) => {\n        if (this.focusedWindowId > 0 && tab.windowId != this.focusedWindowId) {\n          return;\n        }\n\n        if (!tab.active) {\n          return;\n        }\n\n        if (this.main.onUpdatedRan) {\n          return;\n        }\n        this.main.onUpdatedRan = true;\n\n        await this.notificationBackground.checkNotificationQueue(tab);\n        await this.main.refreshBadgeAndMenu();\n        this.main.messagingService.send(\"tabChanged\");\n      }\n    );\n  }\n}\n","import { AuthService } from \"@bitwarden/common/abstractions/auth.service\";\nimport { CipherService } from \"@bitwarden/common/abstractions/cipher.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { AuthenticationStatus } from \"@bitwarden/common/enums/authenticationStatus\";\nimport { UriMatchType } from \"@bitwarden/common/enums/uriMatchType\";\n\nexport default class WebRequestBackground {\n  private pendingAuthRequests: any[] = [];\n  private webRequest: any;\n  private isFirefox: boolean;\n\n  constructor(\n    platformUtilsService: PlatformUtilsService,\n    private cipherService: CipherService,\n    private authService: AuthService\n  ) {\n    const manifest = chrome.runtime.getManifest();\n    if (manifest.manifest_version === 2) {\n      this.webRequest = (window as any).chrome.webRequest;\n    }\n    this.isFirefox = platformUtilsService.isFirefox();\n  }\n\n  async init() {\n    if (!this.webRequest || !this.webRequest.onAuthRequired) {\n      return;\n    }\n\n    this.webRequest.onAuthRequired.addListener(\n      async (details: any, callback: any) => {\n        if (!details.url || this.pendingAuthRequests.indexOf(details.requestId) !== -1) {\n          if (callback) {\n            callback();\n          }\n          return;\n        }\n\n        this.pendingAuthRequests.push(details.requestId);\n\n        if (this.isFirefox) {\n          // eslint-disable-next-line\n          return new Promise(async (resolve, reject) => {\n            await this.resolveAuthCredentials(details.url, resolve, reject);\n          });\n        } else {\n          await this.resolveAuthCredentials(details.url, callback, callback);\n        }\n      },\n      { urls: [\"http://*/*\", \"https://*/*\"] },\n      [this.isFirefox ? \"blocking\" : \"asyncBlocking\"]\n    );\n\n    this.webRequest.onCompleted.addListener((details: any) => this.completeAuthRequest(details), {\n      urls: [\"http://*/*\"],\n    });\n    this.webRequest.onErrorOccurred.addListener(\n      (details: any) => this.completeAuthRequest(details),\n      {\n        urls: [\"http://*/*\"],\n      }\n    );\n  }\n\n  // eslint-disable-next-line\n  private async resolveAuthCredentials(domain: string, success: Function, error: Function) {\n    if ((await this.authService.getAuthStatus()) < AuthenticationStatus.Unlocked) {\n      error();\n      return;\n    }\n\n    try {\n      const ciphers = await this.cipherService.getAllDecryptedForUrl(\n        domain,\n        null,\n        UriMatchType.Host\n      );\n      if (ciphers == null || ciphers.length !== 1) {\n        error();\n        return;\n      }\n\n      success({\n        authCredentials: {\n          username: ciphers[0].login.username,\n          password: ciphers[0].login.password,\n        },\n      });\n    } catch {\n      error();\n    }\n  }\n\n  private completeAuthRequest(details: any) {\n    const i = this.pendingAuthRequests.indexOf(details.requestId);\n    if (i > -1) {\n      this.pendingAuthRequests.splice(i, 1);\n    }\n  }\n}\n","import { ApiService as ApiServiceAbstraction } from \"@bitwarden/common/abstractions/api.service\";\nimport { AppIdService as AppIdServiceAbstraction } from \"@bitwarden/common/abstractions/appId.service\";\nimport { AuditService as AuditServiceAbstraction } from \"@bitwarden/common/abstractions/audit.service\";\nimport { AuthService as AuthServiceAbstraction } from \"@bitwarden/common/abstractions/auth.service\";\nimport { CipherService as CipherServiceAbstraction } from \"@bitwarden/common/abstractions/cipher.service\";\nimport { CollectionService as CollectionServiceAbstraction } from \"@bitwarden/common/abstractions/collection.service\";\nimport { CryptoService as CryptoServiceAbstraction } from \"@bitwarden/common/abstractions/crypto.service\";\nimport { CryptoFunctionService as CryptoFunctionServiceAbstraction } from \"@bitwarden/common/abstractions/cryptoFunction.service\";\nimport { EventService as EventServiceAbstraction } from \"@bitwarden/common/abstractions/event.service\";\nimport { ExportService as ExportServiceAbstraction } from \"@bitwarden/common/abstractions/export.service\";\nimport { FileUploadService as FileUploadServiceAbstraction } from \"@bitwarden/common/abstractions/fileUpload.service\";\nimport { FolderApiServiceAbstraction } from \"@bitwarden/common/abstractions/folder/folder-api.service.abstraction\";\nimport { InternalFolderService as InternalFolderServiceAbstraction } from \"@bitwarden/common/abstractions/folder/folder.service.abstraction\";\nimport { I18nService as I18nServiceAbstraction } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { KeyConnectorService as KeyConnectorServiceAbstraction } from \"@bitwarden/common/abstractions/keyConnector.service\";\nimport { LogService as LogServiceAbstraction } from \"@bitwarden/common/abstractions/log.service\";\nimport { MessagingService as MessagingServiceAbstraction } from \"@bitwarden/common/abstractions/messaging.service\";\nimport { NotificationsService as NotificationsServiceAbstraction } from \"@bitwarden/common/abstractions/notifications.service\";\nimport { OrganizationService as OrganizationServiceAbstraction } from \"@bitwarden/common/abstractions/organization.service\";\nimport { PasswordGenerationService as PasswordGenerationServiceAbstraction } from \"@bitwarden/common/abstractions/passwordGeneration.service\";\nimport { PlatformUtilsService as PlatformUtilsServiceAbstraction } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { PolicyApiServiceAbstraction } from \"@bitwarden/common/abstractions/policy/policy-api.service.abstraction\";\nimport { InternalPolicyService as InternalPolicyServiceAbstraction } from \"@bitwarden/common/abstractions/policy/policy.service.abstraction\";\nimport { ProviderService as ProviderServiceAbstraction } from \"@bitwarden/common/abstractions/provider.service\";\nimport { SearchService as SearchServiceAbstraction } from \"@bitwarden/common/abstractions/search.service\";\nimport { SendService as SendServiceAbstraction } from \"@bitwarden/common/abstractions/send.service\";\nimport { SettingsService as SettingsServiceAbstraction } from \"@bitwarden/common/abstractions/settings.service\";\nimport { AbstractStorageService } from \"@bitwarden/common/abstractions/storage.service\";\nimport { SyncService as SyncServiceAbstraction } from \"@bitwarden/common/abstractions/sync.service\";\nimport { SystemService as SystemServiceAbstraction } from \"@bitwarden/common/abstractions/system.service\";\nimport { TokenService as TokenServiceAbstraction } from \"@bitwarden/common/abstractions/token.service\";\nimport { TotpService as TotpServiceAbstraction } from \"@bitwarden/common/abstractions/totp.service\";\nimport { TwoFactorService as TwoFactorServiceAbstraction } from \"@bitwarden/common/abstractions/twoFactor.service\";\nimport { UserVerificationApiServiceAbstraction } from \"@bitwarden/common/abstractions/userVerification/userVerification-api.service.abstraction\";\nimport { UserVerificationService as UserVerificationServiceAbstraction } from \"@bitwarden/common/abstractions/userVerification/userVerification.service.abstraction\";\nimport { UsernameGenerationService as UsernameGenerationServiceAbstraction } from \"@bitwarden/common/abstractions/usernameGeneration.service\";\nimport { VaultTimeoutService as VaultTimeoutServiceAbstraction } from \"@bitwarden/common/abstractions/vaultTimeout.service\";\nimport { AuthenticationStatus } from \"@bitwarden/common/enums/authenticationStatus\";\nimport { CipherRepromptType } from \"@bitwarden/common/enums/cipherRepromptType\";\nimport { CipherType } from \"@bitwarden/common/enums/cipherType\";\nimport { StateFactory } from \"@bitwarden/common/factories/stateFactory\";\nimport { GlobalState } from \"@bitwarden/common/models/domain/globalState\";\nimport { CipherView } from \"@bitwarden/common/models/view/cipherView\";\nimport { ApiService } from \"@bitwarden/common/services/api.service\";\nimport { AppIdService } from \"@bitwarden/common/services/appId.service\";\nimport { AuditService } from \"@bitwarden/common/services/audit.service\";\nimport { AuthService } from \"@bitwarden/common/services/auth.service\";\nimport { CipherService } from \"@bitwarden/common/services/cipher.service\";\nimport { CollectionService } from \"@bitwarden/common/services/collection.service\";\nimport { ContainerService } from \"@bitwarden/common/services/container.service\";\nimport { EncryptService } from \"@bitwarden/common/services/encrypt.service\";\nimport { EventService } from \"@bitwarden/common/services/event.service\";\nimport { ExportService } from \"@bitwarden/common/services/export.service\";\nimport { FileUploadService } from \"@bitwarden/common/services/fileUpload.service\";\nimport { FolderApiService } from \"@bitwarden/common/services/folder/folder-api.service\";\nimport { KeyConnectorService } from \"@bitwarden/common/services/keyConnector.service\";\nimport { NotificationsService } from \"@bitwarden/common/services/notifications.service\";\nimport { OrganizationService } from \"@bitwarden/common/services/organization.service\";\nimport { PasswordGenerationService } from \"@bitwarden/common/services/passwordGeneration.service\";\nimport { PolicyApiService } from \"@bitwarden/common/services/policy/policy-api.service\";\nimport { PolicyService } from \"@bitwarden/common/services/policy/policy.service\";\nimport { ProviderService } from \"@bitwarden/common/services/provider.service\";\nimport { SearchService } from \"@bitwarden/common/services/search.service\";\nimport { SendService } from \"@bitwarden/common/services/send.service\";\nimport { SettingsService } from \"@bitwarden/common/services/settings.service\";\nimport { StateMigrationService } from \"@bitwarden/common/services/stateMigration.service\";\nimport { SyncService } from \"@bitwarden/common/services/sync.service\";\nimport { SystemService } from \"@bitwarden/common/services/system.service\";\nimport { TokenService } from \"@bitwarden/common/services/token.service\";\nimport { TotpService } from \"@bitwarden/common/services/totp.service\";\nimport { TwoFactorService } from \"@bitwarden/common/services/twoFactor.service\";\nimport { UserVerificationApiService } from \"@bitwarden/common/services/userVerification/userVerification-api.service\";\nimport { UserVerificationService } from \"@bitwarden/common/services/userVerification/userVerification.service\";\nimport { UsernameGenerationService } from \"@bitwarden/common/services/usernameGeneration.service\";\n\nimport { BrowserApi } from \"../browser/browserApi\";\nimport { SafariApp } from \"../browser/safariApp\";\nimport { Account } from \"../models/account\";\nimport { PopupUtilsService } from \"../popup/services/popup-utils.service\";\nimport { AutofillService as AutofillServiceAbstraction } from \"../services/abstractions/autofill.service\";\nimport { StateService as StateServiceAbstraction } from \"../services/abstractions/state.service\";\nimport AutofillService from \"../services/autofill.service\";\nimport { BrowserEnvironmentService } from \"../services/browser-environment.service\";\nimport { BrowserCryptoService } from \"../services/browserCrypto.service\";\nimport BrowserMessagingService from \"../services/browserMessaging.service\";\nimport BrowserMessagingPrivateModeBackgroundService from \"../services/browserMessagingPrivateModeBackground.service\";\nimport BrowserPlatformUtilsService from \"../services/browserPlatformUtils.service\";\nimport { FolderService } from \"../services/folders/folder.service\";\nimport I18nService from \"../services/i18n.service\";\nimport { VaultFilterService } from \"../services/vaultFilter.service\";\nimport VaultTimeoutService from \"../services/vaultTimeout.service\";\n\nimport CommandsBackground from \"./commands.background\";\nimport ContextMenusBackground from \"./contextMenus.background\";\nimport IdleBackground from \"./idle.background\";\nimport IconDetails from \"./models/iconDetails\";\nimport { NativeMessagingBackground } from \"./nativeMessaging.background\";\nimport NotificationBackground from \"./notification.background\";\nimport RuntimeBackground from \"./runtime.background\";\nimport { cryptoFunctionServiceFactory } from \"./service_factories/crypto-function-service.factory\";\nimport { encryptServiceFactory } from \"./service_factories/encrypt-service.factory\";\nimport { environmentServiceFactory } from \"./service_factories/environment-service.factory\";\nimport { logServiceFactory } from \"./service_factories/log-service.factory\";\nimport { stateMigrationServiceFactory } from \"./service_factories/state-migration-service.factory\";\nimport { stateServiceFactory } from \"./service_factories/state-service.factory\";\nimport {\n  diskStorageServiceFactory,\n  memoryStorageServiceFactory,\n  secureStorageServiceFactory,\n} from \"./service_factories/storage-service.factory\";\nimport TabsBackground from \"./tabs.background\";\nimport WebRequestBackground from \"./webRequest.background\";\n\nexport default class MainBackground {\n  messagingService: MessagingServiceAbstraction;\n  storageService: AbstractStorageService;\n  secureStorageService: AbstractStorageService;\n  memoryStorageService: AbstractStorageService;\n  i18nService: I18nServiceAbstraction;\n  platformUtilsService: PlatformUtilsServiceAbstraction;\n  logService: LogServiceAbstraction;\n  cryptoService: CryptoServiceAbstraction;\n  cryptoFunctionService: CryptoFunctionServiceAbstraction;\n  tokenService: TokenServiceAbstraction;\n  appIdService: AppIdServiceAbstraction;\n  apiService: ApiServiceAbstraction;\n  environmentService: BrowserEnvironmentService;\n  settingsService: SettingsServiceAbstraction;\n  cipherService: CipherServiceAbstraction;\n  folderService: InternalFolderServiceAbstraction;\n  collectionService: CollectionServiceAbstraction;\n  vaultTimeoutService: VaultTimeoutServiceAbstraction;\n  syncService: SyncServiceAbstraction;\n  passwordGenerationService: PasswordGenerationServiceAbstraction;\n  totpService: TotpServiceAbstraction;\n  autofillService: AutofillServiceAbstraction;\n  containerService: ContainerService;\n  auditService: AuditServiceAbstraction;\n  authService: AuthServiceAbstraction;\n  exportService: ExportServiceAbstraction;\n  searchService: SearchServiceAbstraction;\n  notificationsService: NotificationsServiceAbstraction;\n  stateService: StateServiceAbstraction;\n  stateMigrationService: StateMigrationService;\n  systemService: SystemServiceAbstraction;\n  eventService: EventServiceAbstraction;\n  policyService: InternalPolicyServiceAbstraction;\n  popupUtilsService: PopupUtilsService;\n  sendService: SendServiceAbstraction;\n  fileUploadService: FileUploadServiceAbstraction;\n  organizationService: OrganizationServiceAbstraction;\n  providerService: ProviderServiceAbstraction;\n  keyConnectorService: KeyConnectorServiceAbstraction;\n  userVerificationService: UserVerificationServiceAbstraction;\n  twoFactorService: TwoFactorServiceAbstraction;\n  vaultFilterService: VaultFilterService;\n  usernameGenerationService: UsernameGenerationServiceAbstraction;\n  encryptService: EncryptService;\n  folderApiService: FolderApiServiceAbstraction;\n  policyApiService: PolicyApiServiceAbstraction;\n  userVerificationApiService: UserVerificationApiServiceAbstraction;\n\n  // Passed to the popup for Safari to workaround issues with theming, downloading, etc.\n  backgroundWindow = window;\n\n  onUpdatedRan: boolean;\n  onReplacedRan: boolean;\n  loginToAutoFill: CipherView = null;\n\n  private commandsBackground: CommandsBackground;\n  private contextMenusBackground: ContextMenusBackground;\n  private idleBackground: IdleBackground;\n  private notificationBackground: NotificationBackground;\n  private runtimeBackground: RuntimeBackground;\n  private tabsBackground: TabsBackground;\n  private webRequestBackground: WebRequestBackground;\n\n  private sidebarAction: any;\n  private buildingContextMenu: boolean;\n  private menuOptionsLoaded: any[] = [];\n  private syncTimeout: any;\n  private isSafari: boolean;\n  private nativeMessagingBackground: NativeMessagingBackground;\n\n  constructor(public isPrivateMode: boolean = false) {\n    // Services\n    const lockedCallback = async (userId?: string) => {\n      if (this.notificationsService != null) {\n        this.notificationsService.updateConnection(false);\n      }\n      await this.setIcon();\n      await this.refreshBadgeAndMenu(true);\n      if (this.systemService != null) {\n        await this.systemService.clearPendingClipboard();\n        await this.systemService.startProcessReload(this.authService);\n      }\n    };\n\n    const logoutCallback = async (expired: boolean, userId?: string) =>\n      await this.logout(expired, userId);\n\n    const services: Record<string, unknown> = {};\n    const factoryOptions = {\n      logServiceOptions: {\n        isDev: false,\n      },\n      cryptoFunctionServiceOptions: {\n        win: window,\n      },\n      stateMigrationServiceOptions: {\n        stateFactory: new StateFactory(GlobalState, Account),\n      },\n      stateServiceOptions: {\n        stateFactory: new StateFactory(GlobalState, Account),\n      },\n    };\n\n    this.messagingService = isPrivateMode\n      ? new BrowserMessagingPrivateModeBackgroundService()\n      : new BrowserMessagingService();\n    this.logService = logServiceFactory(services, factoryOptions);\n    this.cryptoFunctionService = cryptoFunctionServiceFactory(services, factoryOptions);\n    this.storageService = diskStorageServiceFactory(services, factoryOptions);\n    this.secureStorageService = secureStorageServiceFactory(services, factoryOptions);\n    this.memoryStorageService = memoryStorageServiceFactory(services, {\n      ...factoryOptions,\n      encryptServiceOptions: {\n        logMacFailures: false,\n      },\n    });\n    this.stateMigrationService = stateMigrationServiceFactory(services, factoryOptions);\n    this.stateService = stateServiceFactory(services, {\n      ...factoryOptions,\n      encryptServiceOptions: { logMacFailures: false },\n    });\n    this.platformUtilsService = new BrowserPlatformUtilsService(\n      this.messagingService,\n      this.stateService,\n      (clipboardValue, clearMs) => {\n        if (this.systemService != null) {\n          this.systemService.clearClipboard(clipboardValue, clearMs);\n        }\n      },\n      async () => {\n        if (this.nativeMessagingBackground != null) {\n          const promise = this.nativeMessagingBackground.getResponse();\n\n          try {\n            await this.nativeMessagingBackground.send({ command: \"biometricUnlock\" });\n          } catch (e) {\n            return Promise.reject(e);\n          }\n\n          return promise.then((result) => result.response === \"unlocked\");\n        }\n      }\n    );\n    this.i18nService = new I18nService(BrowserApi.getUILanguage(window));\n    this.encryptService = encryptServiceFactory(services, {\n      ...factoryOptions,\n      encryptServiceOptions: {\n        logMacFailures: true,\n      },\n      alwaysInitializeNewService: true,\n    }); // Update encrypt service with new instances\n    this.cryptoService = new BrowserCryptoService(\n      this.cryptoFunctionService,\n      this.encryptService,\n      this.platformUtilsService,\n      this.logService,\n      this.stateService\n    );\n    this.tokenService = new TokenService(this.stateService);\n    this.appIdService = new AppIdService(this.storageService);\n    this.environmentService = environmentServiceFactory(services, {\n      ...factoryOptions,\n      encryptServiceOptions: {\n        logMacFailures: false,\n      },\n    });\n    this.apiService = new ApiService(\n      this.tokenService,\n      this.platformUtilsService,\n      this.environmentService,\n      this.appIdService,\n      (expired: boolean) => this.logout(expired)\n    );\n    this.settingsService = new SettingsService(this.stateService);\n    this.fileUploadService = new FileUploadService(this.logService, this.apiService);\n    this.cipherService = new CipherService(\n      this.cryptoService,\n      this.settingsService,\n      this.apiService,\n      this.fileUploadService,\n      this.i18nService,\n      () => this.searchService,\n      this.logService,\n      this.stateService\n    );\n    this.folderService = new FolderService(\n      this.cryptoService,\n      this.i18nService,\n      this.cipherService,\n      this.stateService\n    );\n    this.folderApiService = new FolderApiService(this.folderService, this.apiService);\n    this.collectionService = new CollectionService(\n      this.cryptoService,\n      this.i18nService,\n      this.stateService\n    );\n    this.searchService = new SearchService(this.cipherService, this.logService, this.i18nService);\n    this.sendService = new SendService(\n      this.cryptoService,\n      this.apiService,\n      this.fileUploadService,\n      this.i18nService,\n      this.cryptoFunctionService,\n      this.stateService\n    );\n    this.organizationService = new OrganizationService(this.stateService);\n    this.policyService = new PolicyService(this.stateService, this.organizationService);\n    this.policyApiService = new PolicyApiService(\n      this.policyService,\n      this.apiService,\n      this.stateService,\n      this.organizationService\n    );\n    this.keyConnectorService = new KeyConnectorService(\n      this.stateService,\n      this.cryptoService,\n      this.apiService,\n      this.tokenService,\n      this.logService,\n      this.organizationService,\n      this.cryptoFunctionService,\n      logoutCallback\n    );\n    this.vaultFilterService = new VaultFilterService(\n      this.stateService,\n      this.organizationService,\n      this.folderService,\n      this.cipherService,\n      this.collectionService,\n      this.policyService\n    );\n\n    this.twoFactorService = new TwoFactorService(this.i18nService, this.platformUtilsService);\n\n    // eslint-disable-next-line\n    const that = this;\n    const backgroundMessagingService = new (class extends MessagingServiceAbstraction {\n      // AuthService should send the messages to the background not popup.\n      send = (subscriber: string, arg: any = {}) => {\n        const message = Object.assign({}, { command: subscriber }, arg);\n        that.runtimeBackground.processMessage(message, that, null);\n      };\n    })();\n    this.authService = new AuthService(\n      this.cryptoService,\n      this.apiService,\n      this.tokenService,\n      this.appIdService,\n      this.platformUtilsService,\n      backgroundMessagingService,\n      this.logService,\n      this.keyConnectorService,\n      this.environmentService,\n      this.stateService,\n      this.twoFactorService,\n      this.i18nService\n    );\n\n    this.vaultTimeoutService = new VaultTimeoutService(\n      this.cipherService,\n      this.folderService,\n      this.collectionService,\n      this.cryptoService,\n      this.platformUtilsService,\n      this.messagingService,\n      this.searchService,\n      this.tokenService,\n      this.policyService,\n      this.keyConnectorService,\n      this.stateService,\n      this.authService,\n      lockedCallback,\n      logoutCallback\n    );\n    this.providerService = new ProviderService(this.stateService);\n    this.syncService = new SyncService(\n      this.apiService,\n      this.settingsService,\n      this.folderService,\n      this.cipherService,\n      this.cryptoService,\n      this.collectionService,\n      this.messagingService,\n      this.policyService,\n      this.sendService,\n      this.logService,\n      this.keyConnectorService,\n      this.stateService,\n      this.organizationService,\n      this.providerService,\n      this.folderApiService,\n      logoutCallback\n    );\n    this.eventService = new EventService(\n      this.apiService,\n      this.cipherService,\n      this.stateService,\n      this.logService,\n      this.organizationService\n    );\n    this.passwordGenerationService = new PasswordGenerationService(\n      this.cryptoService,\n      this.policyService,\n      this.stateService\n    );\n    this.totpService = new TotpService(this.cryptoFunctionService, this.logService);\n    this.autofillService = new AutofillService(\n      this.cipherService,\n      this.stateService,\n      this.totpService,\n      this.eventService,\n      this.logService\n    );\n    this.containerService = new ContainerService(this.cryptoService);\n    this.auditService = new AuditService(this.cryptoFunctionService, this.apiService);\n    this.exportService = new ExportService(\n      this.folderService,\n      this.cipherService,\n      this.apiService,\n      this.cryptoService,\n      this.cryptoFunctionService\n    );\n    this.notificationsService = new NotificationsService(\n      this.syncService,\n      this.appIdService,\n      this.apiService,\n      this.environmentService,\n      logoutCallback,\n      this.logService,\n      this.stateService,\n      this.authService\n    );\n    this.popupUtilsService = new PopupUtilsService(isPrivateMode);\n\n    this.userVerificationApiService = new UserVerificationApiService(this.apiService);\n\n    this.userVerificationService = new UserVerificationService(\n      this.cryptoService,\n      this.i18nService,\n      this.userVerificationApiService\n    );\n\n    const systemUtilsServiceReloadCallback = () => {\n      const forceWindowReload =\n        this.platformUtilsService.isSafari() ||\n        this.platformUtilsService.isFirefox() ||\n        this.platformUtilsService.isOpera();\n      BrowserApi.reloadExtension(forceWindowReload ? window : null);\n      return Promise.resolve();\n    };\n\n    this.systemService = new SystemService(\n      this.messagingService,\n      this.platformUtilsService,\n      systemUtilsServiceReloadCallback,\n      this.stateService\n    );\n\n    // Other fields\n    this.isSafari = this.platformUtilsService.isSafari();\n    this.sidebarAction = this.isSafari\n      ? null\n      : typeof opr !== \"undefined\" && opr.sidebarAction\n      ? opr.sidebarAction\n      : (window as any).chrome.sidebarAction;\n\n    // Background\n    this.runtimeBackground = new RuntimeBackground(\n      this,\n      this.autofillService,\n      this.platformUtilsService as BrowserPlatformUtilsService,\n      this.i18nService,\n      this.notificationsService,\n      this.systemService,\n      this.environmentService,\n      this.messagingService,\n      this.logService\n    );\n    this.nativeMessagingBackground = new NativeMessagingBackground(\n      this.cryptoService,\n      this.cryptoFunctionService,\n      this.runtimeBackground,\n      this.i18nService,\n      this.messagingService,\n      this.appIdService,\n      this.platformUtilsService,\n      this.stateService,\n      this.logService,\n      this.authService\n    );\n    this.commandsBackground = new CommandsBackground(\n      this,\n      this.passwordGenerationService,\n      this.platformUtilsService,\n      this.vaultTimeoutService,\n      this.authService\n    );\n    this.notificationBackground = new NotificationBackground(\n      this.autofillService,\n      this.cipherService,\n      this.authService,\n      this.policyService,\n      this.folderService,\n      this.stateService\n    );\n\n    this.tabsBackground = new TabsBackground(this, this.notificationBackground);\n    this.contextMenusBackground = new ContextMenusBackground(\n      this,\n      this.cipherService,\n      this.passwordGenerationService,\n      this.platformUtilsService,\n      this.authService,\n      this.eventService,\n      this.totpService\n    );\n    this.idleBackground = new IdleBackground(\n      this.vaultTimeoutService,\n      this.stateService,\n      this.notificationsService\n    );\n    this.webRequestBackground = new WebRequestBackground(\n      this.platformUtilsService,\n      this.cipherService,\n      this.authService\n    );\n\n    this.usernameGenerationService = new UsernameGenerationService(\n      this.cryptoService,\n      this.stateService,\n      this.apiService\n    );\n  }\n\n  async bootstrap() {\n    this.containerService.attachToGlobal(window);\n\n    await this.stateService.init();\n\n    await (this.vaultTimeoutService as VaultTimeoutService).init(true);\n    await (this.i18nService as I18nService).init();\n    await (this.eventService as EventService).init(true);\n    await this.runtimeBackground.init();\n    await this.notificationBackground.init();\n    await this.commandsBackground.init();\n\n    this.twoFactorService.init();\n\n    await this.tabsBackground.init();\n    await this.contextMenusBackground.init();\n    await this.idleBackground.init();\n    await this.webRequestBackground.init();\n\n    if (this.platformUtilsService.isFirefox() && !this.isPrivateMode) {\n      // Set Private Mode windows to the default icon - they do not share state with the background page\n      const privateWindows = await BrowserApi.getPrivateModeWindows();\n      privateWindows.forEach(async (win) => {\n        await this.actionSetIcon(chrome.browserAction, \"\", win.id);\n        await this.actionSetIcon(this.sidebarAction, \"\", win.id);\n      });\n\n      BrowserApi.onWindowCreated(async (win) => {\n        if (win.incognito) {\n          await this.actionSetIcon(chrome.browserAction, \"\", win.id);\n          await this.actionSetIcon(this.sidebarAction, \"\", win.id);\n        }\n      });\n    }\n\n    return new Promise<void>((resolve) => {\n      setTimeout(async () => {\n        await this.environmentService.setUrlsFromStorage();\n        await this.setIcon();\n        this.fullSync(true);\n        setTimeout(() => this.notificationsService.init(), 2500);\n        resolve();\n      }, 500);\n    });\n  }\n\n  async setIcon() {\n    if ((!chrome.browserAction && !this.sidebarAction) || this.isPrivateMode) {\n      return;\n    }\n\n    const authStatus = await this.authService.getAuthStatus();\n\n    let suffix = \"\";\n    if (authStatus === AuthenticationStatus.LoggedOut) {\n      suffix = \"_gray\";\n    } else if (authStatus === AuthenticationStatus.Locked) {\n      suffix = \"_locked\";\n    }\n\n    await this.actionSetIcon(chrome.browserAction, suffix);\n    await this.actionSetIcon(this.sidebarAction, suffix);\n  }\n\n  async refreshBadgeAndMenu(forLocked = false) {\n    if (!chrome.windows || !chrome.contextMenus) {\n      return;\n    }\n\n    const menuDisabled = await this.stateService.getDisableContextMenuItem();\n    if (!menuDisabled) {\n      await this.buildContextMenu();\n    } else {\n      await this.contextMenusRemoveAll();\n    }\n\n    if (forLocked) {\n      await this.loadMenuAndUpdateBadgeForNoAccessState(!menuDisabled);\n      this.onUpdatedRan = this.onReplacedRan = false;\n      return;\n    }\n\n    const tab = await BrowserApi.getTabFromCurrentWindow();\n    if (tab) {\n      await this.contextMenuReady(tab, !menuDisabled);\n    }\n  }\n\n  async logout(expired: boolean, userId?: string) {\n    await this.eventService.uploadEvents(userId);\n\n    await Promise.all([\n      this.eventService.clearEvents(userId),\n      this.syncService.setLastSync(new Date(0), userId),\n      this.cryptoService.clearKeys(userId),\n      this.settingsService.clear(userId),\n      this.cipherService.clear(userId),\n      this.folderService.clear(userId),\n      this.collectionService.clear(userId),\n      this.policyService.clear(userId),\n      this.passwordGenerationService.clear(userId),\n      this.vaultTimeoutService.clear(userId),\n      this.keyConnectorService.clear(),\n      this.vaultFilterService.clear(),\n    ]);\n\n    await this.stateService.clean({ userId: userId });\n\n    if (userId == null || userId === (await this.stateService.getUserId())) {\n      this.searchService.clearIndex();\n      this.messagingService.send(\"doneLoggingOut\", { expired: expired, userId: userId });\n    }\n\n    await this.setIcon();\n    await this.refreshBadgeAndMenu(true);\n    await this.reseedStorage();\n    this.notificationsService.updateConnection(false);\n    await this.systemService.clearPendingClipboard();\n    await this.systemService.startProcessReload(this.authService);\n  }\n\n  async collectPageDetailsForContentScript(tab: any, sender: string, frameId: number = null) {\n    if (tab == null || !tab.id) {\n      return;\n    }\n\n    const options: any = {};\n    if (frameId != null) {\n      options.frameId = frameId;\n    }\n\n    BrowserApi.tabSendMessage(\n      tab,\n      {\n        command: \"collectPageDetails\",\n        tab: tab,\n        sender: sender,\n      },\n      options\n    );\n  }\n\n  async openPopup() {\n    // Chrome APIs cannot open popup\n\n    // TODO: Do we need to open this popup?\n    if (!this.isSafari) {\n      return;\n    }\n    await SafariApp.sendMessageToApp(\"showPopover\", null, true);\n  }\n\n  async reseedStorage() {\n    if (\n      !this.platformUtilsService.isChrome() &&\n      !this.platformUtilsService.isVivaldi() &&\n      !this.platformUtilsService.isOpera()\n    ) {\n      return;\n    }\n\n    const currentVaultTimeout = await this.stateService.getVaultTimeout();\n    if (currentVaultTimeout == null) {\n      return;\n    }\n\n    const getStorage = (): Promise<any> =>\n      new Promise((resolve) => {\n        chrome.storage.local.get(null, (o: any) => resolve(o));\n      });\n\n    const clearStorage = (): Promise<void> =>\n      new Promise((resolve) => {\n        chrome.storage.local.clear(() => resolve());\n      });\n\n    const storage = await getStorage();\n    await clearStorage();\n\n    for (const key in storage) {\n      // eslint-disable-next-line\n      if (!storage.hasOwnProperty(key)) {\n        continue;\n      }\n      await this.storageService.save(key, storage[key]);\n    }\n  }\n\n  private async buildContextMenu() {\n    if (!chrome.contextMenus || this.buildingContextMenu) {\n      return;\n    }\n\n    this.buildingContextMenu = true;\n    await this.contextMenusRemoveAll();\n\n    await this.contextMenusCreate({\n      type: \"normal\",\n      id: \"root\",\n      contexts: [\"all\"],\n      title: \"Bitwarden\",\n    });\n\n    await this.contextMenusCreate({\n      type: \"normal\",\n      id: \"autofill\",\n      parentId: \"root\",\n      contexts: [\"all\"],\n      title: this.i18nService.t(\"autoFill\"),\n    });\n\n    await this.contextMenusCreate({\n      type: \"normal\",\n      id: \"copy-username\",\n      parentId: \"root\",\n      contexts: [\"all\"],\n      title: this.i18nService.t(\"copyUsername\"),\n    });\n\n    await this.contextMenusCreate({\n      type: \"normal\",\n      id: \"copy-password\",\n      parentId: \"root\",\n      contexts: [\"all\"],\n      title: this.i18nService.t(\"copyPassword\"),\n    });\n\n    if (await this.stateService.getCanAccessPremium()) {\n      await this.contextMenusCreate({\n        type: \"normal\",\n        id: \"copy-totp\",\n        parentId: \"root\",\n        contexts: [\"all\"],\n        title: this.i18nService.t(\"copyVerificationCode\"),\n      });\n    }\n\n    await this.contextMenusCreate({\n      type: \"separator\",\n      parentId: \"root\",\n    });\n\n    await this.contextMenusCreate({\n      type: \"normal\",\n      id: \"generate-password\",\n      parentId: \"root\",\n      contexts: [\"all\"],\n      title: this.i18nService.t(\"generatePasswordCopied\"),\n    });\n\n    await this.contextMenusCreate({\n      type: \"normal\",\n      id: \"copy-identifier\",\n      parentId: \"root\",\n      contexts: [\"all\"],\n      title: this.i18nService.t(\"copyElementIdentifier\"),\n    });\n\n    this.buildingContextMenu = false;\n  }\n\n  private async contextMenuReady(tab: any, contextMenuEnabled: boolean) {\n    await this.loadMenuAndUpdateBadge(tab.url, tab.id, contextMenuEnabled);\n    this.onUpdatedRan = this.onReplacedRan = false;\n  }\n\n  private async loadMenuAndUpdateBadge(url: string, tabId: number, contextMenuEnabled: boolean) {\n    if (!url || (!chrome.browserAction && !this.sidebarAction)) {\n      return;\n    }\n\n    this.actionSetBadgeBackgroundColor(chrome.browserAction);\n    this.actionSetBadgeBackgroundColor(this.sidebarAction);\n\n    this.menuOptionsLoaded = [];\n    const authStatus = await this.authService.getAuthStatus();\n    if (authStatus === AuthenticationStatus.Unlocked) {\n      try {\n        const ciphers = await this.cipherService.getAllDecryptedForUrl(url);\n        ciphers.sort((a, b) => this.cipherService.sortCiphersByLastUsedThenName(a, b));\n\n        if (contextMenuEnabled) {\n          ciphers.forEach((cipher) => {\n            this.loadLoginContextMenuOptions(cipher);\n          });\n        }\n\n        const disableBadgeCounter = await this.stateService.getDisableBadgeCounter();\n        let theText = \"\";\n\n        if (!disableBadgeCounter) {\n          if (ciphers.length > 0 && ciphers.length <= 9) {\n            theText = ciphers.length.toString();\n          } else if (ciphers.length > 0) {\n            theText = \"9+\";\n          }\n        }\n\n        if (contextMenuEnabled && ciphers.length === 0) {\n          await this.loadNoLoginsContextMenuOptions(this.i18nService.t(\"noMatchingLogins\"));\n        }\n\n        this.sidebarActionSetBadgeText(theText, tabId);\n        this.browserActionSetBadgeText(theText, tabId);\n\n        return;\n      } catch (e) {\n        this.logService.error(e);\n      }\n    }\n\n    await this.loadMenuAndUpdateBadgeForNoAccessState(contextMenuEnabled);\n  }\n\n  private async loadMenuAndUpdateBadgeForNoAccessState(contextMenuEnabled: boolean) {\n    if (contextMenuEnabled) {\n      const authed = await this.stateService.getIsAuthenticated();\n      await this.loadNoLoginsContextMenuOptions(\n        this.i18nService.t(authed ? \"unlockVaultMenu\" : \"loginToVaultMenu\")\n      );\n    }\n\n    const tabs = await BrowserApi.getActiveTabs();\n    if (tabs != null) {\n      tabs.forEach((tab) => {\n        if (tab.id != null) {\n          this.browserActionSetBadgeText(\"\", tab.id);\n          this.sidebarActionSetBadgeText(\"\", tab.id);\n        }\n      });\n    }\n  }\n\n  private async loadLoginContextMenuOptions(cipher: any) {\n    if (\n      cipher == null ||\n      cipher.type !== CipherType.Login ||\n      cipher.reprompt !== CipherRepromptType.None\n    ) {\n      return;\n    }\n\n    let title = cipher.name;\n    if (cipher.login.username && cipher.login.username !== \"\") {\n      title += \" (\" + cipher.login.username + \")\";\n    }\n    await this.loadContextMenuOptions(title, cipher.id, cipher);\n  }\n\n  private async loadNoLoginsContextMenuOptions(noLoginsMessage: string) {\n    await this.loadContextMenuOptions(noLoginsMessage, \"noop\", null);\n  }\n\n  private async loadContextMenuOptions(title: string, idSuffix: string, cipher: any) {\n    if (\n      !chrome.contextMenus ||\n      this.menuOptionsLoaded.indexOf(idSuffix) > -1 ||\n      (cipher != null && cipher.type !== CipherType.Login)\n    ) {\n      return;\n    }\n\n    this.menuOptionsLoaded.push(idSuffix);\n\n    if (cipher == null || (cipher.login.password && cipher.login.password !== \"\")) {\n      await this.contextMenusCreate({\n        type: \"normal\",\n        id: \"autofill_\" + idSuffix,\n        parentId: \"autofill\",\n        contexts: [\"all\"],\n        title: this.sanitizeContextMenuTitle(title),\n      });\n    }\n\n    if (cipher == null || (cipher.login.username && cipher.login.username !== \"\")) {\n      await this.contextMenusCreate({\n        type: \"normal\",\n        id: \"copy-username_\" + idSuffix,\n        parentId: \"copy-username\",\n        contexts: [\"all\"],\n        title: this.sanitizeContextMenuTitle(title),\n      });\n    }\n\n    if (\n      cipher == null ||\n      (cipher.login.password && cipher.login.password !== \"\" && cipher.viewPassword)\n    ) {\n      await this.contextMenusCreate({\n        type: \"normal\",\n        id: \"copy-password_\" + idSuffix,\n        parentId: \"copy-password\",\n        contexts: [\"all\"],\n        title: this.sanitizeContextMenuTitle(title),\n      });\n    }\n\n    const canAccessPremium = await this.stateService.getCanAccessPremium();\n    if (canAccessPremium && (cipher == null || (cipher.login.totp && cipher.login.totp !== \"\"))) {\n      await this.contextMenusCreate({\n        type: \"normal\",\n        id: \"copy-totp_\" + idSuffix,\n        parentId: \"copy-totp\",\n        contexts: [\"all\"],\n        title: this.sanitizeContextMenuTitle(title),\n      });\n    }\n  }\n\n  private sanitizeContextMenuTitle(title: string): string {\n    return title.replace(/&/g, \"&&\");\n  }\n\n  private async fullSync(override = false) {\n    const syncInternal = 6 * 60 * 60 * 1000; // 6 hours\n    const lastSync = await this.syncService.getLastSync();\n\n    let lastSyncAgo = syncInternal + 1;\n    if (lastSync != null) {\n      lastSyncAgo = new Date().getTime() - lastSync.getTime();\n    }\n\n    if (override || lastSyncAgo >= syncInternal) {\n      await this.syncService.fullSync(override);\n      this.scheduleNextSync();\n    } else {\n      this.scheduleNextSync();\n    }\n  }\n\n  private scheduleNextSync() {\n    if (this.syncTimeout) {\n      clearTimeout(this.syncTimeout);\n    }\n\n    this.syncTimeout = setTimeout(async () => await this.fullSync(), 5 * 60 * 1000); // check every 5 minutes\n  }\n\n  // Browser API Helpers\n\n  private contextMenusRemoveAll() {\n    return new Promise<void>((resolve) => {\n      chrome.contextMenus.removeAll(() => {\n        resolve();\n        if (chrome.runtime.lastError) {\n          return;\n        }\n      });\n    });\n  }\n\n  private contextMenusCreate(options: any) {\n    return new Promise<void>((resolve) => {\n      chrome.contextMenus.create(options, () => {\n        resolve();\n        if (chrome.runtime.lastError) {\n          return;\n        }\n      });\n    });\n  }\n\n  private async actionSetIcon(theAction: any, suffix: string, windowId?: number): Promise<any> {\n    if (!theAction || !theAction.setIcon) {\n      return;\n    }\n\n    const options: IconDetails = {\n      path: {\n        19: \"images/icon19\" + suffix + \".png\",\n        38: \"images/icon38\" + suffix + \".png\",\n      },\n    };\n\n    if (this.platformUtilsService.isFirefox()) {\n      options.windowId = windowId;\n      await theAction.setIcon(options);\n    } else if (this.platformUtilsService.isSafari()) {\n      // Workaround since Safari 14.0.3 returns a pending promise\n      // which doesn't resolve within a reasonable time.\n      theAction.setIcon(options);\n    } else {\n      return new Promise<void>((resolve) => {\n        theAction.setIcon(options, () => resolve());\n      });\n    }\n  }\n\n  private actionSetBadgeBackgroundColor(action: any) {\n    if (action && action.setBadgeBackgroundColor) {\n      action.setBadgeBackgroundColor({ color: \"#294e5f\" });\n    }\n  }\n\n  private browserActionSetBadgeText(text: string, tabId: number) {\n    if (chrome.browserAction && chrome.browserAction.setBadgeText) {\n      chrome.browserAction.setBadgeText({\n        text: text,\n        tabId: tabId,\n      });\n    }\n  }\n\n  private sidebarActionSetBadgeText(text: string, tabId: number) {\n    if (!this.sidebarAction) {\n      return;\n    }\n\n    if (this.sidebarAction.setBadgeText) {\n      this.sidebarAction.setBadgeText({\n        text: text,\n        tabId: tabId,\n      });\n    } else if (this.sidebarAction.setTitle) {\n      let title = \"Bitwarden\";\n      if (text && text !== \"\") {\n        title += \" [\" + text + \"]\";\n      }\n\n      this.sidebarAction.setTitle({\n        title: title,\n        tabId: tabId,\n      });\n    }\n  }\n}\n","export abstract class MessagingService {\n  send: (subscriber: string, arg?: any) => void;\n}\n","import { EventService } from \"@bitwarden/common/abstractions/event.service\";\nimport { EventType } from \"@bitwarden/common/enums/eventType\";\n\n/**\n * If you want to use this, don't.\n * If you think you should use that after the warning, don't.\n */\nexport default class NoOpEventService implements EventService {\n  constructor() {\n    if (chrome.runtime.getManifest().manifest_version !== 3) {\n      throw new Error(\"You are not allowed to use this when not in manifest_version 3\");\n    }\n  }\n\n  collect(eventType: EventType, cipherId?: string, uploadImmediately?: boolean) {\n    return Promise.resolve();\n  }\n  uploadEvents(userId?: string) {\n    return Promise.resolve();\n  }\n  clearEvents(userId?: string) {\n    return Promise.resolve();\n  }\n}\n","import AutofillPageDetails from \"../models/autofillPageDetails\";\nimport { AutofillService } from \"../services/abstractions/autofill.service\";\n\nexport class AutoFillActiveTabCommand {\n  constructor(private autofillService: AutofillService) {}\n\n  async doAutoFillActiveTabCommand(tab: chrome.tabs.Tab) {\n    if (!tab.id) {\n      throw new Error(\"Tab does not have an id, cannot complete autofill.\");\n    }\n\n    const details = await this.collectPageDetails(tab.id);\n    await this.autofillService.doAutoFillOnTab(\n      [\n        {\n          frameId: 0,\n          tab: tab,\n          details: details,\n        },\n      ],\n      tab,\n      true\n    );\n  }\n\n  private async collectPageDetails(tabId: number): Promise<AutofillPageDetails> {\n    return new Promise((resolve, reject) => {\n      chrome.tabs.sendMessage(\n        tabId,\n        {\n          command: \"collectPageDetailsImmediately\",\n        },\n        (response: AutofillPageDetails) => {\n          if (chrome.runtime.lastError) {\n            reject(chrome.runtime.lastError);\n            return;\n          }\n\n          resolve(response);\n        }\n      );\n    });\n  }\n}\n","import { AuthenticationStatus } from \"@bitwarden/common/enums/authenticationStatus\";\nimport { StateFactory } from \"@bitwarden/common/factories/stateFactory\";\nimport { GlobalState } from \"@bitwarden/common/models/domain/globalState\";\nimport { AuthService } from \"@bitwarden/common/services/auth.service\";\nimport { CipherService } from \"@bitwarden/common/services/cipher.service\";\nimport { ConsoleLogService } from \"@bitwarden/common/services/consoleLog.service\";\nimport { EncryptService } from \"@bitwarden/common/services/encrypt.service\";\nimport NoOpEventService from \"@bitwarden/common/services/noOpEvent.service\";\nimport { SearchService } from \"@bitwarden/common/services/search.service\";\nimport { SettingsService } from \"@bitwarden/common/services/settings.service\";\nimport { StateMigrationService } from \"@bitwarden/common/services/stateMigration.service\";\nimport { WebCryptoFunctionService } from \"@bitwarden/common/services/webCryptoFunction.service\";\n\nimport { AutoFillActiveTabCommand } from \"../commands/autoFillActiveTabCommand\";\nimport { Account } from \"../models/account\";\nimport { StateService as AbstractStateService } from \"../services/abstractions/state.service\";\nimport AutofillService from \"../services/autofill.service\";\nimport { BrowserCryptoService } from \"../services/browserCrypto.service\";\nimport BrowserLocalStorageService from \"../services/browserLocalStorage.service\";\nimport BrowserPlatformUtilsService from \"../services/browserPlatformUtils.service\";\nimport I18nService from \"../services/i18n.service\";\nimport { KeyGenerationService } from \"../services/keyGeneration.service\";\nimport { LocalBackedSessionStorageService } from \"../services/localBackedSessionStorage.service\";\nimport { StateService } from \"../services/state.service\";\n\nexport const onCommandListener = async (command: string, tab: chrome.tabs.Tab) => {\n  switch (command) {\n    case \"autofill_login\":\n      await doAutoFillLogin(tab);\n      break;\n  }\n};\n\nconst doAutoFillLogin = async (tab: chrome.tabs.Tab): Promise<void> => {\n  const logService = new ConsoleLogService(false);\n\n  const cryptoFunctionService = new WebCryptoFunctionService(self);\n\n  const storageService = new BrowserLocalStorageService();\n\n  const secureStorageService = new BrowserLocalStorageService();\n\n  const memoryStorageService = new LocalBackedSessionStorageService(\n    new EncryptService(cryptoFunctionService, logService, false),\n    new KeyGenerationService(cryptoFunctionService)\n  );\n\n  const stateFactory = new StateFactory(GlobalState, Account);\n\n  const stateMigrationService = new StateMigrationService(\n    storageService,\n    secureStorageService,\n    stateFactory\n  );\n\n  const stateService: AbstractStateService = new StateService(\n    storageService,\n    secureStorageService,\n    memoryStorageService, // AbstractStorageService\n    logService,\n    stateMigrationService,\n    stateFactory\n  );\n\n  await stateService.init();\n\n  const platformUtils = new BrowserPlatformUtilsService(\n    null, // MessagingService\n    stateService,\n    null, // clipboardWriteCallback\n    null // biometricCallback\n  );\n\n  const cryptoService = new BrowserCryptoService(\n    cryptoFunctionService,\n    null, // AbstractEncryptService\n    platformUtils,\n    logService,\n    stateService\n  );\n\n  const settingsService = new SettingsService(stateService);\n\n  const i18nService = new I18nService(chrome.i18n.getUILanguage());\n\n  await i18nService.init();\n\n  // Don't love this pt.1\n  let searchService: SearchService = null;\n\n  const cipherService = new CipherService(\n    cryptoService,\n    settingsService,\n    null, // ApiService\n    null, // FileUploadService,\n    i18nService,\n    () => searchService, // Don't love this pt.2\n    logService,\n    stateService\n  );\n\n  // Don't love this pt.3\n  searchService = new SearchService(cipherService, logService, i18nService);\n\n  // TODO: Remove this before we encourage anyone to start using this\n  const eventService = new NoOpEventService();\n\n  const autofillService = new AutofillService(\n    cipherService,\n    stateService,\n    null, // TotpService\n    eventService,\n    logService\n  );\n\n  const authService = new AuthService(\n    cryptoService, // CryptoService\n    null, // ApiService\n    null, // TokenService\n    null, // AppIdService\n    platformUtils,\n    null, // MessagingService\n    logService,\n    null, // KeyConnectorService\n    null, // EnvironmentService\n    stateService,\n    null, // TwoFactorService\n    i18nService\n  );\n\n  const authStatus = await authService.getAuthStatus();\n  if (authStatus < AuthenticationStatus.Unlocked) {\n    // TODO: Add back in unlock on autofill\n    logService.info(\"Currently not unlocked, MV3 does not support unlock on autofill currently.\");\n    return;\n  }\n\n  const command = new AutoFillActiveTabCommand(autofillService);\n  await command.doAutoFillActiveTabCommand(tab);\n};\n","import MainBackground from \"./background/main.background\";\nimport { onCommandListener } from \"./listeners/onCommandListener\";\nimport { onInstallListener } from \"./listeners/onInstallListener\";\n\nconst manifest = chrome.runtime.getManifest();\n\nif (manifest.manifest_version === 3) {\n  chrome.commands.onCommand.addListener(onCommandListener);\n  chrome.runtime.onInstalled.addListener(onInstallListener);\n} else {\n  const bitwardenMain = ((window as any).bitwardenMain = new MainBackground());\n  bitwardenMain.bootstrap().then(() => {\n    // Finished bootstrapping\n  });\n}\n","import { StateFactory } from \"@bitwarden/common/factories/stateFactory\";\nimport { GlobalState } from \"@bitwarden/common/models/domain/globalState\";\n\nimport { environmentServiceFactory } from \"../background/service_factories/environment-service.factory\";\nimport { BrowserApi } from \"../browser/browserApi\";\nimport { Account } from \"../models/account\";\n\nexport function onInstallListener(details: chrome.runtime.InstalledDetails) {\n  const cache = {};\n  const opts = {\n    encryptServiceOptions: {\n      logMacFailures: false,\n    },\n    cryptoFunctionServiceOptions: {\n      win: self,\n    },\n    logServiceOptions: {\n      isDev: false,\n    },\n    stateServiceOptions: {\n      stateFactory: new StateFactory(GlobalState, Account),\n    },\n    stateMigrationServiceOptions: {\n      stateFactory: new StateFactory(GlobalState, Account),\n    },\n  };\n  const environmentService = environmentServiceFactory(cache, opts);\n\n  setTimeout(async () => {\n    if (details.reason != null && details.reason === \"install\") {\n      BrowserApi.createNewTab(\"https://bitwarden.com/browser-start/\");\n\n      if (await environmentService.hasManagedEnvironment()) {\n        await environmentService.setUrlsToManagedEnvironment();\n      }\n    }\n  }, 100);\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t352: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunk_bitwarden_browser\"] = self[\"webpackChunk_bitwarden_browser\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [736], () => (__webpack_require__(2807)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","AuthenticationStatus","CipherRepromptType","CipherType","StateVersion","ThemeType","DeviceType","AccountFactory","constructor","accountConstructor","this","create","args","GlobalStateFactory","globalStateConstructor","StateFactory","globalStateFactory","accountFactory","createGlobal","createAccount","EnvironmentUrls","base","api","identity","icons","notifications","events","webVault","keyConnector","WindowState","GlobalState","theme","System","window","stateVersion","One","environmentUrls","nodeURL","Utils","static","inited","isNode","process","release","name","isBrowser","isMobileBrowser","isMobile","isAppleMobileBrowser","isAppleMobile","global","g","self","str","Uint8Array","Buffer","from","binaryString","atob","bytes","length","i","charCodeAt","fromB64ToArray","fromUrlB64ToB64","parseInt","substr","strUtf8","unescape","encodeURIComponent","arr","buffer","toString","binary","byteLength","String","fromCharCode","btoa","fromB64toUrlB64","fromBufferToB64","b64Str","replace","encodedString","apply","decodeURIComponent","escape","Array","prototype","map","call","x","slice","join","urlB64Str","output","Error","fromB64ToUtf8","utfStr","fromBufferToUrlB64","fromUtf8ToArray","c","r","Math","random","id","RegExp","test","uriString","url","getUrl","hostname","host","trim","startsWith","httpUrl","indexOf","tldEndingRegex","getUrlObject","tldjs","isValid","validIpAddress","urlDomain","getDomain","e","domain","search","Map","split","forEach","pair","parts","set","toLowerCase","i18nService","prop","a","b","collator","compare","localeCompare","target","source","Object","assign","obj","keys","filter","k","Number","isNaN","s","charAt","toUpperCase","ipString","win","mobile","navigator","userAgent","vendor","opera","match","URL","hasProtocol","anchor","document","createElement","href","regexpEmojiPresentation","init","DeviceRequest","appId","platformUtilsService","type","getDevice","getDeviceString","identifier","pushToken","TokenRequest","twoFactor","device","alterIdentityTokenHeaders","headers","setTwoFactor","toIdentityToken","clientId","scope","client_id","deviceType","deviceIdentifier","deviceName","token","provider","twoFactorToken","twoFactorProvider","twoFactorRemember","remember","ApiTokenRequest","clientSecret","super","grant_type","client_secret","TokenRequestTwoFactor","BaseResponse","response","getResponseProperty","propertyName","exactName","undefined","otherCasePropertyName","ApiKeyResponse","apiKey","revisionDate","Date","AttachmentResponse","fileName","key","size","sizeName","CardApi","data","cardholderName","brand","number","expMonth","expYear","code","FieldApi","value","linkedId","IdentityApi","title","firstName","middleName","lastName","address1","address2","address3","city","state","postalCode","country","company","email","phone","ssn","username","passportNumber","licenseNumber","LoginUriApi","uri","LoginApi","password","passwordRevisionDate","totp","autofillOnPageLoad","uris","u","SecureNoteApi","PasswordHistoryResponse","lastUsedDate","CipherResponse","organizationId","folderId","notes","favorite","edit","viewPassword","organizationUseTotp","collectionIds","deletedDate","login","card","secureNote","fields","f","attachments","passwordHistory","h","reprompt","None","AttachmentUploadDataResponse","attachmentId","fileUploadType","cipherResponse","cipherMiniResponse","BillingResponse","invoices","transactions","balance","paymentSource","BillingSourceResponse","t","BillingTransactionResponse","BillingInvoiceResponse","cardBrand","description","needsVerification","pdfUrl","paid","date","amount","createdDate","refunded","partiallyRefunded","refundedAmount","paymentMethodType","details","BillingHistoryResponse","hasNoHistory","BillingPaymentResponse","BreachAccountResponse","addedDate","breachDate","dataClasses","isActive","isVerified","logoPath","modifiedDate","pwnCount","SelectionReadOnlyResponse","readOnly","hidePasswords","CollectionResponse","externalId","CollectionDetailsResponse","CollectionGroupDetailsResponse","groups","DeviceVerificationResponse","isDeviceVerificationSectionEnabled","unknownDeviceVerificationEnabled","GlobalDomainResponse","domains","excluded","DomainsResponse","globalEquivalentDomains","equivalentDomains","d","EmergencyAccessGranteeDetailsResponse","granteeId","status","waitTimeDays","creationDate","EmergencyAccessGrantorDetailsResponse","grantorId","EmergencyAccessTakeoverResponse","keyEncrypted","kdf","kdfIterations","EmergencyAccessViewResponse","ciphers","ErrorResponse","identityResponse","errorModel","responseErrorModel","message","validationErrors","captchaSiteKey","HCaptcha_SiteKey","captchaRequired","isNullOrWhitespace","statusCode","getSingleMessage","hasOwnProperty","getAllMessages","messages","item","prefix","lastSep","lastIndexOf","push","EventResponse","userId","providerId","cipherId","collectionId","groupId","policyId","organizationUserId","providerUserId","providerOrganizationId","actingUserId","ipAddress","installationId","GroupResponse","accessAll","GroupDetailsResponse","collections","IdentityCaptchaResponse","siteKey","IdentityTokenResponse","accessToken","access_token","expiresIn","expires_in","refreshToken","refresh_token","tokenType","token_type","resetMasterPassword","privateKey","forcePasswordReset","apiUseKeyConnector","keyConnectorUrl","IdentityTwoFactorResponse","twoFactorProviders2","captchaToken","twoFactorProviders","KeyConnectorUserKeyResponse","ListResponse","dr","continuationToken","SsoType","OpenIdConnectRedirectBehavior","Saml2BindingType","Saml2NameIdFormat","Saml2SigningBehavior","SsoConfigApi","configType","keyConnectorEnabled","authority","metadataAddress","redirectBehavior","getClaimsFromUserInfoEndpoint","additionalScopes","additionalUserIdClaimTypes","additionalEmailClaimTypes","additionalNameClaimTypes","acrValues","expectedReturnAcrValue","spNameIdFormat","spOutboundSigningAlgorithm","spSigningBehavior","spMinIncomingSigningAlgorithm","spWantAssertionsSigned","spValidateCertificates","idpEntityId","idpBindingType","idpSingleSignOnServiceUrl","idpSingleLogoutServiceUrl","idpX509PublicCert","idpOutboundSigningAlgorithm","idpAllowUnsolicitedAuthnResponse","idpDisableOutboundLogoutRequests","idpWantAuthnRequestsSigned","view","OpenIdConnect","openId","Saml2","saml","idpAllowOutboundLogoutRequests","OrganizationSsoResponse","enabled","urls","SsoUrls","callbackPath","signedOutCallbackPath","spEntityId","spMetadataUrl","spAcsUrl","OrganizationApiKeyInformationResponse","keyType","OrganizationAutoEnrollStatusResponse","resetPasswordEnabled","OrganizationConnectionResponse","rawConfig","config","OrganizationExportResponse","KeysResponse","publicKey","OrganizationKeysResponse","PlanResponse","product","isAnnual","nameLocalizationKey","descriptionLocalizationKey","canBeUsedByBusiness","baseSeats","baseStorageGb","maxCollections","maxUsers","hasAdditionalSeatsOption","maxAdditionalSeats","hasAdditionalStorageOption","maxAdditionalStorage","hasPremiumAccessOption","trialPeriodDays","hasSelfHost","hasPolicies","hasGroups","hasDirectory","hasEvents","hasTotp","has2fa","hasApi","hasSso","hasResetPassword","usersGetPremium","upgradeSortOrder","displaySortOrder","legacyYear","disabled","stripePlanId","stripeSeatPlanId","stripeStoragePlanId","stripePremiumAccessPlanId","basePrice","seatPrice","additionalStoragePricePerGb","premiumAccessOptionPrice","OrganizationResponse","businessName","businessAddress1","businessAddress2","businessAddress3","businessCountry","businessTaxNumber","billingEmail","plan","planType","seats","maxAutoscaleSeats","maxStorageGb","useGroups","useDirectory","useEvents","useTotp","use2fa","useApi","useResetPassword","hasPublicAndPrivateKeys","OrganizationSponsorshipSyncStatusResponse","lastSyncDate","SubscriptionResponse","storageName","storageGb","license","expiration","usingInAppPurchase","subscription","upcomingInvoice","BillingSubscriptionResponse","BillingSubscriptionUpcomingInvoiceResponse","items","trialEndDate","periodStartDate","periodEndDate","cancelledDate","cancelAtEndDate","cancelled","BillingSubscriptionItemResponse","quantity","interval","sponsoredSubscriptionItem","OrganizationSubscriptionResponse","OrganizationUserBulkPublicKeyResponse","OrganizationUserBulkResponse","error","PermissionsApi","accessEventLogs","accessImportExport","accessReports","manageAllCollections","manageAssignedCollections","createNewCollections","editAnyCollection","deleteAnyCollection","editAssignedCollections","deleteAssignedCollections","manageCiphers","manageGroups","manageSso","managePolicies","manageUsers","manageResetPassword","manageScim","OrganizationUserResponse","permissions","resetPasswordEnrolled","OrganizationUserUserDetailsResponse","twoFactorEnabled","usesKeyConnector","OrganizationUserDetailsResponse","OrganizationUserResetPasswordDetailsReponse","resetPasswordKey","encryptedPrivateKey","ProfileOrganizationResponse","usePolicies","useSso","useKeyConnector","useScim","selfHost","ssoBound","providerName","familySponsorshipFriendlyName","familySponsorshipAvailable","planProductType","familySponsorshipLastSyncDateString","familySponsorshipLastSyncDate","familySponsorshipValidUntilString","familySponsorshipValidUntil","familySponsorshipToDelete","ProfileProviderOrganizationResponse","ProfileProviderResponse","ProfileResponse","organizations","providers","providerOrganizations","emailVerified","masterPasswordHint","premiumPersonally","premiumFromOrganization","culture","securityStamp","o","PaymentResponse","userProfile","paymentIntentClientSecret","success","PolicyResponse","PreloginResponse","ProviderOrganizationResponse","settings","userCount","ProviderOrganizationOrganizationDetailsResponse","organizationName","ProviderResponse","ProviderUserBulkPublicKeyResponse","ProviderUserBulkResponse","ProviderUserResponse","ProviderUserUserDetailsResponse","SendFileApi","SendTextApi","text","hidden","SendAccessResponse","file","expirationDate","creatorIdentifier","SendFileDownloadDataResponse","SendResponse","accessId","maxAccessCount","accessCount","deletionDate","disable","hideEmail","SendFileUploadDataResponse","sendResponse","SsoPreValidateResponse","FolderResponse","SyncResponse","folders","policies","sends","profile","p","TaxInfoResponse","taxId","taxIdType","line1","line2","TaxRateResponse","rate","TwoFactorAuthenticatorResponse","TwoFactorDuoResponse","secretKey","integrationKey","TwoFactorEmailResponse","TwoFactorProviderResponse","TwoFactorRecoverResponse","TwoFactorWebAuthnResponse","KeyResponse","migrated","ChallengeResponse","attestation","authenticatorSelection","challenge","fromUrlB64ToArray","excludeCredentials","extensions","pubKeyCredParams","rp","timeout","user","TwoFactorYubiKeyResponse","key1","key2","key3","key4","key5","nfc","UserKeyResponse","HtmlStorageLocation","ApiService","tokenService","environmentService","appIdService","logoutCallback","customUserAgent","isWebClient","isDesktopClient","IEBrowser","ChromeBrowser","EdgeBrowser","FirefoxBrowser","OperaBrowser","SafariBrowser","UnknownBrowser","VivaldiBrowser","WindowsDesktop","MacOsDesktop","LinuxDesktop","postIdentityToken","request","Headers","Accept","identityToken","getClientType","fetch","Request","getIdentityUrl","body","qsStringify","credentials","getCredentials","cache","method","responseJson","isJsonResponse","json","TwoFactorProviders2","clearTwoFactorToken","Promise","reject","refreshIdentityToken","doAuthRefresh","getProfile","send","getUserSubscription","getTaxInfo","putProfile","putTaxInfo","postPrelogin","isDev","getApiUrl","postEmailToken","postEmail","postPassword","setPassword","postSetKeyConnectorKey","postSecurityStamp","getAccountRevisionDate","postPasswordHint","postRegister","postPremium","postIapCheck","postReinstatePremium","postCancelPremium","postAccountStorage","postAccountPayment","postAccountLicense","postAccountKeys","postAccountKey","postAccountVerifyEmail","postAccountVerifyEmailToken","postAccountVerifyPassword","postAccountRecoverDelete","postAccountRecoverDeleteToken","postAccountKdf","deleteSsoUser","getSsoUserIdentifier","postUserApiKey","postUserRotateApiKey","putUpdateTempPassword","postConvertToKeyConnector","getUserBillingHistory","getUserBillingPayment","getSend","postSendAccess","apiUrl","getSendFileDownloadData","getSends","postSend","postFileTypeSend","renewSendFileUploadUrl","sendId","fileId","postSendFile","postSendFileLegacy","putSend","putSendRemovePassword","deleteSend","getCipher","getFullCipherDetails","getCipherAdmin","getCiphersOrganization","postCipher","postCipherCreate","postCipherAdmin","putCipher","putCipherAdmin","deleteCipher","deleteCipherAdmin","deleteManyCiphers","deleteManyCiphersAdmin","putMoveCiphers","putShareCipher","putShareCiphers","putCipherCollections","putCipherCollectionsAdmin","postPurgeCiphers","path","postImportCiphers","postImportOrganizationCiphers","putDeleteCipher","putDeleteCipherAdmin","putDeleteManyCiphers","putDeleteManyCiphersAdmin","putRestoreCipher","putRestoreCipherAdmin","putRestoreManyCiphers","getAttachmentData","emergencyAccessId","postCipherAttachment","postCipherAttachmentLegacy","postCipherAttachmentAdminLegacy","deleteCipherAttachment","deleteCipherAttachmentAdmin","postShareCipherAttachment","renewAttachmentUploadUrl","postAttachmentFile","getCollectionDetails","getUserCollections","getCollections","getCollectionUsers","postCollection","putCollection","putCollectionUsers","deleteCollection","deleteCollectionUser","getGroupDetails","getGroups","getGroupUsers","postGroup","putGroup","putGroupUsers","deleteGroup","deleteGroupUser","getOrganizationUser","getOrganizationUserGroups","getOrganizationUsers","getOrganizationUserResetPasswordDetails","getOrganizationAutoEnrollStatus","postOrganizationUserInvite","postOrganizationUserReinvite","postManyOrganizationUserReinvite","postOrganizationUserAccept","postOrganizationUserConfirm","postOrganizationUsersPublicKey","postOrganizationUserBulkConfirm","putOrganizationUser","putOrganizationUserGroups","putOrganizationUserResetPasswordEnrollment","putOrganizationUserResetPassword","deleteOrganizationUser","deleteManyOrganizationUsers","revokeOrganizationUser","revokeManyOrganizationUsers","restoreOrganizationUser","restoreManyOrganizationUsers","getPlans","postImportDirectory","postPublicImportDirectory","getTaxRates","getSettingsDomains","putSettingsDomains","getSync","getTwoFactorProviders","getTwoFactorOrganizationProviders","getTwoFactorAuthenticator","getTwoFactorEmail","getTwoFactorDuo","getTwoFactorOrganizationDuo","getTwoFactorYubiKey","getTwoFactorWebAuthn","getTwoFactorWebAuthnChallenge","getTwoFactorRecover","putTwoFactorAuthenticator","putTwoFactorEmail","putTwoFactorDuo","putTwoFactorOrganizationDuo","putTwoFactorYubiKey","putTwoFactorWebAuthn","deviceResponse","rawId","getClientExtensionResults","AttestationObject","attestationObject","clientDataJson","clientDataJSON","deleteTwoFactorWebAuthn","putTwoFactorDisable","putTwoFactorOrganizationDisable","postTwoFactorRecover","postTwoFactorEmailSetup","postTwoFactorEmail","getDeviceVerificationSettings","putDeviceVerificationSettings","getEmergencyAccessTrusted","getEmergencyAccessGranted","getEmergencyAccess","getEmergencyGrantorPolicies","putEmergencyAccess","deleteEmergencyAccess","postEmergencyAccessInvite","postEmergencyAccessReinvite","postEmergencyAccessAccept","postEmergencyAccessConfirm","postEmergencyAccessInitiate","postEmergencyAccessApprove","postEmergencyAccessReject","postEmergencyAccessTakeover","postEmergencyAccessPassword","postEmergencyAccessView","getOrganization","getOrganizationBilling","getOrganizationSubscription","getCloudCommunicationsEnabled","getOrganizationConnection","createOrganizationConnection","updateOrganizationConnection","organizationConnectionId","deleteOrganizationConnection","getOrganizationLicense","getOrganizationTaxInfo","getOrganizationSso","postOrganization","putOrganization","putOrganizationTaxInfo","postLeaveOrganization","postOrganizationLicense","postOrganizationLicenseUpdate","postOrganizationApiKey","getOrganizationApiKeyInformation","postOrganizationRotateApiKey","postOrganizationSso","postOrganizationUpgrade","postOrganizationUpdateSubscription","postOrganizationSeat","postOrganizationStorage","postOrganizationPayment","postOrganizationVerifyBank","postOrganizationCancel","postOrganizationReinstate","deleteOrganization","getOrganizationKeys","postOrganizationKeys","postProviderSetup","getProvider","putProvider","getProviderUsers","getProviderUser","postProviderUserInvite","postProviderUserReinvite","postManyProviderUserReinvite","postProviderUserBulkConfirm","deleteManyProviderUsers","postProviderUserAccept","postProviderUserConfirm","postProviderUsersPublicKey","putProviderUser","deleteProviderUser","getProviderClients","postProviderAddOrganization","postProviderCreateOrganization","deleteProviderOrganization","getEvents","start","end","addEventParameters","getEventsCipher","getEventsOrganization","getEventsOrganizationUser","getEventsProvider","getEventsProviderUser","postEventsCollect","authHeader","getActiveBearerToken","Authorization","getEventsUrl","JSON","stringify","getUserPublicKey","getHibpBreach","postBitPayInvoice","postSetupPayment","getUserKeyFromKeyConnector","handleError","postUserKeyToKeyConnector","getKeyConnectorAlive","getOrganizationExport","getToken","tokenNeedsRefresh","getApplicationVersion","nativeFetch","preValidateSso","postCreateSponsorship","sponsoredOrgId","isSelfHost","getSponsorshipSyncStatus","deleteRevokeSponsorship","sponsoringOrganizationId","deleteRemoveSponsorship","sponsoringOrgId","postPreValidateSponsorshipToken","sponsorshipToken","postRedeemSponsorship","postResendSponsorshipOffer","getRefreshToken","doRefreshToken","getClientId","getClientSecret","doApiTokenRefresh","decodedToken","decodeToken","tokenResponse","setTokens","getAppId","deviceRequest","tokenRequest","setToken","authed","hasResponse","alterHeaders","requestUrl","requestInit","FormData","tokenError","isTextResponse","Message","params","hasBaseUrl","typeHeader","get","AppIdService","storageService","makeAndGetAppId","getAnonymousAppId","existingId","htmlStorageLocation","Local","guid","newGuid","save","AuditService","cryptoFunctionService","apiService","passwordLeaked","hashBytes","hash","fromBufferToHex","hashStart","hashEnding","find","v","breachedAccounts","limit","throttleKey","AuthenticationType","KeySuffixOptions","TwoFactorProviderType","propertyKey","descriptor","originalMethod","allThrottles","throttles","getThrottles","argsThrottleKey","queue","resolve","exec","onFinally","splice","delete","then","val","catch","err","EncryptionPair","DataEncryptionPair","TemporaryDataEncryption","AccountData","passwordGenerationHistory","AccountKeys","cryptoSymmetricKey","organizationKeys","providerKeys","AccountProfile","pinProtected","vaultTimeoutAction","AccountTokens","tokens","AuthResult","requiresCaptcha","requiresTwoFactor","KeysRequest","LogInStrategy","cryptoService","messagingService","logService","stateService","twoFactorService","captchaBypassToken","logInTwoFactor","captchaResponse","startLogIn","clearSelectedProvider","processTwoFactorResponse","processCaptchaResponse","processTokenResponse","onSuccessfulLogin","buildDeviceRequest","buildTwoFactor","userProvidedTwoFactor","storedTwoFactorToken","getTwoFactorToken","Remember","saveAccountInformation","accountInformation","addAccount","sub","hasPremiumPersonally","premium","kdfType","result","setTwoFactorToken","setEncKey","setEncPrivateKey","createKeyPairForOldAccount","setProviders","makeKeyPair","encryptedString","HashPurpose","ApiLogInStrategy","keyConnectorService","getKeyConnectorUrl","getAndSetKey","logIn","setApiKeyClientId","setApiKeyClientSecret","PasswordTokenRequest","masterPasswordHash","fromUtf8ToUrlB64","PasswordLogInStrategy","authService","setKey","setKeyHash","localHashedPassword","masterPassword","makePreloginKey","hashPassword","LocalAuthorization","hashedPassword","SsoTokenRequest","codeVerifier","redirectUri","code_verifier","redirect_uri","SsoLogInStrategy","newSsoUser","convertNewSsoUserToKeyConnector","orgId","redirectUrl","PreloginRequest","AuthService","logInStrategy","strategy","clearState","Password","Sso","Api","saveState","logOut","callback","authingWithApiKey","authingWithSso","authingWithPassword","getAuthStatus","getIsAuthenticated","LoggedOut","hasKeyStored","Auto","getEverBeenUnlocked","getKey","hasKeyInMemory","Unlocked","Locked","preloginResponse","makeKey","startSessionTimeout","clearSessionTimeout","sessionTimeout","setTimeout","clearTimeout","FieldType","UriMatchType","EncryptionType","sequentialize","cacheKey","caches","getCache","argsCacheKey","AttachmentData","CardData","FieldData","IdentityData","LoginUriData","LoginData","PasswordHistoryData","SecureNoteData","CipherData","Login","SecureNote","Card","Identity","ph","SymmetricCryptoKey","encType","AesCbc256_B64","AesCbc256_HmacSha256_B64","encKey","macKey","AesCbc128_HmacSha256_B64","keyB64","encKeyB64","macKeyB64","toJSON","arrayBuffer","AttachmentView","fileSize","fromJSON","EncString","encryptedStringOrType","iv","mac","initFromData","initFromEncryptedString","decrypt","decryptedValue","containerService","bitwardenContainerService","getCryptoService","getOrgKey","decryptToUtf8","ivBytes","macBytes","dataBytes","encryptionType","encPieces","parseEncryptedString","Rsa2048_OaepSha256_B64","Rsa2048_OaepSha1_B64","headerPieces","Domain","buildDomainModel","dataObj","notEncList","objProp","buildDataModel","notEncStringList","decryptObj","viewModel","promises","theProp","mapProp","all","LoginLinkedId","CardLinkedId","IdentityLinkedId","Attachment","orgKey","decValue","decryptToBytes","toAttachmentData","LinkedMetadata","_i18nKey","i18nKey","linkedFieldOption","linkedFieldOptions","ItemView","CardView","_brand","_number","_subTitle","maskedCode","repeat","maskedNumber","subTitle","count","exp","formatYear","year","toCardData","FieldView","newField","showValue","showCount","maskedValue","IdentityView","_firstName","_lastName","fullName","fullAddress","address","fullAddressPart2","addressPart2","CanLaunchWhitelist","LoginUriView","_uri","_domain","_hostname","_host","_canLaunch","RegularExpression","getHostname","getHost","hostnameOrUri","hostOrUri","isWebsite","canLaunch","launchUri","LoginView","l","hasUris","maskedPassword","some","PasswordHistoryView","SecureNoteView","n","CipherView","localData","hasPasswordHistory","hasAttachments","hasOldAttachments","hasFields","passwordRevisionDisplayDate","isDeleted","linkedFieldValue","linkedFieldI18nKey","Field","toFieldData","toIdentityData","LoginUri","toLoginUriData","toLoginData","toISOString","toPasswordHistoryData","toSecureNoteData","Cipher","model","reduce","promise","attachment","decAttachment","field","decField","decPh","toCipherData","EncArrayBuffer","encBytes","minimumLength","ENC_TYPE_LENGTH","throwDecryptionError","b64","SortedCiphersCache","comparator","sortedCiphersByUrl","timeouts","isCached","has","addCiphers","sort","Ciphers","resetTimer","getLastUsed","getLastLaunched","getNext","updateLastUsedIndex","clear","lastUsedIndex","max","cipher","lastLaunched","y","valueOf","getNextIndex","CipherBulkDeleteRequest","ids","CipherBulkMoveRequest","CipherBulkRestoreRequest","AttachmentRequest","CipherRequest","lastKnownRevisionDate","attachments2","attachmentRequest","CipherWithIdRequest","CipherBulkShareRequest","CipherCollectionsRequest","CipherCreateRequest","CipherShareRequest","DomainMatchBlacklist","Set","CipherService","settingsService","fileUploadService","searchService","sortedCiphersCache","sortCiphersByLastUsed","getDecryptedCipherCache","getDecryptedCiphers","setDecryptedCipherCache","setDecryptedCiphers","clearIndex","indexCiphers","clearCache","clearDecryptedCiphersState","encrypt","originalCipher","existingCipher","existingHiddenFields","Hidden","hiddenFields","ef","matchedField","encryptObjProperty","encryptCipherData","encryptFields","encryptPasswordHistories","encryptAttachments","attachmentsModel","encAttachments","fieldsModel","encFields","encField","encryptField","fieldModel","Boolean","phModels","encPhs","encPh","encryptPasswordHistory","phModel","getEncryptedCiphers","getLocalData","getAll","getAllDecrypted","getUserId","indexedEntityId","decCiphers","hasKey","getLocaleSortingFunction","getAllDecryptedForGrouping","groupingId","folder","getAllDecryptedForUrl","includeOtherTypes","defaultMatch","eqDomainsPromise","getEquivalentDomains","eqDomains","matches","eqDomain","concat","matchingDomains","getDefaultUriMatch","domainUrlHost","Host","urlHost","Exact","StartsWith","Never","getAllFromApiForOrganization","getLastUsedForUrl","getCipherForUrl","getLastLaunchedForUrl","getNextCipherForUrl","updateLastUsedIndexForUrl","updateLastUsedDate","ciphersLocalData","getTime","setLocalData","decryptedCipherCache","cached","updateLastLaunchedDate","saveNeverDomain","getNeverDomains","setNeverDomains","saveWithServer","upsert","shareWithServer","attachmentPromises","shareAttachmentWithServer","encCipher","shareManyWithServer","encCiphers","saveAttachmentWithServer","unencryptedFile","admin","reader","FileReader","readAsArrayBuffer","onload","evt","cData","saveAttachmentRawWithServer","onerror","filename","encFileName","dataEncKey","makeEncKey","encData","encryptToBytes","adminRequest","uploadDataResponse","uploadCipherAttachment","legacyServerAttachmentFileUpload","fd","blob","Blob","append","filepath","contentType","saveCollectionsWithServer","setEncryptedCiphers","clearEncryptedCiphersState","moveManyWithServer","deleteWithServer","deleteManyWithServer","deleteAttachment","deleteAttachmentWithServer","aLastUsed","bLastUsed","bothNotNull","sortCiphersByLastUsedThenName","aName","bName","softDelete","setDeletedDate","softDeleteWithServer","softDeleteManyWithServer","restore","clearDeletedDate","restoreWithServer","restoreManyWithServer","restores","attachmentView","attachmentResponse","encBuf","fromResponse","decBuf","decryptFromBytes","theObj","modelProp","loginUri","lastUsed","autofillOnPageLoadDefault","getAutoFillOnPageLoadDefault","clearSortedCiphers","TreeNode","node","parent","children","ServiceUtils","nodeTree","partIndex","delimiter","partName","nestedTraverse","newPartName","getTreeNodeObject","CollectionData","CollectionView","Collection","CollectionService","setDecryptedCollections","collection","decryptMany","decCollections","getSortFunction","getEncryptedCollections","decryptedCollections","getDecryptedCollections","getAllNested","nodes","collectionCopy","getNested","setEncryptedCollections","ContainerService","attachToGlobal","EventData","EventRequest","EventService","cipherService","organizationService","checkOnInterval","uploadEvents","setInterval","collect","eventType","uploadImmediately","orgIds","eventCollection","getEventCollection","event","setEventCollection","req","clearEvents","KdfType","PBKDF2_SHA256","CardExport","FieldExport","Text","IdentityExport","LoginUriExport","LoginExport","toView","toDomain","SecureNoteType","EventType","SecureNoteExport","Generic","CipherExport","values","build","CipherWithIdExport","CollectionExport","CollectionWithIdExport","EventExport","humanReadableMessage","appIcon","appName","userName","userEmail","ip","FolderView","Folder","FolderExport","FolderWithIdExport","FileUploadType","ExportService","folderService","getExport","format","getEncryptedExport","getDecryptedExport","getPasswordProtectedExport","clearText","salt","randomBytes","makePinKey","encKeyValidation","encText","jsonDoc","encrypted","passwordProtected","encKeyValidation_DO_NOT_EDIT","getOrganizationEncryptedExport","getOrganizationDecryptedExport","getEventExport","getFileName","extension","now","getFullYear","padNumber","getMonth","getDate","getHours","getMinutes","getSeconds","decFolders","firstValueFrom","folderViews$","foldersMap","exportCiphers","buildCommonCipher","folders$","exportData","exportPromises","decCol","decCipher","collectionsMap","num","width","padCharacter","numString","login_uri","login_username","login_password","login_totp","AzureFileUploadService","upload","renewalCallback","azureUploadBlob","azureUploadBlocks","urlObject","toUTCString","searchParams","blobResponse","baseUrl","blockSize","getMaxBlockSize","blockIndex","numBlocks","ceil","blocksStaged","renewUrlIfNecessary","blockUrl","blockId","encodedBlockId","blockData","blockHeaders","blockRequest","blockResponse","blockListUrl","blockListXml","expiry","setTime","utfBlockId","fromUtf8ToB64","blockIdList","xml","version","Version","month","day","compareTo","BitwardenFileUploadService","encryptedFileName","encryptedFileData","apiCall","FileUploadService","azureFileUploadService","bitwardenFileUploadService","uploadSendFile","uploadData","Direct","Azure","FolderData","FolderRequest","OrganizationUserType","FolderApiService","postFolder","putFolder","deleteFolder","SetKeyConnectorKeyRequest","orgIdentifier","KeyConnectorUserKeyRequest","KeyConnectorService","setUsesKeyConnector","getUsesKeyConnector","userNeedsMigration","loggedInUsingSso","getIsExternal","requiredByOrganization","getManagingOrganization","userIsNotUsingKeyConnector","migrateUser","organization","keyConnectorRequest","handleKeyConnectorError","userKeyResponse","keyArr","Admin","Owner","isProviderUser","getEmail","pubKey","privKey","setPasswordRequest","setConvertAccountRequired","setConvertAccountToKeyConnector","getConvertAccountRequired","getConvertAccountToKeyConnector","removeConvertAccountRequired","NotificationType","NotificationResponse","contextId","payload","SyncCipherCreate","SyncCipherDelete","SyncCipherUpdate","SyncLoginDelete","SyncCipherNotification","SyncFolderCreate","SyncFolderDelete","SyncFolderUpdate","SyncFolderNotification","SyncVault","SyncCiphers","SyncOrgKeys","SyncSettings","LogOut","UserNotification","SyncSendCreate","SyncSendUpdate","SyncSendDelete","SyncSendNotification","OrganizationUserStatusType","NotificationsService","syncService","connected","inactive","reconnectTimer","subscribe","getNotificationsUrl","signalrConnection","off","stop","withUrl","accessTokenFactory","skipNegotiation","transport","withHubProtocol","on","processNotification","onclose","reconnect","isAuthedAndUnlocked","updateConnection","sync","reconnectFromActivity","disconnectFromInactivity","notification","isAuthenticated","payloadUserId","UserId","myUserId","syncUpsertCipher","syncDeleteCipher","syncUpsertFolder","syncDeleteFolder","fullSync","syncUpsertSend","syncDeleteSend","min","floor","Organization","canAccess","Confirmed","isManager","Manager","isAdmin","isOwner","canAccessEventLogs","canAccessImportExport","canAccessReports","canCreateNewCollections","canEditAnyCollection","canDeleteAnyCollection","canViewAllCollections","canEditAssignedCollections","canDeleteAssignedCollections","canViewAssignedCollections","canManageGroups","canManageSso","canManageScim","canManagePolicies","canManageUsers","canManageUsersPassword","isExemptFromPolicies","canManageBilling","hasProvider","OrganizationService","getOrganizations","getByIdentifier","setOrganizations","canManageSponsorships","hasOrganizations","PolicyType","EEFLongWordList","GeneratedPasswordHistory","PasswordGeneratorPolicyOptions","defaultType","minLength","useUppercase","useLowercase","useNumbers","numberCount","useSpecial","specialCount","minNumberWords","capitalize","includeNumber","inEffect","DefaultOptions","ambiguous","minNumber","uppercase","minUppercase","lowercase","minLowercase","special","minSpecial","numWords","wordSeparator","PasswordGenerationService","policyService","generatePassword","options","generatePassphrase","sanitizePasswordLength","positions","shuffleArray","allCharSet","lowercaseCharSet","uppercaseCharSet","numberCharSet","specialCharSet","positionChars","randomCharIndex","randomNumber","listLength","wordList","wordIndex","appendRandomNumberToRandomWord","getOptions","getPasswordGenerationOptions","setPasswordGenerationOptions","enforcedOptions","enforcePasswordGeneratorPoliciesOnOptions","enforcedPolicyOptions","getPasswordGeneratorPolicyOptions","PasswordGenerator","currentPolicy","useUpper","useLower","minNumbers","saveOptions","getHistory","getDecryptedPasswordGenerationHistory","getEncryptedPasswordGenerationHistory","decrypted","decryptHistory","setDecryptedPasswordGenerationHistory","addHistory","currentHistory","matchesPrevious","unshift","pop","newHistory","encryptHistory","setEncryptedPasswordGenerationHistory","passwordStrength","userInputs","globalUserInputs","finalUserInputs","normalizeOptions","index","history","array","j","forGeneration","minUppercaseCalc","minLowercaseCalc","minNumberCalc","minSpecialCalc","PolicyData","Policy","PolicyApiService","getPolicy","getPolicies","getPoliciesByToken","getPoliciesByInvitedUser","getPolicyForOrganization","policyType","org","policy","getMasterPasswordPoliciesForInvitedUsers","mapPoliciesFromToken","getMasterPasswordPolicyOptions","putPolicy","MasterPasswordPolicyOptions","minComplexity","requireUpper","requireLower","requireNumbers","requireSpecial","ResetPasswordPolicyOptions","autoEnrollEnabled","ProviderUserStatusType","ProviderUserType","PolicyService","decryptedPolicies","getDecryptedPolicies","diskPolicies","getEncryptedPolicies","setDecryptedPolicies","MasterPassword","evaluateMasterPassword","newPassword","toLocaleLowerCase","toLocaleUpperCase","getResetPasswordPolicyOptions","resetPasswordPolicyOptions","ResetPassword","policiesResponse","policyAppliesToUser","policyFilter","filteredPolicies","policySet","Accepted","isExcemptFromPolicies","setEncryptedPolicies","MaximumVaultTimeout","Provider","isProviderAdmin","canCreateOrganizations","ProviderAdmin","ProviderService","getProviders","SendType","SearchService","indexing","immediateSearchLocales","defaultSearchableMinLength","searchableMinLength","locale$","locale","registeredPipeline","lunr","Pipeline","registerFunction","normalizeAccentsPipelineFunction","isSearchable","query","normalizeSearchQuery","builder","Builder","pipeline","add","ref","boost","extractor","uriExtractor","fieldExtractor","attachmentExtractor","info","searchCiphers","results","isArray","every","getIndexForSearch","searchCiphersBasic","ciphersMap","searchResults","soWild","Query","wildcard","LEADING","TRAILING","q","tokenizer","term","deleted","searchSends","sendsMatched","lowPriorityMatched","joined","protocolIndex","queryIndex","substring","searchableFields","metadata","includes","normalize","SendFileData","SendTextData","SendData","File","SendFileView","SendTextView","maskedText","SendView","urlB64Key","maxAccessCountReached","expired","pendingDelete","SendFile","SendText","Send","cryptoKey","makeSendKey","SendRequest","fileLength","SendService","setDecryptedSends","fileData","passwordHash","pbkdf2","ArrayBuffer","encryptFileData","parseFile","getEncryptedSends","decSends","getDecryptedSends","sendData","legacyServerSendFileUpload","setEncryptedSends","removePasswordWithServer","Keys","SettingsService","setSettings","getSettingsKey","setEquivalentDomains","setSettingsKey","getSettings","OrganizationData","ProviderData","SyncService","collectionService","sendService","providerService","folderApiService","syncInProgress","getLastSync","lastSync","setLastSync","forceSync","allowThrowOnError","syncStarted","syncCompleted","needsSync","needsSyncing","syncProfile","syncFolders","syncCollections","syncCiphers","syncSends","syncSettings","syncPolicies","isEdit","localFolder","remoteFolder","shouldUpdate","localCipher","checkCollections","remoteCipher","localSend","remoteSend","successfully","stamp","getSecurityStamp","setProviderKeys","setOrgKeys","setSecurityStamp","setEmailVerified","setHasPremiumPersonally","setHasPremiumFromOrganization","setForcePasswordReset","SystemService","reloadCallback","reloadInterval","clearClipboardTimeout","clearClipboardTimeoutFunction","startProcessReload","accounts","getValue","getDecryptedPinProtected","cancelProcessReload","executeProcessReload","inactiveMoreThanSeconds","seconds","lastActive","getLastActive","doRefresh","biometricLockedFingerprintValidated","getBiometricFingerprintValidated","clearInterval","clearClipboard","clipboardValue","timeoutMs","getClearClipboard","clearSeconds","clipboardValueNow","readFromClipboard","copyToClipboard","clearing","clearPendingClipboard","TokenService","decoded","fromUrlB64ToUtf8","parse","clientIdClientSecret","setRefreshToken","setClientId","setClientSecret","getApiKeyClientId","getApiKeyClientSecret","setAccessToken","getAccessToken","clearToken","storedToken","getDecodedToken","getTokenExpirationDate","setUTCSeconds","tokenSecondsRemaining","offsetSeconds","msRemaining","round","minutes","getEmailVerified","email_verified","getName","getIssuer","iss","amr","B32Chars","SteamChars","TotpService","getCode","period","alg","digits","keyB32","isOtpAuth","isSteamAuth","getQueryParams","digitParams","periodParam","algParam","epoch","timeHex","leftPad","decToHex","timeBytes","fromHexToArray","keyBytes","b32ToBytes","sign","offset","otp","fullCode","trunc","pow","getTimeInterval","b32ToHex","cleanedInput","bits","hex","byteIndex","chunk","signature","hmac","TwoFactorProviders","Authenticator","priority","Yubikey","Duo","OrganizationDuo","Email","WebAuthn","TwoFactorService","selectedTwoFactorProviderType","getSupportedProviders","twoFactorProvidersData","supportsDuo","supportsWebAuthn","getDefaultProvider","webAuthnSupported","providerType","providerPriority","_value","setSelectedProvider","clearProviders","VerificationType","UserVerificationApiService","postAccountVerifyOTP","postAccountRequestOTP","VerifyOTPRequest","OTP","SecretVerificationRequest","UserVerificationService","userVerificationApiService","buildRequest","verification","requestClass","alreadyHashed","validateInput","secret","verifyUser","compareAndUpdateKeyHash","requestOTP","AnonAddyForwarder","generate","anonaddy","redirect","website","DuckDuckGoForwarder","FastmailForwarder","accountId","getAccountId","using","methodCalls","emailPrefix","fastmail","methodResponses","created","notCreated","primaryAccounts","FirefoxRelayForwarder","generated_for","full_address","ForwarderOptions","FastmailForwarderOptions","AnonAddyForwarderOptions","SimpleLoginForwarder","Authentication","note","alias","wordCapitalize","wordIncludeNumber","subaddressType","catchallType","forwardedService","forwardedAnonAddyDomain","UsernameGenerationService","generateUsername","generateCatchall","generateSubaddress","generateForwarded","generateWord","word","zeroPad","subaddressEmail","atIndex","emailBeginning","emailEnding","subaddressString","randomString","catchallDomain","startString","forwarder","forwarderOptions","forwardedSimpleLoginApiKey","forwardedAnonAddyApiToken","forwardedFirefoxApiToken","forwardedFastmailApiToken","forwardedDuckDuckGoToken","getUsernameGenerationOptions","setUsernameGenerationOptions","charSet","BrowserApi","tabsQueryFirst","active","windowId","chrome","windows","WINDOW_ID_CURRENT","currentWindow","tabsQuery","tabs","tab","command","tabSendMessage","sendMessage","runtime","lastError","browser","incognito","onCreated","addListener","getBackgroundPage","getManifest","getViews","extensionPage","onMessage","msg","sender","subscriber","arg","windowType","tabToClose","remove","tabId","update","highlighted","isWebExtensionsApi","isFirefoxOnAndroid","finally","close","i18n","getUILanguage","location","reload","w","application","connectNative","isChromeApi","permission","getPlatformInfo","isSafariApi","SafariApp","resolveNow","messageId","MAX_SAFE_INTEGER","sendNativeMessage","responseData","BrowserComponentState","BrowserGroupingsComponentState","BrowserSendComponentState","AccountSettings","vaultTimeout","Account","groupings","sendType","PopupUtilsService","privateMode","inSidebar","inTab","inPopout","inPopup","inPrivateMode","getContentScrollY","scrollingContainer","getElementsByTagName","scrollTop","setContentScrollY","scrollY","popOut","hrefParts","bodyRect","querySelector","getBoundingClientRect","height","closePopup","AutofillScript","documentUUID","script","properties","autosubmit","AutoFillConstants","UsernameFieldNames","PasswordFieldIgnoreList","ExcludedAutofillTypes","CreditCardAutoFillConstants","CardAttributes","CardAttributesExtended","CardHolderFieldNames","CardHolderFieldNameValues","CardNumberFieldNames","CardNumberFieldNameValues","CardExpiryFieldNames","CardExpiryFieldNameValues","ExpiryMonthFieldNames","ExpiryYearFieldNames","CVVFieldNames","CardBrandFieldNames","MonthAbbr","YearAbbrShort","YearAbbrLong","IdentityAutoFillConstants","IdentityAttributes","FullNameFieldNames","FullNameFieldNameValues","TitleFieldNames","FirstnameFieldNames","MiddlenameFieldNames","LastnameFieldNames","EmailFieldNames","AddressFieldNames","AddressFieldNameValues","Address1FieldNames","Address2FieldNames","Address3FieldNames","PostalCodeFieldNames","CityFieldNames","StateFieldNames","CountryFieldNames","PhoneFieldNames","UserNameFieldNames","CompanyFieldNames","IsoCountries","afghanistan","albania","algeria","andorra","angola","anguilla","antarctica","argentina","armenia","aruba","australia","austria","azerbaijan","bahamas","bahrain","bangladesh","barbados","belarus","belgium","belize","benin","bermuda","bhutan","bolivia","botswana","brazil","bulgaria","burundi","cambodia","cameroon","canada","chad","chile","china","colombia","comoros","congo","croatia","cuba","cyprus","denmark","djibouti","dominica","ecuador","egypt","eritrea","estonia","ethiopia","fiji","finland","france","gabon","gambia","georgia","germany","ghana","gibraltar","greece","greenland","grenada","guadeloupe","guam","guatemala","guernsey","guinea","guyana","haiti","honduras","hungary","iceland","india","indonesia","iraq","ireland","israel","italy","jamaica","japan","jersey","jordan","kazakhstan","kenya","kiribati","kuwait","kyrgyzstan","latvia","lebanon","lesotho","liberia","liechtenstein","lithuania","luxembourg","macao","macedonia","madagascar","malawi","malaysia","maldives","mali","malta","martinique","mauritania","mauritius","mayotte","mexico","moldova","monaco","mongolia","montenegro","montserrat","morocco","mozambique","myanmar","namibia","nauru","nepal","netherlands","nicaragua","niger","nigeria","niue","norway","oman","pakistan","palau","panama","paraguay","peru","philippines","pitcairn","poland","portugal","qatar","reunion","romania","rwanda","samoa","senegal","serbia","seychelles","singapore","slovakia","slovenia","somalia","spain","sudan","suriname","swaziland","sweden","switzerland","taiwan","tajikistan","tanzania","thailand","togo","tokelau","tonga","tunisia","turkey","turkmenistan","tuvalu","uganda","ukraine","uruguay","uzbekistan","vanuatu","venezuela","vietnam","yemen","zambia","zimbabwe","IsoStates","alabama","alaska","arizona","arkansas","california","colorado","connecticut","delaware","florida","hawaii","idaho","illinois","indiana","iowa","kansas","kentucky","louisiana","maine","maryland","massachusetts","michigan","minnesota","mississippi","missouri","montana","nebraska","nevada","ohio","oklahoma","oregon","pennsylvania","tennessee","texas","utah","vermont","virginia","washington","wisconsin","wyoming","IsoProvinces","alberta","manitoba","ontario","quebec","saskatchewan","AutofillService","totpService","eventService","getFormsWithPasswordFields","pageDetails","formData","passwordFields","loadPasswordFields","formKey","forms","formPasswordFields","pf","form","uf","findUsernameField","passwords","doAutoFill","totpPromise","canAccessPremium","getCanAccessPremium","didAutofill","pd","fillScript","generateFillScript","skipUsernameOnlyFill","onlyEmptyFields","onlyVisibleFields","fillNewPassword","delay_between_operations","skipLastUsed","frameId","getDisableAutoTotpCopy","Cipher_ClientAutofilled","doAutoFillOnTab","fromCommand","lastLaunchedCipher","totpCode","doAutoFillActiveTab","getActiveTab","getTabFromCurrentWindow","filledFields","fieldNames","hasValue","opid","viewable","tagName","matchingIndex","findMatchingFieldIndex","matchingField","Linked","fillByOpid","generateLoginFillScript","generateCardFillScript","generateIdentityFillScript","usernames","setFillScriptForFocus","passwordFieldsForForm","passField","elementNumber","fieldIsFuzzyMatch","fillFields","forCustomFieldsOnly","isExcludedType","attr","isFieldMatch","makeScriptAction","selectInfo","siOptions","option","fieldAttrsContain","maxLength","colonIndex","fullMonth","fullYear","partYear","makeScriptActionWithValue","containsVal","doesContain","filledState","stateLower","isoState","filledCountry","countryLower","isoCountry","excludedTypes","containsOptions","checkValueContains","cipherData","dataProp","fieldProp","dataValue","doFill","canBeHidden","canBeReadOnly","mustBeEmpty","isPassword","valueIsLikePassword","cleanedValue","readonly","htmlID","htmlName","placeholder","autoCompleteType","passwordField","withoutForm","usernameField","names","fieldPropertyIsPrefixMatch","fieldPropertyIsMatch","property","separator","sepIndex","fieldVal","regexParts","csvParts","csvVals","fuzzyMatch","lastField","lastPasswordField","BaseEncryptedOrganizationKey","EncryptedOrganizationKey","ProviderEncryptedOrganizationKey","rsaDecrypt","toData","providerKey","getProviderKey","CryptoService","encryptService","platformUtilService","setCryptoMasterKey","storeKey","keyHash","setDecryptedCryptoSymmetricKey","setEncryptedCryptoSymmetricKey","encPrivateKey","setDecryptedPrivateKey","setEncryptedPrivateKey","orgs","providerOrgs","encOrgKeyData","setDecryptedOrganizationKeys","setEncryptedOrganizationKeys","setDecryptedProviderKeys","setEncryptedProviderKeys","keySuffix","inMemoryKey","getCryptoMasterKey","symmetricKey","getKeyFromStorage","retrieveKeyFromStorage","validateKey","warning","clearSecretKeyStore","getKeyHash","storedKeyHash","localKeyHash","serverKeyHash","ServerAuthorization","getEncKey","getEncKeyHelper","getPublicKey","inMemoryPublicKey","getPrivateKey","rsaExtractPublicKey","setPublicKey","decryptedPrivateKey","getDecryptedPrivateKey","getEncryptedPrivateKey","getFingerprint","keyFingerprint","userFingerprint","hkdfExpand","hashPhrase","getOrgKeys","decryptedOrganizationKeys","getDecryptedOrganizationKeys","getEncryptedOrganizationKeys","encOrgKey","fromData","decOrgKey","orgKeys","getProviderKeys","decryptedProviderKeys","getDecryptedProviderKeys","encProviderKeys","getEncryptedProviderKeys","Biometric","getCryptoMasterKeyAuto","hasCryptoMasterKeyBiometric","hasEncKey","getEncryptedCryptoSymmetricKey","clearKey","clearSecretStorage","clearStoredKey","setCryptoMasterKeyAuto","setCryptoMasterKeyBiometric","clearKeyHash","clearEncKey","memoryOnly","clearKeyPair","keysToClear","clearOrgKeys","clearProviderKeys","clearPinProtectedKey","setEncryptedPinProtected","clearKeys","toggleKey","makeKeyFromPin","pin","protectedKeyCs","pinProtectedKey","getEncryptedPinProtected","pinKey","decKey","makeShareKey","shareKey","rsaEncrypt","keyPair","rsaGenerateKeyPair","stretchKey","keyMaterial","sendKey","hkdf","hashPurpose","iterations","theKey","getKeyForUserEncryption","buildEncKey","remakeEncKey","plainValue","encValue","privateKeyValue","Rsa2048_OaepSha256_HmacSha256_B64","Rsa2048_OaepSha1_HmacSha256_B64","encString","keyForEnc","encBuffer","rval","range","bitsNeeded","log2","bytesNeeded","mask","byteArray","shouldStoreKey","getVaultTimeout","getBiometricUnlock","supportsSecureStorage","getCryptoMasterKeyBiometric","newKey","minimumEntropy","entropyPerWord","log","hashArr","phrase","hashNumber","remainder","mod","divide","encKeyEnc","getDecryptedCryptoSymmetricKey","decEncKey","encKeyCipher","symmetricCryptoKey","ClientType","BrowserCryptoService","authenticateBiometric","BrowserMessagingService","BrowserMessagingPrivateModeBackgroundService","bitwardenPopupMainMessageListener","DialogPromiseExpiration","BrowserPlatformUtilsService","clipboardWriteCallback","biometricCallback","showDialogResolves","passwordDialogResolves","deviceCache","FirefoxExtension","opr","addons","OperaExtension","EdgeExtension","VivaldiExtension","ChromeExtension","SafariExtension","Browser","isFirefox","isChrome","isEdge","isOpera","isVivaldi","isSafari","isIE","isMacAppStore","isViewOpen","isPopupOpen","sidebarView","sidebarViewName","lockTimeout","createNewTab","PublicKeyCredential","showToast","showDialog","confirmText","cancelText","bodyIsHtml","dialogId","html","doc","clearMs","sendMessageToApp","clipboard","writeText","clipboardData","setData","queryCommandSupported","textarea","textContent","style","position","appendChild","select","execCommand","console","warn","removeChild","readText","focus","resolveDialogPromise","confirmed","resolvePasswordDialogPromise","canceled","resolveObj","tryResolve","supportsBiometric","os","getBrowserInfo","sidebarAction","StorageLocation","AbstractCachedStorageService","State","globals","authenticatedAccounts","accountActivity","partialKeys","secureStorageService","memoryStorageService","stateMigrationService","stateFactory","useAccountCache","BehaviorSubject","activeAccountSubject","activeAccount$","asObservable","activeAccountUnlockedSubject","activeAccountUnlocked$","hasBeenInited","isRecoveredSession","accountDiskCache","next","needsMigration","migrate","setState","createGlobals","initAccountState","updateState","syncAccountFromDisk","storedActiveUser","activeUserId","pushAccounts","diskAccount","getAccountFromDisk","account","setAccountEnvironmentUrls","scaffoldNewAccountStorage","setLastActive","setActiveUser","clearDecryptedDataForActiveUser","clean","reconcileOptions","defaultInMemoryOptions","deAuthenticateAccount","dynamicallySetActiveUser","removeAccountFromDisk","removeAccountFromMemory","getTimeoutBasedStorageOptions","getAccount","saveAccount","getAddEditCipherInfo","addEditCipherInfo","setAddEditCipherInfo","getAlwaysShowDock","getGlobals","defaultOnDiskOptions","alwaysShowDock","setAlwaysShowDock","saveGlobals","apiKeyClientId","apiKeyClientSecret","getAutoConfirmFingerPrints","autoConfirmFingerPrints","setAutoConfirmFingerprints","autoFillOnPageLoadDefault","setAutoFillOnPageLoadDefault","getBiometricAwaitingAcceptance","biometricAwaitingAcceptance","setBiometricAwaitingAcceptance","biometricFingerprintValidated","setBiometricFingerprintValidated","getBiometricText","biometricText","setBiometricText","biometricUnlock","setBiometricUnlock","getHasPremiumPersonally","getHasPremiumFromOrganization","hasPremiumFromOrganization","defaultOnDiskLocalOptions","setClearClipboard","getCollapsedGroupings","collapsedGroupings","setCollapsedGroupings","convertAccountToKeyConnector","cryptoMasterKey","nextValue","defaultSecureStorageOptions","saveSecureStorageKey","getCryptoMasterKeyB64","setCryptoMasterKeyB64","setDecodedToken","setDecryptedPinProtected","decryptedSerialized","fromByteStringToArray","fromBufferToByteString","defaultUriMatch","setDefaultUriMatch","getDisableAddLoginNotification","disableAddLoginNotification","setDisableAddLoginNotification","getDisableAutoBiometricsPrompt","disableAutoBiometricsPrompt","setDisableAutoBiometricsPrompt","disableAutoTotpCopy","setDisableAutoTotpCopy","getDisableBadgeCounter","disableBadgeCounter","setDisableBadgeCounter","getDisableChangedPasswordNotification","disableChangedPasswordNotification","setDisableChangedPasswordNotification","getDisableContextMenuItem","disableContextMenuItem","setDisableContextMenuItem","getDisableFavicon","disableFavicon","setDisableFavicon","getDisableGa","disableGa","setDisableGa","getDontShowCardsCurrentTab","dontShowCardsCurrentTab","setDontShowCardsCurrentTab","getDontShowIdentitiesCurrentTab","dontShowIdentitiesCurrentTab","setDontShowIdentitiesCurrentTab","setEmail","getEnableAlwaysOnTop","accountPreference","enableAlwaysOnTop","globalPreference","setEnableAlwaysOnTop","getEnableAutoFillOnPageLoad","enableAutoFillOnPageLoad","setEnableAutoFillOnPageLoad","getEnableBiometric","enableBiometrics","setEnableBiometric","getEnableBrowserIntegration","enableBrowserIntegration","setEnableBrowserIntegration","getEnableBrowserIntegrationFingerprint","enableBrowserIntegrationFingerprint","setEnableBrowserIntegrationFingerprint","getEnableCloseToTray","enableCloseToTray","setEnableCloseToTray","getEnableFullWidth","enableFullWidth","setEnableFullWidth","getEnableGravitars","enableGravitars","setEnableGravitars","getEnableMinimizeToTray","enableMinimizeToTray","setEnableMinimizeToTray","getEnableStartToTray","enableStartToTray","setEnableStartToTray","getEnableTray","enableTray","setEnableTray","defaultOnDiskMemoryOptions","getEncryptedFolders","setEncryptedFolders","getEntityId","entityId","setEntityId","getEntityType","entityType","setEntityType","getEnvironmentUrls","getGlobalEnvironmentUrls","setEnvironmentUrls","everBeenUnlocked","setEverBeenUnlocked","getForcePasswordReset","getInstalledVersion","installedVersion","setInstalledVersion","getKdfIterations","setKdfIterations","getKdfType","setKdfType","getLocale","setLocale","getMainWindowSize","mainWindowSize","setMainWindowSize","getMinimizeOnCopyToClipboard","minimizeOnCopyToClipboard","setMinimizeOnCopyToClipboard","neverDomains","getNoAutoPromptBiometrics","noAutoPromptBiometrics","setNoAutoPromptBiometrics","getNoAutoPromptBiometricsText","noAutoPromptBiometricsText","setNoAutoPromptBiometricsText","getOpenAtLogin","openAtLogin","setOpenAtLogin","getOrganizationInvitation","organizationInvitation","setOrganizationInvitation","passwordGenerationOptions","usernameGenerationOptions","getGeneratorOptions","generatorOptions","setGeneratorOptions","getProtectedPin","protectedPin","setProtectedPin","publicKeySerialized","getRememberedEmail","rememberedEmail","setRememberedEmail","getSsoCodeVerifier","ssoCodeVerifier","setSsoCodeVerifier","getSsoOrgIdentifier","ssoOrganizationIdentifier","setSsoOrganizationIdentifier","getSsoState","ssoState","setSsoState","getTheme","setTheme","setVaultTimeout","getVaultTimeoutAction","accountVaultTimeoutAction","globalVaultTimeoutAction","setVaultTimeoutAction","getStateVersion","setStateVersion","getWindow","setWindow","useMemory","storageLocation","getGlobalsFromMemory","useDisk","getGlobalsFromDisk","saveGlobalsToMemory","saveGlobalsToDisk","useSecureStorage","getAccountFromMemory","getUserIdFromMemory","cachedAccount","Memory","Both","Disk","saveAccountToMemory","saveAccountToDisk","deepClone","scaffoldNewAccountLocalStorage","scaffoldNewAccountSessionStorage","scaffoldNewAccountMemoryStorage","storedAccount","pruneInMemoryAccounts","requestedOptions","defaultOptions","Session","getActiveUserIdFromStorage","removeAccountFromLocalStorage","resetAccount","removeAccountFromSessionStorage","removeAccountFromSecureStorage","persistentAccountInformation","timeoutAction","stateUpdater","updatedState","withPrototype","converter","originalResult","getOwnPropertyDescriptors","withPrototypeForArrayMembers","memberConstructor","memberConverter","withPrototypeForObjectValues","valuesConstructor","valuesConverter","entries","withPrototypeForMap","StateService","getFromSessionMemory","getBypassCache","setInSessionMemory","getBrowserGroupingComponentState","setBrowserGroupingComponentState","getBrowserCipherComponentState","setBrowserCipherComponentState","getBrowserSendComponentState","setBrowserSendComponentState","getBrowserSendTypeComponentState","setBrowserSendTypeComponentState","SyncedItemMetadata","keyValuePair","getBuilder","initializeAsArray","initializer","ctor","SessionSyncer","behaviorSubject","metaData","ignoreNextUpdate","manifest_version","observe","listenForUpdates","updateSession","messageListener","updateMessageCommand","updateFromMessage","sessionKey","buildFromKeyValuePair","sessionSync","buildOptions","__syncedItemMetadata","FolderService","_folders","_folderViews","unlocked","updateObservables","getAllDecryptedFromState","decryptFolders","updates","cId","decryptFolderPromises","decryptedFolders","noneFolder","__sessionSyncers","buildSyncer","syncer","I18nService","systemLanguage","localesDirectory","getLocalesJson","_locale","ReplaySubject","supportedTranslationLocales","localeNames","defaultMessages","localeMessages","translationLocale","Intl","Collator","numeric","sensitivity","loadMessages","p1","p2","p3","translate","messagesObj","formattedLocale","locales","placeholders","placeProp","content","replaceToken","replaceContent","getMessage","VaultFilter","selectedCollection","selectedFolder","myVaultOnly","refreshCollectionsAndFolders","resetFilter","cipherType","selectedCollectionId","selectedFolderId","resetOrganization","selectedOrganizationId","buildFilter","cipherPassesFilter","DynamicTreeNode","hasId","fullList","storeCollapsedFilterNodes","collapsedFilterNodes","buildCollapsedFilterNodes","buildOrganizations","buildNestedFolders","transformation","storedFolders","orgCiphers","oc","nestedFolders","getAllFoldersNested","nestedList","pipe","mergeMap","buildCollections","storedCollections","nestedCollections","checkForSingleOrganizationPolicy","SingleOrg","checkForPersonalOwnershipPolicy","PersonalOwnership","folderCopy","getFolderNested","VaultFilterService","vaultFilter","allVaults","myVault","getVaultFilter","setVaultFilter","filterCipherForSelectedVault","VaultTimeoutService","lockedCallback","loggedOutCallback","startCheck","checkVaultTimeout","shouldLock","executeTimeoutAction","lock","allowSoftLock","pinSet","isPinLockSet","isBiometricLockSet","setVaultTimeoutOptions","action","currentAction","authStatus","vaultTimeoutSeconds","checkSafari","CommandsBackground","main","passwordGenerationService","vaultTimeoutService","processCommand","commandToRetry","shortcut","commands","onCommand","generatePasswordToClipboard","autoFillLogin","openPopup","getTabFromCurrentWindowId","retryMessage","tabSendMessageData","collectPageDetailsForContentScript","ContextMenusBackground","noopCommandSuffix","contextMenus","onClicked","menuItemId","getClickedElement","parentMenuItemId","cipherAction","startAutofillPage","Cipher_ClientCopiedPassword","totpValue","loginToAutoFill","IdleBackground","notificationsService","idleTimer","idleState","idle","idleHandler","newState","onStateChanged","setDetectionInterval","pollIdle","handler","queryState","NativeMessagingBackground","runtimeBackground","resolver","secureSetupResolve","onAdded","reloadExtension","connect","port","connecting","connectedCallback","disconnect","sharedSecret","validatingFingerprint","showFingerprintDialog","showWrongUserDialog","onDisconnect","timestamp","postMessage","encryptMessage","secureCommunication","getResponse","rawMessage","abs","processMessage","sendUnencrypted","fingerprint","NotificationQueueMessageType","NotificationBackground","autofillService","notificationQueue","cleanupNotificationQueue","getDataForTab","responseCommand","addLogin","changedPassword","removeTabFromNotificationQueue","saveOrUpdateCredentials","saveNever","checkNotificationQueue","doNotificationQueueCheck","currentTab","expires","tabDomain","AddLogin","typeData","isVaultLocked","wasVaultLocked","ChangePassword","loginInfo","loginDomain","normalizedUsername","disabledAddLogin","allowPersonalOwnership","pushAddLoginToQueue","usernameMatches","pushChangePasswordToQueue","changeData","currentPassword","passwordMatches","queueMessage","changePasswordMessage","getDecryptedCipherById","updateCipher","createNewCipher","addLoginMessage","loginModel","newCipher","RuntimeBackground","systemService","pageDetailsToAutoFill","onInstalledReason","lockedVaultPendingNotifications","onInstalled","reason","checkOnInstalled","backgroundMessageListener","isPrivateMode","bitwardenBackgroundMessageListener","closeLoginTab","focusSpecifiedTab","setIcon","refreshBadgeAndMenu","logout","reseedStorage","autofillTimeout","autofillPage","vaultUrl","getWebVaultUrl","referrer","tabToAutoFill","hasManagedEnvironment","setUrlsToManagedEnvironment","DecryptParameters","WebCryptoFunctionService","crypto","subtle","algorithm","wcLen","passwordBuf","toBuf","pbkdf2Params","toWebCryptoAlgorithm","impKey","importKey","deriveBits","ikm","outputByteSize","hkdfParams","prk","hashLen","infoBuf","infoArr","runningOkmLength","previousT","okm","md","valueBytes","toByteString","digest","valueBuf","signingAlgorithm","mac1","mac2","arr1","arr2","hmacFast","getBytes","compareFast","rand","Uint32Array","putInt32","aesEncrypt","aesDecryptFastParameters","meta","encKeyByteString","macKeyByteString","macData","aesDecryptFast","parameters","dataBuffer","decipher","finish","aesDecrypt","rsaParams","impPrivateKey","jwkPrivateKey","exportKey","jwkPublicKeyParams","kty","ext","impPublicKey","modulusLength","publicExponent","generateKey","getRandomValues","buf","factory","cachedServices","opts","instance","alwaysInitializeNewService","doNotStoreInitializedService","cryptoFunctionServiceFactory","cryptoFunctionServiceOptions","EncryptedObject","LogLevelType","EncryptService","logMacFailures","plainBuf","encObj","macLen","resolveLegacyKey","fastParams","computedMac","logMacFailed","encThing","ConsoleLogService","timersMap","debug","write","Debug","Info","Warning","level","logServiceFactory","logServiceOptions","encryptServiceFactory","encryptServiceOptions","BrowserEnvironmentService","urlsSubject","Subject","scimUrl","setUrlsFromStorage","notificationsUrl","webVaultUrl","getSendUrl","getIconsUrl","iconsUrl","identityUrl","eventsUrl","getScimUrl","envUrls","setUrls","formatUrl","scim","getUrls","getManagedEnvironment","settingsHaveChanged","env","storage","managed","environment","v1Keys","autoConfirmFingerprints","enableBiometric","enableGravatars","encOrgKeys","encPrivate","ssoIdentifier","usesConnector","v1KeyPrefixes","StateMigrationService","currentStateVersion","getCurrentStateVersion","Latest","migrateStateFrom1To2","Two","migrateStateFrom2To3","Three","migrateStateFrom3To4","Four","getAuthenticatedAccounts","migratedAccount","migrateAccountFrom4To5","setCurrentStateVersion","Five","migrateAccountFrom5To6","Six","clearV1Keys","clearingUserId","keyPrefix","defaultAccount","accountSettings","cryptoMasterKeyAuto","cryptoMasterKeyB64","cryptoMasterKeyBiometric","legacyEtmKey","authenticationStatus","authenticatedUserIds","encryptedOrgKeys","newVersion","MemoryStorageService","store","AbstractChromeStorageService","chromeStorageApi","keyedObj","BrowserLocalStorageService","local","BrowserMemoryStorageService","session","LocalBackedSessionStorageService","keyGenerationService","localStorage","sessionStorage","getLocalSession","getSessionEncKey","sessionEncKey","localSession","setLocalSession","sessionJson","setSessionEncKey","setEncryptedLocalSession","setDecryptedLocalSession","jsonSession","encSession","storedKey","makeEphemeralKey","input","KeyGenerationService","numBytes","diskStorageServiceFactory","secureStorageServiceFactory","memoryStorageServiceFactory","keyGenerationServiceFactory","stateMigrationServiceFactory","stateMigrationServiceOptions","stateServiceFactory","stateServiceOptions","environmentServiceFactory","TabsBackground","notificationBackground","onFocusChanged","focusedWindowId","onActivated","activeInfo","onReplaced","addedTabId","removedTabId","onReplacedRan","onUpdated","changeInfo","onUpdatedRan","WebRequestBackground","pendingAuthRequests","webRequest","onAuthRequired","requestId","resolveAuthCredentials","onCompleted","completeAuthRequest","onErrorOccurred","authCredentials","MainBackground","backgroundWindow","menuOptionsLoaded","services","factoryOptions","nativeMessagingBackground","policyApiService","vaultFilterService","that","backgroundMessagingService","auditService","exportService","popupUtilsService","userVerificationService","forceWindowReload","commandsBackground","tabsBackground","contextMenusBackground","idleBackground","webRequestBackground","usernameGenerationService","bootstrap","getPrivateModeWindows","actionSetIcon","browserAction","onWindowCreated","suffix","forLocked","menuDisabled","contextMenusRemoveAll","buildContextMenu","loadMenuAndUpdateBadgeForNoAccessState","contextMenuReady","buildingContextMenu","contextMenusCreate","contexts","parentId","contextMenuEnabled","loadMenuAndUpdateBadge","actionSetBadgeBackgroundColor","loadLoginContextMenuOptions","theText","loadNoLoginsContextMenuOptions","sidebarActionSetBadgeText","browserActionSetBadgeText","getActiveTabs","loadContextMenuOptions","noLoginsMessage","idSuffix","sanitizeContextMenuTitle","override","syncInternal","lastSyncAgo","scheduleNextSync","syncTimeout","removeAll","theAction","setBadgeBackgroundColor","color","setBadgeText","setTitle","NoOpEventService","AutoFillActiveTabCommand","doAutoFillActiveTabCommand","collectPageDetails","onCommandListener","doAutoFillLogin","platformUtils","bitwardenMain","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","loaded","__webpack_modules__","m","O","chunkIds","fn","notFulfilled","Infinity","fulfilled","definition","defineProperty","enumerable","globalThis","Function","nmd","paths","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","chunkLoadingGlobal","bind","__webpack_exports__"],"sourceRoot":""}